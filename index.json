[{"content":"IDEA教程-1\nIDEA教程-2\nIDEA-Topics\n安装IDEA \u0026amp; Maven 1  brew install intellij-idea maven   License Server-fofa\nActivation Online\n文章的部分内容被密码保护：\n  --- DON'T MODIFY THIS LINE --- 配置JDK  华为JDK源 Zulu JDK  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21  wget -P /tmp/ -O zulu8.tar.gz https://cdn.azul.com/zulu/bin/zulu8.52.0.23-ca-fx-jdk8.0.282-macosx_aarch64.tar.gz sudo tar -zxvf /tmp/zulu8.tar.gz zulu8.52.0.23-ca-fx-jdk8.0.282-macosx_aarch64/zulu-8.jdk sudo mv /tmp/zulu8.*/zulu-8.jdk /Library/Java/JavaVirtualMachines wget -P /tmp -O zulu11.tar.gz https://cdn.azul.com/zulu/bin/zulu11.56.19-ca-fx-jdk11.0.15-macosx_aarch64.tar.gz sudo tar -zxvf /tmp/zulu11.tar.gz sudo mv /tmp/zulu11.*/zulu-11.jdk /Library/Java/JavaVirtualMachines cat \u0026lt;\u0026lt;EOF \u0026gt;\u0026gt; $HOME/.zshrc jdk(){ echo \u0026#34; \u0026gt;\u0026gt;\tUsage: jdk [-v version] \u0026#34; unset JAVA_HOME; export JAVA_HOME=`/usr/libexec/java_home $@`; echo \u0026#34;JAVA_HOME:\u0026#34; $JAVA_HOME java -version } EOF   配置Maven 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57  mkdir $HOME/.m2 cat \u0026lt;\u0026lt;EOF \u0026gt; $HOME/.m2/settings.xml \u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt; \u0026lt;settings xmlns=\u0026#34;http://maven.apache.org/SETTINGS/1.0.0\u0026#34; xmlns:xsi=\u0026#34;http://www.w3.org/2001/XMLSchema-instance\u0026#34; xsi:schemaLocation=\u0026#34;http://maven.apache.org/SETTINGS/1.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd\u0026#34;\u0026gt; \u0026lt;localRepository\u0026gt;/Users/ding.fugui/.m2/repository\u0026lt;/localRepository\u0026gt; \u0026lt;mirrors\u0026gt; \u0026lt;mirror\u0026gt; \u0026lt;id\u0026gt;**-nexus\u0026lt;/id\u0026gt; \u0026lt;mirrorOf\u0026gt;*\u0026lt;/mirrorOf\u0026gt; \u0026lt;url\u0026gt;https://maven.bitget.tools/repository/maven-public\u0026lt;/url\u0026gt; \u0026lt;/mirror\u0026gt; \u0026lt;/mirrors\u0026gt; \u0026lt;profiles\u0026gt; \u0026lt;profile\u0026gt; \u0026lt;id\u0026gt;example-nexus\u0026lt;/id\u0026gt; \u0026lt;properties\u0026gt; \u0026lt;maven.compiler.source\u0026gt;1.8\u0026lt;/maven.compiler.source\u0026gt; \u0026lt;maven.compiler.target\u0026gt;1.8\u0026lt;/maven.compiler.target\u0026gt; \u0026lt;maven.compiler.compilerVersion\u0026gt;1.8\u0026lt;/maven.compiler.compilerVersion\u0026gt; \u0026lt;/properties\u0026gt; \u0026lt;repositories\u0026gt; \u0026lt;repository\u0026gt; \u0026lt;id\u0026gt;central\u0026lt;/id\u0026gt; \u0026lt;url\u0026gt;https://maven.example.com/repository/maven-central/\u0026lt;/url\u0026gt; \u0026lt;releases\u0026gt; \u0026lt;enabled\u0026gt;true\u0026lt;/enabled\u0026gt; \u0026lt;/releases\u0026gt; \u0026lt;snapshots\u0026gt; \u0026lt;enabled\u0026gt;true\u0026lt;/enabled\u0026gt; \u0026lt;updatePolicy\u0026gt;always\u0026lt;/updatePolicy\u0026gt; \u0026lt;/snapshots\u0026gt; \u0026lt;/repository\u0026gt; \u0026lt;/repositories\u0026gt; \u0026lt;pluginRepositories\u0026gt; \u0026lt;pluginRepository\u0026gt; \u0026lt;id\u0026gt;central\u0026lt;/id\u0026gt; \u0026lt;url\u0026gt;https://maven.example.com/repository/maven-central/\\\u0026lt;/url\u0026gt; \u0026lt;releases\u0026gt; \u0026lt;enabled\u0026gt;true\u0026lt;/enabled\u0026gt; \u0026lt;/releases\u0026gt; \u0026lt;snapshots\u0026gt; \u0026lt;enabled\u0026gt;true\u0026lt;/enabled\u0026gt; \u0026lt;/snapshots\u0026gt; \u0026lt;/pluginRepository\u0026gt; \u0026lt;/pluginRepositories\u0026gt; \u0026lt;/profile\u0026gt; \u0026lt;/profiles\u0026gt; \u0026lt;activeProfiles\u0026gt; \u0026lt;activeProfile\u0026gt;example-nexus\u0026lt;/activeProfile\u0026gt; \u0026lt;/activeProfiles\u0026gt; \u0026lt;/settings\u0026gt; EOF mvn   IDEA 偏好设置 针对全局配置 打开偏好设置\nAppearance \u0026amp; Behavior System Settings Keymap https://cdk8s.gitbook.io/github/keymap-mac-introduce\n常用快捷键    Ctrl+h 查看当前类的层次结构      Command+7 查看类结构    Command+O 快速搜索类    Command +F 关键字检索(当前文件) 全局 Command+Shift+F   Command+Alt +B 查看方法/类的实现类    Alt + F7 查看调用链(方法被调用的情况) Find Usages   Command+E 查看最近使用的文件    Shift+ Alt+Command+U 查看可视化类继承链    Command+/ 行注释 Shift+Command+/ 块注释   /** 方法/类注释 可自定义类模板    可视化类继承链\nEditor Editor-\u0026gt;General   自动导入\n  Appearnace\n  Code Completion  Editor Tabs  Postfix Completion var声明 null判空 notnull判非空 nn判非空 for遍历 fori带索引的遍历 not取反 if条件判断 cast强转 return返回值 Editro-\u0026gt;Code Editing Font Color Scheme Code Style Inspections 各类文件类型图标 File and Code Templates  File Header    Class\n  Interface\n  Enum\n  File Encodings BOM（byte-order mark），即字节顺序标记，它是插入到以UTF-8、UTF16或UTF-32编码Unicode文件开s头的特殊标记，用来识别Unicode文件的编码类型。对于UTF-8来说，BOM并不是必须的，因为BOM用来标记多字节编码文件的编码类型和字节顺序（big-endian或little-endian）。\n　不含BOM的UTF-8才是标准形式，UTF-8不需要BOM\n带BOM的UTF-8文件的开头会有U+FEFF，所以我新建的空文件会有3字节的大小。\nLive Templates File Types 隐藏项目中 .idea目录\nInlay Hints -Java Copyright Plugins 常用插件 Theme - One Dark/ Nord / Xcode-Dark Dash Edutool Stackoverflow 时序图-SequenceDigram Java Visualizer 快捷键展示Presentation Assistant 阿里巴巴 Java 代码规范- Alibaba Java Code Guidelines MybatisX 高效操作Mybatis插件 Mybatis-log-plugin Codota— 代码智能提示 必备的翻译插件-Translation GitToolBox-显示代码提交时间 Key Promoter X 快捷键提示插件 Rainbow Brackets ——让你的括号变成不一样的颜色，防止错乱括号 Leetcode Editor 可以在IDEA中在线刷题。 Java Stream Debugger —— Stream 将操作步骤可视化 Lombok Maven Helper arthas idea JRebel \u0026amp; XRebel热部署插件 安全插件 SpotBugs https://github.com/find-sec-bugs/find-sec-bugs/wiki/IntelliJ-Tutorial\nBlack Duck SCA WhiteSource Advise Momo Code Sec Inspector Java Decompiler(JD-GUI) Jadx Android Decompiler Snyk  Dependency Analytics  CMD模式 1 2  brew tap snyk/tap \u0026amp;\u0026amp; brew install snyk snyk config set api c70b7d5a-1a74-44df-b52c-3ab5c80d12e6   IDE模式 先配置JAVA_HOME\n1 2 3 4 5 6  echo \u0026#39; ## JDK export JAVA_HOME=/Library/Java/JavaVirtualMachines/zulu-8.jdk/Contents/Home export PATH=$JAVA_HOME/bin:$PATH \u0026#39; \u0026gt;\u0026gt; ~/.zshrc   jclasslib bytecode viewer 查看字节码 Jadx Android Decompiler RIPS Security Analysis Restful Fast Request——IDEA版Postman Restful Fast Request\nMurphySec Code Scan SonarLint 代码质量检查插件 Version Control 与Gitlab集成-插件 Build, Excution,Deployment Maven Maven home directory：Maven 主路径设置，IDEA 非常强大，自带了多个版本的 Maven 插件，选择如 Bundled (Maven 3) 表示选择 IDEA 自带的 Maven 插件，它其实的路径是 /Applications/IntelliJ IDEA.app/Contents/plugins/maven/lib/maven3，也可以选择自定义安装的 Maven 路径。\nUser settings file：配置 Maven 源文件的配置路径，一般默认配置为当前用户目录下的 {user.home}/.m2/settings.xml。\nLocal repository：配置本地仓库路径，默认配置为当前用户目录下的 {user.home}/.m2/repository。\nCompiler Debug 当调用ConcurrentLinkedQueue类的toString()方法时会获取队列的迭代器，而创建迭代器时会调用队列的first()方法，在first()方法里会修改head的属性，从而导致输出的结果不一致\n在远程调试时，我们发现有些类的断点一直断不上问题，该问题可能出在 IntelliJ 的 Settings -\u0026gt; Debugger -\u0026gt; Stepping 配置上。若勾选了 Do not step into the classes，则会让这些断点失效:\n本地调试 远程调试 address最好指定为 \u0026lt;IP\u0026gt;:\u0026lt;Port\u0026gt;形式\n-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=0.0.0.0:5005\n对第三方jar包进行调试   创建工程，将jar包添加到依赖库中\n  在Main函数处打断点，添加调试配置，运行程序，点击debug\n  https://cdk8s.gitbook.io/github/debug-introduce\nLanguage \u0026amp; Frameworks Tools Setting Repository- 使用git仓库保存Idea配置文件Settings Access-Token\nAdvanced Settings Other Settings 代码对比效果图\nSettings Import/Export  导出配置   如何清除所有项目缓存 File \u0026gt; Invalideate Caches / Restart 清除缓存并重启\n ","description":"代码审计环境配置","id":0,"section":"dso","tags":null,"title":"代码审计环境配置-1","uri":"http://crkmythical.github.io/dso/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/01-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"},{"content":"Markdown here\n","description":"test post","id":1,"section":"red","tags":null,"title":"January 2019","uri":"http://crkmythical.github.io/red/2019_january/"},{"content":"Beijing: ☁️ 🌡️+23°C 🌬️↖11km/h\nOpenRASP部署记录  Rasp官方测试用例  openRasp安装 相关软件\n rasp-cloud.tar.gz openrasp管理后台 MongoDB Version \u0026gt;= 3.6 用来存储应用、账号密码等信息。 ElasticSearch 5.6 \u0026lt;= Version \u0026lt; 7.0 用来存储报警和统计信息  Centos7 yum源配置\n1 2 3 4  rm -rf /etc/yum.repos.d/*.repo #删除repo文件，或者自己备份 curl -o /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo curl -o /etc/yum.repos.d/epel.repo http://mirrors.aliyun.com/repo/epel-7.repo yum makecache #更新缓存   更改rmpdb路径，防止出现rmpdb过大错误\n1 2 3 4 5 6  mkdir /var/lib/rpm/backup cp -a /var/lib/rpm/__db* /var/lib/rpm/backup/ rm -f /var/lib/rpm/__db.[0-9][0-9]* rpm --quiet -qa rpm --rebuilddb yum clean all   搭建MongoDB服务 1 2 3 4 5 6 7 8 9 10 11  yum update cat \u0026lt;\u0026lt;EOF \u0026gt; /etc/yum.repos.d/mongodb-org-4.2.repo [mongodb-org-4.2] name=MongoDB Repository baseurl=https://repo.mongodb.org/yum/redhat/$releasever/mongodb-org/4.2/x86_64/ gpgcheck=1 enabled=1 gpgkey=https://www.mongodb.org/static/pgp/server-4.2.asc EOF yum install -y mongodb-org   配置启动MongoDB mongodb配置文件路径 /etc/mongod.conf\n1 2 3 4 5  ulimit 64000 # 启动mongodb服务 systemctl enable --now mongod # 查看mongodb端口是否正常 netstat -antlp | grep 27017   搭建Elasticsearch服务 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29  # 安装JDK sudo yum -y install java-1.8.0-openjdk java-1.8.0-openjdk-devel # 配置Java HOME cat \u0026lt;\u0026lt;EOF | sudo tee /etc/profile.d/java8.sh export JAVA_HOME=/usr/lib/jvm/jre-openjdk export PATH=\\$PATH:\\$JAVA_HOME/bin export CLASSPATH=.:\\$JAVA_HOME/jre/lib:\\$JAVA_HOME/lib:\\$JAVA_HOME/lib/tools.jar EOF # 更新环境变量 source /etc/profile.d/java8.sh # 配置elasticsearch 6源 cat \u0026lt;\u0026lt;EOF | sudo tee /etc/yum.repos.d/elasticsearch.repo [elasticsearch-6.x] name=Elasticsearch repository for 6.x packages baseurl=https://artifacts.elastic.co/packages/oss-6.x/yum gpgcheck=1 gpgkey=https://artifacts.elastic.co/GPG-KEY-elasticsearch enabled=1 autorefresh=1 type=rpm-md EOF yum install -y elasticsearch-oss # 调节jvm `/etc/elasticsearch/jvm.options` -Xms256m/-Xmx512m # 启动elasticsearch服务 sudo systemctl enable --now elasticsearch # 测试elasticsearch服务是否正正常 curl http://127.0.0.1:9200   openRasp管理后台部署rasp-cloud 1 2 3 4  # 判断wget是否存在后再继续 wget https://github.com/baidu/openrasp/releases/download/v1.3.7/rasp-cloud.tar.gz # 解压rasp-cloud tar -zxvf rasp-cloud.tar.gz   配置rasp-cloud 编辑 conf/app.conf 文件，修正 ElasticSearch 和 MongoDB 两个服务器的地址。如果这两个数据库都安装在了本机，且使用默认端口\n1 2 3 4 5 6 7  [prod]EsAddr = http://127.0.0.1:9200EsUser =EsPwd =MongoDBAddr = 127.0.0.1:27017MongoDBUser =MongoDBPwd =  启动rasp-cloud 1 2 3 4 5 6 7 8  ./rasp-cloud -d /opt/rasp-cloud-2022-01-28/ 2022/06/17 03:02:30.786 [I] [environment.go:70] Version: 1.3.7 2022/06/17 03:02:30.786 [I] [environment.go:75] Build Time: 2022-01-28 17:50:39 2022/06/17 03:02:30.786 [I] [environment.go:78] Git Commit ID: a0634d6ea7c170284c262c757e56a7e5a8f242d0 2022/06/17 03:02:30.786 [I] [environment.go:299] Command line arguments: [] 2022/06/17 03:02:32.789 [I] [environment.go:272] start successfully, for details please check the log in /opt/rasp-cloud-2022-01-28/logs/api/agent-cloud.log   在浏览器里打开 http://your-ip:8086，登录管理后台。\n其中用户名固定为 openrasp，初始密码为 admin@123。\n如果不能访问，请检查防火墙设置，或者检查 logs/api/agent-cloud.log 下面的错误信息。\n检查后台状态 1 2 3 4  ./rasp-cloud -s status /data/openrasp/rasp-cloud/ 2022/06/20 10:27:57.836 [I] [environment.go:70] Version: 1.3.6 2022/06/20 10:27:57 rasp-cloud is already running   OpenRASP后台负载均衡 管理后台 分为两种类型:\n Agent 接口服务器 (AgentServer) 用于跟agent通信，比如心跳、日志上传，可以部署多个 前端服务器 (PanelServer) 用于展示数据、定时报警、修改配置，用户可访问,部署多个会有重复报警的问题，所以目前只能部署一个。   启动一个 前端 服务器，  ./rasp-cloud -type=panel -d 然后在不同的机房，分别启动一个 agent 服务器（使用同一份 conf/app.conf 配置文件即可）\n./rasp-cloud -type=agent -d 服务器部署完成后，请根据 管理后台 - 设置后台信息 文档，将所有的Agent服务器填入。之后就可以在 添加主机 界面上，生成自动安装命令了。\n容量说明: 目前，在2核4GB的主机上，按照3分钟一个心跳计算，大概单台机器可容纳 1000个 客户端。\nElasticSearch 负载均衡 在使用ES集群时，EsAddr 填写一个服务器的地址即可。我们自动会调用 /_nodes/ 接口获取全部服务器信息并轮询，以避免单点问题。\n[可选] 开启HTTPS 在 conf/app.conf 中加入以下配置即可，修改后重启后台生效:\n1 2 3 4 5  EnableHTTPS = trueEnableHttpTLS = trueHttpsPort = 443HTTPSCertFile = \u0026#34;cert.pem\u0026#34;HTTPSKeyFile = \u0026#34;cert.key\u0026#34;  后台升级 查看rasp-cloud版本, 版本高于1.3.0 的后台，按如下升级策略进行升级\n1 2 3 4 5  ./rasp-cloud -version /rasp-cloud/ Version: 1.3 Build Time: 2020-02-11 17:56:52 Git Commit ID: d6902d60f8874e7255562544041edbd340e6b676    备份原来的配置文件 conf/app.conf 下载新的安装包,解压到相同的目录 插件是否需要更新配置文件 执行 /path/to/rasp-cloud -s restart 检查后台是否可以正常访问  重置后台密码 请登录到后台所在的主机，执行如下命令，根据提示重置密码。\n1  ./rasp-cloud -type=reset   定期备份 以小时级别对 MongoDB 和 ElasticSearch 数据库进行备份\nMongoDB 需要备份 openrasp 数据库 可以使用 mongodump + mongorestore 实现\n 备份  1 2 3 4 5 6 7  mongodump -h IP --port 端口 [-u 用户名 -p 密码] -d openrasp -o /data/backups/mongdb eg: mongodump -h localhost:27017 -d openrasp -o /tmp/mongodb -h：MongDB所在服务器地址，如 localhost:27017 -d：备份的数据库 -c：备份的数据表 -o：备份的数据存放目录    恢复  1 2 3 4 5 6 7 8  mongorestore -h IP --port 端口 -u 用户名 -p 密码 -d 数据库 --drop 备份文件存在路径 eg: mongorestore -h localhost:27017 -d openrasp --drop /tmp/mongodb/openrasp/ - h：MongDB所在服务器地址，如 localhost:27017 - d：需要恢复的数据库 - drop: 恢复的时候，先删除当前数据，然后恢复备份的数据。 - c：需要恢复的数据表 - \u0026lt;path\u0026gt;：mongorestore 最后的一个参数，备份数据所在位置/tmp/mongodb/openrasp/   ElasticSearch 需要备份如下索引，可以用 snapshot 方式备份 real-openrasp-report-data-{appid} real-openrasp-attack-alarm-{appid} real-openrasp-policy-alarm-{appid} real-openrasp-error-alarm-{appid} real-openrasp-dependency-data-{appid}  参考备份方法\n  配置备份仓库路径  1 2 3 4  mkdir -p /data/backups/elasticsearch chmod 755 /data/backups/elasticsearch echo \u0026#39;path.repo: /data/backups/elasticsearch\u0026#39; \u0026gt;\u0026gt; /etc/elasticsearch/elasticsearch.yml systemctl restart elasticsearch   创建仓库\n备份数据之前，要创建一个仓库来保存数据，仓库的类型支持Shared filesystem, Amazon S3, HDFS、Azure Cloud选择。\n创建了一个备份仓库名为 datasvr\n存储目录为/data/backups/elasticsearch 的备份仓库。  1 2 3 4 5 6 7 8  curl -H \u0026#34;Content-Type: application/json\u0026#34; -X PUT \u0026#39;http://127.0.0.1:9200/_snapshot/datasvr\u0026#39; -d \u0026#39; { \u0026#34;type\u0026#34;: \u0026#34;fs\u0026#34;, \u0026#34;settings\u0026#34;: { \u0026#34;location\u0026#34;: \u0026#34;/data/backups/elasticsearch\u0026#34;, \u0026#34;compress\u0026#34;: true } }\u0026#39;   手动创建快照(备份索引)  1 2 3 4 5 6  url -H \u0026#34;Content-Type:application/json\u0026#34; -X PUT \u0026#39;http://127.0.0.1:9200/_snapshot/datasvr/snapshot_1?wait_for_completion=true\u0026#39; -d \u0026#39; \u0026#34;indices\u0026#34;: \u0026#34;index_1,index_2\u0026#34; \u0026#39; # 查询 curl -X GET \u0026#34;http://127.0.0.1:9200/_snapshot/backup/snapshot_1?pretty\u0026#34;   自动备份  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21  # 配置自动备份参数 curl -H \u0026#39;Content-Type: application/json\u0026#39; -X PUT \u0026#34;http://127.0.0.1:9200/_slm/policy/everyday-snapshots?pretty\u0026#34; -d\u0026#39; { \u0026#34;schedule\u0026#34;: \u0026#34;0 30 1 * * ?\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;%3ceveryday-snap-%7bnow%2fd%7d%3e\u0026#34;, \u0026#34;repository\u0026#34;: \u0026#34;datasvr\u0026#34;, \u0026#34;config\u0026#34;: { \u0026#34;indices\u0026#34;: [\u0026#34;*\u0026#34;] }, \u0026#34;retention\u0026#34;: { \u0026#34;expire_after\u0026#34;: \u0026#34;30d\u0026#34;, \u0026#34;min_count\u0026#34;: 5, \u0026#34;max_count\u0026#34;: 50 } } \u0026#39; # 触发自动备份 curl -X POST \u0026#34;http://127.0.0.1:9200/_slm/policy/everyday-snapshots/_execute?pretty\u0026#34; # 查看执行结果 curl -X GET \u0026#34;http://127.0.0.1:9200/_slm/policy/everyday-snapshots?human\u0026amp;pretty\u0026#34;   恢复备份  1 2 3 4 5 6 7 8 9  curl -H \u0026#39;Content-Type: application/json\u0026#39; -X POST \u0026#34;http://127.0.0.1:9200/_snapshot/my_backup/snapshot_1/_restore\u0026#34; -d\u0026#39; { \u0026#34;indices\u0026#34;: \u0026#34;index_1,index_2\u0026#34;, \u0026#34;ignore_unavailable\u0026#34;: true, \u0026#34;include_global_state\u0026#34;: true, \u0026#34;rename_pattern\u0026#34;: \u0026#34;index_(.+)\u0026#34;, \u0026#34;rename_replacement\u0026#34;: \u0026#34;restored_index_$1\u0026#34; } \u0026#39;   ","description":"","id":2,"section":"dso","tags":null,"title":"OpenRASP部署记录","uri":"http://crkmythical.github.io/dso/openrasp%E9%83%A8%E7%BD%B2%E8%AE%B0%E5%BD%95/"},{"content":"Markdown here\n","description":"test post","id":4,"section":"red","tags":null,"title":"February 2019","uri":"http://crkmythical.github.io/red/2019_february/"},{"content":"Markdown here\n","description":"test post","id":5,"section":"red","tags":null,"title":"March 2019","uri":"http://crkmythical.github.io/red/2019_march/"},{"content":"Markdown here\n","description":"test post","id":6,"section":"red","tags":null,"title":"April 2019","uri":"http://crkmythical.github.io/red/2019_april/"},{"content":"Markdown here\n","description":"test post","id":7,"section":"red","tags":null,"title":"May 2019","uri":"http://crkmythical.github.io/red/2019_may/"},{"content":" halo  sdfsf\n sdfasfsa\n  ","description":"","id":8,"section":"red","tags":null,"title":"Linux","uri":"http://crkmythical.github.io/red/linux/"},{"content":"Table of Contents  代码审计常规手法  Front Back 审计流程四步骤  Front Back      \n代码审计常规手法 \nFront 代码审计常规手法\n\nBack  通读源码: 从入口函数开始读 关键函数回溯: 先定位敏感函数及参数,同步回溯参数赋值过程,判断是否可控以及是否经过过滤等 追踪功能点: 根据经验判断可能存在问题的路由或功能点,对该功能点进行通读  \n审计流程四步骤 \nFront 审计流程四步骤\n\nBack  1.获取源码,搭建环境: Github、GitLab、CSDN、Gitee等 2.半自动化代码审计: SAST工具扫描,功能点审计、关键函数溯源、通读源码 3.POC编写: 根据审计结果以及触发方式编写POC,通过POC确定问题及造成影响 4.报告编写: 根据审计出的安全问题和POC脚本的验证结果,编写整体的代码审计报告  ","description":"","id":9,"section":"dso","tags":[""],"title":"Devsecops是什么","uri":"http://crkmythical.github.io/dso/devsecops%E6%98%AF%E4%BB%80%E4%B9%88/"},{"content":"编写进度\n   linux如何添加自定义服务-service命令 添加配置 1 2 3 4 5 6 7 8 9 10 11 12 13 14  cat \u0026lt;\u0026lt;EOF \u0026gt;/etc/systemd/system/clash.service [Unit] Description=Clash service After=network.target [Service] Type=simple User=skylee ExecStart=/usr/bin/clash Restart=on-failure RestartPreventExitStatus=23 [Install] WantedBy=multi-user.target   服务操作 1 2 3  systemctl list-units --type=service # 查看已识别的服务 systemctl daemon-reload # 让系统重新读取服务 service \u0026lt;service-name\u0026gt; start/restart/stop   启/禁用开机自启 1  systemctl enable/disable \u0026lt;service-name\u0026gt;   ","description":"","id":10,"section":"blog","tags":null,"title":"linux如何添加自定义服务","uri":"http://crkmythical.github.io/blog/linux%E5%A6%82%E4%BD%95%E6%B7%BB%E5%8A%A0%E8%87%AA%E5%AE%9A%E4%B9%89%E6%9C%8D%E5%8A%A1/"},{"content":"Markdown here\n","description":"test post","id":11,"section":"dso","tags":null,"title":"Related content","uri":"http://crkmythical.github.io/dso/relatedcontent/"},{"content":"Markdown here\n","description":"test post","id":12,"section":"dso","tags":null,"title":"Page Resources","uri":"http://crkmythical.github.io/dso/pageresources/"},{"content":"Markdown here\n","description":"test post","id":13,"section":"dso","tags":null,"title":"Shortcodes","uri":"http://crkmythical.github.io/dso/contentmanagement/shortcodes/"},{"content":"Markdown here\n","description":"test post","id":14,"section":"dso","tags":null,"title":"Frontmatter","uri":"http://crkmythical.github.io/dso/contentmanagement/frontmatter/"},{"content":"This article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme.\nHeadings The following HTML \u0026lt;h1\u0026gt;—\u0026lt;h6\u0026gt; elements represent six levels of section headings. \u0026lt;h1\u0026gt; is the highest section level while \u0026lt;h6\u0026gt; is the lowest.\nH1 H2 H3 H4 H5 H6 Paragraph Xerum, quo qui aut unt expliquam qui dolut labo. Aque venitatiusda cum, voluptionse latur sitiae dolessi aut parist aut dollo enim qui voluptate ma dolestendit peritin re plis aut quas inctum laceat est volestemque commosa as cus endigna tectur, offic to cor sequas etum rerum idem sintibus eiur? Quianimin porecus evelectur, cum que nis nust voloribus ratem aut omnimi, sitatur? Quiatem. Nam, omnis sum am facea corem alique molestrunt et eos evelece arcillit ut aut eos eos nus, sin conecerem erum fuga. Ri oditatquam, ad quibus unda veliamenimin cusam et facea ipsamus es exerum sitate dolores editium rerore eost, temped molorro ratiae volorro te reribus dolorer sperchicium faceata tiustia prat.\nItatur? Quiatae cullecum rem ent aut odis in re eossequodi nonsequ idebis ne sapicia is sinveli squiatum, core et que aut hariosam ex eat.\nBlockquotes The blockquote element represents content that is quoted from another source, optionally with a citation which must be within a footer or cite element, and optionally with in-line changes such as annotations and abbreviations.\nBlockquote without attribution  Tiam, ad mint andaepu dandae nostion secatur sequo quae.\nNote that you can use Markdown syntax within a blockquote.\n Blockquote with attribution  Don\u0026rsquo;t communicate by sharing memory, share memory by communicating.\n— Rob Pike1\n Tables Tables aren\u0026rsquo;t part of the core Markdown spec, but Hugo supports supports them out-of-the-box.\n   Name Age     Bob 27   Alice 23    Inline Markdown within tables    Inline  Markdown  In  Table     italics bold strikethrough  code    Code Blocks Code block with backticks html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026quot;en\u0026quot;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026quot;UTF-8\u0026quot;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Code block indented with four spaces \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026quot;en\u0026quot;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026quot;UTF-8\u0026quot;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;  Code block with Hugo\u0026rsquo;s internal highlight shortcode 1 2 3 4 5 6 7 8 9 10  \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;   List Types Ordered List  First item Second item Third item  Unordered List  List item Another item And another item  Nested list  Item  First Sub-item Second Sub-item    Other Elements — abbr, sub, sup, kbd, mark GIF is a bitmap image format.\nH2O\nXn + Yn = Zn\nPress CTRL+ALT+Delete to end the session.\nMost salamanders are nocturnal, and hunt for insects, worms, and other small creatures.\n The above quote is excerpted from Rob Pike\u0026rsquo;s talk during Gopherfest, November 18, 2015.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n  ","description":"Sample article showcasing basic Markdown syntax and formatting for HTML elements.","id":15,"section":"dso","tags":["markdown","css","html","themes"],"title":"Section","uri":"http://crkmythical.github.io/dso/contentmanagement/sections/"},{"content":"1. 背景 源代码静态分析工具（SAST）作为软件安全的重要保障工具，已经在各个领域被广泛使用。随着开源SAST工具的广泛使用，工具种类的增加，使用者很难判断工具的优劣及适不适合企业的应用场景，故此次对静态代码分析工具进行一次测评和调研，为公司选择静态代码分析工具提供依据。\n2. 现状 产品迭代速度越来越快，每个分支都有各自的业务范围和开发周期需求，目前安全检测主要集中在测试阶段，对开发过程中的代码质量和代码安全性没有监控，想从源头上治理漏洞就需要制定代码检测机制，SAST是一种在开发阶段对源代码进行安全测试发现安全漏洞的测试方案。能够更提前的发现漏洞，有效的减少安全风险。\n3. 产品选型 本次靶场选择 OWASP Benchmark 靶场。OWASP Benchmark 是一个Java语言且偏安全的国际通用测试集，旨在评估安全测试工具的能力（准确率、覆盖度、扫描速度等等），从而更好得比较各个安全工具的优缺点。\n3.1 测试依据 一般来说，误报和漏报率是SAST最重要的技术评价指标，OWASP基准测试是一个示例应用程序，其中包含来自11个类别的数千个漏洞。基准测试中包括很难通过静态分析处理的代码片段，例如：间接调用、不可达分支、映射、依赖于配置文件的值。以在一定程度上反应代码分析工具的检测能力，所以评价一款静态缺陷检测工具的话，最好通过国际上认可的标准案例集进行验证\n目前 V1.2 版本包含了2740个漏洞，覆盖常见的SQL注入、命令注入、路径遍历、XSS，以及众多安全编码类的问题，其中有1415个真实漏洞，1325个假漏洞。\n用例下载地址：BenchmarkJava\n3.2 评分标准 对于测试工具来说，我们期望他能够\n 发现所有的真正是问题的漏洞 即 True Positive，TP指数，检出率尽可能高 能够忽略所有非问题的漏洞 即False Positive，FP指数，误报率尽可能低  Benchmark 将以TP,FP为坐标轴绘制一张图，当点越靠近左上方时，认为测试功能能力更优。\n![[Pasted image 20220621134021.png]]\n一般安全检查工具会检测出大量的漏洞，但是其中有很多都是误报的。为了得到所测试的应用程序的准确程度，benchmark设置了四种专门的测试结果：\n 工具正确识别了真实漏洞（True Positive，TP）； 工具没有识别出真实漏洞（False Negative，FN）； 工具没有对假的漏洞进行误报（True Negative，TN）； 工具对假的漏洞进行误报（False Positive，FP）；  Benchmark最后得分参考约登指数给出，满分是1.0分。用以下公式计算分值，==得分越靠近 1 表明测试工具能力越强==\n约登指数计算方法为\n(sensitivity + specificity) – 1 其中\nSensitivity = TPR=TP/（TP+FN） Specificity = 1-FPR=TN/（TN+FP） Youden Index= (sensitivity + specificity) – 1 = (TPR+1-FPR)-1 = TPR-FPR 3.3 产品对比    产品名 检出率（TP） 误报率（FP） 漏报率（FN） 检测速度（每小时检测代码行数） 支持语言 自定义规则 能接收gitlab消息 IDE插件 约登指数     Synopsys（美国-新思科技）            CheckMarx（以色列）            Veracode（美国）            Fortify（美国-惠普）            Snyk（英国）            SonarQube（开源）            Xcheck（国产-腾讯）            CoBOT（国产-北大软件）            奇安信代码卫士（国产-奇安信）            鸿渐科技（国产-北京鸿渐科技）            WuKong (国产-北京中科天齐)            DMSCA（国产-北京端玛科技）             4. 结论 ","description":"","id":16,"section":"dso","tags":null,"title":"","uri":"http://crkmythical.github.io/dso/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/attachments/sast-%E6%8A%80%E6%9C%AF%E8%B0%83%E7%A0%94/"},{"content":"Beijing: 🌫 🌡️+25°C 🌬️↙7km/h\nDNSlog回显平台 https://github.com/lanyi1998/DNSlog-GO\nDNSlog是什么 DNS就是将域名解析为ip，用户在浏览器上输入一个域名A.com，就要靠DNS服务器将A.com解析到它的真实ip127.0.0.1，这样就可以访问127.0.0.1服务器上的相应服务。 那么DNSlog是什么。DNSlog就是存储在DNS服务器上的域名信息，它记录着用户对域名www.baidu.com等的访问信息，类似日志文件。\nDNSlog回显原理 DNS查询过程\n原理上只要能进行DNS请求的函数都可能存在DNSlog注入。\n 使用DNSLog进行盲打  为什么DNSlog注入只能用于windows系统？ load_file()函数在Linux下是无法用来做DNSLog攻击的，因为linux没有UNC这个东西，所以当MySQL处于Linux系统中的时候，是不能使用这种方式外带数据的。\n什么是UNC？ UNC是一种命名惯例, 主要用于在Microsoft Windows上指定和映射网络驱动器。 UNC命名惯例最多被应用于在局域网中访问文件服务器或者打印机。我们日常常用的网络共享文件就是这个方式。 UNC路径就是类似softer这样的形式的网络路径。它符合 servernamesharename 格式，其中 servername 是服务器名，sharename 是共享资源的名称。 目录或文件的 UNC 名称可以包括共享名称下的目录路径，格式为：servernamesharenamedirectoryfilename。 例如把自己电脑的文件共享，你会获得如下路径，这就是UNC路径 //iZ53sl3r1890u7Z/Users/Administrator/Desktop/111.txt\n前期准备  一台VPS 一个域名  配置NS记录 https://nip.io/\n NIP.IO作用\n  对外开放UDP协议53端口 搭建DNSlog-GO 1  wget https://github.com/lanyi1998/DNSlog-GO/releases/download/1.5.2/DNSlog-GO-linux.zip   修改配置文件 config.ini 1 2 3 4 5 6 7  HTTP:port:8000//http web监听端口#{\u0026#34;token\u0026#34;:\u0026#34;用户对应子域名\u0026#34;}user:{\u0026#34;admin\u0026#34;: \u0026#34;admin\u0026#34;}//用户admin 对应的dnslog子域名是 admin.demo.comconsoleDisable:false//是否关闭web页面Dns:domain:demo.com //dnslog域名  后台启动DNSlog-Go 1  nohup ./main \u0026amp;   ","description":"","id":17,"section":"red","tags":["",""],"title":"DNSlog回显平台","uri":"http://crkmythical.github.io/red/dnslog%E5%9B%9E%E6%98%BE%E5%B9%B3%E5%8F%B0/"},{"content":"Beijing: ☀️ 🌡️+27°C 🌬️↖15km/h\nDocker部署  官方推荐安装方式  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23  # 卸载旧版本 yum remove docker docker-common docker-selinux docker-engine # 安装所需软件包 yum install -y yum-utils device-mapper-persistent-data lvm2 # 中央仓库 yum-config-manager --add-repo http://download.docker.com/linux/centos/docker-ce.repo # 阿里仓库 yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo # 查看Docker可用版本 yum list docker-ce --showduplicates | sort -r # 安装docker yum install docker-ce docker-ce-cli containerd.io docker-compose-plugin # 启动并设置开机自启 systemctl enable --now docker # 开启Docker远程访问 sed -i \u0026#34;s#ExecStart=/usr/bin/dockerd*#ExecStart=/usr/bin/dockerd -H tcp://0.0.0.0:2375 -H unix://var/run/docker.sock#g\u0026#34; /usr/lib/systemd/system/docker.service # 重启Docker环境 systemctl daemon-reload \u0026amp;\u0026amp; systemctl restart docker    极简安装  1  yum install -y docker \u0026amp;\u0026amp; service docker start \u0026amp;\u0026amp; docker -v   关于Docker  image：镜像，一个文件，用来创建容器；如果你有 Windows 装机经历，那可以很好理解镜像这个词的含义，反正我年少的时候没少把 Windows 镜像刻盘重装系统。 container：容器，一个可运行的镜像实例，里面运行着一个完整的操作系统，可以做一切你当前操作系统可以做的事情。 Dockerfile：镜像构建的模板，描述镜像构建的步骤。  它们之间的关系是，通过 Dockerfile 构建出镜像，然后通过镜像构建容器，容器里可以跑程序。另外，一个镜像可以创建多个容器，每个容器之间是相互隔离的。\nDocker 采用的是 CS 架构，客户端与 Docker 守护进程交互，后者负责构建、运行和分发 Docker 容器的工作。\nDocker 的应用场景非常丰富，比如说：\n 自动打包和部署应用 创建轻量、私有的PaaS环境 自动化测试和持续集成/部署 部署并扩展Web应用、数据库和后端服务器 创建安全沙盒 轻量级的桌面虚拟化  ","description":"","id":18,"section":"dso","tags":null,"title":"Docker部署","uri":"http://crkmythical.github.io/dso/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/centos7%E9%83%A8%E7%BD%B2docker%E6%9C%8D%E5%8A%A1/"},{"content":"Beijing: ⛅️ 🌡️+25°C 🌬️↘11km/h\nGithub发送通知给Lark(webhook) Lark Flow配置 webhook配置 webhook address* 1  https://www.larksuite.com/flow/api/trigger-webhook/0350eb63e7657   webhook params{ \u0026#34;ref\u0026#34;: \u0026#34;refs/heads/gh-pages\u0026#34;, \u0026#34;before\u0026#34;: \u0026#34;9546c62d9dd1374fe6d3fae9ddda03d2888c35d2\u0026#34;, \u0026#34;after\u0026#34;: \u0026#34;5f9d4f2cd0a95360b38e43c7c231e33b54e8f9a5\u0026#34;, \u0026#34;repository\u0026#34;: { \u0026#34;id\u0026#34;: 501187327, \u0026#34;node_id\u0026#34;: \u0026#34;R_kgDOHd-C_w\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;crkmythical.github.io\u0026#34;, \u0026#34;full_name\u0026#34;: \u0026#34;crkmythical/crkmythical.github.io\u0026#34;, \u0026#34;private\u0026#34;: false, \u0026#34;owner\u0026#34;: { \u0026#34;name\u0026#34;: \u0026#34;crkmythical\u0026#34;, \u0026#34;email\u0026#34;: \u0026#34;82789723+crkmythical@users.noreply.github.com\u0026#34;, \u0026#34;login\u0026#34;: \u0026#34;crkmythical\u0026#34;, \u0026#34;id\u0026#34;: 82789723, \u0026#34;node_id\u0026#34;: \u0026#34;MDQ6VXNlcjgyNzg5NzIz\u0026#34;, \u0026#34;avatar_url\u0026#34;: \u0026#34;https://avatars.githubusercontent.com/u/82789723?v=4\u0026#34;, \u0026#34;gravatar_id\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;url\u0026#34;: \u0026#34;https://api.github.com/users/crkmythical\u0026#34;, \u0026#34;html_url\u0026#34;: \u0026#34;https://github.com/crkmythical\u0026#34;, \u0026#34;followers_url\u0026#34;: \u0026#34;https://api.github.com/users/crkmythical/followers\u0026#34;, \u0026#34;following_url\u0026#34;: \u0026#34;https://api.github.com/users/crkmythical/following{/other_user}\u0026#34;, \u0026#34;gists_url\u0026#34;: \u0026#34;https://api.github.com/users/crkmythical/gists{/gist_id}\u0026#34;, \u0026#34;starred_url\u0026#34;: \u0026#34;https://api.github.com/users/crkmythical/starred{/owner}{/repo}\u0026#34;, \u0026#34;subscriptions_url\u0026#34;: \u0026#34;https://api.github.com/users/crkmythical/subscriptions\u0026#34;, \u0026#34;organizations_url\u0026#34;: \u0026#34;https://api.github.com/users/crkmythical/orgs\u0026#34;, \u0026#34;repos_url\u0026#34;: \u0026#34;https://api.github.com/users/crkmythical/repos\u0026#34;, \u0026#34;events_url\u0026#34;: \u0026#34;https://api.github.com/users/crkmythical/events{/privacy}\u0026#34;, \u0026#34;received_events_url\u0026#34;: \u0026#34;https://api.github.com/users/crkmythical/received_events\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;User\u0026#34;, \u0026#34;site_admin\u0026#34;: false }, \u0026#34;html_url\u0026#34;: \u0026#34;https://github.com/crkmythical/crkmythical.github.io\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;https://crkmythical.github.io\u0026#34;, \u0026#34;fork\u0026#34;: false, \u0026#34;url\u0026#34;: \u0026#34;https://github.com/crkmythical/crkmythical.github.io\u0026#34;, \u0026#34;forks_url\u0026#34;: \u0026#34;https://api.github.com/repos/crkmythical/crkmythical.github.io/forks\u0026#34;, \u0026#34;keys_url\u0026#34;: \u0026#34;https://api.github.com/repos/crkmythical/crkmythical.github.io/keys{/key_id}\u0026#34;, \u0026#34;collaborators_url\u0026#34;: \u0026#34;https://api.github.com/repos/crkmythical/crkmythical.github.io/collaborators{/collaborator}\u0026#34;, \u0026#34;teams_url\u0026#34;: \u0026#34;https://api.github.com/repos/crkmythical/crkmythical.github.io/teams\u0026#34;, \u0026#34;hooks_url\u0026#34;: \u0026#34;https://api.github.com/repos/crkmythical/crkmythical.github.io/hooks\u0026#34;, \u0026#34;issue_events_url\u0026#34;: \u0026#34;https://api.github.com/repos/crkmythical/crkmythical.github.io/issues/events{/number}\u0026#34;, \u0026#34;events_url\u0026#34;: \u0026#34;https://api.github.com/repos/crkmythical/crkmythical.github.io/events\u0026#34;, \u0026#34;assignees_url\u0026#34;: \u0026#34;https://api.github.com/repos/crkmythical/crkmythical.github.io/assignees{/user}\u0026#34;, \u0026#34;branches_url\u0026#34;: \u0026#34;https://api.github.com/repos/crkmythical/crkmythical.github.io/branches{/branch}\u0026#34;, \u0026#34;tags_url\u0026#34;: \u0026#34;https://api.github.com/repos/crkmythical/crkmythical.github.io/tags\u0026#34;, \u0026#34;blobs_url\u0026#34;: \u0026#34;https://api.github.com/repos/crkmythical/crkmythical.github.io/git/blobs{/sha}\u0026#34;, \u0026#34;git_tags_url\u0026#34;: \u0026#34;https://api.github.com/repos/crkmythical/crkmythical.github.io/git/tags{/sha}\u0026#34;, \u0026#34;git_refs_url\u0026#34;: \u0026#34;https://api.github.com/repos/crkmythical/crkmythical.github.io/git/refs{/sha}\u0026#34;, \u0026#34;trees_url\u0026#34;: \u0026#34;https://api.github.com/repos/crkmythical/crkmythical.github.io/git/trees{/sha}\u0026#34;, \u0026#34;statuses_url\u0026#34;: \u0026#34;https://api.github.com/repos/crkmythical/crkmythical.github.io/statuses/{sha}\u0026#34;, \u0026#34;languages_url\u0026#34;: \u0026#34;https://api.github.com/repos/crkmythical/crkmythical.github.io/languages\u0026#34;, \u0026#34;stargazers_url\u0026#34;: \u0026#34;https://api.github.com/repos/crkmythical/crkmythical.github.io/stargazers\u0026#34;, \u0026#34;contributors_url\u0026#34;: \u0026#34;https://api.github.com/repos/crkmythical/crkmythical.github.io/contributors\u0026#34;, \u0026#34;subscribers_url\u0026#34;: \u0026#34;https://api.github.com/repos/crkmythical/crkmythical.github.io/subscribers\u0026#34;, \u0026#34;subscription_url\u0026#34;: \u0026#34;https://api.github.com/repos/crkmythical/crkmythical.github.io/subscription\u0026#34;, \u0026#34;commits_url\u0026#34;: \u0026#34;https://api.github.com/repos/crkmythical/crkmythical.github.io/commits{/sha}\u0026#34;, \u0026#34;git_commits_url\u0026#34;: \u0026#34;https://api.github.com/repos/crkmythical/crkmythical.github.io/git/commits{/sha}\u0026#34;, \u0026#34;comments_url\u0026#34;: \u0026#34;https://api.github.com/repos/crkmythical/crkmythical.github.io/comments{/number}\u0026#34;, \u0026#34;issue_comment_url\u0026#34;: \u0026#34;https://api.github.com/repos/crkmythical/crkmythical.github.io/issues/comments{/number}\u0026#34;, \u0026#34;contents_url\u0026#34;: \u0026#34;https://api.github.com/repos/crkmythical/crkmythical.github.io/contents/{+path}\u0026#34;, \u0026#34;compare_url\u0026#34;: \u0026#34;https://api.github.com/repos/crkmythical/crkmythical.github.io/compare/{base}...{head}\u0026#34;, \u0026#34;merges_url\u0026#34;: \u0026#34;https://api.github.com/repos/crkmythical/crkmythical.github.io/merges\u0026#34;, \u0026#34;archive_url\u0026#34;: \u0026#34;https://api.github.com/repos/crkmythical/crkmythical.github.io/{archive_format}{/ref}\u0026#34;, \u0026#34;downloads_url\u0026#34;: \u0026#34;https://api.github.com/repos/crkmythical/crkmythical.github.io/downloads\u0026#34;, \u0026#34;issues_url\u0026#34;: \u0026#34;https://api.github.com/repos/crkmythical/crkmythical.github.io/issues{/number}\u0026#34;, \u0026#34;pulls_url\u0026#34;: \u0026#34;https://api.github.com/repos/crkmythical/crkmythical.github.io/pulls{/number}\u0026#34;, \u0026#34;milestones_url\u0026#34;: \u0026#34;https://api.github.com/repos/crkmythical/crkmythical.github.io/milestones{/number}\u0026#34;, \u0026#34;notifications_url\u0026#34;: \u0026#34;https://api.github.com/repos/crkmythical/crkmythical.github.io/notifications{?since,all,participating}\u0026#34;, \u0026#34;labels_url\u0026#34;: \u0026#34;https://api.github.com/repos/crkmythical/crkmythical.github.io/labels{/name}\u0026#34;, \u0026#34;releases_url\u0026#34;: \u0026#34;https://api.github.com/repos/crkmythical/crkmythical.github.io/releases{/id}\u0026#34;, \u0026#34;deployments_url\u0026#34;: \u0026#34;https://api.github.com/repos/crkmythical/crkmythical.github.io/deployments\u0026#34;, \u0026#34;created_at\u0026#34;: 1654681232, \u0026#34;updated_at\u0026#34;: \u0026#34;2022-06-08T12:55:05Z\u0026#34;, \u0026#34;pushed_at\u0026#34;: 1655189116, \u0026#34;git_url\u0026#34;: \u0026#34;git://github.com/crkmythical/crkmythical.github.io.git\u0026#34;, \u0026#34;ssh_url\u0026#34;: \u0026#34;git@github.com:crkmythical/crkmythical.github.io.git\u0026#34;, \u0026#34;clone_url\u0026#34;: \u0026#34;https://github.com/crkmythical/crkmythical.github.io.git\u0026#34;, \u0026#34;svn_url\u0026#34;: \u0026#34;https://github.com/crkmythical/crkmythical.github.io\u0026#34;, \u0026#34;homepage\u0026#34;: null, \u0026#34;size\u0026#34;: 5019, \u0026#34;stargazers_count\u0026#34;: 1, \u0026#34;watchers_count\u0026#34;: 1, \u0026#34;language\u0026#34;: null, \u0026#34;has_issues\u0026#34;: true, \u0026#34;has_projects\u0026#34;: true, \u0026#34;has_downloads\u0026#34;: true, \u0026#34;has_wiki\u0026#34;: true, \u0026#34;has_pages\u0026#34;: true, \u0026#34;forks_count\u0026#34;: 0, \u0026#34;mirror_url\u0026#34;: null, \u0026#34;archived\u0026#34;: false, \u0026#34;disabled\u0026#34;: false, \u0026#34;open_issues_count\u0026#34;: 0, \u0026#34;license\u0026#34;: null, \u0026#34;allow_forking\u0026#34;: true, \u0026#34;is_template\u0026#34;: false, \u0026#34;topics\u0026#34;: [ ], \u0026#34;visibility\u0026#34;: \u0026#34;public\u0026#34;, \u0026#34;forks\u0026#34;: 0, \u0026#34;open_issues\u0026#34;: 0, \u0026#34;watchers\u0026#34;: 1, \u0026#34;default_branch\u0026#34;: \u0026#34;main\u0026#34;, \u0026#34;stargazers\u0026#34;: 1, \u0026#34;master_branch\u0026#34;: \u0026#34;main\u0026#34; }, \u0026#34;pusher\u0026#34;: { \u0026#34;name\u0026#34;: \u0026#34;crkmythical\u0026#34;, \u0026#34;email\u0026#34;: \u0026#34;82789723+crkmythical@users.noreply.github.com\u0026#34; }, \u0026#34;sender\u0026#34;: { \u0026#34;login\u0026#34;: \u0026#34;crkmythical\u0026#34;, \u0026#34;id\u0026#34;: 82789723, \u0026#34;node_id\u0026#34;: \u0026#34;MDQ6VXNlcjgyNzg5NzIz\u0026#34;, \u0026#34;avatar_url\u0026#34;: \u0026#34;https://avatars.githubusercontent.com/u/82789723?v=4\u0026#34;, \u0026#34;gravatar_id\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;url\u0026#34;: \u0026#34;https://api.github.com/users/crkmythical\u0026#34;, \u0026#34;html_url\u0026#34;: \u0026#34;https://github.com/crkmythical\u0026#34;, \u0026#34;followers_url\u0026#34;: \u0026#34;https://api.github.com/users/crkmythical/followers\u0026#34;, \u0026#34;following_url\u0026#34;: \u0026#34;https://api.github.com/users/crkmythical/following{/other_user}\u0026#34;, \u0026#34;gists_url\u0026#34;: \u0026#34;https://api.github.com/users/crkmythical/gists{/gist_id}\u0026#34;, \u0026#34;starred_url\u0026#34;: \u0026#34;https://api.github.com/users/crkmythical/starred{/owner}{/repo}\u0026#34;, \u0026#34;subscriptions_url\u0026#34;: \u0026#34;https://api.github.com/users/crkmythical/subscriptions\u0026#34;, \u0026#34;organizations_url\u0026#34;: \u0026#34;https://api.github.com/users/crkmythical/orgs\u0026#34;, \u0026#34;repos_url\u0026#34;: \u0026#34;https://api.github.com/users/crkmythical/repos\u0026#34;, \u0026#34;events_url\u0026#34;: \u0026#34;https://api.github.com/users/crkmythical/events{/privacy}\u0026#34;, \u0026#34;received_events_url\u0026#34;: \u0026#34;https://api.github.com/users/crkmythical/received_events\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;User\u0026#34;, \u0026#34;site_admin\u0026#34;: false }, \u0026#34;created\u0026#34;: false, \u0026#34;deleted\u0026#34;: false, \u0026#34;forced\u0026#34;: false, \u0026#34;base_ref\u0026#34;: null, \u0026#34;compare\u0026#34;: \u0026#34;https://github.com/crkmythical/crkmythical.github.io/compare/9546c62d9dd1...5f9d4f2cd0a9\u0026#34;, \u0026#34;commits\u0026#34;: [ { \u0026#34;id\u0026#34;: \u0026#34;5f9d4f2cd0a95360b38e43c7c231e33b54e8f9a5\u0026#34;, \u0026#34;tree_id\u0026#34;: \u0026#34;3bbdda9bd5c125e383110477c76bb327eaa25081\u0026#34;, \u0026#34;distinct\u0026#34;: true, \u0026#34;message\u0026#34;: \u0026#34;update Tue Jun 14 14:44:51 CST 2022 crkmythical/Frame@ea9257ec824039439d8f7c72a392de9bc9f340ce\u0026#34;, \u0026#34;timestamp\u0026#34;: \u0026#34;2022-06-14T06:45:16Z\u0026#34;, \u0026#34;url\u0026#34;: \u0026#34;https://github.com/crkmythical/crkmythical.github.io/commit/5f9d4f2cd0a95360b38e43c7c231e33b54e8f9a5\u0026#34;, \u0026#34;author\u0026#34;: { \u0026#34;name\u0026#34;: \u0026#34;crkmythical\u0026#34;, \u0026#34;email\u0026#34;: \u0026#34;crkmythical@users.noreply.github.com\u0026#34;, \u0026#34;username\u0026#34;: \u0026#34;crkmythical\u0026#34; }, \u0026#34;committer\u0026#34;: { \u0026#34;name\u0026#34;: \u0026#34;crkmythical\u0026#34;, \u0026#34;email\u0026#34;: \u0026#34;crkmythical@users.noreply.github.com\u0026#34;, \u0026#34;username\u0026#34;: \u0026#34;crkmythical\u0026#34; }, \u0026#34;added\u0026#34;: [ ], \u0026#34;removed\u0026#34;: [ ], \u0026#34;modified\u0026#34;: [ \u0026#34;blog/github-and-webhook-with-lark/index.html\u0026#34; ] } ], \u0026#34;head_commit\u0026#34;: { \u0026#34;id\u0026#34;: \u0026#34;5f9d4f2cd0a95360b38e43c7c231e33b54e8f9a5\u0026#34;, \u0026#34;tree_id\u0026#34;: \u0026#34;3bbdda9bd5c125e383110477c76bb327eaa25081\u0026#34;, \u0026#34;distinct\u0026#34;: true, \u0026#34;message\u0026#34;: \u0026#34;update Tue Jun 14 14:44:51 CST 2022 crkmythical/Frame@ea9257ec824039439d8f7c72a392de9bc9f340ce\u0026#34;, \u0026#34;timestamp\u0026#34;: \u0026#34;2022-06-14T06:45:16Z\u0026#34;, \u0026#34;url\u0026#34;: \u0026#34;https://github.com/crkmythical/crkmythical.github.io/commit/5f9d4f2cd0a95360b38e43c7c231e33b54e8f9a5\u0026#34;, \u0026#34;author\u0026#34;: { \u0026#34;name\u0026#34;: \u0026#34;crkmythical\u0026#34;, \u0026#34;email\u0026#34;: \u0026#34;crkmythical@users.noreply.github.com\u0026#34;, \u0026#34;username\u0026#34;: \u0026#34;crkmythical\u0026#34; }, \u0026#34;committer\u0026#34;: { \u0026#34;name\u0026#34;: \u0026#34;crkmythical\u0026#34;, \u0026#34;email\u0026#34;: \u0026#34;crkmythical@users.noreply.github.com\u0026#34;, \u0026#34;username\u0026#34;: \u0026#34;crkmythical\u0026#34; }, \u0026#34;added\u0026#34;: [ ], \u0026#34;removed\u0026#34;: [ ], \u0026#34;modified\u0026#34;: [ \u0026#34;blog/github-and-webhook-with-lark/index.html\u0026#34; ] } }   Lark Message 1  head_commit_message   Github Webhook配置 ","description":"Github发送通知给Lark(webhook)","id":19,"section":"blog","tags":null,"title":"Github发送通知给Lark(webhook)","uri":"http://crkmythical.github.io/blog/github%E5%8F%91%E9%80%81%E9%80%9A%E7%9F%A5%E7%BB%99larkwebhook/"},{"content":"Beijing: ☀️ 🌡️+19°C 🌬️↓4km/h\nhugo搭建博客全记录  [[https://imcaviare.com/post/auto-deploy-hugo/][hugo自动化搭建博客之一]] [[https://cloud.tencent.com/developer/article/1647964?from=article.detail.1970808][hugo自动化搭建博客之二]] [[https://www.jianshu.com/p/7c3f31d44b1d][hugo自动化搭建博客之三]]  hugo安装 1  brew install hugo git-lfs   初始化博客目录 1 2 3 4 5 6 7 8 9 10 11 12 13 14  hugo new site myBlog -f toml \u0026amp;\u0026amp; cd myBlog git init git lfs install # 是否支持大文件 git submodule add https://github.com/zzossig/hugo-theme-zdoc.git themes/zdoc git submodule update --init --recursive #若克隆他人博客，需执行 初始化和同步主题修改 git submodule update --remote # 同步主题修改 cp -rf themes/zdoc/exampleSite/* ./ cp -rf themes/zdoc/archetypes ./ git add * git commit -m \u0026#34;first commit\u0026#34; git branch -M main git remote add origin git@github.com:\u0026lt;user\u0026gt;/Repo.git git push -u origin main   创建 .gitignore文件 1 2 3 4 5 6 7 8  cat \u0026lt;\u0026lt;EOF \u0026gt; .gitignore public/* .DS_Store archetypes/* layouts/* resources/* static/* EOF   [[https://zzo-docs.vercel.app/zdoc/configuration/configfiles/][配置博客]]\n","description":"如何使用hugo搭建博客，及自动化部署，文档中心","id":20,"section":"blog","tags":["hugo"],"title":"hugo搭建博客全记录","uri":"http://crkmythical.github.io/blog/hugo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E5%85%A8%E8%AE%B0%E5%BD%95/"},{"content":"Beijing: 🌫 🌡️+28°C 🌬️←7km/h\nJava.lang.Runtime.exec的正确姿势 Runtime.getRuntime().exec共有六个重载方法：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32  // 在单独的进程中执行指定的外部可执行程序的启动路径或字符串命令 public Process exec(String command) // 在单独的进程中执行指定命令和变量 public Process exec(String[] cmdArray) // 在指定环境的独立进程中执行指定命令和变量 public Process exec(String command, String[] envp) // 在指定环境的独立进程中执行指定的命令和变量 public Process exec(String[] cmdArray, String[] envp) // 在指定环境和工作目录的独立进程中执行指定的字符串命令 public Process exec(String command, String[] envp, File dir) // 在指定环境和工作目录的独立进程中执行指定的命令和变量 public Process exec(String[] cmdarray, String[] envp, File dir) // 参数说明： \tcmdarray // 包含所调用命令及其参数的数组。数组第一个元素是命令，其余是参数 \tenvp\t// 字符串数组，其中每个元素的环境变量的设置格式为 name=value，如果子进程应该继承当前进程的环境，则该参数为null \tdir\t// 子进程的工作目录；如果子进程应该继承当前进程的工作目录，则该参数为null  // 参数cmdArray 示例：shutdown -s -t 3600 String arr[] = {\u0026#34;shutdown\u0026#34;,\u0026#34;-s\u0026#34;,\u0026#34;-t\u0026#34;,\u0026#34;3600\u0026#34;}; Process process = Runtime.getRuntime().exec(arr[]); /* 注意： 在调用这个方法时，不能将命令和参数放在一起，eg：String arr[] = {\u0026#34;shutdown -s -t 3600\u0026#34;}; 这样会导致程序把“shutdown -s -t 3600”当成是一条命令的名称，然后去查找“shutdown -s -t 3600”这条命令，它当然会找不到，所以就会报错 */     Runtime.exec() 不是cmd/shell环境, 命令command中不能包含 | \u0026lt; \u0026gt; 字符, 需要使用exec(String [] cmdArray) 或者exec(String []cmdarray,String []envp,File dir)来执行。\n  commmand 中 /会被解析成 ., 从而报出 “错误: 找不到或无法加载主类 .home.path.HelloWorld ”\n     解决方法，调用 exec(String []cmdarray,String []envp,File dir)来执行\n  Runtime.exec()常见的几种陷阱以及避免方法 陷阱1：IllegalThreadStateException 1 2 3 4 5 6 7 8 9 10 11 12 13  public static void main(String[] args) throws InterruptedException, IOException { Process process = Runtime.getRuntime().exec(\u0026#34;java \u0026#34;); BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream(), \u0026#34;UTF-8\u0026#34;)); BufferedReader err = new BufferedReader(new InputStreamReader(process.getErrorStream())); try { // 当外部线程还没结束时就通过exitValue()获取退出码, 就会抛出IllegalThreadStateException异常  int exitValue = process.exitValue(); }catch (IllegalThreadStateException e){ System.out.println(\u0026#34;IllegalThreadStateException\u0026#34;); } }   进程线程的关系  进程 每个独立运行的程序就是一个进程，如运行 java xxx.jar 线程 一个进程可以包含一至多个线程。 单线程，当程序启动时，就自动发生了一个线程称为主线程如(main函数), 主函数按照程序代码的调用顺序依次执行。\n当主函数调用子函数,主函数必须等待子函数返回以后才能继续向下执行，不能实现两段代码交替执行的效果。 如果要在一个程序中交替执行多段代码，就需要发生多个线程，并指定每一个线程上所要运行的程序代码，这就是多线程。在Java中创建多线程有两种方法：继承java.lang.Thread类和实现Runnable接口，并调用Thread类的start方法来启动线程。  ","description":"","id":21,"section":"dso","tags":null,"title":"Java.lang.Runtime.exec的正确姿势","uri":"http://crkmythical.github.io/dso/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/java.lang.runtime.exec%E7%9A%84%E6%AD%A3%E7%A1%AE%E5%A7%BF%E5%8A%BF/"},{"content":"Beijing: ☁️ 🌡️+23°C 🌬️↖11km/h\nJava代码审计 如何使用IDEA查看jar包源码  将所需 xxx.jar包放入新目录中 打开IDEA,点击open,打开jar包所在目录A 右键该jar包, 点击 Add as Library...  Centos\n","description":"","id":22,"section":"dso","tags":null,"title":"Java代码审计","uri":"http://crkmythical.github.io/dso/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/java%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"},{"content":"Beijing: ☀️ 🌡️+33°C 🌬️↙11km/h\nMaven配置文件 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70  \u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt; \u0026lt;settings xmlns=\u0026#34;http://maven.apache.org/SETTINGS/1.0.0\u0026#34; xmlns:xsi=\u0026#34;http://www.w3.org/2001/XMLSchema-instance\u0026#34; xsi:schemaLocation=\u0026#34;http://maven.apache.org/SETTINGS/1.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd\u0026#34;\u0026gt; \u0026lt;!-- 默认的值是${user.home}/.m2/repository --\u0026gt; \u0026lt;localRepository\u0026gt;D:/Program/.m2/repository\u0026lt;/localRepository\u0026gt; \u0026lt;!-- 如果Maven要试图与用户交互来得到输入就设置为true，否则就设置为false，默认为true。 --\u0026gt; \u0026lt;interactiveMode\u0026gt;true\u0026lt;/interactiveMode\u0026gt; \u0026lt;!-- 如果Maven使用${user.home}/.m2/plugin-registry.xml来管理plugin的版本，就设置为true，默认为false。 --\u0026gt; \u0026lt;usePluginRegistry\u0026gt;false\u0026lt;/usePluginRegistry\u0026gt; \u0026lt;!-- 如果构建系统要在离线模式下工作，设置为true，默认为false。 如果构建服务器因为网络故障或者安全问题不能与远程仓库相连，那么这个设置是非常有用的。 --\u0026gt; \u0026lt;offline\u0026gt;false\u0026lt;/offline\u0026gt; \u0026lt;mirrors\u0026gt; \u0026lt;mirror\u0026gt; \u0026lt;id\u0026gt;nexus-aliyun\u0026lt;/id\u0026gt; \u0026lt;mirrorOf\u0026gt;central\u0026lt;/mirrorOf\u0026gt; \u0026lt;name\u0026gt;Nexus aliyun\u0026lt;/name\u0026gt; \u0026lt;url\u0026gt;http://maven.aliyun.com/nexus/content/groups/public/\u0026lt;/url\u0026gt; \u0026lt;/mirror\u0026gt; \u0026lt;/mirrors\u0026gt; \u0026lt;!-- settings.xml中的profile是pom.xml中的profile的简洁形式。 它包含了激活(activation)，仓库(repositories)，插件仓库(pluginRepositories)和属性(properties)元素。 profile元素仅包含这四个元素是因为他们涉及到整个的构建系统，而不是个别的POM配置。 如果settings中的profile被激活，那么它的值将重载POM或者profiles.xml中的任何相等ID的profiles。 --\u0026gt; \u0026lt;profiles\u0026gt; \u0026lt;profile\u0026gt; \u0026lt;id\u0026gt;default\u0026lt;/id\u0026gt; \u0026lt;activation\u0026gt; \u0026lt;activeByDefault\u0026gt;true\u0026lt;/activeByDefault\u0026gt; \u0026lt;jdk\u0026gt;1.8\u0026lt;/jdk\u0026gt; \u0026lt;/activation\u0026gt; \u0026lt;repositories\u0026gt; \u0026lt;repository\u0026gt; \u0026lt;id\u0026gt;spring-milestone\u0026lt;/id\u0026gt; \u0026lt;name\u0026gt;Spring Milestone Repository\u0026lt;/name\u0026gt; \u0026lt;url\u0026gt;http://repo.spring.io/milestone\u0026lt;/url\u0026gt; \u0026lt;releases\u0026gt; \u0026lt;enabled\u0026gt;true\u0026lt;/enabled\u0026gt; \u0026lt;/releases\u0026gt; \u0026lt;snapshots\u0026gt; \u0026lt;enabled\u0026gt;false\u0026lt;/enabled\u0026gt; \u0026lt;/snapshots\u0026gt; \u0026lt;layout\u0026gt;default\u0026lt;/layout\u0026gt; \u0026lt;/repository\u0026gt; \u0026lt;repository\u0026gt; \u0026lt;id\u0026gt;spring-snapshot\u0026lt;/id\u0026gt; \u0026lt;name\u0026gt;Spring Snapshot Repository\u0026lt;/name\u0026gt; \u0026lt;url\u0026gt;http://repo.spring.io/snapshot\u0026lt;/url\u0026gt; \u0026lt;releases\u0026gt; \u0026lt;enabled\u0026gt;false\u0026lt;/enabled\u0026gt; \u0026lt;/releases\u0026gt; \u0026lt;snapshots\u0026gt; \u0026lt;enabled\u0026gt;true\u0026lt;/enabled\u0026gt; \u0026lt;/snapshots\u0026gt; \u0026lt;layout\u0026gt;default\u0026lt;/layout\u0026gt; \u0026lt;/repository\u0026gt; \u0026lt;/repositories\u0026gt; \u0026lt;/profile\u0026gt; \u0026lt;/profiles\u0026gt; \u0026lt;!-- activations是profile的关键，就像POM中的profiles，profile的能力在于它在特定情况下可以修改一些值。 而这些情况是通过activation来指定的。 --\u0026gt; \u0026lt;!-- \u0026lt;activeProfiles/\u0026gt; --\u0026gt; \u0026lt;/settings\u0026gt;   ","description":"","id":23,"section":"dso","tags":null,"title":"Maven配置文件","uri":"http://crkmythical.github.io/dso/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/maven%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/"},{"content":"Beijing: ☀️ 🌡️+25°C 🌬️↖4km/h\nOpenrasp测试Springboot项目 调试Java服务 假设 springboot 打包后的jar为 /springboot.jar，请先解压缩 rasp 相关文件，然后修改 JVM 启动参数:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  ADD https://packages.baidu.com/app/openrasp/release/latest/rasp-java.tar.gz /tmp RUN cd /tmp \\  \u0026amp;\u0026amp; tar -xf rasp-java.tar.* \\  \u0026amp;\u0026amp; mv rasp-*/rasp/ /rasp/ \\  \u0026amp;\u0026amp; rm -f rasp-java.tar.gz # 对于Alpine Linux容器，需要安装系统依赖 # RUN apk add --no-cache libcurl libstdc++ RUN echo \u0026#34;cloud.enable: true\u0026#34; \u0026gt;\u0026gt; ./rasp/conf/openrasp.yml \\  \u0026amp;\u0026amp; echo \u0026#34;cloud.backend_url: http://127.0.0.1:8086/\u0026#34; \u0026gt;\u0026gt; ./rasp/conf/openrasp.yml \\  \u0026amp;\u0026amp; echo \u0026#34;cloud.app_id: 6e009cc2caf116635581b17a7872a88940ed2b70\u0026#34; \u0026gt;\u0026gt; ./rasp/conf/openrasp.yml \\  \u0026amp;\u0026amp; echo \u0026#34;cloud.app_secret: qLAra0wyLZGabX9KrBry7bR0goHiStXTz910Q5vbNoa\u0026#34; \u0026gt;\u0026gt; ./rasp/conf/openrasp.yml # 对于 JDK9，需要额外增加 --add-opens java.base/jdk.internal.loader=ALL-UNNAMED 参数 CMD java -javaagent:\u0026#34;/rasp/rasp.jar\u0026#34; -jar /springboot.jar   命令绕过分析 1 2 3 4 5  // 从 v0.31 开始，当命令执行来自非HTTP请求的，我们也会检测反序列化攻击// 但是不应该拦截正常的命令执行，所以这里加一个 context.url 检查if (! context.url) {// return clean}  rasp会判断请求url是否为空来判断是否校验。我们将 return clean；注释掉，发现能够拦截，我们用线程的方式启动请求context中没有url。所以能绕过。\n此处建议：如果没有url，也要校验命令执行的内容，匹配危险命令则拦截或者记录。而不是应该判断url是否为空来判断。\n","description":"","id":24,"section":"dso","tags":null,"title":"Openrasp测试Springboot项目","uri":"http://crkmythical.github.io/dso/openrasp%E6%B5%8B%E8%AF%95springboot%E9%A1%B9%E7%9B%AE/"},{"content":"Beijing: 🌫 🌡️+28°C 🌬️←7km/h\nOWASP Benchmark靶场搭建 OWASP-Benchmark\n","description":"","id":25,"section":"dso","tags":null,"title":"OWASP Benchmark靶场搭建","uri":"http://crkmythical.github.io/dso/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/owasp-benchmark%E9%9D%B6%E5%9C%BA%E6%90%AD%E5%BB%BA/"},{"content":"Beijing: ⛈ 🌡️+20°C 🌬️↖7km/h\nSSH  SSH 是安全传输协议  SSH端口转发详解 1 2 3  $ ssh -C -f -N -g -L \u0026lt;listen_port\u0026gt;:\u0026lt;DST_Host\u0026gt;:\u0026lt;DST_port\u0026gt; user@Tunnel_Host $ ssh -C -f -N -g -R \u0026lt;listen_port\u0026gt;:\u0026lt;DST_Host\u0026gt;:\u0026lt;DST_port\u0026gt; user@Tunnel_Host $ ssh -C -f -N -g -D \u0026lt;listen_port\u0026gt; user@Tunnel_Host    -C 压缩数据传输 -N 不打开shell -f 认证后后台运行 -g 允许远程主机连接本地转发端口 -L 正向代理  将本地机(客户机)的某个端口转发到(远端/本地)指定机器的指定端口. 本地机器上分配了一个 socket 侦听 port 端口, 一旦这个端口上有了连接, 该连接就经过安全通道转发出去, 同时远程主机和 host 的 hostport 端口建立连接. 可以在配置文件中指定端口的转发. 只有 root 才能转发特权端口. IPv6 地址用另一种格式说明: port/host/hostport   -R反向代理  将远程主机(服务器)的某个端口转发到本地端指定机器的指定端口. 远程主机上分配了一个 socket 侦听 port 端口, 一旦这个端口上有了连接, 该连接就经过安全通道转向出去, 同时本地主机和 host 的 hostport 端口建立连接. 可以在配置文件中指定端口的转发. 只有用 root 登录远程主机才能转发特权端口. IPv6 地址用另一种格式说明: port/host/hostport   -D 动态代理(Socks)  本地机器上分配了一个 socket 侦听 port 端口, 一旦这个端口上有了连接, 该连接就经过安全通道转发出去, 根据应用程序的协议可以判断出远程主机将和哪里连接. 目前支持 SOCKS4 协议, 将充当 SOCKS4 服务器. 只有 root 才能转发特权端口. 可以在配置文件中指定动态端口的转发.    保持SSH长时间连接  添加 vmstat 30  ssh -R 2222:localhost:22 123.123.123.123 \u0026quot;vmstat 30\u0026quot; ssh -o ServerAliveInterval=30 zhaoolee@主机ip   Iterm2设置\n  如何将端口绑定到外部地址上 在 /etc/sshd_config 中修改 GatewayPorts no 为 GatewayPorts yes\n1 2  $ ssh -N -f -D 1080 123.123.123 # 将端口绑定在127.0.0.1上  $ ssh -N -f -D 0.0.0.0:1080 123.123.123.123 # 将端口绑定在0.0.0.0上   ","description":"","id":26,"section":"blog","tags":["ssh"],"title":"SSH","uri":"http://crkmythical.github.io/blog/ssh/"},{"content":"Beijing: ☀️ 🌡️+31°C 🌬️↑11km/h\n [[https://imcaviare.com/post/auto-deploy-hugo/][hugo自动化搭建博客之一]] [[https://cloud.tencent.com/developer/article/1647964?from=article.detail.1970808][hugo自动化搭建博客之二]] [[https://www.jianshu.com/p/7c3f31d44b1d][hugo自动化搭建博客之三]]  Hugo是由Go语言实现的静态网站生成器。简单、易用、高效、易扩展、快速部署。\n1  brew install hugo   常见hugo创建博客步骤 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18  hugo new site myBlog -f toml \u0026amp;\u0026amp; cd myBlog git init git submodule add https://github.com/zzossig/hugo-theme-zdoc.git themes/zdoc git submodule update --init --recursive #若克隆他人博客，需执行 初始化和同步主题修改 git submodule update --remote # 同步主题修改 cp -rf themes/zdoc/exampleSite/* ./ cp -rf themes/zdoc/archetypes ./ # 发布新文章 hugo new posts/blog-test.md # 本地调试 hugo server -D # enable Draft git add * git commit -m \u0026#34;first commit\u0026#34; git branch -M main git remote add origin git@github.com:\u0026lt;user\u0026gt;/Repo.git git push -u origin main   关于OBsidian的使用 Obsidian是基于本地makrdown文件的一个强大的知识库\n特点功能: 链接功能、脑图\nono-sendai-themes\n","description":"","id":27,"section":"blog","tags":["hugo","obsidian","githubActions"],"title":"个人知识库介绍(Obsidian+hugo)","uri":"http://crkmythical.github.io/blog/%E4%B8%AA%E4%BA%BA%E7%9F%A5%E8%AF%86%E5%BA%93%E5%8F%8A%E5%8D%9A%E5%AE%A2%E4%BB%8B%E7%BB%8Dobsidian+hugo+githubactions/"}]